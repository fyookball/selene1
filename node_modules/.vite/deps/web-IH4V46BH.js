import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  ImpactStyle,
  NotificationType
} from "./chunk-6NVXSCF6.js";
import {
  WebPlugin
} from "./chunk-YJXII4MS.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-UN4YHSTI.js";

// node_modules/@capacitor/haptics/dist/esm/web.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var HapticsWeb = class extends WebPlugin {
  constructor() {
    super(...arguments);
    this.selectionStarted = false;
  }
  async impact(options) {
    const pattern = this.patternForImpact(options === null || options === void 0 ? void 0 : options.style);
    this.vibrateWithPattern(pattern);
  }
  async notification(options) {
    const pattern = this.patternForNotification(options === null || options === void 0 ? void 0 : options.type);
    this.vibrateWithPattern(pattern);
  }
  async vibrate(options) {
    const duration = (options === null || options === void 0 ? void 0 : options.duration) || 300;
    this.vibrateWithPattern([duration]);
  }
  async selectionStart() {
    this.selectionStarted = true;
  }
  async selectionChanged() {
    if (this.selectionStarted) {
      this.vibrateWithPattern([70]);
    }
  }
  async selectionEnd() {
    this.selectionStarted = false;
  }
  patternForImpact(style = ImpactStyle.Heavy) {
    if (style === ImpactStyle.Medium) {
      return [43];
    } else if (style === ImpactStyle.Light) {
      return [20];
    }
    return [61];
  }
  patternForNotification(type = NotificationType.Success) {
    if (type === NotificationType.Warning) {
      return [30, 40, 30, 50, 60];
    } else if (type === NotificationType.Error) {
      return [27, 45, 50];
    }
    return [35, 65, 21];
  }
  vibrateWithPattern(pattern) {
    if (navigator.vibrate) {
      navigator.vibrate(pattern);
    } else {
      throw this.unavailable("Browser does not support the vibrate API");
    }
  }
};
export {
  HapticsWeb
};
//# sourceMappingURL=web-IH4V46BH.js.map
