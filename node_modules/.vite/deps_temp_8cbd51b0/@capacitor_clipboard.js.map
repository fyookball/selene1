{
  "version": 3,
  "sources": ["../../@capacitor/clipboard/src/index.ts", "../../@capacitor/clipboard/src/web.ts", "../../@capacitor/clipboard/dist/esm/definitions.js"],
  "sourcesContent": ["import { registerPlugin } from '@capacitor/core';\n\nimport type { ClipboardPlugin } from './definitions';\nimport { ClipboardWeb } from './web';\n\nconst Clipboard = registerPlugin<ClipboardPlugin>('Clipboard', {\n  web: () => new ClipboardWeb(),\n});\n\nexport * from './definitions';\nexport { Clipboard };\n", "import { WebPlugin } from '@capacitor/core';\n\nimport type { ClipboardPlugin, ReadResult, WriteOptions } from './definitions';\n\ndeclare global {\n  interface Clipboard {\n    read(): Promise<any>;\n    write(data: any[]): Promise<any>;\n  }\n}\n\ndeclare let ClipboardItem: any;\n\nexport class ClipboardWeb extends WebPlugin implements ClipboardPlugin {\n  async write(options: WriteOptions): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n\n    if (options.string !== undefined) {\n      await this.writeText(options.string);\n    } else if (options.url) {\n      await this.writeText(options.url);\n    } else if (options.image) {\n      if (typeof ClipboardItem !== 'undefined') {\n        try {\n          const blob = await (await fetch(options.image)).blob();\n          const clipboardItemInput = new ClipboardItem({ [blob.type]: blob });\n          await navigator.clipboard.write([clipboardItemInput]);\n        } catch (err) {\n          throw new Error('Failed to write image');\n        }\n      } else {\n        throw this.unavailable(\n          'Writing images to the clipboard is not supported in this browser',\n        );\n      }\n    } else {\n      throw new Error('Nothing to write');\n    }\n  }\n\n  async read(): Promise<ReadResult> {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n\n    if (typeof ClipboardItem !== 'undefined') {\n      try {\n        const clipboardItems = await navigator.clipboard.read();\n        const type = clipboardItems[0].types[0];\n        const clipboardBlob = await clipboardItems[0].getType(type);\n        const data = await this._getBlobData(clipboardBlob, type);\n        return { value: data, type };\n      } catch (err) {\n        return this.readText();\n      }\n    } else {\n      return this.readText();\n    }\n  }\n\n  private async readText() {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.readText\n    ) {\n      throw this.unavailable(\n        'Reading from clipboard not supported in this browser',\n      );\n    }\n\n    const text = await navigator.clipboard.readText();\n    return { value: text, type: 'text/plain' };\n  }\n\n  private async writeText(text: string) {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.writeText\n    ) {\n      throw this.unavailable(\n        'Writting to clipboard not supported in this browser',\n      );\n    }\n\n    await navigator.clipboard.writeText(text);\n  }\n\n  private _getBlobData(clipboardBlob: Blob, type: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      const reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = () => {\n        const r = reader.result as string;\n        resolve(r);\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  }\n}\n", "export {};\n//# sourceMappingURL=definitions.js.map"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;;;ACAA;IAAAC,eAAA;IAAAA,eAAA;AAaM,IAAO,eAAP,cAA4B,UAAS;EACzC,MAAM,MAAM,SAAqB;AAC/B,QAAI,OAAO,cAAc,eAAe,CAAC,UAAU,WAAW;AAC5D,YAAM,KAAK,YAAY,6CAA6C;;AAGtE,QAAI,QAAQ,WAAW,QAAW;AAChC,YAAM,KAAK,UAAU,QAAQ,MAAM;eAC1B,QAAQ,KAAK;AACtB,YAAM,KAAK,UAAU,QAAQ,GAAG;eACvB,QAAQ,OAAO;AACxB,UAAI,OAAO,kBAAkB,aAAa;AACxC,YAAI;AACF,gBAAM,OAAO,OAAO,MAAM,MAAM,QAAQ,KAAK,GAAG,KAAI;AACpD,gBAAM,qBAAqB,IAAI,cAAc,EAAE,CAAC,KAAK,IAAI,GAAG,KAAI,CAAE;AAClE,gBAAM,UAAU,UAAU,MAAM,CAAC,kBAAkB,CAAC;iBAC7C,KAAK;AACZ,gBAAM,IAAI,MAAM,uBAAuB;;aAEpC;AACL,cAAM,KAAK,YACT,kEAAkE;;WAGjE;AACL,YAAM,IAAI,MAAM,kBAAkB;;EAEtC;EAEA,MAAM,OAAI;AACR,QAAI,OAAO,cAAc,eAAe,CAAC,UAAU,WAAW;AAC5D,YAAM,KAAK,YAAY,6CAA6C;;AAGtE,QAAI,OAAO,kBAAkB,aAAa;AACxC,UAAI;AACF,cAAM,iBAAiB,MAAM,UAAU,UAAU,KAAI;AACrD,cAAM,OAAO,eAAe,CAAC,EAAE,MAAM,CAAC;AACtC,cAAM,gBAAgB,MAAM,eAAe,CAAC,EAAE,QAAQ,IAAI;AAC1D,cAAM,OAAO,MAAM,KAAK,aAAa,eAAe,IAAI;AACxD,eAAO,EAAE,OAAO,MAAM,KAAI;eACnB,KAAK;AACZ,eAAO,KAAK,SAAQ;;WAEjB;AACL,aAAO,KAAK,SAAQ;;EAExB;EAEQ,MAAM,WAAQ;AACpB,QACE,OAAO,cAAc,eACrB,CAAC,UAAU,aACX,CAAC,UAAU,UAAU,UACrB;AACA,YAAM,KAAK,YACT,sDAAsD;;AAI1D,UAAM,OAAO,MAAM,UAAU,UAAU,SAAQ;AAC/C,WAAO,EAAE,OAAO,MAAM,MAAM,aAAY;EAC1C;EAEQ,MAAM,UAAU,MAAY;AAClC,QACE,OAAO,cAAc,eACrB,CAAC,UAAU,aACX,CAAC,UAAU,UAAU,WACrB;AACA,YAAM,KAAK,YACT,qDAAqD;;AAIzD,UAAM,UAAU,UAAU,UAAU,IAAI;EAC1C;EAEQ,aAAa,eAAqB,MAAY;AACpD,WAAO,IAAI,QAAgB,CAAC,SAAS,WAAU;AAC7C,YAAM,SAAS,IAAI,WAAU;AAC7B,UAAI,KAAK,SAAS,OAAO,GAAG;AAC1B,eAAO,cAAc,aAAa;aAC7B;AACL,eAAO,WAAW,aAAa;;AAEjC,aAAO,YAAY,MAAK;AACtB,cAAM,IAAI,OAAO;AACjB,gBAAQ,CAAC;MACX;AACA,aAAO,UAAU,OAAI;AACnB,eAAO,CAAC;MACV;IACF,CAAC;EACH;;;;AC3GF,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;;;AFKA,IAAM,YAAY,eAAgC,aAAa;EAC7D,KAAK,MAAM,IAAI,aAAY;CAC5B;",
  "names": ["import_dist", "import_dist", "import_dist"]
}
