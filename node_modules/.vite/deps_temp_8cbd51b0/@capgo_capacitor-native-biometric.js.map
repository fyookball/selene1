{
  "version": 3,
  "sources": ["../../@capgo/capacitor-native-biometric/src/index.ts", "../../@capgo/capacitor-native-biometric/src/definitions.ts"],
  "sourcesContent": ["import { registerPlugin } from \"@capacitor/core\";\n\nimport type { NativeBiometricPlugin } from \"./definitions\";\n\nconst NativeBiometric = registerPlugin<NativeBiometricPlugin>(\n  \"NativeBiometric\",\n  {\n    web: () => import(\"./web\").then((m) => new m.NativeBiometricWeb()),\n  },\n);\n\nexport * from \"./definitions\";\nexport { NativeBiometric };\n", "export enum BiometryType {\n  // Android, iOS\n  NONE = 0,\n  // iOS\n  TOUCH_ID = 1,\n  // iOS\n  FACE_ID = 2,\n  // Android\n  FINGERPRINT = 3,\n  // Android\n  FACE_AUTHENTICATION = 4,\n  // Android\n  IRIS_AUTHENTICATION = 5,\n  // Android\n  MULTIPLE = 6,\n}\n\nexport interface Credentials {\n  username: string;\n  password: string;\n}\n\nexport interface IsAvailableOptions {\n  /**\n   * Specifies if should fallback to passcode authentication if biometric authentication is not available.\n   */\n  useFallback: boolean;\n}\n\nexport interface AvailableResult {\n  isAvailable: boolean;\n  biometryType: BiometryType;\n  errorCode?: number;\n}\n\nexport interface BiometricOptions {\n  reason?: string;\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  negativeButtonText?: string;\n  /**\n   * Specifies if should fallback to passcode authentication if biometric authentication fails.\n   */\n  useFallback?: boolean;\n  /**\n   * Only for iOS.\n   * Set the text for the fallback button in the authentication dialog.\n   * If this property is not specified, the default text is set by the system.\n   */\n  fallbackTitle?: string;\n  /**\n   * Only for Android.\n   * Set a maximum number of attempts for biometric authentication. The maximum allowed by android is 5.\n   * @default 1\n   */\n  maxAttempts?: number;\n}\n\nexport interface GetCredentialOptions {\n  server: string;\n}\n\nexport interface SetCredentialOptions {\n  username: string;\n  password: string;\n  server: string;\n}\n\nexport interface DeleteCredentialOptions {\n  server: string;\n}\n\n/**\n * Keep this in sync with BiometricAuthError in README.md\n * Update whenever `convertToPluginErrorCode` functions are modified\n */\nexport enum BiometricAuthError {\n  UNKNOWN_ERROR = 0,\n  BIOMETRICS_UNAVAILABLE = 1,\n  USER_LOCKOUT = 2,\n  BIOMETRICS_NOT_ENROLLED = 3,\n  USER_TEMPORARY_LOCKOUT = 4,\n  AUTHENTICATION_FAILED = 10,\n  APP_CANCEL = 11,\n  INVALID_CONTEXT = 12,\n  NOT_INTERACTIVE = 13,\n  PASSCODE_NOT_SET = 14,\n  SYSTEM_CANCEL = 15,\n  USER_CANCEL = 16,\n  USER_FALLBACK = 17,\n}\n\nexport interface NativeBiometricPlugin {\n  /**\n   * Checks if biometric authentication hardware is available.\n   * @param {IsAvailableOptions} [options]\n   * @returns {Promise<AvailableResult>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  isAvailable(options?: IsAvailableOptions): Promise<AvailableResult>;\n  /**\n   * Prompts the user to authenticate with biometrics.\n   * @param {BiometricOptions} [options]\n   * @returns {Promise<any>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  verifyIdentity(options?: BiometricOptions): Promise<void>;\n  /**\n   * Gets the stored credentials for a given server.\n   * @param {GetCredentialOptions} options\n   * @returns {Promise<Credentials>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  getCredentials(options: GetCredentialOptions): Promise<Credentials>;\n  /**\n   * Stores the given credentials for a given server.\n   * @param {SetCredentialOptions} options\n   * @returns {Promise<any>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  setCredentials(options: SetCredentialOptions): Promise<void>;\n  /**\n   * Deletes the stored credentials for a given server.\n   * @param {DeleteCredentialOptions} options\n   * @returns {Promise<any>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  deleteCredentials(options: DeleteCredentialOptions): Promise<void>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;;;ACAA;IAAAC,eAAA;IAAAA,eAAA;AAAA,IAAY;CAAZ,SAAYC,eAAY;AAEtB,EAAAA,cAAAA,cAAA,MAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,cAAAA,cAAA,SAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,cAAAA,cAAA,aAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,cAAAA,cAAA,qBAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,cAAAA,cAAA,qBAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;AACF,GAfY,iBAAA,eAAY,CAAA,EAAA;AA6ExB,IAAY;CAAZ,SAAYC,qBAAkB;AAC5B,EAAAA,oBAAAA,oBAAA,eAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,wBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,cAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,yBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,wBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,uBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,YAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,iBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,iBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,kBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,eAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,aAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,eAAA,IAAA,EAAA,IAAA;AACF,GAdY,uBAAA,qBAAkB,CAAA,EAAA;;;ADzE9B,IAAM,kBAAkB,eACtB,mBACA;EACE,KAAK,MAAM,OAAO,mBAAO,EAAE,KAAK,CAAC,MAAM,IAAI,EAAE,mBAAkB,CAAE;CAClE;",
  "names": ["import_dist", "import_dist", "BiometryType", "BiometricAuthError"]
}
