{
  "version": 3,
  "sources": ["../../@bitauth/libauth/build/index.js", "../../@bitauth/libauth/build/lib/lib.js", "../../@bitauth/libauth/build/lib/address/address.js", "../../@bitauth/libauth/build/lib/address/base58-address.js", "../../@bitauth/libauth/build/lib/crypto/crypto.js", "../../@bitauth/libauth/build/lib/crypto/combinations.js", "../../@bitauth/libauth/build/lib/crypto/default-crypto-instances.js", "../../@bitauth/libauth/build/lib/crypto/ripemd160.js", "../../@bitauth/libauth/build/lib/crypto/dependencies.js", "../../@bitauth/libauth/build/lib/format/format.js", "../../@bitauth/libauth/build/lib/format/base-convert.js", "../../@bitauth/libauth/build/lib/format/base64.js", "../../@bitauth/libauth/build/lib/format/bin-string.js", "../../@bitauth/libauth/build/lib/format/hex.js", "../../@bitauth/libauth/build/lib/format/error.js", "../../@bitauth/libauth/build/lib/format/log.js", "../../@bitauth/libauth/build/lib/format/number.js", "../../@bitauth/libauth/build/lib/format/read.js", "../../@bitauth/libauth/build/lib/format/time.js", "../../@bitauth/libauth/build/lib/format/type-utils.js", "../../@bitauth/libauth/build/lib/format/utf8.js", "../../@bitauth/libauth/build/lib/bin/bin.js", "../../@bitauth/libauth/build/lib/bin/hashes.js", "../../@bitauth/libauth/build/lib/bin/ripemd160/ripemd160.base64.js", "../../@bitauth/libauth/build/lib/bin/secp256k1/secp256k1-wasm.js", "../../@bitauth/libauth/build/lib/bin/secp256k1/secp256k1-wasm-types.js", "../../@bitauth/libauth/build/lib/bin/secp256k1/secp256k1.base64.js", "../../@bitauth/libauth/build/lib/bin/sha1/sha1.base64.js", "../../@bitauth/libauth/build/lib/bin/sha256/sha256.base64.js", "../../@bitauth/libauth/build/lib/bin/sha512/sha512.base64.js", "../../@bitauth/libauth/build/lib/crypto/secp256k1.js", "../../@bitauth/libauth/build/lib/crypto/sha1.js", "../../@bitauth/libauth/build/lib/crypto/sha256.js", "../../@bitauth/libauth/build/lib/crypto/sha512.js", "../../@bitauth/libauth/build/lib/crypto/hmac.js", "../../@bitauth/libauth/build/lib/crypto/secp256k1-types.js", "../../@bitauth/libauth/build/lib/address/bech32.js", "../../@bitauth/libauth/build/lib/address/cash-address.js", "../../@bitauth/libauth/build/lib/address/locking-bytecode.js", "../../@bitauth/libauth/build/lib/key/key.js", "../../@bitauth/libauth/build/lib/key/hd-key.js", "../../@bitauth/libauth/build/lib/key/key-utils.js", "../../@bitauth/libauth/build/lib/key/wallet-import-format.js", "../../@bitauth/libauth/build/lib/language/language.js", "../../@bitauth/libauth/build/lib/language/compile.js", "../../@bitauth/libauth/build/lib/language/resolve.js", "../../@bitauth/libauth/build/lib/vm/vm.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/instruction-sets.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec-descriptions.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec-instruction-set.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022-instruction-set.js", "../../@bitauth/libauth/build/lib/message/message.js", "../../@bitauth/libauth/build/lib/message/read-components.js", "../../@bitauth/libauth/build/lib/message/transaction-encoding.js", "../../@bitauth/libauth/build/lib/message/transaction-types.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/common.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/arithmetic.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/combinators.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/consensus.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/signing-serialization.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/errors.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/instruction-sets-utils.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-opcodes.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/btc/btc-opcodes.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/flow-control.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/bitwise.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/common-types.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/crypto.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/encoding.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/format.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/inspection.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/instruction-sets-types.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/nop.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/push.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/stack.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/common/time.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-consensus.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-crypto.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-descriptions.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-errors.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-instruction-set.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-tokens.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-vm.js", "../../@bitauth/libauth/build/lib/vm/virtual-machine.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022-opcodes.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec-vm-number-operations.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec-types.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec-opcodes.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/xec-vm.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/xec/fixtures/satoshi-client/bitcoin-satoshi-utils.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022-descriptions.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022-errors.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022-types.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/2022/bch-2022-vm.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-crypto.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-errors.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-types.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-descriptions.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-instruction-set.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-loops.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-opcodes.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/bch/chips/bch-chips-vm.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/btc/btc.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/btc/btc-descriptions.js", "../../@bitauth/libauth/build/lib/vm/instruction-sets/btc/btc-types.js", "../../@bitauth/libauth/build/lib/vm/vm-types.js", "../../@bitauth/libauth/build/lib/language/language-types.js", "../../@bitauth/libauth/build/lib/language/language-utils.js", "../../@bitauth/libauth/build/lib/language/parse.js", "../../@bitauth/libauth/build/lib/language/parsimmon.js", "../../@bitauth/libauth/build/lib/language/reduce.js", "../../@bitauth/libauth/build/lib/schema/schema.js", "../../@bitauth/libauth/build/lib/schema/authentication-template.js", "../../@bitauth/libauth/build/lib/schema/ajv/ajv-utils.js", "../../@bitauth/libauth/build/lib/schema/ajv/validate-authentication-template.js", "../../@bitauth/libauth/build/lib/compiler/compiler.js", "../../@bitauth/libauth/build/lib/compiler/compiler-bch/compiler-bch.js", "../../@bitauth/libauth/build/lib/compiler/compiler-operation-helpers.js", "../../@bitauth/libauth/build/lib/compiler/compiler-defaults.js", "../../@bitauth/libauth/build/lib/compiler/compiler-operations.js", "../../@bitauth/libauth/build/lib/compiler/compiler-utils.js", "../../@bitauth/libauth/build/lib/compiler/scenarios.js", "../../@bitauth/libauth/build/lib/compiler/compiler-types.js", "../../@bitauth/libauth/build/lib/compiler/p2pkh-utils.js", "../../@bitauth/libauth/build/lib/compiler/standard/standard.js", "../../@bitauth/libauth/build/lib/compiler/standard/p2pkh.js", "../../@bitauth/libauth/build/lib/compiler/template-types.js", "../../@bitauth/libauth/build/lib/transaction/transaction.js", "../../@bitauth/libauth/build/lib/transaction/generate-transaction.js", "../../@bitauth/libauth/build/lib/vmb-tests/vmb-tests.js", "../../@bitauth/libauth/build/lib/vmb-tests/bch-vmb-test-utils.js", "../../@bitauth/libauth/build/lib/vmb-tests/bch-vmb-test-mixins.js"],
  "sourcesContent": ["export * from './lib/lib.js';\n//# sourceMappingURL=index.js.map", "export * from './address/address.js';\nexport * from './bin/bin.js';\nexport * from './crypto/crypto.js';\nexport * from './format/format.js';\nexport * from './key/key.js';\nexport * from './language/language.js';\nexport * from './message/message.js';\nexport * from './schema/schema.js';\nexport * from './compiler/compiler.js';\nexport * from './transaction/transaction.js';\nexport * from './vm/vm.js';\nexport * from './vmb-tests/vmb-tests.js';\n//# sourceMappingURL=lib.js.map", "export * from './base58-address.js';\nexport * from './bech32.js';\nexport * from './cash-address.js';\nexport * from './locking-bytecode.js';\n//# sourceMappingURL=address.js.map", "import { hash256, sha256 as internalSha256 } from '../crypto/crypto.js';\nimport { base58ToBin, BaseConversionError, binToBase58, flattenBinArray, } from '../format/format.js';\n/**\n * Base58 version byte values for common Base58Address format versions.\n */\nexport var Base58AddressFormatVersion;\n(function (Base58AddressFormatVersion) {\n    /**\n     * A Pay to Public Key Hash (P2PKH) address – base58 encodes to a leading `1`.\n     *\n     * Hex: `0x00`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"p2pkh\"] = 0] = \"p2pkh\";\n    /**\n     * A 20-byte Pay to Script Hash (P2SH20) address – base58 encodes to a leading\n     * `3`.\n     *\n     * Hex: `0x05`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"p2sh20\"] = 5] = \"p2sh20\";\n    /**\n     * A private key in Wallet Import Format. For private keys used with\n     * uncompressed public keys, the payload is 32 bytes and causes the version\n     * to be encoded as a `5`. For private keys used with compressed public keys,\n     * a final `0x01` byte is appended to the private key, increasing the payload\n     * to 33 bytes, and causing the version to be encoded as a `K` or `L`.\n     *\n     * Hex: `0x80`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"wif\"] = 128] = \"wif\";\n    /**\n     * A testnet Pay to Public Key Hash (P2PKH) address – base58 encodes to a\n     * leading `m` or `n`.\n     *\n     * Hex: `0x6f`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"p2pkhTestnet\"] = 111] = \"p2pkhTestnet\";\n    /**\n     * A testnet 20-byte Pay to Script Hash (P2SH20) address – base58 encodes to a\n     * leading `2`.\n     *\n     * Hex: `0xc4`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"p2sh20Testnet\"] = 196] = \"p2sh20Testnet\";\n    /**\n     * A private key in Wallet Import Format intended for testnet use. For private\n     * keys used with uncompressed public keys, the payload is 32 bytes and causes\n     * the version to be encoded as a `9`. For private keys used with compressed\n     * public keys, a final `0x01` byte is appended to the private key, increasing\n     * the payload to 33 bytes, and causing the version to be encoded as a `c`.\n     *\n     * Hex: `0xef`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"wifTestnet\"] = 239] = \"wifTestnet\";\n    /**\n     * A Pay to Public Key Hash (P2PKH) address intended for use on the Bitcoin\n     * Cash network – base58 encodes to a leading `C`. This version was\n     * temporarily used by the Copay project before the CashAddress format was\n     * standardized.\n     *\n     * Hex: `0x1c`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"p2pkhCopayBCH\"] = 28] = \"p2pkhCopayBCH\";\n    /**\n     * A 20-byte Pay to Script Hash (P2SH20) address intended for use on the\n     * Bitcoin Cash network – base58 encodes to a leading `H`. This version was\n     * temporarily used by the Copay project before the CashAddress format was\n     * standardized.\n     *\n     * Hex: `0x28`\n     */\n    Base58AddressFormatVersion[Base58AddressFormatVersion[\"p2sh20CopayBCH\"] = 40] = \"p2sh20CopayBCH\";\n})(Base58AddressFormatVersion || (Base58AddressFormatVersion = {}));\n/**\n * Encode a payload using the Base58Address format, the original address format\n * used by the Satoshi implementation.\n *\n * Note, this method does not enforce error handling via the type system. The\n * returned string will not be a valid Base58Address if `hash` is not exactly 20\n * bytes. If needed, validate the length of `hash` before calling this method.\n *\n * @remarks\n * A Base58Address includes a 1-byte prefix to indicate the address version, a\n * variable-length payload, and a 4-byte checksum:\n *\n * `[version: 1 byte] [payload: variable length] [checksum: 4 bytes]`\n *\n * The checksum is the first 4 bytes of the double-SHA256 hash of the version\n * byte followed by the payload.\n *\n * @param version - the address version byte (see\n * {@link Base58AddressFormatVersion})\n * @param payload - the Uint8Array payload to encode\n * @param sha256 - an implementation of sha256 (defaults to the internal WASM\n * implementation)\n */\nexport const encodeBase58AddressFormat = (version, payload, sha256 = internalSha256) => {\n    const checksumBytes = 4;\n    const content = Uint8Array.from([version, ...payload]);\n    const checksum = hash256(content, sha256).slice(0, checksumBytes);\n    const bin = flattenBinArray([content, checksum]);\n    return binToBase58(bin);\n};\n/**\n * Encode a hash as a Base58Address.\n *\n * Note, this method does not enforce error handling via the type system. The\n * returned string will not be a valid Base58Address if `hash` is not exactly 20\n * bytes. If needed, validate the length of `hash` before calling this method.\n *\n * For other standards that use the Base58Address format but have other version\n * or length requirements, use {@link encodeCashAddressFormat}.\n *\n * @param type - the type of address to encode: `p2pkh`, `p2sh20`,\n * `p2pkh-testnet`, or `p2sh20-testnet`\n * @param hash - the 20-byte hash to encode\n * (`RIPEMD160(SHA256(public key or bytecode))`)\n * @param sha256 - an implementation of sha256 (defaults to the internal WASM\n * implementation)\n */\nexport const encodeBase58Address = (type, payload, sha256 = internalSha256) => encodeBase58AddressFormat({\n    p2pkh: Base58AddressFormatVersion.p2pkh,\n    p2pkhCopayBCH: Base58AddressFormatVersion.p2pkhCopayBCH,\n    p2pkhTestnet: Base58AddressFormatVersion.p2pkhTestnet,\n    p2sh20: Base58AddressFormatVersion.p2sh20,\n    p2sh20CopayBCH: Base58AddressFormatVersion.p2sh20CopayBCH,\n    p2sh20Testnet: Base58AddressFormatVersion.p2sh20Testnet,\n}[type], payload, sha256);\nexport var Base58AddressError;\n(function (Base58AddressError) {\n    Base58AddressError[\"unknownCharacter\"] = \"Base58Address error: address may only contain valid base58 characters.\";\n    Base58AddressError[\"tooShort\"] = \"Base58Address error: address is too short to be valid.\";\n    Base58AddressError[\"invalidChecksum\"] = \"Base58Address error: address has an invalid checksum.\";\n    Base58AddressError[\"unknownAddressVersion\"] = \"Base58Address error: address uses an unknown address version.\";\n    Base58AddressError[\"incorrectLength\"] = \"Base58Address error: the encoded payload is not the correct length (20 bytes).\";\n})(Base58AddressError || (Base58AddressError = {}));\n/**\n * Attempt to decode a Base58Address-formatted string. This is more lenient than\n * {@link decodeCashAddress}, which also validates the address version.\n *\n * Returns the contents of the address or an error message as a string.\n *\n * @param address - the string to decode as a base58 address\n * @param sha256 - an implementation of sha256 (defaults to the internal WASM\n * implementation)\n */\nexport const decodeBase58AddressFormat = (address, sha256 = internalSha256) => {\n    const checksumBytes = 4;\n    const bin = base58ToBin(address);\n    if (bin === BaseConversionError.unknownCharacter) {\n        return Base58AddressError.unknownCharacter;\n    }\n    const minimumBase58AddressLength = 5;\n    if (bin.length < minimumBase58AddressLength) {\n        return Base58AddressError.tooShort;\n    }\n    const content = bin.slice(0, -checksumBytes);\n    const checksum = bin.slice(-checksumBytes);\n    const expectedChecksum = sha256\n        .hash(sha256.hash(content))\n        .slice(0, checksumBytes);\n    if (!checksum.every((value, i) => value === expectedChecksum[i])) {\n        return Base58AddressError.invalidChecksum;\n    }\n    return {\n        payload: content.slice(1),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        version: content[0],\n    };\n};\n/**\n * Decode and validate a Base58Address, strictly checking the version and\n * payload length.\n *\n * For other address-like standards that closely follow the Base58Address\n * format (but have alternative version byte requirements), use\n * {@link decodeBase58AddressFormat}.\n *\n * @remarks\n * Because the Wallet Import Format (WIF) private key serialization format uses\n * the Base58Address format, some libraries allow WIF key decoding via the same\n * method as base58 address decoding. This method strictly accepts only\n * Base58Address types, but WIF keys can be decoded with\n * {@link decodePrivateKeyWif}.\n *\n * @param address - the string to decode as a base58 address\n * @param sha256 - an implementation of sha256 (defaults to the internal WASM\n * implementation)\n */\nexport const decodeBase58Address = (address, sha256 = internalSha256) => {\n    const decoded = decodeBase58AddressFormat(address, sha256);\n    if (typeof decoded === 'string')\n        return decoded;\n    if (![\n        Base58AddressFormatVersion.p2pkh,\n        Base58AddressFormatVersion.p2sh20,\n        Base58AddressFormatVersion.p2pkhTestnet,\n        Base58AddressFormatVersion.p2sh20Testnet,\n        Base58AddressFormatVersion.p2pkhCopayBCH,\n        Base58AddressFormatVersion.p2sh20CopayBCH,\n    ].includes(decoded.version)) {\n        return Base58AddressError.unknownAddressVersion;\n    }\n    const hash160Length = 20;\n    if (decoded.payload.length !== hash160Length) {\n        return Base58AddressError.incorrectLength;\n    }\n    return decoded;\n};\n//# sourceMappingURL=base58-address.js.map", "export * from './combinations.js';\nexport * from './default-crypto-instances.js';\nexport * from './hmac.js';\nexport * from './ripemd160.js';\nexport * from './secp256k1.js';\nexport * from './secp256k1-types.js';\nexport * from './sha1.js';\nexport * from './sha256.js';\nexport * from './sha512.js';\n//# sourceMappingURL=crypto.js.map", "import { ripemd160 as internalRipemd160, sha256 as internalSha256, } from './default-crypto-instances.js';\n/**\n * Hash the given payload with sha256, then hash the 32-byte result with\n * ripemd160, returning a 20-byte hash.\n *\n * This hash is used in both {@link AddressType.p2pkh} and\n * {@link AddressType.p2sh20} addresses.\n *\n * @param payload - the Uint8Array to hash\n */\nexport const hash160 = (payload, crypto = { ripemd160: internalRipemd160, sha256: internalSha256 }) => crypto.ripemd160.hash(crypto.sha256.hash(payload));\n/**\n * Hash the given payload with sha256, then hash the 32-byte result with\n * one final round of sha256, returning a 32-byte hash.\n *\n * This type of hash is used to generate identifiers for transactions and blocks\n * (and therefore in block mining).\n *\n * @param payload - the Uint8Array to hash\n */\nexport const hash256 = (payload, sha256 = internalSha256) => sha256.hash(sha256.hash(payload));\n//# sourceMappingURL=combinations.js.map", "import { instantiateRipemd160 } from './ripemd160.js';\nimport { instantiateSecp256k1 } from './secp256k1.js';\nimport { instantiateSha1 } from './sha1.js';\nimport { instantiateSha256 } from './sha256.js';\nimport { instantiateSha512 } from './sha512.js';\nconst [sha1, sha256, sha512, ripemd160, secp256k1] = await Promise.all([\n    instantiateSha1(),\n    instantiateSha256(),\n    instantiateSha512(),\n    instantiateRipemd160(),\n    instantiateSecp256k1(),\n]);\nexport { ripemd160, secp256k1, sha1, sha256, sha512 };\n//# sourceMappingURL=default-crypto-instances.js.map", "import { base64ToBin, instantiateRustWasm, ripemd160Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate ripemd160 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateRipemd160}.\n *\n * @param webassemblyBytes - A buffer containing the ripemd160 binary.\n */\nexport const instantiateRipemd160Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './ripemd160', 'ripemd160', 'ripemd160_init', 'ripemd160_update', 'ripemd160_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedRipemd160Binary = () => base64ToBin(ripemd160Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of\n * {@link instantiateRipemd160Bytes} that does not require the consumer to\n * provide the ripemd160 binary buffer.\n */\nexport const instantiateRipemd160 = async () => instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());\n//# sourceMappingURL=ripemd160.js.map", "export { base64ToBin } from '../format/format.js';\nexport * from '../bin/bin.js';\n//# sourceMappingURL=dependencies.js.map", "export * from './base-convert.js';\nexport * from './base64.js';\nexport * from './bin-string.js';\nexport * from './error.js';\nexport * from './hex.js';\nexport * from './log.js';\nexport * from './number.js';\nexport * from './read.js';\nexport * from './time.js';\nexport * from './type-utils.js';\nexport * from './utf8.js';\n//# sourceMappingURL=format.js.map", "export var BaseConversionError;\n(function (BaseConversionError) {\n    BaseConversionError[\"tooLong\"] = \"An alphabet may be no longer than 254 characters.\";\n    BaseConversionError[\"ambiguousCharacter\"] = \"A character code may only appear once in a single alphabet.\";\n    BaseConversionError[\"unknownCharacter\"] = \"Encountered an unknown character for this alphabet.\";\n})(BaseConversionError || (BaseConversionError = {}));\n/**\n * Create a {@link BaseConverter}, exposing methods for encoding and decoding\n * `Uint8Array`s using bitcoin-style padding: each leading zero in the input is\n * replaced with the zero-index character of the `alphabet`, then the remainder\n * of the input is encoded as a large number in the specified alphabet.\n *\n * For example, using the alphabet `01`, the input `[0, 15]` is encoded `01111`\n * – a single `0` represents the leading padding, followed by the base2 encoded\n * `0x1111` (15). With the same alphabet, the input `[0, 0, 255]` is encoded\n * `0011111111` - only two `0` characters are required to represent both\n * leading zeros, followed by the base2 encoded `0x11111111` (255).\n *\n * **This is not compatible with `RFC 3548`'s `Base16`, `Base32`, or `Base64`.**\n *\n * If the alphabet is malformed, this method returns the error as a `string`.\n *\n * @param alphabet - an ordered string that maps each index to a character,\n * e.g. `0123456789`.\n */\n// Algorithm from the `base-x` implementation (derived from the original Satoshi implementation): https://github.com/cryptocoinjs/base-x\nexport const createBaseConverter = (alphabet) => {\n    const undefinedValue = 255;\n    const uint8ArrayBase = 256;\n    if (alphabet.length >= undefinedValue)\n        return BaseConversionError.tooLong;\n    const alphabetMap = new Uint8Array(uint8ArrayBase).fill(undefinedValue);\n    // eslint-disable-next-line functional/no-loop-statement, functional/no-let, no-plusplus\n    for (let index = 0; index < alphabet.length; index++) {\n        const characterCode = alphabet.charCodeAt(index);\n        if (alphabetMap[characterCode] !== undefinedValue) {\n            return BaseConversionError.ambiguousCharacter;\n        }\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        alphabetMap[characterCode] = index;\n    }\n    const base = alphabet.length;\n    const paddingCharacter = alphabet.charAt(0);\n    const factor = Math.log(base) / Math.log(uint8ArrayBase);\n    const inverseFactor = Math.log(uint8ArrayBase) / Math.log(base);\n    return {\n        // eslint-disable-next-line complexity\n        decode: (input) => {\n            if (input.length === 0)\n                return Uint8Array.of();\n            const firstNonZeroIndex = input\n                .split('')\n                .findIndex((character) => character !== paddingCharacter);\n            if (firstNonZeroIndex === -1) {\n                return new Uint8Array(input.length);\n            }\n            const requiredLength = Math.floor((input.length - firstNonZeroIndex) * factor + 1);\n            const decoded = new Uint8Array(requiredLength);\n            /* eslint-disable functional/no-let, functional/no-expression-statement */\n            let nextByte = firstNonZeroIndex;\n            let remainingBytes = 0;\n            // eslint-disable-next-line functional/no-loop-statement\n            while (input[nextByte] !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                let carry = alphabetMap[input.charCodeAt(nextByte)];\n                if (carry === undefinedValue)\n                    return BaseConversionError.unknownCharacter;\n                let digit = 0;\n                // eslint-disable-next-line functional/no-loop-statement\n                for (let steps = requiredLength - 1; (carry !== 0 || digit < remainingBytes) && steps !== -1; \n                // eslint-disable-next-line no-plusplus\n                steps--, digit++) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    carry += Math.floor(base * decoded[steps]);\n                    // eslint-disable-next-line functional/immutable-data\n                    decoded[steps] = Math.floor(carry % uint8ArrayBase);\n                    carry = Math.floor(carry / uint8ArrayBase);\n                }\n                remainingBytes = digit;\n                // eslint-disable-next-line no-plusplus\n                nextByte++;\n            }\n            /* eslint-enable functional/no-let, functional/no-expression-statement */\n            const firstNonZeroResultDigit = decoded.findIndex((value) => value !== 0);\n            const bin = new Uint8Array(firstNonZeroIndex + (requiredLength - firstNonZeroResultDigit));\n            // eslint-disable-next-line functional/no-expression-statement\n            bin.set(decoded.slice(firstNonZeroResultDigit), firstNonZeroIndex);\n            return bin;\n        },\n        // eslint-disable-next-line complexity\n        encode: (input) => {\n            if (input.length === 0)\n                return '';\n            const firstNonZeroIndex = input.findIndex((byte) => byte !== 0);\n            if (firstNonZeroIndex === -1) {\n                return paddingCharacter.repeat(input.length);\n            }\n            const requiredLength = Math.floor((input.length - firstNonZeroIndex) * inverseFactor + 1);\n            const encoded = new Uint8Array(requiredLength);\n            /* eslint-disable functional/no-let, functional/no-expression-statement */\n            let nextByte = firstNonZeroIndex;\n            let remainingBytes = 0;\n            // eslint-disable-next-line functional/no-loop-statement\n            while (nextByte !== input.length) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                let carry = input[nextByte];\n                let digit = 0;\n                // eslint-disable-next-line functional/no-loop-statement\n                for (let steps = requiredLength - 1; (carry !== 0 || digit < remainingBytes) && steps !== -1; \n                // eslint-disable-next-line no-plusplus\n                steps--, digit++) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    carry += Math.floor(uint8ArrayBase * encoded[steps]);\n                    // eslint-disable-next-line functional/immutable-data\n                    encoded[steps] = Math.floor(carry % base);\n                    carry = Math.floor(carry / base);\n                }\n                remainingBytes = digit;\n                // eslint-disable-next-line no-plusplus\n                nextByte++;\n            }\n            /* eslint-enable functional/no-let, functional/no-expression-statement */\n            const firstNonZeroResultDigit = encoded.findIndex((value) => value !== 0);\n            const padding = paddingCharacter.repeat(firstNonZeroIndex);\n            return encoded\n                .slice(firstNonZeroResultDigit)\n                .reduce((all, digit) => all + alphabet.charAt(digit), padding);\n        },\n    };\n};\nexport const bitcoinBase58Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst base58 = createBaseConverter(bitcoinBase58Alphabet);\n/**\n * Convert a bitcoin-style base58-encoded string to a Uint8Array.\n *\n * See {@link createBaseConverter} for format details.\n * @param input - a valid base58-encoded string to decode\n */\nexport const base58ToBin = base58.decode;\n/**\n * Convert a Uint8Array to a bitcoin-style base58-encoded string.\n *\n * See {@link createBaseConverter} for format details.\n * @param input - the Uint8Array to base58 encode\n */\nexport const binToBase58 = base58.encode;\n//# sourceMappingURL=base-convert.js.map", "// base64 encode/decode derived from: https://github.com/niklasvh/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64GroupLength = 4;\nconst nonBase64Chars = new RegExp(`[^${chars}=]`, 'u');\n/**\n * For use before {@link base64ToBin}. Returns true if the provided string is\n * valid base64 (length is divisible by 4, only uses base64 characters).\n * @param maybeBase64 - a string to test\n */\nexport const isBase64 = (maybeBase64) => maybeBase64.length % base64GroupLength === 0 &&\n    !nonBase64Chars.test(maybeBase64);\n/* eslint-disable functional/no-expression-statement, functional/immutable-data, @typescript-eslint/no-magic-numbers, no-bitwise, no-plusplus, @typescript-eslint/no-non-null-assertion */\n/**\n * Convert a base64-encoded string to a Uint8Array.\n *\n * Note, this method always completes. If `validBase64` is not valid base64, an\n * incorrect result will be returned. If `validBase64` is potentially malformed,\n * check it with {@link isBase64} before calling this method.\n *\n * @param validBase64 - a valid base64-encoded string to decode\n */\nexport const base64ToBin = (validBase64) => {\n    const lookup = new Uint8Array(123);\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement\n    for (let i = 0; i < chars.length; i++) {\n        lookup[chars.charCodeAt(i)] = i;\n    }\n    const bufferLengthEstimate = validBase64.length * 0.75;\n    const stringLength = validBase64.length;\n    const bufferLength = validBase64[validBase64.length - 1] === '=' // eslint-disable-line @typescript-eslint/prefer-string-starts-ends-with\n        ? validBase64[validBase64.length - 2] === '='\n            ? bufferLengthEstimate - 2\n            : bufferLengthEstimate - 1\n        : bufferLengthEstimate;\n    const buffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(buffer);\n    // eslint-disable-next-line functional/no-let\n    let p = 0;\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement\n    for (let i = 0; i < stringLength; i += 4) {\n        const encoded1 = lookup[validBase64.charCodeAt(i)];\n        const encoded2 = lookup[validBase64.charCodeAt(i + 1)];\n        const encoded3 = lookup[validBase64.charCodeAt(i + 2)];\n        const encoded4 = lookup[validBase64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return bytes;\n};\n/**\n * Convert a Uint8Array to a base64-encoded string.\n * @param bytes - the Uint8Array to base64 encode\n */\nexport const binToBase64 = (bytes) => {\n    // eslint-disable-next-line functional/no-let\n    let result = '';\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement\n    for (let i = 0; i < bytes.length; i += 3) {\n        result += chars[bytes[i] >> 2];\n        result += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        result += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        result += chars[bytes[i + 2] & 63];\n    }\n    const padded = bytes.length % 3 === 2\n        ? `${result.substring(0, result.length - 1)}=`\n        : bytes.length % 3 === 1\n            ? `${result.substring(0, result.length - 2)}==`\n            : result;\n    return padded;\n};\n/* eslint-enable functional/no-expression-statement, functional/immutable-data, @typescript-eslint/no-magic-numbers, no-bitwise, no-plusplus, @typescript-eslint/no-non-null-assertion */\n//# sourceMappingURL=base64.js.map", "import { splitEvery } from './hex.js';\nconst binaryByteWidth = 8;\nconst binary = 2;\n/**\n * Decode a binary-encoded string into a Uint8Array.\n *\n * E.g.: `binStringToBin('0010101001100100')` → `new Uint8Array([42, 100])`\n *\n * Note, this method always completes. If `binaryDigits` is not divisible by 8,\n * the final byte will be parsed as if it were prepended with `0`s (e.g. `1`\n * is interpreted as `00000001`). If `binaryDigits` is potentially malformed,\n * check it with `isBinString` before calling this method.\n *\n * @param binaryDigits - a string of `0`s and `1`s with a length divisible by 8\n */\nexport const binStringToBin = (binaryDigits) => Uint8Array.from(splitEvery(binaryDigits, binaryByteWidth).map((byteString) => parseInt(byteString, binary)));\n/**\n * Encode a Uint8Array into a binary-encoded string.\n *\n * E.g.: `binToBinString(Uint8Array.from([42, 100]))` → `'0010101001100100'`\n *\n * @param bytes - a Uint8Array to encode\n */\nexport const binToBinString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(binary).padStart(binaryByteWidth, '0'), '');\n/**\n * For use before {@link binStringToBin}. Returns true if the provided string is\n * a valid binary string (length is divisible by 8 and only uses the characters\n * `0` and `1`).\n * @param maybeBinString - a string to test\n */\nexport const isBinString = (maybeBinString) => maybeBinString.length % binaryByteWidth === 0 &&\n    !/[^01]/u.test(maybeBinString);\n//# sourceMappingURL=bin-string.js.map", "/**\n * Returns an array of incrementing values starting at `begin` and incrementing\n * by one for `length`.\n *\n * E.g.: `range(3)` → `[0, 1, 2]` and `range(3, 1)` → `[1, 2, 3]`\n *\n * @param length - the number of elements in the array\n * @param begin - the index at which the range starts (default: `0`)\n */\nexport const range = (length, begin = 0) => Array.from({ length }, (_, index) => begin + index);\n/**\n * Split a string into an array of `chunkLength` strings. The final string may\n * have a length between 1 and `chunkLength`.\n *\n * E.g.: `splitEvery('abcde', 2)` → `['ab', 'cd', 'e']`\n */\nexport const splitEvery = (input, chunkLength) => range(Math.ceil(input.length / chunkLength))\n    .map((index) => index * chunkLength)\n    .map((begin) => input.slice(begin, begin + chunkLength));\nconst hexByteWidth = 2;\nconst hexadecimal = 16;\n/**\n * Decode a hexadecimal-encoded string into a Uint8Array.\n *\n * E.g.: `hexToBin('2a64ff')` → `new Uint8Array([42, 100, 255])`\n *\n * Note, this method always completes. If `validHex` is not divisible by 2,\n * the final byte will be parsed as if it were prepended with a `0` (e.g. `aaa`\n * is interpreted as `aa0a`). If `validHex` is potentially malformed, check\n * it with {@link isHex} before calling this method.\n *\n * @param validHex - a string of valid, hexadecimal-encoded data\n */\nexport const hexToBin = (validHex) => Uint8Array.from(splitEvery(validHex, hexByteWidth).map((byte) => parseInt(byte, hexadecimal)));\n/**\n * For use before {@link hexToBin}. Returns true if the provided string is valid\n * hexadecimal (length is divisible by 2, only uses hexadecimal characters).\n * @param maybeHex - a string to test\n */\nexport const isHex = (maybeHex) => maybeHex.length % hexByteWidth === 0 && !/[^a-fA-F0-9]/u.test(maybeHex);\n/**\n * Encode a Uint8Array into a hexadecimal-encoded string.\n *\n * E.g.: `binToHex(new Uint8Array([42, 100, 255]))` → `'2a64ff'`\n *\n * @param bytes - a Uint8Array to encode\n */\nexport const binToHex = (bytes) => bytes.reduce((str, byte) => str + byte.toString(hexadecimal).padStart(hexByteWidth, '0'), '');\n/**\n * Decode a hexadecimal-encoded string into bytes, reverse it, then re-encode.\n *\n * @param validHex - a string of valid, hexadecimal-encoded data. See\n * {@link hexToBin} for more information.\n */\nexport const swapEndianness = (validHex) => binToHex(hexToBin(validHex).reverse());\n/**\n * Reduce an array of `Uint8Array`s into a single `Uint8Array`.\n * @param array - the array of `Uint8Array`s to flatten\n */\nexport const flattenBinArray = (array) => {\n    const totalLength = array.reduce((total, bin) => total + bin.length, 0);\n    const flattened = new Uint8Array(totalLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    array.reduce((index, bin) => {\n        // eslint-disable-next-line functional/no-expression-statement\n        flattened.set(bin, index);\n        return index + bin.length;\n    }, 0);\n    return flattened;\n};\n/**\n * Compare to `Uint8Array`s, return true if their contents are exactly the same,\n * otherwise return false.\n * @param a - the first Uint8Array\n * @param b - the second Uint8Array\n */\nexport const binsAreEqual = (a, b) => {\n    if (a.length !== b.length) {\n        return false;\n    }\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=hex.js.map", "/**\n * A simple method used throughout Libauth to format error messages. By\n * formatting errors this way, downstream consumers can detect specific error\n * types by matching the `errorType`. For example, the error:\n *\n * ```ts\n * formatError(SomeTypeOfError.exceedsMaximum, `Provided value: ${value}`);\n * ```\n *\n * Can be detected with `String.includes()`, even if the\n * `SomeTypeOfError.exceedsMaximum` error message changes:\n * ```ts\n * error.includes(SomeTypeOfError.exceedsMaximum);\n * // => true\n * ```\n *\n * Using this method ensures consistency across the library.\n *\n * @remarks\n * In Libauth, expected errors use the type `string` rather than `Error` (or\n * other objects that inherit from `Error`) to simplify the resulting types and\n * typechecking requirements. This ensures consistency of returned errors in all\n * environments, avoids exposing internal details like stack traces and line\n * numbers, and allows error messages to be recorded or used as text without an\n * intermediate `toString()` method.\n *\n * @param errorType - the error enum member representing this error type\n * @param errorDetails - optional, additional details to include in the error\n * message\n */\nexport const formatError = (errorType, errorDetails) => `${errorType}${errorDetails === undefined ? '' : ` ${errorDetails}`}`;\nexport const unknownValue = (value, message = `Received an unknown value: ${String(value)}. This should have been caught by TypeScript - are your types correct?`) => {\n    // eslint-disable-next-line functional/no-throw-statement\n    throw new Error(message);\n};\n//# sourceMappingURL=error.js.map", "import { binToHex } from './hex.js';\nconst defaultStringifySpacing = 2;\n/**\n * A safe method to `JSON.stringify` a value, useful for debugging and logging\n * purposes.\n *\n * @remarks\n * Without modifications, `JSON.stringify` has several shortcomings in\n * debugging and logging usage:\n * - throws when serializing anything containing a `bigint`\n * - `Uint8Array`s are often encoded in base 10 with newlines between each\n *   index item\n * - `functions` and `symbols` are not clearly marked\n *\n * This method is more helpful in these cases:\n * - `bigint`: `0n` → `<bigint: 0n>`\n * - `Uint8Array`: `Uint8Array.of(0,0)` → `<Uint8Array: 0x0000>`\n * - `function`: `(x) => x * 2` → `<function: (x) => x * 2>`\n * - `symbol`: `Symbol(A)` → `<symbol: Symbol(A)>`\n *\n * @param value - the data to stringify\n * @param spacing - the number of spaces to use in\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const stringify = (value, spacing = defaultStringifySpacing) => JSON.stringify(value, \n// eslint-disable-next-line complexity\n(_, item) => {\n    const type = typeof item;\n    const name = typeof item === 'object' && item !== null\n        ? item.constructor.name\n        : type;\n    switch (name) {\n        case 'Uint8Array':\n            return `<Uint8Array: 0x${binToHex(item)}>`;\n        case 'bigint':\n            return `<bigint: ${item.toString()}n>`;\n        case 'function':\n        case 'symbol':\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            return `<${name}: ${item.toString()}>`;\n        default:\n            return item;\n    }\n}, spacing);\n/**\n * Given a value, recursively sort the keys of all objects it references\n * (without sorting arrays).\n *\n * @param objectOrArray - the object or array in which to sort object keys\n */\nexport const sortObjectKeys = (objectOrArray\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n    if (Array.isArray(objectOrArray)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return objectOrArray.map(sortObjectKeys);\n    }\n    if (typeof objectOrArray !== 'object' ||\n        objectOrArray === null ||\n        objectOrArray.constructor.name !== 'Object') {\n        return objectOrArray;\n    }\n    // eslint-disable-next-line functional/immutable-data\n    const keys = Object.keys(objectOrArray).sort((a, b) => a.localeCompare(b, 'en'));\n    return keys.reduce((all, key) => ({\n        ...all,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        [key]: sortObjectKeys(objectOrArray[key]),\n    }), {});\n};\nconst uint8ArrayRegex = /\"<Uint8Array: 0x(?<hex>[0-9a-f]*)>\"/gu;\nconst bigIntRegex = /\"<bigint: (?<bigint>[0-9]*)n>\"/gu;\n/**\n * An alternative to {@link stringify} that produces valid JavaScript for use\n * as a test vector in this library. `Uint8Array`s are constructed using\n * {@link hexToBin} and `bigint` values use the `BigInt` constructor. If\n * `alphabetize` is `true`, all objects will be sorted in the output.\n *\n * Note, this assumes all strings that match the expected regular expressions\n * are values of type `Uint8Array` and `bigint` respectively. String values\n * that otherwise happen to match these regular expressions will be converted\n * incorrectly.\n *\n * @param value - the value to stringify\n * @param alphabetize - whether or not to alphabetize object keys, defaults\n * to true\n */\nexport const stringifyTestVector = (\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue, alphabetize = true) => {\n    const stringified = alphabetize\n        ? stringify(sortObjectKeys(value))\n        : stringify(value);\n    return stringified\n        .replace(uint8ArrayRegex, \"hexToBin('$1')\")\n        .replace(bigIntRegex, '$1n');\n};\n//# sourceMappingURL=log.js.map", "import { formatError } from './error.js';\n/**\n * Encode a positive integer as a little-endian Uint8Array. For values exceeding\n * `Number.MAX_SAFE_INTEGER` (`9007199254740991`), use `bigIntToBinUintLE`.\n * Negative values will return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUintLE = (value) => {\n    const baseUint8Array = 256;\n    const result = [];\n    // eslint-disable-next-line functional/no-let\n    let remaining = value;\n    // eslint-disable-next-line functional/no-loop-statement\n    while (remaining >= baseUint8Array) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        result.push(remaining % baseUint8Array);\n        // eslint-disable-next-line functional/no-expression-statement\n        remaining = Math.floor(remaining / baseUint8Array);\n    }\n    // eslint-disable-next-line functional/no-conditional-statement, functional/no-expression-statement, functional/immutable-data\n    if (remaining > 0)\n        result.push(remaining);\n    return Uint8Array.from(result);\n};\n/**\n * Fill a new Uint8Array of a specific byte-length with the contents of a given\n * Uint8Array, truncating or padding the Uint8Array with zeros.\n *\n * @param bin - the Uint8Array to resize\n * @param bytes - the desired byte-length\n */\nexport const binToFixedLength = (bin, bytes) => {\n    const fixedBytes = new Uint8Array(bytes);\n    const maxValue = 255;\n    // eslint-disable-next-line functional/no-expression-statement\n    bin.length > bytes ? fixedBytes.fill(maxValue) : fixedBytes.set(bin);\n    return fixedBytes;\n};\n/**\n * Encode a positive integer as a 2-byte Uint16LE Uint8Array, clamping the\n * results – values exceeding `0xffff` (`65535`) return the same result as\n * `0xffff`, negative values will return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint16LEClamped = (value) => {\n    const uint16 = 2;\n    return binToFixedLength(numberToBinUintLE(value), uint16);\n};\n/**\n * Encode a positive integer as a 4-byte Uint32LE Uint8Array, clamping the\n * results – values exceeding `0xffffffff` (`4294967295`) return the same result\n * as `0xffffffff`, negative values will return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint32LEClamped = (value) => {\n    const uint32 = 4;\n    return binToFixedLength(numberToBinUintLE(value), uint32);\n};\n/**\n * Encode a positive integer as a 2-byte Uint16LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffff` (`65535`). If applicable, applications should handle such\n * cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint16LE = (value) => {\n    const uint16Length = 2;\n    const bin = new Uint8Array(uint16Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    view.setUint16(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode an integer as a 2-byte Int16LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0x0000` to `0xffff` (`65535`). If applicable, applications should handle\n * such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinInt16LE = (value) => {\n    const int16Length = 2;\n    const bin = new Uint8Array(int16Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    view.setInt16(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode an integer as a 4-byte Uint32LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0x00000000` to `0xffffffff` (`4294967295`). If applicable, applications\n * should handle such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinInt32LE = (value) => {\n    const int32Length = 4;\n    const bin = new Uint8Array(int32Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    view.setInt32(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Decode a 2-byte Int16LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 2 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberInt16LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getInt16(0, readAsLittleEndian);\n};\n/**\n * Decode a 4-byte Int32LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 4 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberInt32LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getInt32(0, readAsLittleEndian);\n};\n/**\n * Encode a positive integer as a 2-byte Uint16LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffff` (`65535`). If applicable, applications should handle such\n * cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint16BE = (value) => {\n    const uint16Length = 2;\n    const bin = new Uint8Array(uint16Length);\n    const writeAsLittleEndian = false;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    view.setUint16(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode a positive number as a 4-byte Uint32LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffffffff` (`4294967295`). If applicable, applications should handle\n * such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint32LE = (value) => {\n    const uint32Length = 4;\n    const bin = new Uint8Array(uint32Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    view.setUint32(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode a positive number as a 4-byte Uint32BE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffffffff` (`4294967295`). If applicable, applications should handle\n * such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint32BE = (value) => {\n    const uint32Length = 4;\n    const bin = new Uint8Array(uint32Length);\n    const writeAsLittleEndian = false;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statement\n    view.setUint32(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode a positive BigInt as little-endian Uint8Array. Negative values will\n * return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const bigIntToBinUintLE = (value) => {\n    const baseUint8Array = 256;\n    const base = BigInt(baseUint8Array);\n    const result = [];\n    // eslint-disable-next-line functional/no-let\n    let remaining = value;\n    // eslint-disable-next-line functional/no-loop-statement\n    while (remaining >= base) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        result.push(Number(remaining % base));\n        // eslint-disable-next-line functional/no-expression-statement\n        remaining /= base;\n    }\n    // eslint-disable-next-line functional/no-conditional-statement, functional/no-expression-statement, functional/immutable-data\n    if (remaining > 0n)\n        result.push(Number(remaining));\n    return Uint8Array.from(result.length > 0 ? result : [0]);\n};\n/**\n * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array, clamping the\n * results – values exceeding `0xffff_ffff_ffff_ffff` (`18446744073709551615`)\n * return the same result as `0xffff_ffff_ffff_ffff`, negative values return the\n * same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const bigIntToBinUint64LEClamped = (value) => {\n    const uint64 = 8;\n    return binToFixedLength(bigIntToBinUintLE(value), uint64);\n};\n/**\n * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffff_ffff_ffff_ffff` (`18446744073709551615`).\n *\n * @param value - the number to encode\n */\nexport const bigIntToBinUint64LE = (value) => {\n    const uint64LengthInBits = 64;\n    const valueAsUint64 = BigInt.asUintN(uint64LengthInBits, value);\n    const fixedLengthBin = bigIntToBinUint64LEClamped(valueAsUint64);\n    return fixedLengthBin;\n};\n/**\n * Encode an integer as a 4-byte, little-endian Uint8Array using the number's\n * two's compliment representation (the format used by JavaScript's bitwise\n * operators).\n *\n * @remarks\n * The C++ bitcoin implementations sometimes represent short vectors using\n * signed 32-bit integers (e.g. `sighashType`). This method can be used to test\n * compatibility with those implementations.\n *\n * @param value - the number to encode\n */\nexport const numberToBinInt32TwosCompliment = (value) => {\n    const bytes = 4;\n    const bitsInAByte = 8;\n    const bin = new Uint8Array(bytes);\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let index = 0; index < bytes; index++) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        bin[index] = value;\n        // eslint-disable-next-line functional/no-expression-statement, no-bitwise, no-param-reassign\n        value >>>= bitsInAByte;\n    }\n    return bin;\n};\n/**\n * Decode a little-endian Uint8Array of any length into a number. For numbers\n * larger than `Number.MAX_SAFE_INTEGER` (`9007199254740991`), use\n * `binToBigIntUintLE`.\n *\n * The `bytes` parameter can be set to constrain the expected length (default:\n * `bin.length`). This method throws if `bin.length` is not equal to `bytes`.\n *\n * @privateRemarks\n * We avoid a bitwise strategy here because JavaScript uses 32-bit signed\n * integers for bitwise math, so larger numbers are converted incorrectly. E.g.\n * `2147483648 << 8` is `0`, while `2147483648n << 8n` is `549755813888n`.\n *\n * @param bin - the Uint8Array to decode\n * @param bytes - the number of bytes to read (default: `bin.length`)\n */\nexport const binToNumberUintLE = (bin, bytes = bin.length) => {\n    const base = 2;\n    const bitsInAByte = 8;\n    if (bin.length !== bytes) {\n        // eslint-disable-next-line functional/no-throw-statement\n        throw new TypeError(`Bin length must be ${bytes}.`);\n    }\n    return new Uint8Array(bin.buffer, bin.byteOffset, bin.length).reduce((accumulated, byte, i) => accumulated + byte * base ** (bitsInAByte * i), 0);\n};\n/**\n * Decode a 2-byte Uint16LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 2 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberUint16LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getUint16(0, readAsLittleEndian);\n};\n/**\n * Decode a 4-byte Uint32LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 4 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberUint32LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getUint32(0, readAsLittleEndian);\n};\n/**\n * Decode a big-endian Uint8Array of any length into a BigInt. If starting from\n * a hex value, consider using the BigInt constructor instead:\n * ```\n * BigInt(`0x${hex}`)\n * ```\n *\n * The `bytes` parameter can be set to constrain the expected length (default:\n * `bin.length`). This method throws if `bin.length` is not equal to `bytes`.\n *\n * @param bin - the Uint8Array to decode\n * @param bytes - the number of bytes to read (default: `bin.length`)\n */\nexport const binToBigIntUintBE = (bin, bytes = bin.length) => {\n    const bitsInAByte = 8;\n    const shift = BigInt(bitsInAByte);\n    if (bin.length !== bytes) {\n        // eslint-disable-next-line functional/no-throw-statement\n        throw new TypeError(`Bin length must be ${bytes}.`);\n    }\n    return new Uint8Array(bin.buffer, bin.byteOffset, bin.length).reduce(\n    // eslint-disable-next-line no-bitwise\n    (accumulated, byte) => (accumulated << shift) | BigInt(byte), 0n);\n};\n/**\n * Decode an unsigned, 32-byte big-endian Uint8Array into a BigInt. This can be\n * used to decode Uint8Array-encoded cryptographic primitives like private\n * keys, public keys, curve parameters, and signature points.\n *\n * If starting from a hex value, consider using the BigInt constructor instead:\n * ```\n * BigInt(`0x${hex}`)\n * ```\n * @param bin - the Uint8Array to decode\n */\nexport const binToBigIntUint256BE = (bin) => {\n    const uint256Bytes = 32;\n    return binToBigIntUintBE(bin, uint256Bytes);\n};\n/**\n * Encode a positive BigInt into an unsigned 32-byte big-endian Uint8Array. This\n * can be used to encoded numbers for cryptographic primitives like private\n * keys, public keys, curve parameters, and signature points.\n *\n * Negative values will return the same result as `0`, values higher than\n * 2^256-1 will return the maximum expressible unsigned 256-bit value\n * (`0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`).\n *\n * @param value - the BigInt to encode\n */\nexport const bigIntToBinUint256BEClamped = (value) => {\n    const uint256Bytes = 32;\n    return binToFixedLength(bigIntToBinUintLE(value), uint256Bytes).reverse();\n};\n/**\n * Decode a little-endian Uint8Array of any length into a BigInt.\n *\n * The `bytes` parameter can be set to constrain the expected length (default:\n * `bin.length`). This method throws if `bin.length` is not equal to `bytes`.\n *\n * @param bin - the Uint8Array to decode\n * @param bytes - the number of bytes to read (default: `bin.length`)\n */\nexport const binToBigIntUintLE = (bin, bytes = bin.length) => {\n    const bitsInAByte = 8;\n    if (bin.length !== bytes) {\n        // eslint-disable-next-line functional/no-throw-statement\n        throw new TypeError(`Bin length must be ${bytes}.`);\n    }\n    return new Uint8Array(bin.buffer, bin.byteOffset, bin.length).reduceRight(\n    // eslint-disable-next-line no-bitwise\n    (accumulated, byte) => (accumulated << BigInt(bitsInAByte)) | BigInt(byte), 0n);\n};\n/**\n * Decode an 8-byte Uint64LE Uint8Array into a BigInt.\n *\n * Throws if `bin` is shorter than 8 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToBigIntUint64LE = (bin) => {\n    const uint64LengthInBytes = 8;\n    const truncatedBin = bin.length > uint64LengthInBytes ? bin.slice(0, uint64LengthInBytes) : bin;\n    return binToBigIntUintLE(truncatedBin, uint64LengthInBytes);\n};\n/**\n * Decode an {@link Output.valueSatoshis} into a `BigInt`. This is an alias for\n * {@link binToBigIntUint64LE}.\n *\n * Throws if the provided value is shorter than 8 bytes.\n */\nexport const binToValueSatoshis = binToBigIntUint64LE;\n/**\n * Encode a `BigInt` into an {@link Output.valueSatoshis}. This is an alias for\n * {@link bigIntToBinUint64LE}.\n *\n * This method will return an incorrect result for values outside of the range 0\n * to 0xffff_ffff_ffff_ffff (`18446744073709551615`).\n */\nexport const valueSatoshisToBin = bigIntToBinUint64LE;\n/**\n * Get the expected byte length of a CompactSize given a first byte.\n *\n * @param firstByte - the first byte of the CompactSize\n */\nexport const compactSizePrefixToSize = (firstByte) => {\n    switch (firstByte) {\n        case 253 /* CompactSize.uint16Prefix */:\n            return 2 /* CompactSize.uint16 */ + 1;\n        case 254 /* CompactSize.uint32Prefix */:\n            return 4 /* CompactSize.uint32 */ + 1;\n        case 255 /* CompactSize.uint64Prefix */:\n            return 8 /* CompactSize.uint64 */ + 1;\n        default:\n            return 1 /* CompactSize.uint8 */;\n    }\n};\nexport var CompactSizeError;\n(function (CompactSizeError) {\n    CompactSizeError[\"noPrefix\"] = \"Error reading CompactSize: requires at least one byte.\";\n    CompactSizeError[\"insufficientBytes\"] = \"Error reading CompactSize: insufficient bytes.\";\n    CompactSizeError[\"nonMinimal\"] = \"Error reading CompactSize: CompactSize is not minimally encoded.\";\n    CompactSizeError[\"excessiveBytes\"] = \"Error decoding CompactSize: unexpected bytes after CompactSize.\";\n})(CompactSizeError || (CompactSizeError = {}));\n/**\n * Read a non-minimally-encoded `CompactSize` (see {@link bigIntToCompactSize})\n * from the provided {@link ReadPosition}, returning either an error message (as\n * a string) or an object containing the value and the\n * next {@link ReadPosition}.\n *\n * Rather than this function, most applications should\n * use {@link readCompactSizeMinimal}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * `CompactSize`\n */\nexport const readCompactSize = (position) => {\n    const { bin, index } = position;\n    const prefix = bin[index];\n    if (prefix === undefined) {\n        return formatError(CompactSizeError.noPrefix);\n    }\n    const bytes = compactSizePrefixToSize(prefix);\n    if (bin.length - index < bytes) {\n        return formatError(CompactSizeError.insufficientBytes, `CompactSize prefix ${prefix} requires at least ${bytes} bytes. Remaining bytes: ${bin.length - index}`);\n    }\n    const hasPrefix = bytes !== 1;\n    const contents = hasPrefix\n        ? bin.subarray(index + 1, index + bytes)\n        : bin.subarray(index, index + bytes);\n    return {\n        position: { bin, index: index + bytes },\n        result: binToBigIntUintLE(contents),\n    };\n};\n/**\n * Encode a positive BigInt as a `CompactSize` (Satoshi's variable-length,\n * positive integer format).\n *\n * Note: the maximum value of a CompactSize is `0xffff_ffff_ffff_ffff`\n * (`18446744073709551615`). This method will return an incorrect result for\n * values outside of the range `0` to `0xffff_ffff_ffff_ffff`. If applicable,\n * applications should handle such cases prior to calling this method.\n *\n * @param value - the BigInt to encode (must be no larger than\n * `0xffff_ffff_ffff_ffff`)\n */\nexport const bigIntToCompactSize = (value) => value <= BigInt(252 /* CompactSize.uint8MaxValue */)\n    ? Uint8Array.of(Number(value))\n    : value <= BigInt(65535 /* CompactSize.uint16MaxValue */)\n        ? Uint8Array.from([\n            253 /* CompactSize.uint16Prefix */,\n            ...numberToBinUint16LE(Number(value)),\n        ])\n        : value <= BigInt(4294967295 /* CompactSize.uint32MaxValue */)\n            ? Uint8Array.from([\n                254 /* CompactSize.uint32Prefix */,\n                ...numberToBinUint32LE(Number(value)),\n            ])\n            : Uint8Array.from([\n                255 /* CompactSize.uint64Prefix */,\n                ...bigIntToBinUint64LE(value),\n            ]);\n/**\n * Read a minimally-encoded `CompactSize` from the provided\n * {@link ReadPosition}, returning either an error message (as a string) or an\n * object containing the value and the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * `CompactSize`\n */\nexport const readCompactSizeMinimal = (position) => {\n    const read = readCompactSize(position);\n    if (typeof read === 'string') {\n        return read;\n    }\n    const readLength = read.position.index - position.index;\n    const canonicalEncoding = bigIntToCompactSize(read.result);\n    if (readLength !== canonicalEncoding.length) {\n        return formatError(CompactSizeError.nonMinimal, `Value: ${read.result.toString()}, encoded length: ${readLength}, canonical length: ${canonicalEncoding.length}`);\n    }\n    return read;\n};\n/**\n * Decode a minimally-encoded `CompactSize` (Satoshi's variable-length, positive\n * integer format) from a Uint8Array, returning the value as a BigInt. This\n * function returns an error if the entire input is not consumed – to read a\n * `CompactSize` from a position within a larger `Uint8Array`,\n * use {@link readCompactSizeMinimal} or {@link readCompactSize}.\n *\n * @param bin - the Uint8Array from which to read the CompactSize\n */\nexport const compactSizeToBigInt = (bin) => {\n    const read = readCompactSizeMinimal({ bin, index: 0 });\n    if (typeof read === 'string') {\n        return read;\n    }\n    if (read.position.index !== bin.length) {\n        return formatError(CompactSizeError.excessiveBytes, `CompactSize ends at index ${read.position.index}, but input includes ${bin.length} bytes.`);\n    }\n    return read.result;\n};\n/**\n * Convert a signed integer into it's two's compliment unsigned equivalent, e.g.\n * `0b11111111111111111111111111111110` is `-2` as a signed integer or\n * `4294967294` as an unsigned integer.\n */\nexport const int32SignedToUnsigned = (int32) => \n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nUint32Array.from(Int32Array.of(int32))[0];\n/**\n * Convert an unsigned integer into it's two's compliment signed equivalent,\n * e.g. `0b11111111111111111111111111111110` is `4294967294` as an unsigned\n * integer or `-2` as a signed integer.\n */\nexport const int32UnsignedToSigned = (int32) => \n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nInt32Array.from(Uint32Array.of(int32))[0];\n//# sourceMappingURL=number.js.map", "import { formatError } from './error.js';\nimport { readCompactSizeMinimal } from './number.js';\n/**\n * Given an initial {@link ReadPosition} and a list of {@link ReadFunction}s,\n * apply each {@link ReadFunction} in order, aggregating each result and passing\n * the next {@link ReadPosition} into the next {@link ReadFunction}. If an error\n * occurs, immediately return the error message (`string`), otherwise, return\n * the array of results.\n *\n * @param position - the {@link ReadPosition} at which to start the first read\n * @param readFunctions - the ordered list of {@link ReadFunction}s to apply to\n * the {@link ReadPosition}\n */\nexport const readMultiple = (position, readFunctions) => {\n    // eslint-disable-next-line functional/no-let\n    let nextPosition = position;\n    const results = [];\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const readFunction of readFunctions) {\n        const out = readFunction(nextPosition);\n        if (typeof out === 'string') {\n            return out;\n        }\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        results.push(out.result);\n        // eslint-disable-next-line functional/no-expression-statement\n        nextPosition = out.position;\n    }\n    return {\n        position: nextPosition,\n        result: results,\n    };\n};\nexport var ReadItemCountError;\n(function (ReadItemCountError) {\n    ReadItemCountError[\"itemCount\"] = \"Error reading item count.\";\n    ReadItemCountError[\"item\"] = \"Error reading item.\";\n})(ReadItemCountError || (ReadItemCountError = {}));\n/**\n * Read a count of items indicated by the CompactSize at {@link ReadPosition}.\n * The CompactSize will be read to determine the number of items, and the read\n * function will be applied in series, aggregated each result and passing the\n * next {@link ReadPosition} into each iteration. If an error occurs,\n * immediately return the error message (`string`), otherwise, return the array\n * of results.\n */\nexport const readItemCount = (position, readFunction) => {\n    const countRead = readCompactSizeMinimal(position);\n    if (typeof countRead === 'string') {\n        return formatError(ReadItemCountError.itemCount, countRead);\n    }\n    // eslint-disable-next-line functional/no-let\n    let nextPosition = countRead.position;\n    const result = [];\n    // eslint-disable-next-line functional/no-loop-statement, functional/no-let, no-plusplus\n    for (let remaining = Number(countRead.result); remaining > 0; remaining--) {\n        const read = readFunction(nextPosition);\n        if (typeof read === 'string') {\n            return formatError(ReadItemCountError.item, read);\n        }\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        result.push(read.result);\n        // eslint-disable-next-line functional/no-expression-statement\n        nextPosition = read.position;\n    }\n    return { position: nextPosition, result };\n};\n//# sourceMappingURL=read.js.map", "import { binToNumberUint32LE, numberToBinUint32LE } from './number.js';\nconst msPerLocktimeSecond = 1000;\n/**\n * The minimum Unix timestamp (inclusive) that can be encoded by a\n * transaction's `locktime`.\n */\nexport const minimumLocktimeTimestamp = 500000000;\n/**\n * The maximum Unix timestamp (inclusive) that can be encoded by a\n * transaction's `locktime`.\n */\nexport const maximumLocktimeTimestamp = 0xffffffff;\n/**\n * The minimum Date (inclusive) that can be encoded by a transaction's\n * `locktime`.\n */\nexport const minimumLocktimeDate = new Date(minimumLocktimeTimestamp * msPerLocktimeSecond);\n/**\n * The maximum Date (inclusive) that can be encoded by a transaction's\n * `locktime`.\n */\nexport const maximumLocktimeDate = new Date(maximumLocktimeTimestamp * msPerLocktimeSecond);\nexport var LocktimeError;\n(function (LocktimeError) {\n    LocktimeError[\"dateOutOfRange\"] = \"The provided Date is outside of the range that can be encoded in locktime.\";\n    LocktimeError[\"locktimeOutOfRange\"] = \"The provided locktime is outside of the range that can be encoded as a Date (greater than or equal to 500000000 and less than or equal to 4294967295).\";\n    LocktimeError[\"incorrectLength\"] = \"The provided locktime is not the correct length (4 bytes).\";\n})(LocktimeError || (LocktimeError = {}));\n/**\n * Convert a JavaScript `Date` object to its equivalent transaction `locktime`\n * representation. The `date` is rounded to the nearest second (the precision of\n * `locktime` Dates).\n *\n * Note, a locktime values greater than or equal to `500000000`\n * See {@link Transaction.locktime} for details.\n *\n * @param date - the Date to convert to a locktime number\n */\nexport const dateToLocktime = (date) => date < minimumLocktimeDate || date > maximumLocktimeDate\n    ? LocktimeError.dateOutOfRange\n    : Math.round(date.getTime() / msPerLocktimeSecond);\n/**\n * Convert a transaction `locktime` to its equivalent JavaScript `Date` object.\n * If locktime is outside the possible range (greater than or equal to\n * `500000000` and less than or equal to `4294967295`), an error message is\n * returned.\n *\n * @param locktime - a positive integer between `500000000` and `4294967295`,\n * inclusive\n */\nexport const locktimeToDate = (locktime) => locktime < minimumLocktimeTimestamp || locktime > maximumLocktimeTimestamp\n    ? LocktimeError.locktimeOutOfRange\n    : new Date(locktime * msPerLocktimeSecond);\n/**\n * Convert a JavaScript `Date` object to its equivalent transaction `locktime`\n * bytecode representation. The `date` is rounded to the nearest second (the\n * precision of `locktime` Dates).\n *\n * Note: a block-based locktime can simply be encoded with\n * {@link numberToBinUint32LE} (provided it is no larger than the\n * maximum, `499999999`).\n *\n * @param date - the Date to convert to a locktime Uint8Array\n */\nexport const dateToLocktimeBin = (date) => {\n    const result = dateToLocktime(date);\n    return typeof result === 'string' ? result : numberToBinUint32LE(result);\n};\nconst locktimeByteLength = 4;\n/**\n * Decode a locktime, returning a `number` for block heights, a `Date` for block\n * times, or a string for parsing errors.\n *\n * @param bin - the 4-byte Uint8Array locktime to parse\n */\nexport const decodeLocktime = (bin) => {\n    if (bin.length !== locktimeByteLength)\n        return LocktimeError.incorrectLength;\n    const parsed = binToNumberUint32LE(bin);\n    return parsed >= minimumLocktimeTimestamp\n        ? new Date(parsed * msPerLocktimeSecond)\n        : parsed;\n};\n//# sourceMappingURL=time.js.map", "export {};\n//# sourceMappingURL=type-utils.js.map", "const utf8Encoder = new TextEncoder();\n/**\n * Interpret a string as UTF-8 and encode it as a Uint8Array.\n * @param utf8 - the string to encode\n */\nexport const utf8ToBin = (utf8) => utf8Encoder.encode(utf8);\nconst utf8Decoder = new TextDecoder();\n/**\n * Decode a Uint8Array as a UTF-8 string.\n * @param bytes - the Uint8Array to decode\n */\nexport const binToUtf8 = (bytes) => utf8Decoder.decode(bytes);\n//# sourceMappingURL=utf8.js.map", "export * from './hashes.js';\nexport * from './ripemd160/ripemd160.base64.js';\nexport * from './secp256k1/secp256k1-wasm.js';\nexport * from './sha1/sha1.base64.js';\nexport * from './sha256/sha256.base64.js';\nexport * from './sha512/sha512.base64.js';\n//# sourceMappingURL=bin.js.map", "/* eslint-disable functional/no-conditional-statement, functional/no-let, functional/no-expression-statement, no-underscore-dangle, functional/no-try-statement, @typescript-eslint/no-magic-numbers, max-params, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion */\n/**\n * Note, most of this method is translated and boiled-down from the wasm-pack\n * workflow. Significant changes to wasm-bindgen or wasm-pack build will likely\n * require modifications to this method.\n */\nexport const instantiateRustWasm = async (webassemblyBytes, expectedImportModuleName, hashExportName, initExportName, updateExportName, finalExportName) => {\n    const wasm = (await WebAssembly.instantiate(webassemblyBytes, {\n        [expectedImportModuleName]: {\n            /**\n             * This would only be called in cases where a `__wbindgen_malloc` failed.\n             * Since `__wbindgen_malloc` isn't exposed to consumers, this error\n             * can only be encountered if the code below is broken.\n             */\n            // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention\n            __wbindgen_throw: /* istanbul ignore next */ (ptr, len) => {\n                // eslint-disable-next-line functional/no-throw-statement\n                throw new Error(\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                Array.from(getUint8Memory().subarray(ptr, ptr + len))\n                    .map((num) => String.fromCharCode(num))\n                    .join(''));\n            },\n        },\n    })).instance.exports; // eslint-disable-line @typescript-eslint/no-explicit-any\n    let cachedUint8Memory; // eslint-disable-line @typescript-eslint/init-declarations\n    let cachedUint32Memory; // eslint-disable-line @typescript-eslint/init-declarations\n    let cachedGlobalArgumentPtr; // eslint-disable-line @typescript-eslint/init-declarations\n    const globalArgumentPtr = () => {\n        if (cachedGlobalArgumentPtr === undefined) {\n            cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n        }\n        return cachedGlobalArgumentPtr;\n    };\n    /**\n     * Must be hoisted for `__wbindgen_throw`.\n     */\n    // eslint-disable-next-line func-style\n    function getUint8Memory() {\n        if (cachedUint8Memory === undefined ||\n            cachedUint8Memory.buffer !== wasm.memory.buffer) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            cachedUint8Memory = new Uint8Array(wasm.memory.buffer);\n        }\n        return cachedUint8Memory;\n    }\n    const getUint32Memory = () => {\n        if (cachedUint32Memory === undefined ||\n            cachedUint32Memory.buffer !== wasm.memory.buffer) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            cachedUint32Memory = new Uint32Array(wasm.memory.buffer);\n        }\n        return cachedUint32Memory;\n    };\n    const passArray8ToWasm = (array) => {\n        const ptr = wasm.__wbindgen_malloc(array.length);\n        getUint8Memory().set(array, ptr);\n        return [ptr, array.length];\n    };\n    const getArrayU8FromWasm = (ptr, len) => getUint8Memory().subarray(ptr, ptr + len);\n    const hash = (input) => {\n        const [ptr0, len0] = passArray8ToWasm(input);\n        const retPtr = globalArgumentPtr();\n        try {\n            wasm[hashExportName](retPtr, ptr0, len0);\n            const mem = getUint32Memory();\n            const ptr = mem[retPtr / 4];\n            const len = mem[retPtr / 4 + 1];\n            const realRet = getArrayU8FromWasm(ptr, len).slice();\n            wasm.__wbindgen_free(ptr, len);\n            return realRet;\n        }\n        finally {\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    };\n    const init = () => {\n        const retPtr = globalArgumentPtr();\n        wasm[initExportName](retPtr);\n        const mem = getUint32Memory();\n        const ptr = mem[retPtr / 4];\n        const len = mem[retPtr / 4 + 1];\n        const realRet = getArrayU8FromWasm(ptr, len).slice();\n        wasm.__wbindgen_free(ptr, len);\n        return realRet;\n    };\n    const update = (rawState, input) => {\n        const [ptr0, len0] = passArray8ToWasm(rawState);\n        const [ptr1, len1] = passArray8ToWasm(input);\n        const retPtr = globalArgumentPtr();\n        try {\n            wasm[updateExportName](retPtr, ptr0, len0, ptr1, len1);\n            const mem = getUint32Memory();\n            const ptr = mem[retPtr / 4];\n            const len = mem[retPtr / 4 + 1];\n            const realRet = getArrayU8FromWasm(ptr, len).slice();\n            wasm.__wbindgen_free(ptr, len);\n            return realRet;\n        }\n        finally {\n            rawState.set(getUint8Memory().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    };\n    const final = (rawState) => {\n        const [ptr0, len0] = passArray8ToWasm(rawState);\n        const retPtr = globalArgumentPtr();\n        try {\n            wasm[finalExportName](retPtr, ptr0, len0);\n            const mem = getUint32Memory();\n            const ptr = mem[retPtr / 4];\n            const len = mem[retPtr / 4 + 1];\n            const realRet = getArrayU8FromWasm(ptr, len).slice();\n            wasm.__wbindgen_free(ptr, len);\n            return realRet;\n        }\n        finally {\n            rawState.set(getUint8Memory().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    };\n    return {\n        final,\n        hash,\n        init,\n        update,\n    };\n};\n/* eslint-enable functional/no-conditional-statement, functional/no-let, functional/no-expression-statement, no-underscore-dangle, functional/no-try-statement, @typescript-eslint/no-magic-numbers, max-params, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion */\n//# sourceMappingURL=hashes.js.map", "/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const ripemd160Base64Bytes = '';\n//# sourceMappingURL=ripemd160.base64.js.map", "/* eslint-disable no-underscore-dangle, max-params, @typescript-eslint/naming-convention */\n// cSpell:ignore memcpy, anyfunc\nimport { base64ToBin } from '../../format/format.js';\nimport { CompressionFlag, ContextFlag } from './secp256k1-wasm-types.js';\nimport { secp256k1Base64Bytes } from './secp256k1.base64.js';\nexport { ContextFlag, CompressionFlag };\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */\nconst wrapSecp256k1Wasm = (instance, heapU8, heapU32) => ({\n    contextCreate: (context) => instance.exports._secp256k1_context_create(context),\n    contextRandomize: (contextPtr, seedPtr) => instance.exports._secp256k1_context_randomize(contextPtr, seedPtr),\n    free: (pointer) => instance.exports._free(pointer),\n    heapU32,\n    heapU8,\n    instance,\n    malloc: (bytes) => instance.exports._malloc(bytes),\n    mallocSizeT: (num) => {\n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        const pointer = instance.exports._malloc(4);\n        // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n        const pointerView32 = pointer >> 2;\n        // eslint-disable-next-line functional/no-expression-statement\n        heapU32.set([num], pointerView32);\n        return pointer;\n    },\n    mallocUint8Array: (array) => {\n        const pointer = instance.exports._malloc(array.length);\n        // eslint-disable-next-line functional/no-expression-statement\n        heapU8.set(array, pointer);\n        return pointer;\n    },\n    privkeyTweakAdd: (contextPtr, secretKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_privkey_tweak_add(contextPtr, secretKeyPtr, tweakNum256Ptr),\n    privkeyTweakMul: (contextPtr, secretKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_privkey_tweak_mul(contextPtr, secretKeyPtr, tweakNum256Ptr),\n    pubkeyCreate: (contextPtr, publicKeyPtr, secretKeyPtr) => instance.exports._secp256k1_ec_pubkey_create(contextPtr, publicKeyPtr, secretKeyPtr),\n    pubkeyParse: (contextPtr, publicKeyOutPtr, publicKeyInPtr, publicKeyInLength) => instance.exports._secp256k1_ec_pubkey_parse(contextPtr, publicKeyOutPtr, publicKeyInPtr, publicKeyInLength),\n    pubkeySerialize: (contextPtr, outputPtr, outputLengthPtr, publicKeyPtr, compression) => instance.exports._secp256k1_ec_pubkey_serialize(contextPtr, outputPtr, outputLengthPtr, publicKeyPtr, compression),\n    pubkeyTweakAdd: (contextPtr, publicKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_pubkey_tweak_add(contextPtr, publicKeyPtr, tweakNum256Ptr),\n    pubkeyTweakMul: (contextPtr, publicKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_pubkey_tweak_mul(contextPtr, publicKeyPtr, tweakNum256Ptr),\n    readHeapU8: (pointer, bytes) => new Uint8Array(heapU8.buffer, pointer, bytes),\n    readSizeT: (pointer) => {\n        // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n        const pointerView32 = pointer >> 2;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return heapU32[pointerView32];\n    },\n    recover: (contextPtr, outputPubkeyPointer, rSigPtr, msg32Ptr) => instance.exports._secp256k1_ecdsa_recover(contextPtr, outputPubkeyPointer, rSigPtr, msg32Ptr),\n    recoverableSignatureParse: (contextPtr, outputRSigPtr, inputSigPtr, rid) => instance.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(contextPtr, outputRSigPtr, inputSigPtr, rid),\n    recoverableSignatureSerialize: (contextPtr, sigOutPtr, recIDOutPtr, rSigPtr) => instance.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(contextPtr, sigOutPtr, recIDOutPtr, rSigPtr),\n    schnorrSign: (contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr) => instance.exports._secp256k1_schnorr_sign(contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr),\n    schnorrVerify: (contextPtr, sigPtr, msg32Ptr, publicKeyPtr) => instance.exports._secp256k1_schnorr_verify(contextPtr, sigPtr, msg32Ptr, publicKeyPtr),\n    seckeyVerify: (contextPtr, secretKeyPtr) => instance.exports._secp256k1_ec_seckey_verify(contextPtr, secretKeyPtr),\n    sign: (contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr) => instance.exports._secp256k1_ecdsa_sign(contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr),\n    signRecoverable: (contextPtr, outputRSigPtr, msg32Ptr, secretKeyPtr) => instance.exports._secp256k1_ecdsa_sign_recoverable(contextPtr, outputRSigPtr, msg32Ptr, secretKeyPtr),\n    signatureMalleate: (contextPtr, outputSigPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_malleate(contextPtr, outputSigPtr, inputSigPtr),\n    signatureNormalize: (contextPtr, outputSigPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_normalize(contextPtr, outputSigPtr, inputSigPtr),\n    signatureParseCompact: (contextPtr, sigOutPtr, compactSigInPtr) => instance.exports._secp256k1_ecdsa_signature_parse_compact(contextPtr, sigOutPtr, compactSigInPtr),\n    signatureParseDER: (contextPtr, sigOutPtr, sigDERInPtr, sigDERInLength) => instance.exports._secp256k1_ecdsa_signature_parse_der(contextPtr, sigOutPtr, sigDERInPtr, sigDERInLength),\n    signatureSerializeCompact: (contextPtr, outputCompactSigPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_serialize_compact(contextPtr, outputCompactSigPtr, inputSigPtr),\n    signatureSerializeDER: (contextPtr, outputDERSigPtr, outputDERSigLengthPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_serialize_der(contextPtr, outputDERSigPtr, outputDERSigLengthPtr, inputSigPtr),\n    verify: (contextPtr, sigPtr, msg32Ptr, pubkeyPtr) => instance.exports._secp256k1_ecdsa_verify(contextPtr, sigPtr, msg32Ptr, pubkeyPtr),\n});\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable functional/immutable-data, functional/no-expression-statement, @typescript-eslint/no-magic-numbers, functional/no-conditional-statement, no-bitwise, functional/no-throw-statement */\n/**\n * Method extracted from Emscripten's preamble.js\n */\nconst isLittleEndian = (buffer) => {\n    const littleEndian = true;\n    const notLittleEndian = false;\n    const heap16 = new Int16Array(buffer);\n    const heap32 = new Int32Array(buffer);\n    const heapU8 = new Uint8Array(buffer);\n    heap32[0] = 1668509029;\n    heap16[1] = 25459;\n    return heapU8[2] !== 115 || heapU8[3] !== 99\n        ? /* istanbul ignore next */ notLittleEndian\n        : littleEndian;\n};\n/**\n * Method derived from Emscripten's preamble.js\n */\nconst alignMemory = (factor, size) => Math.ceil(size / factor) * factor;\n/**\n * The most performant way to instantiate secp256k1 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSecp256k1}.\n *\n * Note, most of this method is translated and boiled-down from Emscripten's\n * preamble.js. Significant changes to the WASM build or breaking updates to\n * Emscripten will likely require modifications to this method.\n *\n * @param webassemblyBytes - A buffer containing the secp256k1 binary.\n */\nexport const instantiateSecp256k1WasmBytes = async (webassemblyBytes) => {\n    const STACK_ALIGN = 16;\n    const GLOBAL_BASE = 1024;\n    const WASM_PAGE_SIZE = 65536;\n    const TOTAL_STACK = 5242880;\n    const TOTAL_MEMORY = 16777216;\n    const wasmMemory = new WebAssembly.Memory({\n        initial: TOTAL_MEMORY / WASM_PAGE_SIZE,\n        maximum: TOTAL_MEMORY / WASM_PAGE_SIZE,\n    });\n    /* istanbul ignore if  */\n    if (!isLittleEndian(wasmMemory.buffer)) {\n        /*\n         * note: this block is excluded from test coverage. It's A) hard to test\n         * (must be either tested on big-endian hardware or a big-endian buffer\n         * mock) and B) extracted from Emscripten's preamble.js, where it should\n         * be tested properly.\n         */\n        throw new Error('Runtime error: expected the system to be little-endian.');\n    }\n    const STATIC_BASE = GLOBAL_BASE;\n    const STATICTOP_INITIAL = STATIC_BASE + 67696 + 16;\n    const DYNAMICTOP_PTR = STATICTOP_INITIAL;\n    const DYNAMICTOP_PTR_SIZE = 4;\n    const STATICTOP = (STATICTOP_INITIAL + DYNAMICTOP_PTR_SIZE + 15) & -16;\n    const STACKTOP = alignMemory(STACK_ALIGN, STATICTOP);\n    const STACK_BASE = STACKTOP;\n    const STACK_MAX = STACK_BASE + TOTAL_STACK;\n    const DYNAMIC_BASE = alignMemory(STACK_ALIGN, STACK_MAX);\n    const heapU8 = new Uint8Array(wasmMemory.buffer);\n    const heap32 = new Int32Array(wasmMemory.buffer);\n    const heapU32 = new Uint32Array(wasmMemory.buffer);\n    heap32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\n    const TABLE_SIZE = 6;\n    const MAX_TABLE_SIZE = 6;\n    // eslint-disable-next-line functional/no-let, @typescript-eslint/init-declarations\n    let getErrNoLocation;\n    /*\n     * note: A number of methods below are excluded from test coverage. They are\n     * a) not part of the regular usage of this library (should only be evaluated\n     * if the consumer mis-implements the library and exist only to make\n     * debugging easier) and B) already tested adequately in Emscripten, from\n     * which this section is extracted.\n     */\n    const env = {\n        DYNAMICTOP_PTR,\n        STACKTOP,\n        ___setErrNo: /* istanbul ignore next */ (value) => {\n            if (getErrNoLocation !== undefined) {\n                heap32[getErrNoLocation() >> 2] = value;\n            }\n            return value;\n        },\n        _abort: /* istanbul ignore next */ (err = 'Secp256k1 Error') => {\n            throw new Error(err);\n        },\n        // eslint-disable-next-line camelcase\n        _emscripten_memcpy_big: /* istanbul ignore next */ (dest, src, num) => {\n            heapU8.set(heapU8.subarray(src, src + num), dest);\n            return dest;\n        },\n        abort: /* istanbul ignore next */ (err = 'Secp256k1 Error') => {\n            throw new Error(err);\n        },\n        abortOnCannotGrowMemory: /* istanbul ignore next */ () => {\n            throw new Error('Secp256k1 Error: abortOnCannotGrowMemory was called.');\n        },\n        enlargeMemory: /* istanbul ignore next */ () => {\n            throw new Error('Secp256k1 Error: enlargeMemory was called.');\n        },\n        getTotalMemory: () => TOTAL_MEMORY,\n    };\n    const info = {\n        env: {\n            ...env,\n            memory: wasmMemory,\n            memoryBase: STATIC_BASE,\n            table: new WebAssembly.Table({\n                element: 'anyfunc',\n                initial: TABLE_SIZE,\n                maximum: MAX_TABLE_SIZE,\n            }),\n            tableBase: 0,\n        },\n        global: { Infinity, NaN },\n    };\n    return WebAssembly.instantiate(webassemblyBytes, info).then((result) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment\n        getErrNoLocation = result.instance.exports['___errno_location'];\n        return wrapSecp256k1Wasm(result.instance, heapU8, heapU32);\n    });\n};\n/* eslint-enable functional/immutable-data, functional/no-expression-statement, @typescript-eslint/no-magic-numbers, functional/no-conditional-statement, no-bitwise, functional/no-throw-statement */\nexport const getEmbeddedSecp256k1Binary = () => base64ToBin(secp256k1Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of\n * {@link instantiateSecp256k1Bytes} that does not require the consumer to\n * provide the secp256k1 binary buffer.\n */\nexport const instantiateSecp256k1Wasm = async () => instantiateSecp256k1WasmBytes(getEmbeddedSecp256k1Binary());\n//# sourceMappingURL=secp256k1-wasm.js.map", "// cSpell:ignore noncefp, ndata, outputlen\n/**\n * bitflags used in secp256k1's public API (translated from secp256k1.h)\n */\n/* eslint-disable no-bitwise, @typescript-eslint/no-magic-numbers, @typescript-eslint/prefer-literal-enum-member */\n/** All flags' lower 8 bits indicate what they're for. Do not use directly. */\n// const SECP256K1_FLAGS_TYPE_MASK = (1 << 8) - 1;\nconst SECP256K1_FLAGS_TYPE_CONTEXT = 1 << 0;\nconst SECP256K1_FLAGS_TYPE_COMPRESSION = 1 << 1;\n/** The higher bits contain the actual data. Do not use directly. */\nconst SECP256K1_FLAGS_BIT_CONTEXT_VERIFY = 1 << 8;\nconst SECP256K1_FLAGS_BIT_CONTEXT_SIGN = 1 << 9;\nconst SECP256K1_FLAGS_BIT_COMPRESSION = 1 << 8;\n/** Flags to pass to secp256k1_context_create. */\nconst SECP256K1_CONTEXT_VERIFY = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_VERIFY;\nconst SECP256K1_CONTEXT_SIGN = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_SIGN;\nconst SECP256K1_CONTEXT_NONE = SECP256K1_FLAGS_TYPE_CONTEXT;\n/** Flag to pass to secp256k1_ec_pubkey_serialize and secp256k1_ec_privkey_export. */\nconst SECP256K1_EC_COMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION;\nconst SECP256K1_EC_UNCOMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION;\n/**\n * Flag to pass to a Secp256k1.contextCreate method.\n *\n * The purpose of context structures is to cache large precomputed data tables\n * that are expensive to construct, and also to maintain the randomization data\n * for blinding.\n *\n * You can create a context with only VERIFY or only SIGN capabilities, or you\n * can use BOTH. (NONE can be used for conversion/serialization.)\n */\nexport var ContextFlag;\n(function (ContextFlag) {\n    ContextFlag[ContextFlag[\"NONE\"] = SECP256K1_CONTEXT_NONE] = \"NONE\";\n    ContextFlag[ContextFlag[\"VERIFY\"] = SECP256K1_CONTEXT_VERIFY] = \"VERIFY\";\n    ContextFlag[ContextFlag[\"SIGN\"] = SECP256K1_CONTEXT_SIGN] = \"SIGN\";\n    ContextFlag[ContextFlag[\"BOTH\"] = SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY] = \"BOTH\";\n})(ContextFlag || (ContextFlag = {}));\n/**\n * Flag to pass a Secp256k1 public key serialization method.\n *\n * You can indicate COMPRESSED (33 bytes, header byte 0x02 or 0x03) or\n * UNCOMPRESSED (65 bytes, header byte 0x04) format.\n */\nexport var CompressionFlag;\n(function (CompressionFlag) {\n    CompressionFlag[CompressionFlag[\"COMPRESSED\"] = SECP256K1_EC_COMPRESSED] = \"COMPRESSED\";\n    CompressionFlag[CompressionFlag[\"UNCOMPRESSED\"] = SECP256K1_EC_UNCOMPRESSED] = \"UNCOMPRESSED\";\n})(CompressionFlag || (CompressionFlag = {}));\n//# sourceMappingURL=secp256k1-wasm-types.js.map", "/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const secp256k1Base64Bytes = '';\n//# sourceMappingURL=secp256k1.base64.js.map", "/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const sha1Base64Bytes = '';\n//# sourceMappingURL=sha1.base64.js.map", "/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const sha256Base64Bytes = '';\n//# sourceMappingURL=sha256.base64.js.map", "/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const sha512Base64Bytes = '';\n//# sourceMappingURL=sha512.base64.js.map", "import { CompressionFlag, ContextFlag, instantiateSecp256k1Wasm, instantiateSecp256k1WasmBytes, } from './dependencies.js';\n/* eslint-enable @typescript-eslint/no-duplicate-enum-values */\nexport var Secp256k1Error;\n(function (Secp256k1Error) {\n    Secp256k1Error[\"unparsableSignature\"] = \"Failed to parse signature.\";\n    Secp256k1Error[\"unparsablePublicKey\"] = \"Failed to parse public key.\";\n    Secp256k1Error[\"derivePublicKeyFromInvalidPrivateKey\"] = \"Cannot derive public key from invalid private key.\";\n    Secp256k1Error[\"signWithInvalidPrivateKey\"] = \"Failed to sign message hash. The private key is not valid.\";\n    Secp256k1Error[\"recoverPublicKeyWithUnparsableSignature\"] = \"Failed to recover public key. Could not parse signature.\";\n    Secp256k1Error[\"recoverPublicKeyInvalidMaterial\"] = \"Failed to recover public key. The compact signature, recovery, or message hash is invalid.\";\n    Secp256k1Error[\"addTweakPrivateKey\"] = \"Private key is invalid or adding failed.\";\n    Secp256k1Error[\"mulTweakPrivateKey\"] = \"Private key is invalid or multiplying failed.\";\n    Secp256k1Error[\"addTweakPublicKey\"] = \"Failed to tweak public key (by addition).\";\n    Secp256k1Error[\"mulTweakPublicKey\"] = \"Failed to tweak public key (by multiplication).\";\n})(Secp256k1Error || (Secp256k1Error = {}));\n/**\n * @param secp256k1Wasm - a Secp256k1Wasm object\n * @param randomSeed - a 32-byte random seed used to randomize the context after\n * creation\n */\nconst wrapSecp256k1Wasm = (secp256k1Wasm, randomSeed) => {\n    /**\n     * Currently, this wrapper creates a context with both SIGN and VERIFY\n     * capabilities. For better initialization performance, consumers could\n     * re-implement a wrapper with only the capabilities they require.\n     */\n    const contextPtr = secp256k1Wasm.contextCreate(ContextFlag.BOTH);\n    /**\n     * Since all of these methods are single-threaded and synchronous, we can\n     * reuse allocated WebAssembly memory for each method without worrying about\n     * calls interfering with each other. Likewise, these spaces never need to be\n     * `free`d, since we will continue using them until this entire object (and\n     * with it, the entire WebAssembly instance) is garbage collected.\n     *\n     * If malicious javascript gained access to this object, it should be\n     * considered a critical vulnerability in the consumer. However, as a best\n     * practice, we zero out private keys below when we're finished with them.\n     */\n    const sigScratch = secp256k1Wasm.malloc(72 /* ByteLength.maxECDSASig */);\n    const publicKeyScratch = secp256k1Wasm.malloc(65 /* ByteLength.maxPublicKey */);\n    const messageHashScratch = secp256k1Wasm.malloc(32 /* ByteLength.messageHash */);\n    const internalPublicKeyPtr = secp256k1Wasm.malloc(64 /* ByteLength.internalPublicKey */);\n    const internalSigPtr = secp256k1Wasm.malloc(64 /* ByteLength.internalSig */);\n    const schnorrSigPtr = secp256k1Wasm.malloc(64 /* ByteLength.schnorrSig */);\n    const privateKeyPtr = secp256k1Wasm.malloc(32 /* ByteLength.privateKey */);\n    const internalRSigPtr = secp256k1Wasm.malloc(65 /* ByteLength.recoverableSig */);\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    const recoveryNumPtr = secp256k1Wasm.malloc(4);\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const recoveryNumPtrView32 = recoveryNumPtr >> 2;\n    const getRecoveryNumPtr = () => secp256k1Wasm.heapU32[recoveryNumPtrView32];\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    const lengthPtr = secp256k1Wasm.malloc(4);\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const lengthPtrView32 = lengthPtr >> 2;\n    const cloneAndPad = (value, expectedLength) => {\n        const zeroPaddedValue = new Uint8Array(expectedLength);\n        zeroPaddedValue.set(value);\n        return zeroPaddedValue;\n    };\n    const parsePublicKey = (publicKey) => {\n        const paddedPublicKey = cloneAndPad(publicKey, 65 /* ByteLength.maxPublicKey */);\n        secp256k1Wasm.heapU8.set(paddedPublicKey, publicKeyScratch);\n        return (secp256k1Wasm.pubkeyParse(contextPtr, internalPublicKeyPtr, publicKeyScratch, \n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        publicKey.length) === 1);\n    };\n    const setLengthPtr = (value) => {\n        secp256k1Wasm.heapU32.set([value], lengthPtrView32);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getLengthPtr = () => secp256k1Wasm.heapU32[lengthPtrView32];\n    const serializePublicKey = (length, flag) => {\n        setLengthPtr(length);\n        secp256k1Wasm.pubkeySerialize(contextPtr, publicKeyScratch, lengthPtr, internalPublicKeyPtr, flag);\n        return secp256k1Wasm.readHeapU8(publicKeyScratch, getLengthPtr()).slice();\n    };\n    const getSerializedPublicKey = (compressed) => compressed\n        ? serializePublicKey(33 /* ByteLength.compressedPublicKey */, CompressionFlag.COMPRESSED)\n        : serializePublicKey(65 /* ByteLength.uncompressedPublicKey */, CompressionFlag.UNCOMPRESSED);\n    const convertPublicKey = (compressed) => (publicKey) => {\n        if (!parsePublicKey(publicKey)) {\n            return Secp256k1Error.unparsablePublicKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const parseSignature = (signature, isDer) => {\n        const paddedSignature = cloneAndPad(signature, 72 /* ByteLength.maxECDSASig */);\n        secp256k1Wasm.heapU8.set(paddedSignature, sigScratch);\n        return isDer\n            ? secp256k1Wasm.signatureParseDER(contextPtr, internalSigPtr, sigScratch, signature.length) === 1\n            : secp256k1Wasm.signatureParseCompact(contextPtr, internalSigPtr, sigScratch) === 1;\n    };\n    const getCompactSig = () => {\n        secp256k1Wasm.signatureSerializeCompact(contextPtr, sigScratch, internalSigPtr);\n        return secp256k1Wasm.readHeapU8(sigScratch, 64 /* ByteLength.compactSig */).slice();\n    };\n    const getDERSig = () => {\n        setLengthPtr(72 /* ByteLength.maxECDSASig */);\n        secp256k1Wasm.signatureSerializeDER(contextPtr, sigScratch, lengthPtr, internalSigPtr);\n        return secp256k1Wasm.readHeapU8(sigScratch, getLengthPtr()).slice();\n    };\n    const convertSignature = (wasDER) => (signature) => {\n        if (!parseSignature(signature, wasDER)) {\n            return Secp256k1Error.unparsableSignature;\n        }\n        return wasDER ? getCompactSig() : getDERSig();\n    };\n    const fillPrivateKeyPtr = (privateKey) => {\n        const paddedPrivateKey = cloneAndPad(privateKey, 32 /* ByteLength.privateKey */);\n        secp256k1Wasm.heapU8.set(paddedPrivateKey, privateKeyPtr);\n    };\n    const zeroOutPtr = (pointer, bytes) => {\n        secp256k1Wasm.heapU8.fill(0, pointer, pointer + bytes);\n    };\n    const zeroOutPrivateKeyPtr = () => {\n        zeroOutPtr(privateKeyPtr, 32 /* ByteLength.privateKey */);\n    };\n    const withPrivateKey = (privateKey, instructions) => {\n        fillPrivateKeyPtr(privateKey);\n        const ret = instructions();\n        zeroOutPrivateKeyPtr();\n        return ret;\n    };\n    const derivePublicKey = (compressed) => (privateKey) => {\n        const invalid = withPrivateKey(privateKey, () => secp256k1Wasm.pubkeyCreate(contextPtr, internalPublicKeyPtr, privateKeyPtr) !== 1);\n        if (invalid) {\n            return Secp256k1Error.derivePublicKeyFromInvalidPrivateKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const fillMessageHashScratch = (messageHash) => {\n        const paddedMessageHash = cloneAndPad(messageHash, 32 /* ByteLength.messageHash */);\n        secp256k1Wasm.heapU8.set(paddedMessageHash, messageHashScratch);\n    };\n    const normalizeSignature = () => {\n        secp256k1Wasm.signatureNormalize(contextPtr, internalSigPtr, internalSigPtr);\n    };\n    const modifySignature = (isDer, normalize) => (signature) => {\n        if (!parseSignature(signature, isDer)) {\n            return Secp256k1Error.unparsableSignature;\n        }\n        if (normalize) {\n            normalizeSignature();\n        }\n        else {\n            secp256k1Wasm.signatureMalleate(contextPtr, internalSigPtr, internalSigPtr);\n        }\n        return isDer ? getDERSig() : getCompactSig();\n    };\n    const parseAndNormalizeSignature = (signature, isDer, normalize) => {\n        const ret = parseSignature(signature, isDer);\n        if (normalize) {\n            normalizeSignature();\n        }\n        return ret;\n    };\n    const signMessageHash = (isDer) => (privateKey, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return withPrivateKey(privateKey, () => {\n            const failed = secp256k1Wasm.sign(contextPtr, internalSigPtr, messageHashScratch, privateKeyPtr) !== 1;\n            if (failed) {\n                return Secp256k1Error.signWithInvalidPrivateKey;\n            }\n            if (isDer) {\n                setLengthPtr(72 /* ByteLength.maxECDSASig */);\n                secp256k1Wasm.signatureSerializeDER(contextPtr, sigScratch, lengthPtr, internalSigPtr);\n                return secp256k1Wasm.readHeapU8(sigScratch, getLengthPtr()).slice();\n            }\n            secp256k1Wasm.signatureSerializeCompact(contextPtr, sigScratch, internalSigPtr);\n            return secp256k1Wasm\n                .readHeapU8(sigScratch, 64 /* ByteLength.compactSig */)\n                .slice();\n        });\n    };\n    const signMessageHashSchnorr = () => (privateKey, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return withPrivateKey(privateKey, () => {\n            const failed = secp256k1Wasm.schnorrSign(contextPtr, schnorrSigPtr, messageHashScratch, privateKeyPtr) !== 1;\n            if (failed) {\n                return Secp256k1Error.signWithInvalidPrivateKey;\n            }\n            return secp256k1Wasm\n                .readHeapU8(schnorrSigPtr, 64 /* ByteLength.schnorrSig */)\n                .slice();\n        });\n    };\n    const verifyMessage = (messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return (secp256k1Wasm.verify(contextPtr, internalSigPtr, messageHashScratch, internalPublicKeyPtr) === 1);\n    };\n    const verifySignature = (isDer, normalize) => (signature, publicKey, messageHash) => parsePublicKey(publicKey) &&\n        parseAndNormalizeSignature(signature, isDer, normalize) &&\n        verifyMessage(messageHash);\n    const verifyMessageSchnorr = (messageHash, signature) => {\n        fillMessageHashScratch(messageHash);\n        const paddedSignature = cloneAndPad(signature, 64 /* ByteLength.schnorrSig */);\n        secp256k1Wasm.heapU8.set(paddedSignature, schnorrSigPtr);\n        return (secp256k1Wasm.schnorrVerify(contextPtr, schnorrSigPtr, messageHashScratch, internalPublicKeyPtr) === 1);\n    };\n    const verifySignatureSchnorr = () => (signature, publicKey, messageHash) => parsePublicKey(publicKey)\n        ? verifyMessageSchnorr(messageHash, signature)\n        : false;\n    const signMessageHashRecoverable = (privateKey, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return withPrivateKey(privateKey, () => {\n            if (secp256k1Wasm.signRecoverable(contextPtr, internalRSigPtr, messageHashScratch, privateKeyPtr) !== 1) {\n                return Secp256k1Error.signWithInvalidPrivateKey;\n            }\n            secp256k1Wasm.recoverableSignatureSerialize(contextPtr, sigScratch, recoveryNumPtr, internalRSigPtr);\n            return {\n                recoveryId: getRecoveryNumPtr(),\n                signature: secp256k1Wasm\n                    .readHeapU8(sigScratch, 64 /* ByteLength.compactSig */)\n                    .slice(),\n            };\n        });\n    };\n    const recoverPublicKey = (compressed) => (signature, recoveryId, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        const paddedSignature = cloneAndPad(signature, 72 /* ByteLength.maxECDSASig */);\n        secp256k1Wasm.heapU8.set(paddedSignature, sigScratch);\n        if (secp256k1Wasm.recoverableSignatureParse(contextPtr, internalRSigPtr, sigScratch, recoveryId) !== 1) {\n            return Secp256k1Error.recoverPublicKeyWithUnparsableSignature;\n        }\n        if (secp256k1Wasm.recover(contextPtr, internalPublicKeyPtr, internalRSigPtr, messageHashScratch) !== 1) {\n            return Secp256k1Error.recoverPublicKeyInvalidMaterial;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const addTweakPrivateKey = (privateKey, tweakValue) => {\n        fillMessageHashScratch(tweakValue);\n        return withPrivateKey(privateKey, () => {\n            if (secp256k1Wasm.privkeyTweakAdd(contextPtr, privateKeyPtr, messageHashScratch) !== 1) {\n                return Secp256k1Error.addTweakPrivateKey;\n            }\n            return secp256k1Wasm\n                .readHeapU8(privateKeyPtr, 32 /* ByteLength.privateKey */)\n                .slice();\n        });\n    };\n    const mulTweakPrivateKey = (privateKey, tweakValue) => {\n        fillMessageHashScratch(tweakValue);\n        return withPrivateKey(privateKey, () => {\n            if (secp256k1Wasm.privkeyTweakMul(contextPtr, privateKeyPtr, messageHashScratch) !== 1) {\n                return Secp256k1Error.mulTweakPrivateKey;\n            }\n            return secp256k1Wasm\n                .readHeapU8(privateKeyPtr, 32 /* ByteLength.privateKey */)\n                .slice();\n        });\n    };\n    const addTweakPublicKey = (compressed) => (publicKey, tweakValue) => {\n        if (!parsePublicKey(publicKey)) {\n            return Secp256k1Error.unparsablePublicKey;\n        }\n        fillMessageHashScratch(tweakValue);\n        if (secp256k1Wasm.pubkeyTweakAdd(contextPtr, internalPublicKeyPtr, messageHashScratch) !== 1) {\n            return Secp256k1Error.addTweakPublicKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const mulTweakPublicKey = (compressed) => (publicKey, tweakValue) => {\n        if (!parsePublicKey(publicKey)) {\n            return Secp256k1Error.unparsablePublicKey;\n        }\n        fillMessageHashScratch(tweakValue);\n        if (secp256k1Wasm.pubkeyTweakMul(contextPtr, internalPublicKeyPtr, messageHashScratch) !== 1) {\n            return Secp256k1Error.mulTweakPublicKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    if (randomSeed !== undefined) {\n        const randomSeedPtr = messageHashScratch;\n        const paddedRandomSeed = cloneAndPad(randomSeed, 32 /* ByteLength.randomSeed */);\n        secp256k1Wasm.heapU8.set(paddedRandomSeed, randomSeedPtr);\n        secp256k1Wasm.contextRandomize(contextPtr, randomSeedPtr);\n        zeroOutPtr(randomSeedPtr, 32 /* ByteLength.randomSeed */);\n    }\n    return {\n        addTweakPrivateKey,\n        addTweakPublicKeyCompressed: addTweakPublicKey(true),\n        addTweakPublicKeyUncompressed: addTweakPublicKey(false),\n        compressPublicKey: convertPublicKey(true),\n        derivePublicKeyCompressed: derivePublicKey(true),\n        derivePublicKeyUncompressed: derivePublicKey(false),\n        malleateSignatureCompact: modifySignature(false, false),\n        malleateSignatureDER: modifySignature(true, false),\n        mulTweakPrivateKey,\n        mulTweakPublicKeyCompressed: mulTweakPublicKey(true),\n        mulTweakPublicKeyUncompressed: mulTweakPublicKey(false),\n        normalizeSignatureCompact: modifySignature(false, true),\n        normalizeSignatureDER: modifySignature(true, true),\n        recoverPublicKeyCompressed: recoverPublicKey(true),\n        recoverPublicKeyUncompressed: recoverPublicKey(false),\n        signMessageHashCompact: signMessageHash(false),\n        signMessageHashDER: signMessageHash(true),\n        signMessageHashRecoverableCompact: signMessageHashRecoverable,\n        signMessageHashSchnorr: signMessageHashSchnorr(),\n        signatureCompactToDER: convertSignature(false),\n        signatureDERToCompact: convertSignature(true),\n        uncompressPublicKey: convertPublicKey(false),\n        validatePrivateKey: (privateKey) => withPrivateKey(privateKey, () => secp256k1Wasm.seckeyVerify(contextPtr, privateKeyPtr) === 1),\n        validatePublicKey: parsePublicKey,\n        verifySignatureCompact: verifySignature(false, true),\n        verifySignatureCompactLowS: verifySignature(false, false),\n        verifySignatureDER: verifySignature(true, true),\n        verifySignatureDERLowS: verifySignature(true, false),\n        verifySignatureSchnorr: verifySignatureSchnorr(),\n    };\n};\n/**\n * This method is like {@link instantiateSecp256k1}, but requires the consumer\n * to `Window.fetch` or `fs.readFile` the `secp256k1.wasm` binary and provide it\n * to this method as `webassemblyBytes`. This skips a base64 decoding of an\n * embedded binary.\n *\n * ### Randomizing the Context with `randomSeed`\n * This method also accepts an optional, 32-byte `randomSeed`, which is passed\n * to the `contextRandomize` method in the underlying WebAssembly.\n *\n * In the secp256k1 C library, context randomization is an additional layer of\n * security from side-channel attacks that attempt to extract private key\n * information by analyzing things like a CPU's emitted radio frequencies or\n * power usage.\n *\n * As most applications also benefit from deterministic, reproducible behavior,\n * context is not randomized by default in Libauth. To randomize the context,\n * provide a 32-byte Uint8Array of cryptographically strong random values\n * (e.g. `Crypto.getRandomValues()`).\n *\n * @param webassemblyBytes - an ArrayBuffer containing the bytes from Libauth's\n * `secp256k1.wasm` binary. Providing this buffer manually may be faster than\n * the internal base64 decode that happens in {@link instantiateSecp256k1}.\n * @param randomSeed - a 32-byte random seed used to randomize the secp256k1\n * context after creation. See above for details.\n */\nexport const instantiateSecp256k1Bytes = async (webassemblyBytes, randomSeed) => wrapSecp256k1Wasm(await instantiateSecp256k1WasmBytes(webassemblyBytes), randomSeed);\n/**\n * Create and wrap a Secp256k1 WebAssembly instance to expose a set of\n * purely-functional Secp256k1 methods. For slightly faster initialization, use\n * {@link instantiateSecp256k1Bytes}.\n *\n * @param randomSeed - a 32-byte random seed used to randomize the secp256k1\n * context after creation. See the description in\n * {@link instantiateSecp256k1Bytes} for details.\n */\nexport const instantiateSecp256k1 = async (randomSeed) => wrapSecp256k1Wasm(await instantiateSecp256k1Wasm(), randomSeed);\n//# sourceMappingURL=secp256k1.js.map", "import { base64ToBin, instantiateRustWasm, sha1Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate sha1 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSha1}.\n *\n * @param webassemblyBytes - A buffer containing the sha1 binary.\n */\nexport const instantiateSha1Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './sha1', 'sha1', 'sha1_init', 'sha1_update', 'sha1_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedSha1Binary = () => base64ToBin(sha1Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of {@link instantiateSha1Bytes}\n * that does not require the consumer to provide the sha1 binary buffer.\n */\nexport const instantiateSha1 = async () => instantiateSha1Bytes(getEmbeddedSha1Binary());\n//# sourceMappingURL=sha1.js.map", "import { base64ToBin, instantiateRustWasm, sha256Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate sha256 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSha256}.\n *\n * @param webassemblyBytes - A buffer containing the sha256 binary.\n */\nexport const instantiateSha256Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './sha256', 'sha256', 'sha256_init', 'sha256_update', 'sha256_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedSha256Binary = () => base64ToBin(sha256Base64Bytes).buffer;\n/**\n * An ultimately-portable (but possibly slower) version of\n * {@link instantiateSha256Bytes} which does not require the consumer to provide\n * the sha256 binary buffer.\n */\nexport const instantiateSha256 = async () => instantiateSha256Bytes(getEmbeddedSha256Binary());\n//# sourceMappingURL=sha256.js.map", "import { base64ToBin, instantiateRustWasm, sha512Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate sha512 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSha512}.\n *\n * @param webassemblyBytes - A buffer containing the sha512 binary.\n */\nexport const instantiateSha512Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './sha512', 'sha512', 'sha512_init', 'sha512_update', 'sha512_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedSha512Binary = () => base64ToBin(sha512Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of {@link instantiateSha512Bytes}\n * that does not require the consumer to provide the sha512 binary buffer.\n */\nexport const instantiateSha512 = async () => instantiateSha512Bytes(getEmbeddedSha512Binary());\n//# sourceMappingURL=sha512.js.map", "import { sha256 as internalSha256, sha512 as internalSha512, } from '../crypto/default-crypto-instances.js';\nimport { flattenBinArray } from '../format/format.js';\n/**\n * Instantiate a hash-based message authentication code (HMAC) function as\n * specified by RFC 2104.\n *\n * @param hashFunction - a cryptographic hash function that iterates a basic\n * compression function over blocks of data\n * @param blockByteLength - the byte-length of blocks used in `hashFunction`\n */\nexport const instantiateHmacFunction = (hashFunction, blockByteLength) => (secret, message) => {\n    const key = new Uint8Array(blockByteLength).fill(0);\n    // eslint-disable-next-line functional/no-expression-statement\n    key.set(secret.length > blockByteLength ? hashFunction(secret) : secret, 0);\n    const innerPaddingFill = 0x36;\n    const innerPadding = new Uint8Array(blockByteLength).fill(innerPaddingFill);\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n    const innerPrefix = innerPadding.map((pad, index) => pad ^ key[index]);\n    const innerContent = flattenBinArray([innerPrefix, message]);\n    const innerResult = hashFunction(innerContent);\n    const outerPaddingFill = 0x5c;\n    const outerPadding = new Uint8Array(blockByteLength).fill(outerPaddingFill);\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n    const outerPrefix = outerPadding.map((pad, index) => pad ^ key[index]);\n    return hashFunction(flattenBinArray([outerPrefix, innerResult]));\n};\nconst sha256BlockByteLength = 64;\n/**\n * Create a hash-based message authentication code using HMAC-SHA256 as\n * specified in `RFC 4231`. Returns a 32-byte Uint8Array.\n *\n * Secrets longer than the block byte-length (64 bytes) are hashed before\n * use, shortening their length to the minimum recommended length (32 bytes).\n * See `RFC 2104` for details.\n *\n * @param secret - the secret key (recommended length: 32-64 bytes)\n * @param message - the message to authenticate\n * @param sha256 - an implementation of Sha256\n */\nexport const hmacSha256 = (secret, message, sha256 = internalSha256) => instantiateHmacFunction(sha256.hash, sha256BlockByteLength)(secret, message);\nconst sha512BlockByteLength = 128;\n/**\n * Create a hash-based message authentication code using HMAC-SHA512 as\n * specified in `RFC 4231`. Returns a 64-byte Uint8Array.\n *\n * Secrets longer than the block byte-length (128 bytes) are hashed before\n * use, shortening their length to the minimum recommended length (64 bytes).\n * See `RFC 2104` for details.\n *\n * @param secret - the secret key (recommended length: 64-128 bytes)\n * @param message - the message to authenticate\n * @param sha512 - an implementation of Sha512\n */\nexport const hmacSha512 = (secret, message, sha512 = internalSha512) => instantiateHmacFunction(sha512.hash, sha512BlockByteLength)(secret, message);\n//# sourceMappingURL=hmac.js.map", "export {};\n//# sourceMappingURL=secp256k1-types.js.map", "/**\n * The list of 32 symbols used in Bech32 encoding.\n */\n// cspell: disable-next-line\nexport const bech32CharacterSet = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/**\n * An object mapping each of the 32 symbols used in Bech32 encoding to their respective index in the character set.\n */\n// prettier-ignore\nexport const bech32CharacterSetIndex = { q: 0, p: 1, z: 2, r: 3, y: 4, '9': 5, x: 6, '8': 7, g: 8, f: 9, '2': 10, t: 11, v: 12, d: 13, w: 14, '0': 15, s: 16, '3': 17, j: 18, n: 19, '5': 20, '4': 21, k: 22, h: 23, c: 24, e: 25, '6': 26, m: 27, u: 28, a: 29, '7': 30, l: 31 }; // eslint-disable-line sort-keys, @typescript-eslint/naming-convention\nexport var BitRegroupingError;\n(function (BitRegroupingError) {\n    BitRegroupingError[\"integerOutOfRange\"] = \"An integer provided in the source array is out of the range of the specified source word length.\";\n    BitRegroupingError[\"hasDisallowedPadding\"] = \"Encountered padding when padding was disallowed.\";\n    BitRegroupingError[\"requiresDisallowedPadding\"] = \"Encoding requires padding while padding is disallowed.\";\n})(BitRegroupingError || (BitRegroupingError = {}));\n/* eslint-disable functional/no-let, no-bitwise, functional/no-expression-statement, functional/no-conditional-statement, complexity */\n/**\n * Given an array of integers, regroup bits from `sourceWordLength` to\n * `resultWordLength`, returning a new array of integers between 0 and\n * toWordLength^2.\n *\n * Note, if `bin` is within the range of `sourceWordLength` and `padding` is\n * `true`, this method will never error.\n *\n * A.K.A. `convertbits`\n */\n// Derived from: https://github.com/sipa/bech32\nexport const regroupBits = ({ bin, sourceWordLength, resultWordLength, allowPadding = true, }) => {\n    let accumulator = 0;\n    let bits = 0;\n    const result = [];\n    const maxResultInt = (1 << resultWordLength) - 1;\n    // eslint-disable-next-line functional/no-loop-statement, @typescript-eslint/prefer-for-of, no-plusplus\n    for (let p = 0; p < bin.length; ++p) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = bin[p];\n        if (value < 0 || value >> sourceWordLength !== 0) {\n            return BitRegroupingError.integerOutOfRange;\n        }\n        accumulator = (accumulator << sourceWordLength) | value;\n        bits += sourceWordLength;\n        // eslint-disable-next-line functional/no-loop-statement\n        while (bits >= resultWordLength) {\n            bits -= resultWordLength;\n            // eslint-disable-next-line functional/immutable-data\n            result.push((accumulator >> bits) & maxResultInt);\n        }\n    }\n    if (allowPadding) {\n        if (bits > 0) {\n            // eslint-disable-next-line functional/immutable-data\n            result.push((accumulator << (resultWordLength - bits)) & maxResultInt);\n        }\n    }\n    else if (bits >= sourceWordLength) {\n        return BitRegroupingError.hasDisallowedPadding;\n    }\n    else if (((accumulator << (resultWordLength - bits)) & maxResultInt) > 0) {\n        return BitRegroupingError.requiresDisallowedPadding;\n    }\n    return result;\n};\n/* eslint-enable functional/no-let, no-bitwise, functional/no-expression-statement, functional/no-conditional-statement, complexity */\n/**\n * Encode an array of numbers as a base32 string using the Bech32 character set.\n *\n * Note, this method always completes. For a valid result, all items in\n * `base32IntegerArray` must be between `0` and `32`. To prepare another array\n * type for encoding, see {@link regroupBits}.\n *\n * @param base32IntegerArray - the array of 5-bit integers to encode\n */\nexport const encodeBech32 = (base32IntegerArray) => {\n    // eslint-disable-next-line functional/no-let\n    let result = '';\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of, functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let i = 0; i < base32IntegerArray.length; i++) {\n        // eslint-disable-next-line functional/no-expression-statement, @typescript-eslint/no-non-null-assertion\n        result += bech32CharacterSet[base32IntegerArray[i]];\n    }\n    return result;\n};\n/**\n * Decode a Bech32-encoded string into an array of 5-bit integers.\n *\n * Note, this method always completes. If `validBech32` is not valid bech32,\n * an incorrect result will be returned. If `validBech32` is potentially\n * malformed, check it with {@link isBech32CharacterSet} before calling\n * this method.\n *\n * @param validBech32 - the bech32-encoded string to decode\n */\nexport const decodeBech32 = (validBech32) => {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of, functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let i = 0; i < validBech32.length; i++) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        result.push(bech32CharacterSetIndex[validBech32[i]]);\n    }\n    return result;\n};\nconst nonBech32Characters = new RegExp(`[^${bech32CharacterSet}]`, 'u');\nconst base32WordLength = 5;\nconst base256WordLength = 8;\n/**\n * Validate that a string uses only characters from the bech32 character set.\n *\n * @param maybeBech32 - a string to test for valid Bech32 encoding\n */\nexport const isBech32CharacterSet = (maybeBech32) => !nonBech32Characters.test(maybeBech32);\nexport var Bech32DecodingError;\n(function (Bech32DecodingError) {\n    Bech32DecodingError[\"notBech32CharacterSet\"] = \"Bech32 decoding error: input contains characters outside of the Bech32 character set.\";\n})(Bech32DecodingError || (Bech32DecodingError = {}));\n/**\n * Convert a padded bech32-encoded string (without checksum) to a Uint8Array,\n * removing the padding. If the string is not valid Bech32, or if the array of\n * 5-bit integers would require padding to be regrouped into 8-bit bytes, this\n * method returns an error message.\n *\n * This method is the reverse of {@link binToBech32Padded}.\n *\n * @param bech32Padded - the padded bech32-encoded string to decode\n */\nexport const bech32PaddedToBin = (bech32Padded) => {\n    const result = isBech32CharacterSet(bech32Padded)\n        ? regroupBits({\n            allowPadding: false,\n            bin: decodeBech32(bech32Padded),\n            resultWordLength: base256WordLength,\n            sourceWordLength: base32WordLength,\n        })\n        : Bech32DecodingError.notBech32CharacterSet;\n    return typeof result === 'string' ? result : Uint8Array.from(result);\n};\n/**\n * Convert a Uint8Array to a padded bech32-encoded string (without a checksum),\n * adding padding bits as necessary to convert all bytes to 5-bit integers.\n *\n * This method is the reverse of {@link bech32PaddedToBin}.\n *\n * @param bytes - the Uint8Array to bech32 encode\n */\nexport const binToBech32Padded = (bytes) => encodeBech32(regroupBits({\n    bin: bytes,\n    resultWordLength: base32WordLength,\n    sourceWordLength: base256WordLength,\n}));\n//# sourceMappingURL=bech32.js.map", "import { formatError } from '../format/format.js';\nimport { decodeBech32, encodeBech32, isBech32CharacterSet, regroupBits, } from './bech32.js';\nexport var CashAddressNetworkPrefix;\n(function (CashAddressNetworkPrefix) {\n    CashAddressNetworkPrefix[\"mainnet\"] = \"bitcoincash\";\n    CashAddressNetworkPrefix[\"testnet\"] = \"bchtest\";\n    CashAddressNetworkPrefix[\"regtest\"] = \"bchreg\";\n})(CashAddressNetworkPrefix || (CashAddressNetworkPrefix = {}));\n/**\n * The CashAddress specification standardizes the format of the version byte:\n * - Most significant bit: reserved, must be `0`\n * - next 4 bits: Address Type\n * - 3 least significant bits: Payload Size\n *\n * Two Address Type values are currently standardized:\n * - 0 (`0b0000`): P2PKH\n * - 1 (`0b0001`): P2SH\n *\n * And two are proposed by `CHIP-2022-02-CashTokens`:\n * - 2 (`0b0010`): P2PKH + Token Support\n * - 3 (`0b0011`): P2SH + Token Support\n *\n * The CashAddress specification standardizes expected payload size using\n * {@link CashAddressSizeBits}. Currently, two size bit values are in use by\n * standard CashAddress types:\n * - `0` (`0b000`): 20 bytes (in use by `p2pkh` and `p2sh20`)\n * - `3` (`0b011`): 32 bytes (in use by `p2sh32`)\n */\nexport var CashAddressVersionByte;\n(function (CashAddressVersionByte) {\n    /**\n     * Pay to Public Key Hash (P2PKH): `0b00000000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0000` (P2PKH)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2pkh\"] = 0] = \"p2pkh\";\n    /**\n     * 20-byte Pay to Script Hash (P2SH20): `0b00001000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0001` (P2SH)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh20\"] = 8] = \"p2sh20\";\n    /**\n     * 32-byte Pay to Script Hash (P2SH20): `0b00001000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0001` (P2SH)\n     * - Size bits: `011` (32 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh32\"] = 11] = \"p2sh32\";\n    /**\n     * Pay to Public Key Hash (P2PKH) with token support: `0b00010000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0010` (P2PKH + Tokens)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2pkhWithTokens\"] = 16] = \"p2pkhWithTokens\";\n    /**\n     * 20-byte Pay to Script Hash (P2SH20) with token support: `0b00011000`\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0011` (P2SH + Tokens)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh20WithTokens\"] = 24] = \"p2sh20WithTokens\";\n    /**\n     * 32-byte Pay to Script Hash (P2SH32) with token support: `0b00011011`\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0011` (P2SH + Tokens)\n     * - Size bits: `011` (32 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh32WithTokens\"] = 27] = \"p2sh32WithTokens\";\n})(CashAddressVersionByte || (CashAddressVersionByte = {}));\n/**\n * The address types currently defined in the CashAddress specification. See\n * also: {@link CashAddressVersionByte}.\n */\nexport var CashAddressType;\n(function (CashAddressType) {\n    /**\n     * Pay to Public Key Hash (P2PKH): `0b0000`\n     */\n    CashAddressType[\"p2pkh\"] = \"p2pkh\";\n    /**\n     * Pay to Script Hash (P2SH): `0b0001`\n     */\n    CashAddressType[\"p2sh\"] = \"p2sh\";\n    /**\n     * Pay to Public Key Hash (P2PKH) with token support: `0b0010`\n     */\n    CashAddressType[\"p2pkhWithTokens\"] = \"p2pkhWithTokens\";\n    /**\n     * Pay to Script Hash (P2SH) with token support: `0b0011`\n     */\n    CashAddressType[\"p2shWithTokens\"] = \"p2shWithTokens\";\n})(CashAddressType || (CashAddressType = {}));\n/**\n * The address type bits currently defined in the CashAddress specification.\n * These map to: {@link CashAddressType}.\n */\nexport var CashAddressTypeBits;\n(function (CashAddressTypeBits) {\n    /**\n     * Pay to Public Key Hash (P2PKH)\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2pkh\"] = 0] = \"p2pkh\";\n    /**\n     * Pay to Script Hash (P2SH)\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2sh\"] = 1] = \"p2sh\";\n    /**\n     * Pay to Public Key Hash (P2PKH) with token support\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2pkhWithTokens\"] = 2] = \"p2pkhWithTokens\";\n    /**\n     * Pay to Script Hash (P2SH) with token support\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2shWithTokens\"] = 3] = \"p2shWithTokens\";\n})(CashAddressTypeBits || (CashAddressTypeBits = {}));\nexport const cashAddressTypeToTypeBits = {\n    [CashAddressType.p2pkh]: CashAddressTypeBits.p2pkh,\n    [CashAddressType.p2sh]: CashAddressTypeBits.p2sh,\n    [CashAddressType.p2pkhWithTokens]: CashAddressTypeBits.p2pkhWithTokens,\n    [CashAddressType.p2shWithTokens]: CashAddressTypeBits.p2shWithTokens,\n};\nexport const cashAddressTypeBitsToType = {\n    [CashAddressTypeBits.p2pkh]: CashAddressType.p2pkh,\n    [CashAddressTypeBits.p2sh]: CashAddressType.p2sh,\n    [CashAddressTypeBits.p2pkhWithTokens]: CashAddressType.p2pkhWithTokens,\n    [CashAddressTypeBits.p2shWithTokens]: CashAddressType.p2shWithTokens,\n};\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const cashAddressSizeBitsToLength = {\n    0: 20,\n    1: 24,\n    2: 28,\n    3: 32,\n    4: 40,\n    5: 48,\n    6: 56,\n    7: 64,\n};\nexport const cashAddressLengthToSizeBits = {\n    20: 0,\n    24: 1,\n    28: 2,\n    32: 3,\n    40: 4,\n    48: 5,\n    56: 6,\n    64: 7,\n};\n/**\n * Encode a CashAddress version byte for the given address type and payload\n * length. See {@link CashAddressVersionByte} for more information.\n *\n * The `type` parameter must be a number between `0` and `15`, and `bitLength`\n * must be one of the standardized lengths. To use the contents of a variable,\n * cast it to {@link CashAddressType} or {@link CashAddressSize} respectively,\n * e.g.:\n * ```ts\n * const type = 3 as CashAddressType;\n * const size = 160 as CashAddressSize;\n * getCashAddressVersionByte(type, size);\n * ```\n * @param typeBits - the address type bit of the payload being encoded\n * @param length - the length of the payload being encoded\n */\nexport const encodeCashAddressVersionByte = (typeBits, length) => \n// eslint-disable-next-line no-bitwise\n(typeBits << 3 /* Constants.cashAddressTypeBitsShift */) |\n    cashAddressLengthToSizeBits[length];\nexport var CashAddressVersionByteDecodingError;\n(function (CashAddressVersionByteDecodingError) {\n    CashAddressVersionByteDecodingError[\"reservedBitSet\"] = \"Reserved bit is set.\";\n})(CashAddressVersionByteDecodingError || (CashAddressVersionByteDecodingError = {}));\n/**\n * Decode a CashAddress version byte. For a list of known versions, see\n * {@link CashAddressVersionByte}.\n *\n * @param version - the version byte to decode\n */\nexport const decodeCashAddressVersionByte = (version) => \n// eslint-disable-next-line no-negated-condition, no-bitwise\n(version & 128 /* Constants.cashAddressReservedBitMask */) !== 0\n    ? CashAddressVersionByteDecodingError.reservedBitSet\n    : {\n        length: cashAddressSizeBitsToLength[\n        // eslint-disable-next-line no-bitwise\n        (version &\n            7 /* Constants.cashAddressSizeBits */)],\n        typeBits: \n        // eslint-disable-next-line no-bitwise\n        (version >>> 3 /* Constants.cashAddressTypeBitsShift */) &\n            15 /* Constants.cashAddressTypeBits */,\n    };\n/**\n * Convert a string into an array of 5-bit numbers, representing the characters\n * in a case-insensitive way.\n * @param prefix - the prefix to mask\n */\nexport const maskCashAddressPrefix = (prefix) => {\n    const result = [];\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let i = 0; i < prefix.length; i++) {\n        // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data\n        result.push(prefix.charCodeAt(i) & 31 /* Constants.asciiCaseInsensitiveBits */);\n    }\n    return result;\n};\n// prettier-ignore\nconst bech32GeneratorMostSignificantByte = [0x98, 0x79, 0xf3, 0xae, 0x1e]; // eslint-disable-line @typescript-eslint/no-magic-numbers\n// prettier-ignore\nconst bech32GeneratorRemainingBytes = [0xf2bc8e61, 0xb76d99e2, 0x3e5fb3c4, 0x2eabe2a8, 0x4f43e470]; // eslint-disable-line @typescript-eslint/no-magic-numbers\n/**\n * Perform the CashAddress polynomial modulo operation, which is based on the\n * Bech32 polynomial modulo operation, but the returned checksum is 40 bits,\n * rather than 30.\n *\n * A.K.A. `PolyMod`\n *\n * @remarks\n * Notes from C++ implementation:\n * This function will compute what 8 5-bit values to XOR into the last 8 input\n * values, in order to make the checksum 0. These 8 values are packed together\n * in a single 40-bit integer. The higher bits correspond to earlier values.\n *\n * The input is interpreted as a list of coefficients of a polynomial over F\n * = GF(32), with an implicit 1 in front. If the input is [v0,v1,v2,v3,v4],\n * that polynomial is v(x) = 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4.\n * The implicit 1 guarantees that [v0,v1,v2,...] has a distinct checksum\n * from [0,v0,v1,v2,...].\n *\n * The output is a 40-bit integer whose 5-bit groups are the coefficients of\n * the remainder of v(x) mod g(x), where g(x) is the cashaddr generator, x^8\n * + [19]*x^7 + [3]*x^6 + [25]*x^5 + [11]*x^4 + [25]*x^3 + [3]*x^2 + [19]*x\n * + [1]. g(x) is chosen in such a way that the resulting code is a BCH\n * code, guaranteeing detection of up to 4 errors within a window of 1025\n * characters. Among the various possible BCH codes, one was selected to in\n * fact guarantee detection of up to 5 errors within a window of 160\n * characters and 6 errors within a window of 126 characters. In addition,\n * the code guarantee the detection of a burst of up to 8 errors.\n *\n * Note that the coefficients are elements of GF(32), here represented as\n * decimal numbers between []. In this finite field, addition is just XOR of\n * the corresponding numbers. For example, [27] + [13] = [27 ^ 13] = [22].\n * Multiplication is more complicated, and requires treating the bits of\n * values themselves as coefficients of a polynomial over a smaller field,\n * GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example,\n * [5] * [26] = (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 +\n * a^3 + a) = a^6 + a^5 + a^4 + a = a^3 + 1 (mod a^5 + a^3 + 1) = [9].\n *\n * During the course of the loop below, `c` contains the bit-packed\n * coefficients of the polynomial constructed from just the values of v that\n * were processed so far, mod g(x). In the above example, `c` initially\n * corresponds to 1 mod (x), and after processing 2 inputs of v, it\n * corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the\n * starting value for `c`.\n *\n * @param v - Array of 5-bit integers over which the checksum is to be computed\n */\n// Derived from the `bitcore-lib-cash` implementation (does not require BigInt): https://github.com/bitpay/bitcore\nexport const cashAddressPolynomialModulo = (v) => {\n    /* eslint-disable functional/no-let, functional/no-loop-statement, functional/no-expression-statement, no-bitwise, @typescript-eslint/no-magic-numbers */\n    let mostSignificantByte = 0;\n    let lowerBytes = 1;\n    let c = 0;\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of, no-plusplus\n    for (let j = 0; j < v.length; j++) {\n        c = mostSignificantByte >>> 3;\n        mostSignificantByte &= 0x07;\n        mostSignificantByte <<= 5;\n        mostSignificantByte |= lowerBytes >>> 27;\n        lowerBytes &= 0x07ffffff;\n        lowerBytes <<= 5;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        lowerBytes ^= v[j];\n        // eslint-disable-next-line no-plusplus\n        for (let i = 0; i < bech32GeneratorMostSignificantByte.length; ++i) {\n            // eslint-disable-next-line functional/no-conditional-statement\n            if (c & (1 << i)) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                mostSignificantByte ^= bech32GeneratorMostSignificantByte[i];\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                lowerBytes ^= bech32GeneratorRemainingBytes[i];\n            }\n        }\n    }\n    lowerBytes ^= 1;\n    // eslint-disable-next-line functional/no-conditional-statement\n    if (lowerBytes < 0) {\n        lowerBytes ^= 1 << 31;\n        lowerBytes += (1 << 30) * 2;\n    }\n    return mostSignificantByte * (1 << 30) * 4 + lowerBytes;\n    /* eslint-enable functional/no-let, functional/no-loop-statement, functional/no-expression-statement, no-bitwise, @typescript-eslint/no-magic-numbers */\n};\n/**\n * Convert the checksum returned by {@link cashAddressPolynomialModulo} to an\n * array of 5-bit positive integers that can be Base32 encoded.\n * @param checksum - a 40 bit checksum returned by\n * {@link cashAddressPolynomialModulo}\n */\nexport const cashAddressChecksumToUint5Array = (checksum) => {\n    const result = [];\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let i = 0; i < 8 /* Constants.base256WordLength */; ++i) {\n        // eslint-disable-next-line functional/no-expression-statement, no-bitwise, @typescript-eslint/no-magic-numbers, functional/immutable-data\n        result.push(checksum & 31);\n        // eslint-disable-next-line functional/no-expression-statement, @typescript-eslint/no-magic-numbers, no-param-reassign\n        checksum /= 32;\n    }\n    // eslint-disable-next-line functional/immutable-data\n    return result.reverse();\n};\n/**\n * Encode a payload as a CashAddress-like string using the CashAddress format.\n *\n * To encode a standard CashAddress, use {@link encodeCashAddress}.\n *\n * @param prefix - a valid prefix indicating the network for which to encode the\n * address – must be only lowercase letters (for standard CashAddress prefixes,\n * see {@link CashAddressNetworkPrefix})\n * @param version - a single byte indicating the version of this address (for\n * standard CashAddress versions, see {@link CashAddressVersionByte})\n * @param payload - the payload to encode\n */\nexport const encodeCashAddressFormat = (prefix, version, payload) => {\n    const checksum40BitPlaceholder = [0, 0, 0, 0, 0, 0, 0, 0];\n    const payloadContents = regroupBits({\n        bin: Uint8Array.from([version, ...payload]),\n        resultWordLength: 5 /* Constants.base32WordLength */,\n        sourceWordLength: 8 /* Constants.base256WordLength */,\n    });\n    const checksumContents = [\n        ...maskCashAddressPrefix(prefix),\n        0 /* Constants.payloadSeparator */,\n        ...payloadContents,\n        ...checksum40BitPlaceholder,\n    ];\n    const checksum = cashAddressPolynomialModulo(checksumContents);\n    const encoded = [\n        ...payloadContents,\n        ...cashAddressChecksumToUint5Array(checksum),\n    ];\n    return `${prefix}:${encodeBech32(encoded)}`;\n};\nexport var CashAddressEncodingError;\n(function (CashAddressEncodingError) {\n    CashAddressEncodingError[\"unsupportedPayloadLength\"] = \"Error encoding CashAddress: a payload of this length can not be encoded as a valid CashAddress.\";\n    CashAddressEncodingError[\"noTypeBitsValueStandardizedForP2pk\"] = \"Error encoding CashAddress: no CashAddress type bit has been standardized for P2PK locking bytecode.\";\n    CashAddressEncodingError[\"unknownLockingBytecodeType\"] = \"Error encoding CashAddress: unknown locking bytecode type.\";\n})(CashAddressEncodingError || (CashAddressEncodingError = {}));\nexport const isValidCashAddressPayloadLength = (length) => cashAddressLengthToSizeBits[length] !== undefined;\n/**\n * Encode a payload as a CashAddress. This function is similar to\n * {@link encodeCashAddress} but supports non-standard `prefix`es and `type`s.\n *\n * **Note: this function cannot prevent all implementation errors via types.**\n * The function will throw if `payload` is not a valid\n * {@link CashAddressSupportedLength}. Confirm the length of untrusted inputs\n * before providing them to this function.\n *\n * For other address standards that closely follow the CashAddress\n * specification (but have alternative version byte requirements), use\n * {@link encodeCashAddressFormat}.\n *\n * @param prefix - a valid prefix indicating the network for which to encode the\n * address (usually a {@link CashAddressNetworkPrefix}) – must be only lowercase\n * letters\n * @param typeBits - the type bit to encode in the version byte – must be a\n * number between `0` and `15`\n * @param payload - the payload to encode (for P2PKH, the public key hash; for\n * P2SH, the redeem bytecode hash)\n */\nexport const encodeCashAddressNonStandard = (prefix, typeBits, payload) => {\n    const { length } = payload;\n    if (!isValidCashAddressPayloadLength(length)) {\n        // eslint-disable-next-line functional/no-throw-statement\n        throw new Error(formatError(CashAddressEncodingError.unsupportedPayloadLength, `Payload length: ${length}.`));\n    }\n    return encodeCashAddressFormat(prefix, encodeCashAddressVersionByte(typeBits, length), payload);\n};\n/**\n * Encode a payload as a CashAddress.\n *\n * **Note: this function cannot prevent all implementation errors via types.**\n * The function will throw if `payload` is not a valid\n * {@link CashAddressSupportedLength}. Confirm the length of untrusted inputs\n * before providing them to this function.\n *\n * To encode a CashAddress with a custom/unknown prefix or type bit, see\n * {@link encodeCashAddressNonStandard}. For other address standards that\n * closely follow the CashAddress specification (but have alternative version\n * byte requirements), use {@link encodeCashAddressFormat}.\n *\n * @param prefix - the network for which to encode the address\n * (a {@link CashAddressNetworkPrefix})\n * @param type - the address type (a {@link CashAddressType})\n * @param payload - the payload to encode – for P2PKH, the public key hash; for\n * P2SH, the redeem bytecode hash\n */\nexport const encodeCashAddress = (prefix, type, payload) => encodeCashAddressNonStandard(prefix, cashAddressTypeToTypeBits[type], payload);\nexport var CashAddressDecodingError;\n(function (CashAddressDecodingError) {\n    CashAddressDecodingError[\"improperPadding\"] = \"Error decoding CashAddress: the payload is improperly padded.\";\n    CashAddressDecodingError[\"invalidCharacters\"] = \"Error decoding CashAddress: the payload contains non-bech32 characters.\";\n    CashAddressDecodingError[\"invalidChecksum\"] = \"Error decoding CashAddress: invalid checksum - please review the address for errors.\";\n    CashAddressDecodingError[\"invalidFormat\"] = \"Error decoding CashAddress: CashAddresses should be of the form \\\"prefix:payload\\\".\";\n    CashAddressDecodingError[\"mismatchedPayloadLength\"] = \"Error decoding CashAddress: mismatched payload length for specified address version.\";\n    CashAddressDecodingError[\"reservedByte\"] = \"Error decoding CashAddress: unknown CashAddress version, reserved byte set.\";\n    CashAddressDecodingError[\"unknownAddressType\"] = \"Error decoding CashAddress: unknown CashAddress type.\";\n})(CashAddressDecodingError || (CashAddressDecodingError = {}));\n/**\n * Decode and validate a string using the CashAddress format. This is more\n * lenient than {@link decodeCashAddress}, which also validates the contents of\n * the version byte.\n *\n * Note, this method requires `address` to include a network prefix. To\n * decode a string with an unknown prefix, try\n * {@link decodeCashAddressFormatWithoutPrefix}.\n *\n * @param address - the CashAddress-like string to decode\n */\n// eslint-disable-next-line complexity\nexport const decodeCashAddressFormat = (address) => {\n    const parts = address.toLowerCase().split(':');\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (parts.length !== 2 || parts[0] === '' || parts[1] === '') {\n        return CashAddressDecodingError.invalidFormat;\n    }\n    const [prefix, payload] = parts;\n    if (!isBech32CharacterSet(payload)) {\n        return CashAddressDecodingError.invalidCharacters;\n    }\n    const decodedPayload = decodeBech32(payload);\n    const polynomial = [\n        ...maskCashAddressPrefix(prefix),\n        0 /* Constants.payloadSeparator */,\n        ...decodedPayload,\n    ];\n    if (cashAddressPolynomialModulo(polynomial) !== 0) {\n        return CashAddressDecodingError.invalidChecksum;\n    }\n    const checksum40BitPlaceholderLength = 8;\n    const payloadContents = regroupBits({\n        allowPadding: false,\n        bin: decodedPayload.slice(0, -checksum40BitPlaceholderLength),\n        resultWordLength: 8 /* Constants.base256WordLength */,\n        sourceWordLength: 5 /* Constants.base32WordLength */,\n    });\n    if (typeof payloadContents === 'string') {\n        return CashAddressDecodingError.improperPadding;\n    }\n    const [version, ...contents] = payloadContents;\n    const result = Uint8Array.from(contents);\n    return { payload: result, prefix, version };\n};\n/**\n * Decode and validate a CashAddress, strictly checking the version byte\n * according to the CashAddress specification. This is important for error\n * detection in CashAddresses.\n *\n * This function is similar to {@link decodeCashAddress} but supports\n * non-standard `type`s.\n *\n * For other address-like standards that closely follow the CashAddress\n * specification (but have alternative version byte requirements), use\n * {@link decodeCashAddressFormat}.\n *\n * Note, this method requires that CashAddresses include a network prefix. To\n * decode an address with an unknown prefix, try\n * {@link decodeCashAddressFormatWithoutPrefix}.\n *\n * @param address - the CashAddress to decode\n */\nexport const decodeCashAddressNonStandard = (address) => {\n    const decoded = decodeCashAddressFormat(address);\n    if (typeof decoded === 'string') {\n        return decoded;\n    }\n    const info = decodeCashAddressVersionByte(decoded.version);\n    if (info === CashAddressVersionByteDecodingError.reservedBitSet) {\n        return CashAddressDecodingError.reservedByte;\n    }\n    if (decoded.payload.length !== info.length) {\n        return CashAddressDecodingError.mismatchedPayloadLength;\n    }\n    return {\n        payload: decoded.payload,\n        prefix: decoded.prefix,\n        typeBits: info.typeBits,\n    };\n};\n/**\n * Decode and validate a CashAddress, strictly checking the version byte\n * according to the CashAddress specification. This is important for error\n * detection in CashAddresses.\n *\n * To decode CashAddresses with non-standard `type`s,\n * see {@link decodeCashAddressNonStandard}.\n *\n * For other address-like standards that closely follow the CashAddress\n * specification (but have alternative version byte requirements), use\n * {@link decodeCashAddressFormat}.\n *\n * Note, this method requires that CashAddresses include a network prefix. To\n * decode an address with an unknown prefix, try\n * {@link decodeCashAddressFormatWithoutPrefix}.\n *\n * @param address - the CashAddress to decode\n */\nexport const decodeCashAddress = (address) => {\n    const decoded = decodeCashAddressNonStandard(address);\n    if (typeof decoded === 'string') {\n        return decoded;\n    }\n    const type = cashAddressTypeBitsToType[decoded.typeBits];\n    if (type === undefined) {\n        return `${CashAddressDecodingError.unknownAddressType} Type bit value: ${decoded.typeBits}.`;\n    }\n    return {\n        payload: decoded.payload,\n        prefix: decoded.prefix,\n        type,\n    };\n};\n/**\n * Attempt to decode and validate a CashAddress against a list of possible\n * prefixes. If the correct prefix is known, use {@link decodeCashAddress}.\n *\n * @param address - the CashAddress to decode\n * @param possiblePrefixes - the network prefixes to try\n */\n// decodeCashAddressWithoutPrefix\nexport const decodeCashAddressFormatWithoutPrefix = (address, possiblePrefixes = [\n    CashAddressNetworkPrefix.mainnet,\n    CashAddressNetworkPrefix.testnet,\n    CashAddressNetworkPrefix.regtest,\n]) => {\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const prefix of possiblePrefixes) {\n        const attempt = decodeCashAddressFormat(`${prefix}:${address}`);\n        if (attempt !== CashAddressDecodingError.invalidChecksum) {\n            return attempt;\n        }\n    }\n    return CashAddressDecodingError.invalidChecksum;\n};\n/**\n * Convert a CashAddress polynomial to CashAddress string format.\n *\n * @remarks\n * CashAddress polynomials take the form:\n *\n * `[lowest 5 bits of each prefix character] 0 [payload + checksum]`\n *\n * This method remaps the 5-bit integers in the prefix location to the matching\n * ASCII lowercase characters, replaces the separator with `:`, and then Bech32\n * encodes the remaining payload and checksum.\n *\n * @param polynomial - an array of 5-bit integers representing the terms of a\n * CashAddress polynomial\n */\nexport const cashAddressPolynomialToCashAddress = (polynomial) => {\n    const separatorPosition = polynomial.indexOf(0);\n    const prefix = polynomial\n        .slice(0, separatorPosition)\n        .map((integer) => String.fromCharCode(96 /* Constants.asciiLowerCaseStart */ + integer))\n        .join('');\n    const contents = encodeBech32(polynomial.slice(separatorPosition + 1));\n    return `${prefix}:${contents}`;\n};\nexport var CashAddressCorrectionError;\n(function (CashAddressCorrectionError) {\n    CashAddressCorrectionError[\"tooManyErrors\"] = \"This address has more than 2 errors and cannot be corrected.\";\n})(CashAddressCorrectionError || (CashAddressCorrectionError = {}));\n/**\n * Attempt to correct up to 2 errors in a CashAddress. The CashAddress must be\n * properly formed (include a prefix and only contain Bech32 characters).\n *\n * ## **Improper use of this method carries the risk of lost funds.**\n *\n * It is strongly advised that this method only be used under explicit user\n * control. With enough errors, this method is likely to find a plausible\n * correction for any address (but for which no private key exists). This is\n * effectively equivalent to burning the funds.\n *\n * Only 2 substitution errors can be corrected (or a single swap) – deletions\n * and insertions (errors that shift many other characters and change the\n * length of the payload) can never be safely corrected and will produce an\n * error.\n *\n * Errors can be corrected in both the prefix and the payload, but attempting to\n * correct errors in the prefix prior to this method can improve results, e.g.\n * for `bchtest:qq2azmyyv6dtgczexyalqar70q036yund53jvfde0x`, the string\n * `bchtest:qq2azmyyv6dtgczexyalqar70q036yund53jvfdecc` can be corrected, while\n * `typo:qq2azmyyv6dtgczexyalqar70q036yund53jvfdecc` can not.\n *\n * @param address - the CashAddress on which to attempt error correction\n */\n// Derived from: https://github.com/deadalnix/cashaddressed\n// eslint-disable-next-line complexity\nexport const attemptCashAddressFormatErrorCorrection = (address) => {\n    const parts = address.toLowerCase().split(':');\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (parts.length !== 2 || parts[0] === '' || parts[1] === '') {\n        return CashAddressDecodingError.invalidFormat;\n    }\n    const [prefix, payload] = parts;\n    if (!isBech32CharacterSet(payload)) {\n        return CashAddressDecodingError.invalidCharacters;\n    }\n    const decodedPayload = decodeBech32(payload);\n    const polynomial = [...maskCashAddressPrefix(prefix), 0, ...decodedPayload];\n    const originalChecksum = cashAddressPolynomialModulo(polynomial);\n    if (originalChecksum === 0) {\n        return {\n            address: cashAddressPolynomialToCashAddress(polynomial),\n            corrections: [],\n        };\n    }\n    const syndromes = {};\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let term = 0; term < polynomial.length; term++) {\n        // eslint-disable-next-line functional/no-loop-statement\n        for (\n        // eslint-disable-next-line functional/no-let\n        let errorVector = 1; errorVector < 32 /* Constants.finiteFieldOrder */; \n        // eslint-disable-next-line no-plusplus\n        errorVector++) {\n            // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data\n            polynomial[term] ^= errorVector;\n            const correct = cashAddressPolynomialModulo(polynomial);\n            if (correct === 0) {\n                return {\n                    address: cashAddressPolynomialToCashAddress(polynomial),\n                    corrections: [term],\n                };\n            }\n            // eslint-disable-next-line no-bitwise\n            const s0 = (BigInt(correct) ^ BigInt(originalChecksum)).toString();\n            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n            syndromes[s0] = term * 32 /* Constants.finiteFieldOrder */ + errorVector;\n            // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data\n            polynomial[term] ^= errorVector;\n        }\n    }\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const [s0, pe] of Object.entries(syndromes)) {\n        // eslint-disable-next-line no-bitwise\n        const s1Location = (BigInt(s0) ^ BigInt(originalChecksum)).toString();\n        const s1 = syndromes[s1Location];\n        if (s1 !== undefined) {\n            const correctionIndex1 = Math.trunc(pe / 32 /* Constants.finiteFieldOrder */);\n            const correctionIndex2 = Math.trunc(s1 / 32 /* Constants.finiteFieldOrder */);\n            // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data\n            polynomial[correctionIndex1] ^= pe % 32 /* Constants.finiteFieldOrder */;\n            // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data\n            polynomial[correctionIndex2] ^= s1 % 32 /* Constants.finiteFieldOrder */;\n            return {\n                address: cashAddressPolynomialToCashAddress(polynomial),\n                corrections: [correctionIndex1, correctionIndex2].sort((a, b) => a - b),\n            };\n        }\n    }\n    return CashAddressCorrectionError.tooManyErrors;\n};\n//# sourceMappingURL=cash-address.js.map", "import { sha256 as internalSha256 } from '../crypto/crypto.js';\nimport { formatError, unknownValue } from '../format/format.js';\nimport { Base58AddressFormatVersion, decodeBase58Address, encodeBase58AddressFormat, } from './base58-address.js';\nimport { CashAddressEncodingError, CashAddressType, decodeCashAddress, encodeCashAddress, } from './cash-address.js';\n/**\n * The most common address types used on bitcoin and bitcoin-like networks. Each\n * address type represents a commonly used locking bytecode pattern.\n *\n * @remarks\n * Addresses are strings that encode information about the network and\n * `lockingBytecode` to which a transaction output can pay.\n *\n * Several address formats exist – `Base58Address` was the format used by the\n * original satoshi client, and is still in use on several active chains (see\n * {@link encodeBase58Address}). On Bitcoin Cash, the `CashAddress` standard is\n * most common (See {@link encodeCashAddress}).\n */\nexport var LockingBytecodeType;\n(function (LockingBytecodeType) {\n    /**\n     * Pay to Public Key (P2PK). This address type is uncommon, and primarily\n     * occurs in early blocks because the original satoshi implementation mined\n     * rewards to P2PK addresses.\n     *\n     * There are no standardized address formats for representing a P2PK address.\n     * Instead, most applications use the `AddressType.p2pkh` format.\n     */\n    LockingBytecodeType[\"p2pk\"] = \"P2PK\";\n    /**\n     * Pay to Public Key Hash (P2PKH). The most common address type. P2PKH\n     * addresses lock funds using a single private key.\n     */\n    LockingBytecodeType[\"p2pkh\"] = \"P2PKH\";\n    /**\n     * 20-byte Pay to Script Hash (P2SH20). An address type that locks funds to\n     * the 20-byte hash of a script provided in the spending transaction. See\n     * BIPs 13 and 16 for details.\n     */\n    LockingBytecodeType[\"p2sh20\"] = \"P2SH20\";\n    /**\n     * 32-byte Pay to Script Hash (P2SH32). An address type that locks funds to\n     * the 32-byte hash of a script provided in the spending transaction.\n     */\n    LockingBytecodeType[\"p2sh32\"] = \"P2SH32\";\n})(LockingBytecodeType || (LockingBytecodeType = {}));\nexport const isPayToPublicKeyUncompressed = (lockingBytecode) => lockingBytecode.length === 67 /* PayToPublicKeyUncompressed.length */ &&\n    lockingBytecode[0] === 65 /* Opcodes.OP_PUSHBYTES_65 */ &&\n    lockingBytecode[66 /* PayToPublicKeyUncompressed.lastElement */] ===\n        172 /* Opcodes.OP_CHECKSIG */;\nexport const isPayToPublicKeyCompressed = (lockingBytecode) => lockingBytecode.length === 35 /* PayToPublicKeyCompressed.length */ &&\n    lockingBytecode[0] === 33 /* Opcodes.OP_PUSHBYTES_33 */ &&\n    lockingBytecode[34 /* PayToPublicKeyCompressed.lastElement */] === 172 /* Opcodes.OP_CHECKSIG */;\nexport const isPayToPublicKey = (lockingBytecode) => isPayToPublicKeyCompressed(lockingBytecode) ||\n    isPayToPublicKeyUncompressed(lockingBytecode);\n// eslint-disable-next-line complexity\nexport const isPayToPublicKeyHash = (lockingBytecode) => lockingBytecode.length === 25 /* PayToPublicKeyHash.length */ &&\n    lockingBytecode[0] === 118 /* Opcodes.OP_DUP */ &&\n    lockingBytecode[1] === 169 /* Opcodes.OP_HASH160 */ &&\n    lockingBytecode[2] === 20 /* Opcodes.OP_PUSHBYTES_20 */ &&\n    lockingBytecode[23] === 136 /* Opcodes.OP_EQUALVERIFY */ &&\n    lockingBytecode[24] === 172 /* Opcodes.OP_CHECKSIG */;\nexport const isPayToScriptHash20 = (lockingBytecode) => lockingBytecode.length === 23 /* PayToScriptHash20.length */ &&\n    lockingBytecode[0] === 169 /* Opcodes.OP_HASH160 */ &&\n    lockingBytecode[1] === 20 /* Opcodes.OP_PUSHBYTES_20 */ &&\n    lockingBytecode[22 /* PayToScriptHash20.lastElement */] === 135 /* Opcodes.OP_EQUAL */;\nexport const isPayToScriptHash32 = (lockingBytecode) => lockingBytecode.length === 35 /* PayToScriptHash32.length */ &&\n    lockingBytecode[0] === 170 /* Opcodes.OP_HASH256 */ &&\n    lockingBytecode[1] === 32 /* Opcodes.OP_PUSHBYTES_32 */ &&\n    lockingBytecode[34 /* PayToScriptHash32.lastElement */] === 135 /* Opcodes.OP_EQUAL */;\n/**\n * Attempt to match a lockingBytecode to a standard address type for use in\n * address encoding. (See {@link LockingBytecodeType} for details.)\n *\n * For a locking bytecode matching the Pay to Public Key Hash (P2PKH) pattern,\n * the returned `type` is {@link LockingBytecodeType.p2pkh} and `payload` is the\n * `HASH160` of the public key.\n *\n * For a locking bytecode matching the 20-byte Pay to Script Hash (P2SH20)\n * pattern, the returned `type` is {@link LockingBytecodeType.p2sh20} and\n * `payload` is the `HASH160` of the redeeming bytecode, A.K.A. \"redeem\n * script hash\".\n *\n * For a locking bytecode matching the Pay to Public Key (P2PK) pattern, the\n * returned `type` is {@link LockingBytecodeType.p2pk} and `payload` is the full\n * public key.\n *\n * Any other locking bytecode will return a `type` of\n * {@link LockingBytecodeType.unknown} and a payload of the\n * unmodified `bytecode`.\n *\n * @param bytecode - the locking bytecode to match\n */\n// eslint-disable-next-line complexity\nexport const lockingBytecodeToAddressContents = (bytecode) => {\n    if (isPayToPublicKeyHash(bytecode)) {\n        return {\n            payload: bytecode.slice(3 /* AddressPayload.p2pkhStart */, 23 /* AddressPayload.p2pkhEnd */),\n            type: LockingBytecodeType.p2pkh,\n        };\n    }\n    if (isPayToScriptHash20(bytecode)) {\n        return {\n            payload: bytecode.slice(2 /* AddressPayload.p2sh20Start */, 22 /* AddressPayload.p2sh20End */),\n            type: LockingBytecodeType.p2sh20,\n        };\n    }\n    if (isPayToScriptHash32(bytecode)) {\n        return {\n            payload: bytecode.slice(2 /* AddressPayload.p2sh32Start */, 34 /* AddressPayload.p2sh32End */),\n            type: LockingBytecodeType.p2sh32,\n        };\n    }\n    if (isPayToPublicKeyUncompressed(bytecode)) {\n        return {\n            payload: bytecode.slice(1 /* AddressPayload.p2pkUncompressedStart */, 66 /* AddressPayload.p2pkUncompressedEnd */),\n            type: LockingBytecodeType.p2pk,\n        };\n    }\n    if (isPayToPublicKeyCompressed(bytecode)) {\n        return {\n            payload: bytecode.slice(1 /* AddressPayload.p2pkCompressedStart */, 34 /* AddressPayload.p2pkCompressedEnd */),\n            type: LockingBytecodeType.p2pk,\n        };\n    }\n    return { payload: bytecode.slice(), type: 'unknown' };\n};\n/**\n * Given the 20-byte {@link hash160} of a compressed public key, return a P2PKH\n * locking bytecode:\n * `OP_DUP OP_HASH160 OP_PUSHBYTES_20 publicKeyHash OP_EQUALVERIFY OP_CHECKSIG`.\n *\n * This method does not validate `publicKeyHash` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param publicKeyHash - the 20-byte hash of the compressed public key\n * @returns\n */\nexport const encodeLockingBytecodeP2pkh = (publicKeyHash) => Uint8Array.from([\n    118 /* Opcodes.OP_DUP */,\n    169 /* Opcodes.OP_HASH160 */,\n    20 /* Opcodes.OP_PUSHBYTES_20 */,\n    ...publicKeyHash,\n    136 /* Opcodes.OP_EQUALVERIFY */,\n    172 /* Opcodes.OP_CHECKSIG */,\n]);\n/**\n * Given the 20-byte {@link hash160} of a P2SH20 redeem bytecode, encode a\n * P2SH20 locking bytecode:\n * `OP_HASH160 OP_PUSHBYTES_20 redeemBytecodeHash OP_EQUAL`.\n *\n * This method does not validate `p2sh20Hash` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param p2sh20Hash - the 20-byte, p2sh20 redeem bytecode hash\n */\nexport const encodeLockingBytecodeP2sh20 = (p2sh20Hash) => Uint8Array.from([\n    169 /* Opcodes.OP_HASH160 */,\n    20 /* Opcodes.OP_PUSHBYTES_20 */,\n    ...p2sh20Hash,\n    135 /* Opcodes.OP_EQUAL */,\n]);\n/**\n * Given the 32-byte {@link hash256} of a P2SH32 redeem bytecode, encode a\n * P2SH32 locking bytecode:\n * `OP_HASH256 OP_PUSHBYTES_32 redeemBytecodeHash OP_EQUAL`.\n *\n * This method does not validate `p2sh32Hash` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param p2sh32Hash - the 32-byte, p2sh32 redeem bytecode hash\n */\nexport const encodeLockingBytecodeP2sh32 = (p2sh32Hash) => Uint8Array.from([\n    170 /* Opcodes.OP_HASH256 */,\n    32 /* Opcodes.OP_PUSHBYTES_32 */,\n    ...p2sh32Hash,\n    135 /* Opcodes.OP_EQUAL */,\n]);\n/**\n * Given a 33-byte compressed or 65-byte uncompressed public key, encode a P2PK\n * locking bytecode: `OP_PUSHBYTES_33 publicKey OP_CHECKSIG` or\n * `OP_PUSHBYTES_65 publicKey OP_CHECKSIG`.\n *\n * This method does not validate `publicKey` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param publicKey - the 33-byte or 65-byte public key\n */\nexport const encodeLockingBytecodeP2pk = (publicKey) => publicKey.length === 33 /* AddressPayload.compressedPublicKeyLength */\n    ? Uint8Array.from([\n        33 /* Opcodes.OP_PUSHBYTES_33 */,\n        ...publicKey,\n        172 /* Opcodes.OP_CHECKSIG */,\n    ])\n    : Uint8Array.from([\n        65 /* Opcodes.OP_PUSHBYTES_65 */,\n        ...publicKey,\n        172 /* Opcodes.OP_CHECKSIG */,\n    ]);\n/**\n * Get the locking bytecode for a {@link KnownAddressTypeContents}. See\n * {@link lockingBytecodeToAddressContents} for details.\n *\n * @param addressContents - the `AddressContents` to encode\n */\nexport const addressContentsToLockingBytecode = ({ payload, type, }) => {\n    if (type === LockingBytecodeType.p2pkh) {\n        return encodeLockingBytecodeP2pkh(payload);\n    }\n    if (type === LockingBytecodeType.p2sh20) {\n        return encodeLockingBytecodeP2sh20(payload);\n    }\n    if (type === LockingBytecodeType.p2sh32) {\n        return encodeLockingBytecodeP2sh32(payload);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (type === LockingBytecodeType.p2pk) {\n        return encodeLockingBytecodeP2pk(payload);\n    }\n    return unknownValue(type, `Unrecognized addressContents type: ${type}`);\n};\n/**\n * Encode a locking bytecode as a CashAddress given a network prefix.\n *\n * If `bytecode` matches a standard pattern, it is encoded using the proper\n * address type and returned as a valid CashAddress (string).\n *\n * If `bytecode` cannot be encoded as an address (i.e. because the pattern is\n * not standard), the resulting {@link AddressContents} is returned.\n *\n * @param bytecode - the locking bytecode to encode\n * @param prefix - the network prefix to use, e.g. `bitcoincash`, `bchtest`, or\n * `bchreg`, defaults to `bitcoincash`\n * @param options - an object describing address options, defaults to\n * `{ tokenSupport: false }`\n */\n// eslint-disable-next-line complexity\nexport const lockingBytecodeToCashAddress = (bytecode, prefix = 'bitcoincash', options = { tokenSupport: false }) => {\n    const contents = lockingBytecodeToAddressContents(bytecode);\n    if (contents.type === LockingBytecodeType.p2pkh) {\n        return options.tokenSupport\n            ? encodeCashAddress(prefix, CashAddressType.p2pkhWithTokens, contents.payload)\n            : encodeCashAddress(prefix, CashAddressType.p2pkh, contents.payload);\n    }\n    if (contents.type === LockingBytecodeType.p2sh20 ||\n        contents.type === LockingBytecodeType.p2sh32) {\n        return options.tokenSupport\n            ? encodeCashAddress(prefix, CashAddressType.p2shWithTokens, contents.payload)\n            : encodeCashAddress(prefix, CashAddressType.p2sh, contents.payload);\n    }\n    if (contents.type === 'P2PK') {\n        return {\n            error: CashAddressEncodingError.noTypeBitsValueStandardizedForP2pk,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (contents.type === 'unknown') {\n        return { error: CashAddressEncodingError.unknownLockingBytecodeType };\n    }\n    return unknownValue(contents.type, `Unrecognized locking bytecode type: ${contents.type}`);\n};\nexport var LockingBytecodeGenerationError;\n(function (LockingBytecodeGenerationError) {\n    LockingBytecodeGenerationError[\"unsupportedPayloadLength\"] = \"Error generating locking bytecode: no standard locking bytecode patterns support a payload of this length.\";\n})(LockingBytecodeGenerationError || (LockingBytecodeGenerationError = {}));\n/**\n * Convert a CashAddress to its respective locking bytecode.\n *\n * This method returns the locking bytecode and network prefix. If an error\n * occurs, an error message is returned as a string.\n *\n * @param address - the CashAddress to convert\n */\n// eslint-disable-next-line complexity\nexport const cashAddressToLockingBytecode = (address) => {\n    const decoded = decodeCashAddress(address);\n    if (typeof decoded === 'string')\n        return decoded;\n    if (decoded.payload.length !== 20 /* AddressPayload.p2sh20Length */ &&\n        decoded.payload.length !== 32 /* AddressPayload.p2sh32Length */) {\n        return formatError(LockingBytecodeGenerationError.unsupportedPayloadLength, `Payload length: ${decoded.payload.length}`);\n    }\n    if (decoded.type === CashAddressType.p2pkh ||\n        decoded.type === CashAddressType.p2pkhWithTokens) {\n        return {\n            bytecode: addressContentsToLockingBytecode({\n                payload: decoded.payload,\n                type: LockingBytecodeType.p2pkh,\n            }),\n            options: {\n                tokenSupport: decoded.type === CashAddressType.p2pkhWithTokens,\n            },\n            prefix: decoded.prefix,\n        };\n    }\n    if (decoded.type === CashAddressType.p2sh ||\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        decoded.type === CashAddressType.p2shWithTokens) {\n        return {\n            bytecode: addressContentsToLockingBytecode({\n                payload: decoded.payload,\n                type: decoded.payload.length === 32 /* AddressPayload.p2sh32Length */\n                    ? LockingBytecodeType.p2sh32\n                    : LockingBytecodeType.p2sh20,\n            }),\n            options: {\n                tokenSupport: decoded.type === CashAddressType.p2shWithTokens,\n            },\n            prefix: decoded.prefix,\n        };\n    }\n    return unknownValue(decoded.type, `Unrecognized address type: ${decoded.type}`);\n};\n/**\n * Encode a locking bytecode as a Base58Address for a given network.\n *\n * If `bytecode` matches a standard pattern, it is encoded using the proper\n * address type and returned as a valid Base58Address (string).\n *\n * If `bytecode` cannot be encoded as an address (i.e. because the pattern is\n * not standard), the resulting {@link AddressContents} is returned.\n *\n * Note, Base58Addresses cannot accept tokens; to accept tokens,\n * use {@link lockingBytecodeToCashAddress} with `options.tokenSupport` set\n * to `true`.\n *\n * @param bytecode - the locking bytecode to encode\n * @param network - the network for which to encode the address (`mainnet`,\n * `testnet`, or 'copayBCH'), defaults to `mainnet`\n * @param sha256 - an implementation of sha256 (defaults to the internal WASM\n * implementation)\n */\nexport const lockingBytecodeToBase58Address = (bytecode, network = 'mainnet', sha256 = internalSha256) => {\n    const contents = lockingBytecodeToAddressContents(bytecode);\n    if (contents.type === LockingBytecodeType.p2pkh) {\n        return encodeBase58AddressFormat({\n            copayBCH: Base58AddressFormatVersion.p2pkhCopayBCH,\n            mainnet: Base58AddressFormatVersion.p2pkh,\n            testnet: Base58AddressFormatVersion.p2pkhTestnet,\n        }[network], contents.payload, sha256);\n    }\n    if (contents.type === LockingBytecodeType.p2sh20) {\n        return encodeBase58AddressFormat({\n            copayBCH: Base58AddressFormatVersion.p2sh20CopayBCH,\n            mainnet: Base58AddressFormatVersion.p2sh20,\n            testnet: Base58AddressFormatVersion.p2sh20Testnet,\n        }[network], contents.payload, sha256);\n    }\n    return contents;\n};\n/**\n * Convert a Base58Address to its respective locking bytecode.\n *\n * This method returns the locking bytecode and network version. If an error\n * occurs, an error message is returned as a string.\n *\n * @param address - the CashAddress to convert\n */\nexport const base58AddressToLockingBytecode = (address, sha256 = internalSha256) => {\n    const decoded = decodeBase58Address(address, sha256);\n    if (typeof decoded === 'string')\n        return decoded;\n    return {\n        bytecode: addressContentsToLockingBytecode({\n            payload: decoded.payload,\n            type: [\n                Base58AddressFormatVersion.p2pkh,\n                Base58AddressFormatVersion.p2pkhCopayBCH,\n                Base58AddressFormatVersion.p2pkhTestnet,\n            ].includes(decoded.version)\n                ? LockingBytecodeType.p2pkh\n                : LockingBytecodeType.p2sh20,\n        }),\n        version: decoded.version,\n    };\n};\n//# sourceMappingURL=locking-bytecode.js.map", "export * from './hd-key.js';\nexport * from './key-utils.js';\nexport * from './wallet-import-format.js';\n//# sourceMappingURL=key.js.map", "/* eslint-disable max-lines */\nimport { hmacSha512, ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha256 as internalSha256, sha512 as internalSha512, } from '../crypto/crypto.js';\nimport { base58ToBin, BaseConversionError, bigIntToBinUint256BEClamped, binToBase58, binToBigIntUint256BE, flattenBinArray, numberToBinUint32BE, } from '../format/format.js';\nimport { validateSecp256k1PrivateKey } from './key-utils.js';\n/**\n * The HMAC SHA-512 key used by BIP32, \"Bitcoin seed\"\n * (`utf8ToBin('Bitcoin seed')`)\n */\nconst bip32HmacSha512Key = Uint8Array.from([\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100,\n]);\nconst halfHmacSha512Length = 32;\n/**\n * Derive an {@link HdPrivateNode} from the provided seed following the BIP32\n * specification. A seed should include between 16 bytes and 64 bytes of\n * entropy (recommended: 32 bytes).\n *\n * @param seed - the entropy from which to derive the {@link HdPrivateNode}\n * @param assumeValidity - if set, the derived private key will not be checked\n * for validity, and will be assumed valid if `true` or invalid if `false` (this\n * is useful for testing)\n * @param crypto - an optional object containing an implementation of sha512\n * to use\n */\nexport const deriveHdPrivateNodeFromSeed = (seed, assumeValidity, crypto = { sha512: internalSha512 }) => {\n    const mac = hmacSha512(bip32HmacSha512Key, seed, crypto.sha512);\n    const privateKey = mac.slice(0, halfHmacSha512Length);\n    const chainCode = mac.slice(halfHmacSha512Length);\n    const depth = 0;\n    const childIndex = 0;\n    const parentFingerprint = Uint8Array.from([0, 0, 0, 0]);\n    const valid = assumeValidity ?? validateSecp256k1PrivateKey(privateKey);\n    return (valid\n        ? { chainCode, childIndex, depth, parentFingerprint, privateKey, valid }\n        : {\n            chainCode,\n            childIndex,\n            depth,\n            invalidPrivateKey: privateKey,\n            parentFingerprint,\n            valid,\n        });\n};\n/**\n * Derive the public identifier for a given {@link HdPrivateNode}. This is used\n * to uniquely identify HD nodes in software. The first 4 bytes of this\n * identifier are considered its \"fingerprint\".\n *\n * @param hdPrivateNode - the {@link HdPrivateNode} from which to derive the\n * public identifier (not require to be valid)\n * @param crypto - an optional object containing implementations implementations\n * of sha256, ripemd160, and secp256k1 compressed public key derivation to use\n */\nexport const deriveHdPrivateNodeIdentifier = (hdPrivateNode, crypto = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha256: internalSha256,\n}) => {\n    const publicKey = crypto.secp256k1.derivePublicKeyCompressed(hdPrivateNode.privateKey);\n    if (typeof publicKey === 'string')\n        return publicKey;\n    return crypto.ripemd160.hash(crypto.sha256.hash(publicKey));\n};\n/**\n * Derive the public identifier for a given {@link HdPublicNode}. This is used\n * to uniquely identify HD nodes in software. The first 4 bytes of this\n * identifier are considered its fingerprint.\n *\n * @param node - the {@link HdPublicNode} from which to derive the identifier\n * @param crypto - an optional object containing implementations of sha256 and\n * ripemd160 to use\n */\nexport const deriveHdPublicNodeIdentifier = (node, crypto = { ripemd160: internalRipemd160, sha256: internalSha256 }) => crypto.ripemd160.hash(crypto.sha256.hash(node.publicKey));\n/**\n * The 4-byte version indicating the network and type of an {@link HdPrivateKey}\n * or {@link HdPublicKey}.\n */\nexport var HdKeyVersion;\n(function (HdKeyVersion) {\n    /**\n     * Version indicating the HD key is an {@link HdPrivateKey} intended for use\n     * on the main network. Base58 encoding at the expected length of an HD key\n     * results in a prefix of `xprv`.\n     *\n     * Hex: `0x0488ade4`\n     */\n    HdKeyVersion[HdKeyVersion[\"mainnetPrivateKey\"] = 76066276] = \"mainnetPrivateKey\";\n    /**\n     * Version indicating the HD key is an {@link HdPrivateKey} intended for use\n     * on the main network. Base58 encoding at the expected length of an HD key\n     * results in a prefix of `xpub`.\n     *\n     * Hex: `0x0488b21e`\n     */\n    HdKeyVersion[HdKeyVersion[\"mainnetPublicKey\"] = 76067358] = \"mainnetPublicKey\";\n    /**\n     * Version indicating the HD key is an {@link HdPrivateKey} intended for use\n     * on the test network. Base58 encoding at the expected length of an HD key\n     * results in a prefix of `tprv`.\n     *\n     * Hex: `0x04358394`\n     */\n    HdKeyVersion[HdKeyVersion[\"testnetPrivateKey\"] = 70615956] = \"testnetPrivateKey\";\n    /**\n     * Version indicating the HD key is an {@link HdPrivateKey} intended for use\n     * on the test network. Base58 encoding at the expected length of an HD key\n     * results in a prefix of `tpub`.\n     *\n     * Hex: `0x043587cf`\n     */\n    HdKeyVersion[HdKeyVersion[\"testnetPublicKey\"] = 70617039] = \"testnetPublicKey\";\n})(HdKeyVersion || (HdKeyVersion = {}));\n/**\n * An error in the decoding of an HD public or private key.\n */\nexport var HdKeyDecodingError;\n(function (HdKeyDecodingError) {\n    HdKeyDecodingError[\"incorrectLength\"] = \"HD key decoding error: length is incorrect (must encode 82 bytes).\";\n    HdKeyDecodingError[\"invalidChecksum\"] = \"HD key decoding error: checksum is invalid.\";\n    HdKeyDecodingError[\"invalidPrivateNode\"] = \"HD key decoding error: the key for this HD private node is not a valid Secp256k1 private key.\";\n    HdKeyDecodingError[\"missingPrivateKeyPaddingByte\"] = \"HD key decoding error: version indicates a private key, but the key data is missing a padding byte.\";\n    HdKeyDecodingError[\"privateKeyExpected\"] = \"HD key decoding error: expected an HD private key, but encountered an HD public key.\";\n    HdKeyDecodingError[\"publicKeyExpected\"] = \"HD key decoding error: expected an HD public key, but encountered an HD private key.\";\n    HdKeyDecodingError[\"unknownCharacter\"] = \"HD key decoding error: key includes a non-base58 character.\";\n    HdKeyDecodingError[\"unknownVersion\"] = \"HD key decoding error: key uses an unknown version.\";\n})(HdKeyDecodingError || (HdKeyDecodingError = {}));\n/**\n * Decode an HD private key as defined by BIP32, returning a `node` and a\n * `network`. Decoding errors are returned as strings.\n *\n * If the type of the key is known, use {@link decodeHdPrivateKey} or\n * {@link decodeHdPublicKey}.\n *\n * @param hdKey - a BIP32 HD private key or HD public key\n * @param crypto -  an optional object containing an implementation of sha256\n * to use\n */\n// eslint-disable-next-line complexity\nexport const decodeHdKey = (hdKey, crypto = { sha256: internalSha256 }) => {\n    const decoded = base58ToBin(hdKey);\n    if (decoded === BaseConversionError.unknownCharacter)\n        return HdKeyDecodingError.unknownCharacter;\n    const expectedLength = 82;\n    if (decoded.length !== expectedLength)\n        return HdKeyDecodingError.incorrectLength;\n    const checksumIndex = 78;\n    const payload = decoded.slice(0, checksumIndex);\n    const checksumBits = decoded.slice(checksumIndex);\n    const checksum = crypto.sha256.hash(crypto.sha256.hash(payload));\n    if (!checksumBits.every((value, i) => value === checksum[i])) {\n        return HdKeyDecodingError.invalidChecksum;\n    }\n    const depthIndex = 4;\n    const fingerprintIndex = 5;\n    const childIndexIndex = 9;\n    const chainCodeIndex = 13;\n    const keyDataIndex = 45;\n    const version = new DataView(decoded.buffer, decoded.byteOffset, depthIndex).getUint32(0);\n    const depth = decoded[depthIndex];\n    const parentFingerprint = decoded.slice(fingerprintIndex, childIndexIndex);\n    const childIndex = new DataView(decoded.buffer, decoded.byteOffset + childIndexIndex, decoded.byteOffset + chainCodeIndex).getUint32(0);\n    const chainCode = decoded.slice(chainCodeIndex, keyDataIndex);\n    const keyData = decoded.slice(keyDataIndex, checksumIndex);\n    const isPrivateKey = version === HdKeyVersion.mainnetPrivateKey ||\n        version === HdKeyVersion.testnetPrivateKey;\n    if (isPrivateKey && keyData[0] !== 0x00) {\n        return HdKeyDecodingError.missingPrivateKeyPaddingByte;\n    }\n    if (isPrivateKey) {\n        const privateKey = keyData.slice(1);\n        const valid = validateSecp256k1PrivateKey(privateKey);\n        return {\n            node: valid\n                ? {\n                    chainCode,\n                    childIndex,\n                    depth,\n                    parentFingerprint,\n                    privateKey,\n                    valid: true,\n                }\n                : {\n                    chainCode,\n                    childIndex,\n                    depth,\n                    invalidPrivateKey: privateKey,\n                    parentFingerprint,\n                    valid: false,\n                },\n            version,\n        };\n    }\n    const isPublicKey = version === HdKeyVersion.mainnetPublicKey ||\n        version === HdKeyVersion.testnetPublicKey;\n    if (!isPublicKey) {\n        return HdKeyDecodingError.unknownVersion;\n    }\n    return {\n        node: {\n            chainCode,\n            childIndex,\n            depth,\n            parentFingerprint,\n            publicKey: keyData,\n        },\n        version,\n    };\n};\n/**\n * Decode an HD private key as defined by BIP32.\n *\n * This method is similar to {@link decodeHdKey} but ensures that the result is\n * a valid HD private node. Decoding error messages are returned as strings.\n *\n * @param hdPrivateKey - a BIP32 HD private key\n * @param crypto -  an optional object containing an implementation of sha256\n * to use\n */\nexport const decodeHdPrivateKey = (hdPrivateKey, crypto = { sha256: internalSha256 }) => {\n    const decoded = decodeHdKey(hdPrivateKey, crypto);\n    if (typeof decoded === 'string')\n        return decoded;\n    if ('publicKey' in decoded.node) {\n        return HdKeyDecodingError.privateKeyExpected;\n    }\n    if (!decoded.node.valid) {\n        return HdKeyDecodingError.invalidPrivateNode;\n    }\n    if (decoded.version === HdKeyVersion.mainnetPrivateKey) {\n        return {\n            network: 'mainnet',\n            node: decoded.node,\n        };\n    }\n    return {\n        network: 'testnet',\n        node: decoded.node,\n    };\n};\n/**\n * Decode an HD public key as defined by BIP32.\n *\n * This method is similar to {@link decodeHdKey} but ensures that the result is\n * an HD public node. Decoding error messages are returned as strings.\n *\n * @param hdPublicKey - a BIP32 HD public key\n * @param crypto - an optional object containing an implementation of sha256\n * to use\n */\nexport const decodeHdPublicKey = (hdPublicKey, crypto = { sha256: internalSha256 }) => {\n    const decoded = decodeHdKey(hdPublicKey, crypto);\n    if (typeof decoded === 'string')\n        return decoded;\n    if (decoded.version === HdKeyVersion.mainnetPublicKey) {\n        return {\n            network: 'mainnet',\n            node: decoded.node,\n        };\n    }\n    if (decoded.version === HdKeyVersion.testnetPublicKey) {\n        return {\n            network: 'testnet',\n            node: decoded.node,\n        };\n    }\n    return HdKeyDecodingError.publicKeyExpected;\n};\n/**\n * Decode the provided HD private key and compute its identifier. Error messages\n * are returned as a string.\n */\nexport const hdPrivateKeyToIdentifier = (hdPrivateKey, crypto = { sha256: internalSha256 }) => {\n    const privateKeyParams = decodeHdPrivateKey(hdPrivateKey, crypto);\n    if (typeof privateKeyParams === 'string') {\n        return privateKeyParams;\n    }\n    return deriveHdPrivateNodeIdentifier(privateKeyParams.node);\n};\n/**\n * Decode the provided HD public key and compute its identifier. Error messages\n * are returned as a string.\n */\nexport const hdPublicKeyToIdentifier = (hdPublicKey, crypto = { sha256: internalSha256 }) => {\n    const publicKeyParams = decodeHdPublicKey(hdPublicKey, crypto);\n    if (typeof publicKeyParams === 'string') {\n        return publicKeyParams;\n    }\n    return deriveHdPublicNodeIdentifier(publicKeyParams.node);\n};\n/**\n * Encode an HD private key (as defined by BIP32) given a valid\n * {@link HdPrivateNode} and network.\n *\n * @param keyParameters - a valid HD private node and the network for which to\n * encode the key\n * @param crypto - an optional object containing an implementation of sha256\n * to use\n */\nexport const encodeHdPrivateKey = (keyParameters, crypto = { sha256: internalSha256 }) => {\n    const version = numberToBinUint32BE(keyParameters.network === 'mainnet'\n        ? HdKeyVersion.mainnetPrivateKey\n        : HdKeyVersion.testnetPrivateKey);\n    const depth = Uint8Array.of(keyParameters.node.depth);\n    const childIndex = numberToBinUint32BE(keyParameters.node.childIndex);\n    const isPrivateKey = Uint8Array.of(0x00);\n    const payload = flattenBinArray([\n        version,\n        depth,\n        keyParameters.node.parentFingerprint,\n        childIndex,\n        keyParameters.node.chainCode,\n        isPrivateKey,\n        keyParameters.node.privateKey,\n    ]);\n    const checksumLength = 4;\n    const checksum = crypto.sha256\n        .hash(crypto.sha256.hash(payload))\n        .slice(0, checksumLength);\n    return binToBase58(flattenBinArray([payload, checksum]));\n};\n/**\n * Encode an HD public key (as defined by BIP32) given an HD public node.\n *\n * @param keyParameters - an HD public node and the network for which to encode\n * the key\n * @param crypto - an optional object containing an implementation of sha256\n * to use\n */\nexport const encodeHdPublicKey = (keyParameters, crypto = { sha256: internalSha256 }) => {\n    const version = numberToBinUint32BE(keyParameters.network === 'mainnet'\n        ? HdKeyVersion.mainnetPublicKey\n        : HdKeyVersion.testnetPublicKey);\n    const depth = Uint8Array.of(keyParameters.node.depth);\n    const childIndex = numberToBinUint32BE(keyParameters.node.childIndex);\n    const payload = flattenBinArray([\n        version,\n        depth,\n        keyParameters.node.parentFingerprint,\n        childIndex,\n        keyParameters.node.chainCode,\n        keyParameters.node.publicKey,\n    ]);\n    const checksumLength = 4;\n    const checksum = crypto.sha256\n        .hash(crypto.sha256.hash(payload))\n        .slice(0, checksumLength);\n    return binToBase58(flattenBinArray([payload, checksum]));\n};\n/**\n * Derive the HD public node of an HD private node.\n *\n * Though private keys cannot be derived from HD public keys, sharing HD public\n * keys still carries risk. Along with allowing an attacker to associate wallet\n * addresses together (breaking privacy), should an attacker gain knowledge of a\n * single child private key, **it's possible to derive all parent HD private\n * keys**. See {@link crackHdPrivateNodeFromHdPublicNodeAndChildPrivateNode} for\n * details.\n *\n * @param node - a valid HD private node\n * @param crypto - an optional object containing an implementation of secp256k1\n * compressed public key derivation to use\n */\nexport const deriveHdPublicNode = (node, crypto = { secp256k1: internalSecp256k1 }) => ({\n    chainCode: node.chainCode,\n    childIndex: node.childIndex,\n    depth: node.depth,\n    parentFingerprint: node.parentFingerprint,\n    ...(node.parentIdentifier === undefined\n        ? {}\n        : { parentIdentifier: node.parentIdentifier }),\n    publicKey: crypto.secp256k1.derivePublicKeyCompressed(node.privateKey),\n});\n/**\n * An error in the derivation of child HD public or private nodes.\n */\nexport var HdNodeDerivationError;\n(function (HdNodeDerivationError) {\n    HdNodeDerivationError[\"childIndexExceedsMaximum\"] = \"HD key derivation error: child index exceeds maximum (4294967295).\";\n    HdNodeDerivationError[\"nextChildIndexRequiresHardenedAlgorithm\"] = \"HD key derivation error: an incredibly rare HMAC-SHA512 result occurred, and incrementing the child index would require switching to the hardened algorithm.\";\n    HdNodeDerivationError[\"hardenedDerivationRequiresPrivateNode\"] = \"HD key derivation error: derivation for hardened child indexes (indexes greater than or equal to 2147483648) requires an HD private node.\";\n    HdNodeDerivationError[\"invalidDerivationPath\"] = \"HD key derivation error: invalid derivation path - paths must begin with \\\"m\\\" or \\\"M\\\" and contain only forward slashes (\\\"/\\\"), apostrophes (\\\"'\\\"), or positive child index numbers.\";\n    HdNodeDerivationError[\"invalidPrivateDerivationPrefix\"] = \"HD key derivation error: private derivation paths must begin with \\\"m\\\".\";\n    HdNodeDerivationError[\"invalidPublicDerivationPrefix\"] = \"HD key derivation error: public derivation paths must begin with \\\"M\\\".\";\n})(HdNodeDerivationError || (HdNodeDerivationError = {}));\n/**\n * Derive a child HD private node from an HD private node.\n *\n * To derive a child HD public node, use {@link deriveHdPublicNode} on the\n * result of this method. If the child uses a non-hardened index, it's also\n * possible to use {@link deriveHdPublicNodeChild}.\n *\n * @privateRemarks\n * The {@link Secp256k1.addTweakPrivateKey} method throws if the tweak is out of\n * range or if the resulting private key would be invalid. The procedure to\n * handle this error is standardized by BIP32: return the HD node at the next\n * child index. (Regardless, this scenario is incredibly unlikely without a\n * weakness in HMAC-SHA512.)\n *\n * @param node - the valid HD private node from which to derive the child node\n * @param index - the index at which to derive the child node - indexes greater\n * than or equal to the hardened index offset (`0x80000000`/`2147483648`) are\n * derived using the \"hardened\" derivation algorithm\n * @param crypto - an optional object containing implementations of sha256,\n * ripemd160, secp256k1 compressed public key derivation, and secp256k1 private\n * key \"tweak addition\" (application of the EC group operation)\n */\n// eslint-disable-next-line complexity\nexport const deriveHdPrivateNodeChild = (node, index, crypto = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha256: internalSha256,\n    sha512: internalSha512,\n}) => {\n    const maximumIndex = 0xffffffff;\n    if (index > maximumIndex) {\n        return HdNodeDerivationError.childIndexExceedsMaximum;\n    }\n    const hardenedIndexOffset = 0x80000000;\n    const useHardenedAlgorithm = index >= hardenedIndexOffset;\n    const keyMaterial = useHardenedAlgorithm\n        ? node.privateKey\n        : crypto.secp256k1.derivePublicKeyCompressed(node.privateKey);\n    const serialization = Uint8Array.from([\n        ...(useHardenedAlgorithm ? [0x00] : []),\n        ...keyMaterial,\n        ...numberToBinUint32BE(index),\n    ]);\n    const derivation = hmacSha512(node.chainCode, serialization, crypto.sha512);\n    const tweakValueLength = 32;\n    const tweakValue = derivation.slice(0, tweakValueLength);\n    const nextChainCode = derivation.slice(tweakValueLength);\n    const nextPrivateKey = crypto.secp256k1.addTweakPrivateKey(node.privateKey, tweakValue);\n    if (typeof nextPrivateKey === 'string') {\n        if (index === hardenedIndexOffset - 1) {\n            return HdNodeDerivationError.nextChildIndexRequiresHardenedAlgorithm;\n        }\n        return deriveHdPrivateNodeChild(node, index + 1, crypto);\n    }\n    const parentIdentifier = deriveHdPrivateNodeIdentifier(node, crypto);\n    const parentFingerprintLength = 4;\n    return {\n        chainCode: nextChainCode,\n        childIndex: index,\n        depth: node.depth + 1,\n        parentFingerprint: parentIdentifier.slice(0, parentFingerprintLength),\n        parentIdentifier,\n        privateKey: nextPrivateKey,\n        valid: true,\n    };\n};\n/**\n * Derive a non-hardened child HD public node from an HD public node.\n *\n * Because hardened derivation also requires knowledge of the parent private\n * node, it's not possible to use an HD public node to derive a hardened child\n * HD public node.\n *\n * Though private keys cannot be derived from HD public keys, sharing HD public\n * keys still carries risk. Along with allowing an attacker to associate wallet\n * addresses together (breaking privacy), should an attacker gain knowledge of a\n * single child private key, **it's possible to derive all parent HD private\n * keys**. See {@link crackHdPrivateNodeFromHdPublicNodeAndChildPrivateNode}\n * for details.\n *\n * @privateRemarks\n * The {@link secp256k1.addTweakPublicKeyCompressed} method returns an error as\n * a string if the tweak is out of range or if the resulting public key would be\n * invalid. The procedure to handle this error is standardized by BIP32: return\n * the HD node at the next child index. (Regardless, this scenario is incredibly\n * unlikely without a weakness in HMAC-SHA512.)\n *\n * @param node - the HD public node from which to derive the child public node\n * @param index - the index at which to derive the child node\n * @param crypto - an optional object containing implementations of sha256,\n * sha512, ripemd160, and secp256k1 compressed public key \"tweak addition\"\n * (application of the EC group operation)\n */\nexport const deriveHdPublicNodeChild = (node, index, crypto = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha256: internalSha256,\n    sha512: internalSha512,\n}) => {\n    const hardenedIndexOffset = 0x80000000;\n    if (index >= hardenedIndexOffset) {\n        return HdNodeDerivationError.hardenedDerivationRequiresPrivateNode;\n    }\n    const serialization = Uint8Array.from([\n        ...node.publicKey,\n        ...numberToBinUint32BE(index),\n    ]);\n    const derivation = hmacSha512(node.chainCode, serialization, crypto.sha512);\n    const tweakValueLength = 32;\n    const tweakValue = derivation.slice(0, tweakValueLength);\n    const nextChainCode = derivation.slice(tweakValueLength);\n    const nextPublicKey = crypto.secp256k1.addTweakPublicKeyCompressed(node.publicKey, tweakValue);\n    if (typeof nextPublicKey === 'string') {\n        if (index === hardenedIndexOffset - 1) {\n            return HdNodeDerivationError.nextChildIndexRequiresHardenedAlgorithm;\n        }\n        return deriveHdPublicNodeChild(node, index + 1, crypto);\n    }\n    const parentIdentifier = deriveHdPublicNodeIdentifier(node, crypto);\n    const parentFingerprintLength = 4;\n    return {\n        chainCode: nextChainCode,\n        childIndex: index,\n        depth: node.depth + 1,\n        parentFingerprint: parentIdentifier.slice(0, parentFingerprintLength),\n        parentIdentifier,\n        publicKey: nextPublicKey,\n    };\n};\n/**\n * Derive a child HD node from a parent node given a derivation path. The\n * resulting node is the same type as the parent node (private nodes return\n * private nodes, public nodes return public nodes).\n *\n * @remarks\n * The derivation path uses the notation specified in BIP32:\n *\n * The first character must be either `m` for private derivation or `M` for\n * public derivation, followed by sets of `/` and a number representing the\n * child index used in the derivation at that depth. Hardened derivation is\n * represented by a trailing `'`, and may only appear in private derivation\n * paths (hardened derivation requires knowledge of the private key). Hardened\n * child indexes are represented with the hardened index offset (`2147483648`)\n * subtracted.\n *\n * For example, `m/0/1'/2` uses private derivation (`m`), with child indexes in\n * the following order:\n *\n * `derivePrivate(derivePrivate(derivePrivate(node, 0), 2147483648 + 1), 2)`\n *\n * Likewise, `M/3/4/5` uses public derivation (`M`), with child indexes in the\n * following order:\n *\n * `derivePublic(derivePublic(derivePublic(node, 3), 4), 5)`\n *\n * Because hardened derivation requires a private node, paths that specify\n * public derivation (`M`) using hardened derivation (`'`) will return an error.\n * To derive the public node associated with a child private node that requires\n * hardened derivation, begin with private derivation, then provide the result\n * to `deriveHdPublicNode`.\n *\n * @param node - the HD node from which to begin the derivation (for paths\n * beginning with `m`, an {@link HdPrivateNodeValid}; for paths beginning with\n * `M`, an {@link HdPublicNode})\n * @param path - the BIP32 derivation path, e.g. `m/0/1'/2` or `M/3/4/5`\n * @param crypto - an optional object containing implementations of sha256,\n * sha512, ripemd160, and secp256k1 derivation functions\n */\n// eslint-disable-next-line complexity\nexport const deriveHdPath = (node, path, crypto = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha256: internalSha256,\n    sha512: internalSha512,\n}) => {\n    const validDerivationPath = /^[mM](?:\\/[0-9]+'?)*$/u;\n    if (!validDerivationPath.test(path)) {\n        return HdNodeDerivationError.invalidDerivationPath;\n    }\n    const parsed = path.split('/');\n    const isPrivateDerivation = 'privateKey' in node;\n    if (isPrivateDerivation && parsed[0] !== 'm') {\n        return HdNodeDerivationError.invalidPrivateDerivationPrefix;\n    }\n    if (!isPrivateDerivation && parsed[0] !== 'M') {\n        return HdNodeDerivationError.invalidPublicDerivationPrefix;\n    }\n    const base = 10;\n    const hardenedIndexOffset = 0x80000000;\n    const indexes = parsed\n        .slice(1)\n        .map((index) => index.endsWith(\"'\")\n        ? parseInt(index.slice(0, -1), base) + hardenedIndexOffset\n        : parseInt(index, base));\n    return (isPrivateDerivation\n        ? indexes.reduce((result, nextIndex) => typeof result === 'string'\n            ? result\n            : deriveHdPrivateNodeChild(result, nextIndex, crypto), node // eslint-disable-line @typescript-eslint/prefer-reduce-type-parameter\n        )\n        : indexes.reduce((result, nextIndex) => typeof result === 'string'\n            ? result\n            : deriveHdPublicNodeChild(result, nextIndex, crypto), node // eslint-disable-line @typescript-eslint/prefer-reduce-type-parameter\n        ));\n};\nexport var HdNodeCrackingError;\n(function (HdNodeCrackingError) {\n    HdNodeCrackingError[\"cannotCrackHardenedDerivation\"] = \"HD node cracking error: cannot crack an HD parent node using hardened child node.\";\n})(HdNodeCrackingError || (HdNodeCrackingError = {}));\n/**\n * Derive the HD private node from a HD public node, given any non-hardened\n * child private node.\n *\n * @remarks\n * This exploits the \"non-hardened\" BIP32 derivation algorithm. Because\n * non-hardened derivation only requires knowledge of the \"chain code\" (rather\n * than requiring knowledge of the parent private key) it's possible to\n * calculate the value by which the parent private key is \"tweaked\" to arrive at\n * the child private key. Since we have the child private key, we simply\n * subtract this \"tweaked\" amount to get back to the parent private key.\n *\n * The BIP32 \"hardened\" derivation algorithm is designed to address this\n * weakness. Using hardened derivation, child private nodes can be shared\n * without risk of leaking the parent private node, but this comes at the cost\n * of public node derivation. Given only a parent public node, it is not\n * possible to derive hardened child public keys, so applications must choose\n * between support for HD public node derivation or support for sharing child\n * private nodes.\n *\n * @param parentPublicNode - the parent HD public node for which to derive a\n * private node\n * @param childPrivateNode - any non-hardened child private node of the parent\n * node (only the `privateKey` and the `childIndex` are required)\n * * @param crypto - an optional object containing an implementation of sha512\n */\nexport const crackHdPrivateNodeFromHdPublicNodeAndChildPrivateNode = (parentPublicNode, childPrivateNode, crypto = { sha512: internalSha512 }) => {\n    const hardenedIndexOffset = 0x80000000;\n    if (childPrivateNode.childIndex >= hardenedIndexOffset) {\n        return HdNodeCrackingError.cannotCrackHardenedDerivation;\n    }\n    const serialization = Uint8Array.from([\n        ...parentPublicNode.publicKey,\n        ...numberToBinUint32BE(childPrivateNode.childIndex),\n    ]);\n    const derivation = hmacSha512(parentPublicNode.chainCode, serialization, crypto.sha512);\n    const tweakValueLength = 32;\n    const tweakValue = binToBigIntUint256BE(derivation.slice(0, tweakValueLength));\n    const childPrivateValue = binToBigIntUint256BE(childPrivateNode.privateKey);\n    const secp256k1OrderN = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n;\n    const trueMod = (n, m) => ((n % m) + m) % m;\n    const parentPrivateValue = trueMod(childPrivateValue - tweakValue, secp256k1OrderN);\n    const privateKey = bigIntToBinUint256BEClamped(parentPrivateValue);\n    return {\n        chainCode: parentPublicNode.chainCode,\n        childIndex: parentPublicNode.childIndex,\n        depth: parentPublicNode.depth,\n        parentFingerprint: parentPublicNode.parentFingerprint,\n        ...(parentPublicNode.parentIdentifier === undefined\n            ? {}\n            : { parentIdentifier: parentPublicNode.parentIdentifier }),\n        privateKey,\n        valid: true,\n    };\n};\n//# sourceMappingURL=hd-key.js.map", "/**\n * Verify that a private key is valid for the Secp256k1 curve. Returns `true`\n * for success, or `false` on failure.\n *\n * Private keys are 256-bit numbers encoded as a 32-byte, big-endian Uint8Array.\n * Nearly every 256-bit number is a valid secp256k1 private key. Specifically,\n * any 256-bit number greater than `0x01` and less than\n * `0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140`\n * is a valid private key. This range is part of the definition of the\n * secp256k1 elliptic curve parameters.\n *\n * This method does not require a `Secp256k1` implementation.\n */\nexport const validateSecp256k1PrivateKey = (privateKey) => {\n    const privateKeyLength = 32;\n    if (privateKey.length !== privateKeyLength ||\n        privateKey.every((value) => value === 0)) {\n        return false;\n    }\n    /**\n     * The largest possible Secp256k1 private key – equal to the order of the\n     * Secp256k1 curve minus one.\n     */\n    // prettier-ignore\n    const maximumSecp256k1PrivateKey = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 63]; // eslint-disable-line @typescript-eslint/no-magic-numbers\n    const firstDifference = privateKey.findIndex((value, i) => value !== maximumSecp256k1PrivateKey[i]);\n    if (firstDifference === -1 ||\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        privateKey[firstDifference] < maximumSecp256k1PrivateKey[firstDifference]) {\n        return true;\n    }\n    return false;\n};\n/**\n * Securely generate a valid Secp256k1 private key given a secure source of\n * randomness.\n *\n * **Node.js Usage**\n * ```ts\n * import { randomBytes } from 'crypto';\n * import { generatePrivateKey } from '@bitauth/libauth';\n *\n * const key = generatePrivateKey(() => randomBytes(32));\n * ```\n *\n * **Browser Usage**\n * ```ts\n * import { generatePrivateKey } from '@bitauth/libauth';\n *\n * const key = generatePrivateKey(() =>\n *   window.crypto.getRandomValues(new Uint8Array(32))\n * );\n * ```\n *\n * @param secureRandom - a method that returns a securely-random 32-byte\n * Uint8Array\n */\nexport const generatePrivateKey = (secureRandom) => {\n    // eslint-disable-next-line functional/no-let, @typescript-eslint/init-declarations\n    let maybeKey;\n    // eslint-disable-next-line functional/no-loop-statement\n    do {\n        // eslint-disable-next-line functional/no-expression-statement\n        maybeKey = secureRandom();\n    } while (!validateSecp256k1PrivateKey(maybeKey));\n    return maybeKey;\n};\n//# sourceMappingURL=key-utils.js.map", "import { Base58AddressFormatVersion, decodeBase58AddressFormat, encodeBase58AddressFormat, } from '../address/address.js';\nimport { sha256 as internalSha256 } from '../crypto/crypto.js';\nexport var WalletImportFormatError;\n(function (WalletImportFormatError) {\n    WalletImportFormatError[\"incorrectLength\"] = \"The WIF private key payload is not the correct length.\";\n})(WalletImportFormatError || (WalletImportFormatError = {}));\n/**\n * Encode a private key using Wallet Import Format (WIF).\n *\n * WIF encodes the 32-byte private key, a 4-byte checksum, and a `type`\n * indicating the intended usage for the private key. See\n * {@link WalletImportFormatType} for details.\n *\n * @remarks\n * WIF-encoding uses the Base58Address format with version\n * {@link Base58AddressFormatVersion.wif} (`128`/`0x80`) or\n * {@link Base58AddressFormatVersion.wifTestnet} (`239`/`0xef`), respectively.\n *\n * To indicate that the private key is intended for use in a P2PKH address using\n * the compressed form of its derived public key, a `0x01` is appended to the\n * payload prior to encoding. For the uncompressed construction, the extra byte\n * is omitted.\n *\n * @param privateKey - a 32-byte Secp256k1 ECDSA private key\n * @param type - the intended usage of the private key (e.g. `mainnet` or\n * `testnet`)\n * @param sha256 - an implementation of sha256\n */\nexport const encodePrivateKeyWif = (privateKey, type, sha256 = internalSha256) => {\n    const compressedByte = 0x01;\n    const mainnet = type === 'mainnet' || type === 'mainnetUncompressed';\n    const compressed = type === 'mainnet' || type === 'testnet';\n    const payload = compressed\n        ? Uint8Array.from([...privateKey, compressedByte])\n        : privateKey;\n    return encodeBase58AddressFormat(mainnet\n        ? Base58AddressFormatVersion.wif\n        : Base58AddressFormatVersion.wifTestnet, payload, sha256);\n};\n/**\n * Decode a private key using Wallet Import Format (WIF). See\n * {@link encodePrivateKeyWif} for details.\n *\n * @param wifKey - the private key to decode (in Wallet Import Format)\n * @param sha256 - an implementation of sha256\n */\n// eslint-disable-next-line complexity\nexport const decodePrivateKeyWif = (wifKey, sha256 = internalSha256) => {\n    const compressedPayloadLength = 33;\n    const decoded = decodeBase58AddressFormat(wifKey, sha256);\n    if (typeof decoded === 'string')\n        return decoded;\n    const mainnet = decoded.version === Base58AddressFormatVersion.wif;\n    const compressed = decoded.payload.length === compressedPayloadLength;\n    const privateKey = compressed\n        ? decoded.payload.slice(0, -1)\n        : decoded.payload;\n    const type = mainnet\n        ? compressed\n            ? 'mainnet'\n            : 'mainnetUncompressed'\n        : compressed\n            ? 'testnet'\n            : 'testnetUncompressed';\n    return { privateKey, type };\n};\n//# sourceMappingURL=wallet-import-format.js.map", "export * from './compile.js';\nexport * from './language-utils.js';\nexport * from './language-types.js';\nexport * from './parse.js';\nexport * from './reduce.js';\nexport * from './resolve.js';\n//# sourceMappingURL=language.js.map", "import { compileScriptRaw, createEmptyRange } from './resolve.js';\n/**\n * Parse, resolve, and reduce the selected script using the provided `data` and\n * `configuration`.\n *\n * Note, locktime validation only occurs if `compilationContext` is provided in\n * the configuration.\n */\n// eslint-disable-next-line complexity\nexport const compileScript = (scriptId, data, configuration) => {\n    const locktimeDisablingSequenceNumber = 0xffffffff;\n    const lockTimeTypeBecomesTimestamp = 500000000;\n    if (data.compilationContext?.transaction.locktime !== undefined) {\n        if (configuration.unlockingScriptTimeLockTypes?.[scriptId] === 'height' &&\n            data.compilationContext.transaction.locktime >=\n                lockTimeTypeBecomesTimestamp) {\n            return {\n                errorType: 'parse',\n                errors: [\n                    {\n                        error: `The script \"${scriptId}\" requires a height-based locktime (less than 500,000,000), but this transaction uses a timestamp-based locktime (\"${data.compilationContext.transaction.locktime}\").`,\n                        range: createEmptyRange(),\n                    },\n                ],\n                success: false,\n            };\n        }\n        if (configuration.unlockingScriptTimeLockTypes?.[scriptId] === 'timestamp' &&\n            data.compilationContext.transaction.locktime <\n                lockTimeTypeBecomesTimestamp) {\n            return {\n                errorType: 'parse',\n                errors: [\n                    {\n                        error: `The script \"${scriptId}\" requires a timestamp-based locktime (greater than or equal to 500,000,000), but this transaction uses a height-based locktime (\"${data.compilationContext.transaction.locktime}\").`,\n                        range: createEmptyRange(),\n                    },\n                ],\n                success: false,\n            };\n        }\n    }\n    if (data.compilationContext?.transaction.inputs[data.compilationContext.inputIndex]?.sequenceNumber !== undefined &&\n        configuration.unlockingScriptTimeLockTypes?.[scriptId] !== undefined &&\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        data.compilationContext.transaction.inputs[data.compilationContext.inputIndex].sequenceNumber === locktimeDisablingSequenceNumber) {\n        return {\n            errorType: 'parse',\n            errors: [\n                {\n                    error: `The script \"${scriptId}\" requires a locktime, but this input's sequence number is set to disable transaction locktime (0xffffffff). This will cause the OP_CHECKLOCKTIMEVERIFY operation to error when the transaction is verified. To be valid, this input must use a sequence number that does not disable locktime.`,\n                    range: createEmptyRange(),\n                },\n            ],\n            success: false,\n        };\n    }\n    const rawResult = compileScriptRaw({\n        configuration,\n        data,\n        scriptId,\n    });\n    if (!rawResult.success) {\n        return rawResult;\n    }\n    const unlocks = configuration.unlockingScripts?.[scriptId];\n    const unlockingScriptType = unlocks === undefined\n        ? undefined\n        : configuration.lockingScriptTypes?.[unlocks];\n    const isP2shUnlock = unlockingScriptType === 'p2sh20' || unlockingScriptType === 'p2sh32';\n    const lockingScriptType = configuration.lockingScriptTypes?.[scriptId];\n    const isP2shLock = lockingScriptType === 'p2sh20' || lockingScriptType === 'p2sh32';\n    if (isP2shLock) {\n        const transformedResult = compileScriptRaw({\n            configuration: {\n                ...configuration,\n                scripts: {\n                    p2sh20Locking: 'OP_HASH160 <$(<lockingBytecode> OP_HASH160)> OP_EQUAL',\n                    p2sh32Locking: 'OP_HASH256 <$(<lockingBytecode> OP_HASH256)> OP_EQUAL',\n                },\n                variables: { lockingBytecode: { type: 'AddressData' } },\n            },\n            data: { bytecode: { lockingBytecode: rawResult.bytecode } },\n            scriptId: lockingScriptType === 'p2sh20' ? 'p2sh20Locking' : 'p2sh32Locking',\n        });\n        if (!transformedResult.success) {\n            return transformedResult;\n        }\n        return {\n            ...rawResult,\n            bytecode: transformedResult.bytecode,\n            transformed: lockingScriptType === 'p2sh20' ? 'p2sh20-locking' : 'p2sh32-locking',\n        };\n    }\n    if (isP2shUnlock) {\n        const lockingBytecodeResult = compileScriptRaw({\n            configuration,\n            data,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            scriptId: unlocks,\n        });\n        if (!lockingBytecodeResult.success) {\n            return lockingBytecodeResult;\n        }\n        const transformedResult = compileScriptRaw({\n            configuration: {\n                ...configuration,\n                scripts: {\n                    p2shUnlocking: 'unlockingBytecode <lockingBytecode>',\n                },\n                variables: {\n                    lockingBytecode: { type: 'AddressData' },\n                    unlockingBytecode: { type: 'AddressData' },\n                },\n            },\n            data: {\n                bytecode: {\n                    lockingBytecode: lockingBytecodeResult.bytecode,\n                    unlockingBytecode: rawResult.bytecode,\n                },\n            },\n            scriptId: 'p2shUnlocking',\n        });\n        return {\n            ...rawResult,\n            bytecode: transformedResult.bytecode,\n            transformed: unlockingScriptType === 'p2sh20'\n                ? 'p2sh20-unlocking'\n                : 'p2sh32-unlocking',\n        };\n    }\n    return rawResult;\n};\n//# sourceMappingURL=compile.js.map", "import { binStringToBin, hexToBin, utf8ToBin } from '../format/format.js';\nimport { bigIntToVmNumber } from '../vm/vm.js';\nimport { IdentifierResolutionErrorType, IdentifierResolutionType, } from './language-types.js';\nimport { getResolutionErrors, stringifyErrors } from './language-utils.js';\nimport { parseScript } from './parse.js';\nimport { reduceScript } from './reduce.js';\nconst pluckRange = (node) => ({\n    endColumn: node.end.column,\n    endLineNumber: node.end.line,\n    startColumn: node.start.column,\n    startLineNumber: node.start.line,\n});\nconst removeNumericSeparators = (numericLiteral) => numericLiteral.replace(/_/gu, '');\nexport const resolveScriptSegment = (segment, resolveIdentifiers) => {\n    // eslint-disable-next-line complexity\n    const resolved = segment.value.map((child) => {\n        const range = pluckRange(child);\n        switch (child.name) {\n            case 'Identifier': {\n                const identifier = child.value;\n                const result = resolveIdentifiers(identifier);\n                const ret = result.status\n                    ? {\n                        range,\n                        type: 'bytecode',\n                        value: result.bytecode,\n                        ...(result.type === IdentifierResolutionType.opcode\n                            ? {\n                                opcode: identifier,\n                            }\n                            : result.type === IdentifierResolutionType.variable\n                                ? {\n                                    ...('debug' in result ? { debug: result.debug } : {}),\n                                    ...('signature' in result\n                                        ? { signature: result.signature }\n                                        : {}),\n                                    variable: identifier,\n                                }\n                                : // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                                    result.type === IdentifierResolutionType.script\n                                        ? { script: identifier, source: result.source }\n                                        : { unknown: identifier }),\n                    }\n                    : {\n                        ...('debug' in result ? { debug: result.debug } : {}),\n                        ...('recoverable' in result && result.recoverable\n                            ? {\n                                missingIdentifier: identifier,\n                                owningEntity: result.entityOwnership,\n                            }\n                            : {}),\n                        range,\n                        type: 'error',\n                        value: result.error,\n                    };\n                return ret;\n            }\n            case 'Push':\n                return {\n                    range,\n                    type: 'push',\n                    value: resolveScriptSegment(child.value, resolveIdentifiers),\n                };\n            case 'Evaluation':\n                return {\n                    range,\n                    type: 'evaluation',\n                    value: resolveScriptSegment(child.value, resolveIdentifiers),\n                };\n            case 'BigIntLiteral':\n                return {\n                    literal: child.value,\n                    literalType: 'BigIntLiteral',\n                    range,\n                    type: 'bytecode',\n                    value: bigIntToVmNumber(BigInt(removeNumericSeparators(child.value))),\n                };\n            case 'BinaryLiteral':\n                return {\n                    literal: child.value,\n                    literalType: 'BinaryLiteral',\n                    range,\n                    type: 'bytecode',\n                    value: binStringToBin(removeNumericSeparators(child.value)),\n                };\n            case 'HexLiteral':\n                return {\n                    literal: child.value,\n                    literalType: 'HexLiteral',\n                    range,\n                    type: 'bytecode',\n                    value: hexToBin(removeNumericSeparators(child.value)),\n                };\n            case 'UTF8Literal':\n                return {\n                    literal: child.value,\n                    literalType: 'UTF8Literal',\n                    range,\n                    type: 'bytecode',\n                    value: utf8ToBin(child.value),\n                };\n            case 'Comment':\n                return {\n                    range,\n                    type: 'comment',\n                    value: child.value,\n                };\n            default:\n                return {\n                    range,\n                    type: 'error',\n                    value: `Unrecognized segment: ${child.name}`,\n                };\n        }\n    });\n    return resolved.length === 0\n        ? [{ range: pluckRange(segment), type: 'comment', value: '' }]\n        : resolved;\n};\nexport var BuiltInVariables;\n(function (BuiltInVariables) {\n    BuiltInVariables[\"currentBlockTime\"] = \"current_block_time\";\n    BuiltInVariables[\"currentBlockHeight\"] = \"current_block_height\";\n    BuiltInVariables[\"signingSerialization\"] = \"signing_serialization\";\n})(BuiltInVariables || (BuiltInVariables = {}));\nconst attemptCompilerOperation = ({ data, configuration, identifier, matchingOperations, operationExample = 'operation_identifier', operationId, variableId, variableType, }) => {\n    if (matchingOperations === undefined) {\n        return {\n            error: `The \"${variableId}\" variable type can not be resolved because the \"${variableType}\" operation has not been included in this compiler's CompilationEnvironment.`,\n            status: 'error',\n        };\n    }\n    if (typeof matchingOperations === 'function') {\n        const operation = matchingOperations;\n        return operation(identifier, data, configuration);\n    }\n    if (operationId === undefined) {\n        return {\n            error: `This \"${variableId}\" variable could not be resolved because this compiler's \"${variableType}\" operations require an operation identifier, e.g. '${variableId}.${operationExample}'.`,\n            status: 'error',\n        };\n    }\n    const operation = matchingOperations[operationId];\n    if (operation === undefined) {\n        return {\n            error: `The identifier \"${identifier}\" could not be resolved because the \"${variableId}.${operationId}\" operation is not available to this compiler.`,\n            status: 'error',\n        };\n    }\n    return operation(identifier, data, configuration);\n};\n/**\n * If the identifier can be successfully resolved as a variable, the result is\n * returned as a Uint8Array. If the identifier references a known variable, but\n * an error occurs in resolving it, the error is returned as a string.\n * Otherwise, the identifier is not recognized as a variable, and this method\n * simply returns `false`.\n *\n * @param identifier - The full identifier used to describe this operation, e.g.\n * `owner.signature.all_outputs`.\n * @param data - The {@link CompilationData} provided to the compiler\n * @param configuration - The {@link CompilerConfiguration} provided to\n * the compiler\n */\nexport const resolveVariableIdentifier = ({ data, configuration, identifier, }) => {\n    const [variableId, operationId] = identifier.split('.');\n    switch (variableId) {\n        case BuiltInVariables.currentBlockHeight:\n            return attemptCompilerOperation({\n                configuration,\n                data,\n                identifier,\n                matchingOperations: configuration.operations?.currentBlockHeight,\n                operationId,\n                variableId,\n                variableType: 'currentBlockHeight',\n            });\n        case BuiltInVariables.currentBlockTime:\n            return attemptCompilerOperation({\n                configuration,\n                data,\n                identifier,\n                matchingOperations: configuration.operations?.currentBlockTime,\n                operationId,\n                variableId,\n                variableType: 'currentBlockTime',\n            });\n        case BuiltInVariables.signingSerialization:\n            return attemptCompilerOperation({\n                configuration,\n                data,\n                identifier,\n                matchingOperations: configuration.operations?.signingSerialization,\n                operationExample: 'version',\n                operationId,\n                variableId,\n                variableType: 'signingSerialization',\n            });\n        default: {\n            const expectedVariable = configuration.variables?.[variableId];\n            if (expectedVariable === undefined) {\n                return { status: 'skip' };\n            }\n            return attemptCompilerOperation({\n                configuration,\n                data,\n                identifier,\n                operationId,\n                variableId,\n                ...{\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    AddressData: {\n                        matchingOperations: configuration.operations?.addressData,\n                        variableType: 'addressData',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    HdKey: {\n                        matchingOperations: configuration.operations?.hdKey,\n                        operationExample: 'public_key',\n                        variableType: 'hdKey',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    Key: {\n                        matchingOperations: configuration.operations?.key,\n                        operationExample: 'public_key',\n                        variableType: 'key',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    WalletData: {\n                        matchingOperations: configuration.operations?.walletData,\n                        variableType: 'walletData',\n                    },\n                }[expectedVariable.type],\n            });\n        }\n    }\n};\n/**\n * A text-formatting method to pretty-print the list of expected inputs\n * (`Encountered unexpected input while parsing script. Expected ...`). If\n * present, the `EOF` expectation is always moved to the end of the list.\n * @param expectedArray - the alphabetized list of expected inputs produced by\n * `parseScript`\n */\nexport const describeExpectedInput = (expectedArray) => {\n    /**\n     * The constant used by the parser to denote the end of the input\n     */\n    const EOF = 'EOF';\n    const newArray = expectedArray.filter((value) => value !== EOF);\n    // eslint-disable-next-line functional/no-conditional-statement\n    if (newArray.length !== expectedArray.length) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        newArray.push('the end of the script');\n    }\n    const withoutLastElement = newArray.slice(0, newArray.length - 1);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const lastElement = newArray[newArray.length - 1];\n    const arrayRequiresCommas = 3;\n    const arrayRequiresOr = 2;\n    return `Encountered unexpected input while parsing script. Expected ${newArray.length >= arrayRequiresCommas\n        ? withoutLastElement.join(', ').concat(`, or ${lastElement}`)\n        : newArray.length === arrayRequiresOr\n            ? newArray.join(' or ')\n            : lastElement}.`;\n};\nexport const createEmptyRange = () => ({\n    endColumn: 0,\n    endLineNumber: 0,\n    startColumn: 0,\n    startLineNumber: 0,\n});\n/**\n * This method is generally for internal use. The {@link compileScript} method\n * is the recommended API for direct compilation.\n */\nexport const compileScriptRaw = ({ data, configuration, scriptId, }) => {\n    const script = configuration.scripts[scriptId];\n    if (script === undefined) {\n        return {\n            errorType: 'parse',\n            errors: [\n                {\n                    error: `No script with an ID of \"${scriptId}\" was provided in the compiler configuration.`,\n                    range: createEmptyRange(),\n                },\n            ],\n            success: false,\n        };\n    }\n    if (configuration.sourceScriptIds?.includes(scriptId) === true) {\n        return {\n            errorType: 'parse',\n            errors: [\n                {\n                    error: `A circular dependency was encountered: script \"${scriptId}\" relies on itself to be generated. (Source scripts: ${configuration.sourceScriptIds.join(' → ')})`,\n                    range: createEmptyRange(),\n                },\n            ],\n            success: false,\n        };\n    }\n    const sourceScriptIds = configuration.sourceScriptIds === undefined\n        ? [scriptId]\n        : [...configuration.sourceScriptIds, scriptId];\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return compileScriptContents({\n        configuration: { ...configuration, sourceScriptIds },\n        data,\n        script,\n    });\n};\n/**\n * Compile an internal script identifier.\n *\n * @remarks\n * If the identifier can be successfully resolved as a script, the script is\n * compiled and returned as a {@link CompilationResultSuccess}. If an error\n * occurs in compiling it, the error is returned as a string.\n *\n * Otherwise, the identifier is not recognized as a script, and this method\n * simply returns `false`.\n */\nexport const resolveScriptIdentifier = ({ data, configuration, identifier, }) => {\n    if (configuration.scripts[identifier] === undefined) {\n        return false;\n    }\n    const result = compileScriptRaw({\n        configuration,\n        data,\n        scriptId: identifier,\n    });\n    if (result.success) {\n        return result;\n    }\n    return `Compilation error in resolved script \"${identifier}\": ${stringifyErrors(result.errors)}`;\n};\n/**\n * Return an {@link IdentifierResolutionFunction} for use in\n * {@link resolveScriptSegment}.\n *\n * @param scriptId - the `id` of the script for which the resulting\n * `IdentifierResolutionFunction` will be used.\n */\nexport const createIdentifierResolver = ({ data, configuration, }) => \n// eslint-disable-next-line complexity\n(identifier) => {\n    const opcodeResult = configuration.opcodes?.[identifier];\n    if (opcodeResult !== undefined) {\n        return {\n            bytecode: opcodeResult,\n            status: true,\n            type: IdentifierResolutionType.opcode,\n        };\n    }\n    const variableResult = resolveVariableIdentifier({\n        configuration,\n        data,\n        identifier,\n    });\n    if (variableResult.status !== 'skip') {\n        return variableResult.status === 'error'\n            ? {\n                ...('debug' in variableResult\n                    ? { debug: variableResult.debug }\n                    : {}),\n                error: variableResult.error,\n                ...(configuration.entityOwnership === undefined\n                    ? {}\n                    : {\n                        entityOwnership: \n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        configuration.entityOwnership[identifier.split('.')[0]],\n                    }),\n                recoverable: 'recoverable' in variableResult,\n                status: false,\n                type: IdentifierResolutionErrorType.variable,\n            }\n            : {\n                ...('debug' in variableResult\n                    ? { debug: variableResult.debug }\n                    : {}),\n                bytecode: variableResult.bytecode,\n                ...('signature' in variableResult\n                    ? {\n                        signature: variableResult.signature,\n                    }\n                    : {}),\n                status: true,\n                type: IdentifierResolutionType.variable,\n            };\n    }\n    const scriptResult = resolveScriptIdentifier({\n        configuration,\n        data,\n        identifier,\n    });\n    if (scriptResult !== false) {\n        return typeof scriptResult === 'string'\n            ? {\n                error: scriptResult,\n                scriptId: identifier,\n                status: false,\n                type: IdentifierResolutionErrorType.script,\n            }\n            : {\n                bytecode: scriptResult.bytecode,\n                source: scriptResult.resolve,\n                status: true,\n                type: IdentifierResolutionType.script,\n            };\n    }\n    return {\n        error: `Unknown identifier \"${identifier}\".`,\n        status: false,\n        type: IdentifierResolutionErrorType.unknown,\n    };\n};\n/**\n * This method is generally for internal use. The {@link compileScript} method\n * is the recommended API for direct compilation.\n */\nexport const compileScriptContents = ({ data, configuration, script, }) => {\n    const parseResult = parseScript(script);\n    if (!parseResult.status) {\n        return {\n            errorType: 'parse',\n            errors: [\n                {\n                    error: describeExpectedInput(parseResult.expected),\n                    range: {\n                        endColumn: parseResult.index.column,\n                        endLineNumber: parseResult.index.line,\n                        startColumn: parseResult.index.column,\n                        startLineNumber: parseResult.index.line,\n                    },\n                },\n            ],\n            success: false,\n        };\n    }\n    const resolver = createIdentifierResolver({ configuration, data });\n    const resolvedScript = resolveScriptSegment(parseResult.value, resolver);\n    const resolutionErrors = getResolutionErrors(resolvedScript);\n    if (resolutionErrors.length !== 0) {\n        return {\n            errorType: 'resolve',\n            errors: resolutionErrors,\n            parse: parseResult.value,\n            resolve: resolvedScript,\n            success: false,\n        };\n    }\n    const reduction = reduceScript(resolvedScript, configuration.vm, configuration.createAuthenticationProgram);\n    return {\n        ...(reduction.errors === undefined\n            ? { bytecode: reduction.bytecode, success: true }\n            : { errorType: 'reduce', errors: reduction.errors, success: false }),\n        parse: parseResult.value,\n        reduce: reduction,\n        resolve: resolvedScript,\n    };\n};\n//# sourceMappingURL=resolve.js.map", "export * from './instruction-sets/instruction-sets.js';\nexport * from './virtual-machine.js';\nexport * from './vm-types.js';\n//# sourceMappingURL=vm.js.map", "export * from './xec/xec.js';\nexport * from './bch/2022/bch-2022.js';\nexport * from './bch/2023/bch-2023.js';\nexport * from './bch/chips/bch-chips.js';\nexport * from './btc/btc.js';\nexport * from './common/common.js';\n//# sourceMappingURL=instruction-sets.js.map", "export * from './xec-descriptions.js';\nexport * from './xec-instruction-set.js';\nexport * from './xec-opcodes.js';\nexport * from './xec-types.js';\nexport * from './xec-vm.js';\nexport * from './fixtures/satoshi-client/bitcoin-satoshi-utils.js';\n//# sourceMappingURL=xec.js.map", "export var OpcodeDescriptionsXEC;\n(function (OpcodeDescriptionsXEC) {\n    OpcodeDescriptionsXEC[\"OP_0\"] = \"Push the VM Number 0 onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_1\"] = \"Push the next byte onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_2\"] = \"Push the next 2 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_3\"] = \"Push the next 3 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_4\"] = \"Push the next 4 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_5\"] = \"Push the next 5 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_6\"] = \"Push the next 6 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_7\"] = \"Push the next 7 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_8\"] = \"Push the next 8 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_9\"] = \"Push the next 9 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_10\"] = \"Push the next 10 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_11\"] = \"Push the next 11 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_12\"] = \"Push the next 12 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_13\"] = \"Push the next 13 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_14\"] = \"Push the next 14 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_15\"] = \"Push the next 15 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_16\"] = \"Push the next 16 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_17\"] = \"Push the next 17 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_18\"] = \"Push the next 18 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_19\"] = \"Push the next 19 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_20\"] = \"Push the next 20 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_21\"] = \"Push the next 21 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_22\"] = \"Push the next 22 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_23\"] = \"Push the next 23 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_24\"] = \"Push the next 24 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_25\"] = \"Push the next 25 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_26\"] = \"Push the next 26 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_27\"] = \"Push the next 27 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_28\"] = \"Push the next 28 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_29\"] = \"Push the next 29 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_30\"] = \"Push the next 30 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_31\"] = \"Push the next 31 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_32\"] = \"Push the next 32 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_33\"] = \"Push the next 33 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_34\"] = \"Push the next 34 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_35\"] = \"Push the next 35 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_36\"] = \"Push the next 36 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_37\"] = \"Push the next 37 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_38\"] = \"Push the next 38 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_39\"] = \"Push the next 39 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_40\"] = \"Push the next 40 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_41\"] = \"Push the next 41 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_42\"] = \"Push the next 42 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_43\"] = \"Push the next 43 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_44\"] = \"Push the next 44 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_45\"] = \"Push the next 45 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_46\"] = \"Push the next 46 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_47\"] = \"Push the next 47 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_48\"] = \"Push the next 48 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_49\"] = \"Push the next 49 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_50\"] = \"Push the next 50 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_51\"] = \"Push the next 51 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_52\"] = \"Push the next 52 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_53\"] = \"Push the next 53 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_54\"] = \"Push the next 54 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_55\"] = \"Push the next 55 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_56\"] = \"Push the next 56 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_57\"] = \"Push the next 57 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_58\"] = \"Push the next 58 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_59\"] = \"Push the next 59 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_60\"] = \"Push the next 60 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_61\"] = \"Push the next 61 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_62\"] = \"Push the next 62 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_63\"] = \"Push the next 63 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_64\"] = \"Push the next 64 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_65\"] = \"Push the next 65 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_66\"] = \"Push the next 66 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_67\"] = \"Push the next 67 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_68\"] = \"Push the next 68 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_69\"] = \"Push the next 69 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_70\"] = \"Push the next 70 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_71\"] = \"Push the next 71 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_72\"] = \"Push the next 72 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_73\"] = \"Push the next 73 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_74\"] = \"Push the next 74 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHBYTES_75\"] = \"Push the next 75 bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHDATA_1\"] = \"Read the next Uint8 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHDATA_2\"] = \"Read the next little-endian Uint16 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_PUSHDATA_4\"] = \"Read the next little-endian Uint32 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_1NEGATE\"] = \"Push the VM Number -1 onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_RESERVED\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED does not count toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_1\"] = \"Push a 1 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_2\"] = \"Push a 2 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_3\"] = \"Push a 3 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_4\"] = \"Push a 4 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_5\"] = \"Push a 5 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_6\"] = \"Push a 6 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_7\"] = \"Push a 7 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_8\"] = \"Push a 8 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_9\"] = \"Push a 9 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_10\"] = \"Push a 10 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_11\"] = \"Push a 11 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_12\"] = \"Push a 12 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_13\"] = \"Push a 13 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_14\"] = \"Push a 14 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_15\"] = \"Push a 15 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_16\"] = \"Push a 16 (VM Number) onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_NOP\"] = \"No operation. Note: OP_NOP counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_VER\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_VER counts toward the opcode limit. (Historically, this pushed a protocol version number to the stack.)\";\n    OpcodeDescriptionsXEC[\"OP_IF\"] = \"Pop the top item from the stack. If it is not \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsXEC[\"OP_NOTIF\"] = \"Pop the top item from the stack. If it is \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsXEC[\"OP_VERIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_IF.)\";\n    OpcodeDescriptionsXEC[\"OP_VERNOTIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_NOTIF.)\";\n    OpcodeDescriptionsXEC[\"OP_ELSE\"] = \"Invert conditional evaluation within the current OP_IF ... OP_ENDIF block. (If evaluation is enabled, disable it, if it is disabled, enable it.)\";\n    OpcodeDescriptionsXEC[\"OP_ENDIF\"] = \"End the current OP_IF/OP_NOTIF ... OP_ENDIF block.\";\n    OpcodeDescriptionsXEC[\"OP_VERIFY\"] = \"Pop the top item from the stack and error if it isn't \\\"truthy\\\".\";\n    OpcodeDescriptionsXEC[\"OP_RETURN\"] = \"Error when executed.\";\n    OpcodeDescriptionsXEC[\"OP_TOALTSTACK\"] = \"Pop the top item from the stack and push it onto the alternate stack.\";\n    OpcodeDescriptionsXEC[\"OP_FROMALTSTACK\"] = \"Pop the top item from the alternate stack and push it onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_2DROP\"] = \"Pop the top 2 items from the stack and discard them.\";\n    OpcodeDescriptionsXEC[\"OP_2DUP\"] = \"Duplicate the top 2 items on the stack. (E.g. [a, b] -> [a, b, a, b])\";\n    OpcodeDescriptionsXEC[\"OP_3DUP\"] = \"Duplicate the top 3 items on the stack. (E.g. [a, b, c] -> [a, b, c, a, b, c])\";\n    OpcodeDescriptionsXEC[\"OP_2OVER\"] = \"Duplicate the 2 items beginning at a depth of 2 on the stack. (E.g. [a, b, c, d] -> [a, b, c, d, a, b])\";\n    OpcodeDescriptionsXEC[\"OP_2ROT\"] = \"Rotate the top 6 items on the stack, bringing the fifth and sixth items to the top. (E.g. [a, b, c, d, e, f] -> [c, d, e, f, a, b])\";\n    OpcodeDescriptionsXEC[\"OP_2SWAP\"] = \"Swap the positions of the top two pairs of items on the stack. (E.g. [a, b, c, d] -> [c, d, a, b])\";\n    OpcodeDescriptionsXEC[\"OP_IFDUP\"] = \"If the top item on the stack is \\\"truthy\\\", duplicate it.\";\n    OpcodeDescriptionsXEC[\"OP_DEPTH\"] = \"Push the current number of stack items as a VM Number.\";\n    OpcodeDescriptionsXEC[\"OP_DROP\"] = \"Pop the top item from the stack and discard it. (E.g. [a] -> [])\";\n    OpcodeDescriptionsXEC[\"OP_DUP\"] = \"Duplicate the top item on the stack. (E.g. [a] -> [a, a])\";\n    OpcodeDescriptionsXEC[\"OP_NIP\"] = \"Remove the second-to-top item from the stack. (E.g. [a, b] -> [b])\";\n    OpcodeDescriptionsXEC[\"OP_OVER\"] = \"Duplicate the second-to-top item on the stack. (E.g. [a, b] -> [a, b, a])\";\n    OpcodeDescriptionsXEC[\"OP_PICK\"] = \"Pop the top item from the stack as a VM Number. Duplicate the item at that depth (zero-indexed), placing it on top of the stack. (E.g. [a, b, c, 2] -> [a, b, c, a])\";\n    OpcodeDescriptionsXEC[\"OP_ROLL\"] = \"Pop the top item from the stack as a VM Number. Move the item at that depth (zero-indexed) to the top of the stack. (E.g. [a, b, c, 2] -> [b, c, a])\";\n    OpcodeDescriptionsXEC[\"OP_ROT\"] = \"Rotate the top 3 items on the stack, bringing the third item to the top. (E.g. [a, b, c] -> [b, c, a])\";\n    OpcodeDescriptionsXEC[\"OP_SWAP\"] = \"Swap the top two items on the stack. (E.g. [a, b] -> [b, a])\";\n    OpcodeDescriptionsXEC[\"OP_TUCK\"] = \"Duplicate the item at the top of the stack, inserting it below the second-to-top item. (E.g. [a, b] -> [b, a, b])\";\n    OpcodeDescriptionsXEC[\"OP_CAT\"] = \"Pop the top 2 items from the stack and concatenate them, pushing the result.\";\n    OpcodeDescriptionsXEC[\"OP_SPLIT\"] = \"Pop the top item from the stack as an index (VM Number) and the next item as a byte array. Split the byte array into two stack items at the index (zero-based), pushing the results.\";\n    OpcodeDescriptionsXEC[\"OP_NUM2BIN\"] = \"Pop the top item from the stack as an item length (VM Number) and the next item as a VM Number (without encoding restrictions). Re-encode the number using a byte array of the provided length, filling any unused bytes with zeros, then push the result. (If the requested length is too short to encode the number, error.)\";\n    OpcodeDescriptionsXEC[\"OP_BIN2NUM\"] = \"Pop the top item from the stack as a VM Number without encoding restrictions. Minimally-encode the number and push the result. (If the number can't be encoded in 4 bytes or less, error.)\";\n    OpcodeDescriptionsXEC[\"OP_SIZE\"] = \"Push the byte-length of the top stack item as a VM Number.\";\n    OpcodeDescriptionsXEC[\"OP_INVERT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this flipped all the bits in a stack item.)\";\n    OpcodeDescriptionsXEC[\"OP_AND\"] = \"Pop the top 2 items from the stack and perform a bitwise AND on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsXEC[\"OP_OR\"] = \"Pop the top 2 items from the stack and perform a bitwise OR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsXEC[\"OP_XOR\"] = \"Pop the top 2 items from the stack and perform a bitwise XOR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsXEC[\"OP_EQUAL\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If they are the same, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_EQUALVERIFY\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If the values are different, error. (This operation is a combination of OP_EQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsXEC[\"OP_RESERVED1\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED1 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_RESERVED2\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED2 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_1ADD\"] = \"Pop the top item from the stack as a VM Number, add 1, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_1SUB\"] = \"Pop the top item from the stack as a VM Number, subtract 1, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_2MUL\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this multiplied a VM Number by 2.)\";\n    OpcodeDescriptionsXEC[\"OP_2DIV\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this divided a VM Number by 2.)\";\n    OpcodeDescriptionsXEC[\"OP_NEGATE\"] = \"Pop the top item from the stack as a VM Number, negate it, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_ABS\"] = \"Pop the top item from the stack as a VM Number, take its absolute value, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_NOT\"] = \"Pop the top item from the stack as a VM Number. If its value is 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_0NOTEQUAL\"] = \"Pop the top item from the stack as a VM Number. If its value is not 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_ADD\"] = \"Pop the top two items from the stack as VM Numbers. Add them, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_SUB\"] = \"Pop the top two items from the stack as VM Numbers. Subtract the top item from the second item, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_MUL\"] = \"Pop the top two items from the stack as VM Numbers. Multiply them, then push the result.\";\n    OpcodeDescriptionsXEC[\"OP_DIV\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the result to the stack.\";\n    OpcodeDescriptionsXEC[\"OP_MOD\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the remainder to the stack.\";\n    OpcodeDescriptionsXEC[\"OP_LSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, left bit shift.)\";\n    OpcodeDescriptionsXEC[\"OP_RSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, right bit shift.)\";\n    OpcodeDescriptionsXEC[\"OP_BOOLAND\"] = \"Pop the top two items from the stack as VM Numbers. If neither value is a 0 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_BOOLOR\"] = \"Pop the top two items from the stack as VM Numbers. If either value is a 1 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_NUMEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_NUMEQUALVERIFY\"] = \"Pop the top two items from the stack as VM Numbers. If the values are different, error. (This operation is a combination of OP_NUMEQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsXEC[\"OP_NUMNOTEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are not equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_LESSTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_GREATERTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_LESSTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_GREATERTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_MIN\"] = \"Pop the top two items from the stack as VM Numbers. Push the smaller of the two numbers.\";\n    OpcodeDescriptionsXEC[\"OP_MAX\"] = \"Pop the top two items from the stack as VM Numbers. Push the larger of the two numbers.\";\n    OpcodeDescriptionsXEC[\"OP_WITHIN\"] = \"Pop the top three items from the stack as VM Numbers. If the top number is within the range defined by the following two numbers (left-inclusive), push a 1 (VM Number). Otherwise, push a 0 (VM Number). (E.g. for [a, b, c]: if (b <= a), and (a < c), [1]. Else [0].)\";\n    OpcodeDescriptionsXEC[\"OP_RIPEMD160\"] = \"Pop the top item from the stack and pass it through ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_SHA1\"] = \"Pop the top item from the stack and pass it through sha1, pushing the result onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_SHA256\"] = \"Pop the top item from the stack and pass it through sha256, pushing the result onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_HASH160\"] = \"Pop the top item from the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_HASH256\"] = \"Pop the top item from the stack and pass it through sha256 twice, pushing the result onto the stack.\";\n    OpcodeDescriptionsXEC[\"OP_CODESEPARATOR\"] = \"Update the value of lastCodeSeparator to the instruction pointer's current value. (This reduces the coverage of signing serializations used in signature verification operations.)\";\n    OpcodeDescriptionsXEC[\"OP_CHECKSIG\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_CHECKSIGVERIFY\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is not valid, error. (This operation is a combination of OP_CHECKSIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsXEC[\"OP_CHECKMULTISIG\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, pop a final VM Number that must be 0 due to a protocol bug. Checking each signature against each public key in order, if all signatures are valid \\u2013 and the required number of signatures have been provided \\u2013 push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_CHECKMULTISIGVERIFY\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, (due to a protocol bug) pop an unused final VM Number that must be 0. Checking each signature against each public key in order, if any signatures are invalid \\u2013 or the required number of signatures have not been provided \\u2013 error. (This operation is a combination of OP_CHECKMULTISIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsXEC[\"OP_NOP1\"] = \"No operation (reserved for future expansion). Note: OP_NOP1 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_CHECKLOCKTIMEVERIFY\"] = \"Verify the transaction occurs after an absolute block time or height: read the top item on the stack as a VM Number (without removing it), and compare it to the transaction's locktime. If the required locktime has not passed, or if locktime has been disabled for this input by a maximized sequence number, error.\";\n    OpcodeDescriptionsXEC[\"OP_CHECKSEQUENCEVERIFY\"] = \"Verify the transaction occurs after the output being spent has \\\"aged\\\" by a relative block time or block height since it was created: read the top item on the stack as a VM Number (without removing it), and compare it to the age encoded in the input's sequence number. If the required relative locktime has not passed, or if relative locktime has been disabled by the sequence number or the transaction version, error.\";\n    OpcodeDescriptionsXEC[\"OP_NOP4\"] = \"No operation (reserved for future expansion). Note: OP_NOP4 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_NOP6\"] = \"No operation (reserved for future expansion). Note: OP_NOP6 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_NOP5\"] = \"No operation (reserved for future expansion). Note: OP_NOP5 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_NOP7\"] = \"No operation (reserved for future expansion). Note: OP_NOP7 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_NOP8\"] = \"No operation (reserved for future expansion). Note: OP_NOP8 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_NOP9\"] = \"No operation (reserved for future expansion). Note: OP_NOP9 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_NOP10\"] = \"No operation (reserved for future expansion). Note: OP_NOP10 counts toward the opcode limit.\";\n    OpcodeDescriptionsXEC[\"OP_CHECKDATASIG\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsXEC[\"OP_CHECKDATASIGVERIFY\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is not valid, error. (This operation is a combination of OP_CHECKDATASIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsXEC[\"OP_REVERSEBYTES\"] = \"Pop the top item from the stack and reverse it, pushing the result.\";\n})(OpcodeDescriptionsXEC || (OpcodeDescriptionsXEC = {}));\n//# sourceMappingURL=xec-descriptions.js.map", "import { createInstructionSetBCH2022 } from '../bch/2022/bch-2022-instruction-set.js';\nimport { OpcodesBCH2022 } from '../bch/2022/bch-2022-opcodes.js';\nimport { conditionallyEvaluate, disabledOperation, incrementOperationCount, mapOverOperations, undefinedOperation, } from '../common/common.js';\nimport { op0NotEqual4Byte, op1Add4Byte, op1Sub4Byte, opAbs4Byte, opAdd4Byte, opBin2Num4Byte, opBoolAnd4Byte, opBoolOr4Byte, opDiv4Byte, opGreaterThan4Byte, opGreaterThanOrEqual4Byte, opLessThan4Byte, opLessThanOrEqual4Byte, opMax4Byte, opMin4Byte, opMod4Byte, opNegate4Byte, opNot4Byte, opNum2Bin4Byte, opNumEqual4Byte, opNumEqualVerify4Byte, opNumNotEqual4Byte, opPick4Byte, opRoll4Byte, opSplit4Byte, opSub4Byte, opWithin4Byte, } from './xec-vm-number-operations.js';\n/**\n * create an instance of the XEC virtual machine instruction set.\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createInstructionSetXEC = (standard = true) => {\n    const instructionSet = createInstructionSetBCH2022(standard);\n    return {\n        ...instructionSet,\n        operations: {\n            ...instructionSet.operations,\n            ...mapOverOperations([conditionallyEvaluate, incrementOperationCount], {\n                [OpcodesBCH2022.OP_PICK]: opPick4Byte,\n                [OpcodesBCH2022.OP_ROLL]: opRoll4Byte,\n                [OpcodesBCH2022.OP_SPLIT]: opSplit4Byte,\n                [OpcodesBCH2022.OP_NUM2BIN]: opNum2Bin4Byte,\n                [OpcodesBCH2022.OP_BIN2NUM]: opBin2Num4Byte,\n                [OpcodesBCH2022.OP_1ADD]: op1Add4Byte,\n                [OpcodesBCH2022.OP_1SUB]: op1Sub4Byte,\n                [OpcodesBCH2022.OP_NEGATE]: opNegate4Byte,\n                [OpcodesBCH2022.OP_ABS]: opAbs4Byte,\n                [OpcodesBCH2022.OP_NOT]: opNot4Byte,\n                [OpcodesBCH2022.OP_0NOTEQUAL]: op0NotEqual4Byte,\n                [OpcodesBCH2022.OP_ADD]: opAdd4Byte,\n                [OpcodesBCH2022.OP_SUB]: opSub4Byte,\n                [OpcodesBCH2022.OP_MUL]: disabledOperation,\n                [OpcodesBCH2022.OP_DIV]: opDiv4Byte,\n                [OpcodesBCH2022.OP_MOD]: opMod4Byte,\n                [OpcodesBCH2022.OP_BOOLAND]: opBoolAnd4Byte,\n                [OpcodesBCH2022.OP_BOOLOR]: opBoolOr4Byte,\n                [OpcodesBCH2022.OP_NUMEQUAL]: opNumEqual4Byte,\n                [OpcodesBCH2022.OP_NUMEQUALVERIFY]: opNumEqualVerify4Byte,\n                [OpcodesBCH2022.OP_NUMNOTEQUAL]: opNumNotEqual4Byte,\n                [OpcodesBCH2022.OP_LESSTHAN]: opLessThan4Byte,\n                [OpcodesBCH2022.OP_GREATERTHAN]: opGreaterThan4Byte,\n                [OpcodesBCH2022.OP_LESSTHANOREQUAL]: opLessThanOrEqual4Byte,\n                [OpcodesBCH2022.OP_GREATERTHANOREQUAL]: opGreaterThanOrEqual4Byte,\n                [OpcodesBCH2022.OP_MIN]: opMin4Byte,\n                [OpcodesBCH2022.OP_MAX]: opMax4Byte,\n                [OpcodesBCH2022.OP_WITHIN]: opWithin4Byte,\n            }),\n            [OpcodesBCH2022.OP_INPUTINDEX]: undefinedOperation,\n            [OpcodesBCH2022.OP_ACTIVEBYTECODE]: undefinedOperation,\n            [OpcodesBCH2022.OP_TXVERSION]: undefinedOperation,\n            [OpcodesBCH2022.OP_TXINPUTCOUNT]: undefinedOperation,\n            [OpcodesBCH2022.OP_TXOUTPUTCOUNT]: undefinedOperation,\n            [OpcodesBCH2022.OP_TXLOCKTIME]: undefinedOperation,\n            [OpcodesBCH2022.OP_UTXOVALUE]: undefinedOperation,\n            [OpcodesBCH2022.OP_UTXOBYTECODE]: undefinedOperation,\n            [OpcodesBCH2022.OP_OUTPOINTTXHASH]: undefinedOperation,\n            [OpcodesBCH2022.OP_OUTPOINTINDEX]: undefinedOperation,\n            [OpcodesBCH2022.OP_INPUTBYTECODE]: undefinedOperation,\n            [OpcodesBCH2022.OP_INPUTSEQUENCENUMBER]: undefinedOperation,\n            [OpcodesBCH2022.OP_OUTPUTVALUE]: undefinedOperation,\n            [OpcodesBCH2022.OP_OUTPUTBYTECODE]: undefinedOperation,\n        },\n    };\n};\n//# sourceMappingURL=xec-instruction-set.js.map", "import { isPayToScriptHash20 } from '../../../../address/address.js';\nimport { ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha1 as internalSha1, sha256 as internalSha256, } from '../../../../crypto/crypto.js';\nimport { encodeTransactionBCH } from '../../../../message/message.js';\nimport { applyError, AuthenticationErrorCommon, authenticationInstructionsAreMalformed, cloneAuthenticationProgramStateBCH, cloneStack, conditionallyEvaluate, ConsensusBCH, createAuthenticationProgramStateCommon, decodeAuthenticationInstructions, disabledOperation, incrementOperationCount, isArbitraryDataOutput, isPushOnly, isStandardOutputBytecode, isWitnessProgram, mapOverOperations, op0NotEqual, op1Add, op1Sub, op2Drop, op2Dup, op2Over, op2Rot, op2Swap, op3Dup, opAbs, opActiveBytecode, opAdd, opAnd, opBin2Num, opBoolAnd, opBoolOr, opCat, opCheckDataSig, opCheckDataSigVerify, opCheckLockTimeVerify, opCheckMultiSig, opCheckMultiSigVerify, opCheckSequenceVerify, opCheckSig, opCheckSigVerify, opCodeSeparator, opDepth, opDiv, opDrop, opDup, opElse, opEndIf, opEqual, opEqualVerify, opFromAltStack, opGreaterThan, opGreaterThanOrEqual, opHash160, opHash256, opIf, opIfDup, opInputBytecode, opInputIndex, opInputSequenceNumber, opLessThan, opLessThanOrEqual, opMax, opMin, opMod, opMul, opNegate, opNip, opNop, opNopDisallowed, opNot, opNotIf, opNum2Bin, opNumEqual, opNumEqualVerify, opNumNotEqual, opOr, opOutpointIndex, opOutpointTxHash, opOutputBytecode, opOutputValue, opOver, opPick, opReturn, opReverseBytes, opRipemd160, opRoll, opRot, opSha1, opSha256, opSize, opSplit, opSub, opSwap, opToAltStack, opTuck, opTxInputCount, opTxLocktime, opTxOutputCount, opTxVersion, opUtxoBytecode, opUtxoValue, opVerify, opWithin, opXor, pushNumberOperation, pushOperation, reservedOperation, stackItemIsTruthy, undefinedOperation, } from '../../common/common.js';\nimport { OpcodesBCH } from '../2023/bch-2023.js';\n/**\n * create an instance of the BCH 2022 virtual machine instruction set.\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createInstructionSetBCH2022 = (standard = true, { ripemd160, secp256k1, sha1, sha256, } = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha1: internalSha1,\n    sha256: internalSha256,\n}) => {\n    const conditionallyPush = pushOperation();\n    return {\n        clone: cloneAuthenticationProgramStateBCH,\n        continue: (state) => state.error === undefined && state.ip < state.instructions.length,\n        // eslint-disable-next-line complexity\n        evaluate: (program, stateEvaluate) => {\n            const { unlockingBytecode } = \n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            program.transaction.inputs[program.inputIndex];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const { lockingBytecode } = program.sourceOutputs[program.inputIndex];\n            const unlockingInstructions = decodeAuthenticationInstructions(unlockingBytecode);\n            const lockingInstructions = decodeAuthenticationInstructions(lockingBytecode);\n            const initialState = createAuthenticationProgramStateCommon({\n                instructions: unlockingInstructions,\n                program,\n                stack: [],\n            });\n            if (unlockingBytecode.length > ConsensusBCH.maximumBytecodeLength) {\n                return applyError(initialState, `The provided unlocking bytecode (${unlockingBytecode.length} bytes) exceeds the maximum bytecode length (${ConsensusBCH.maximumBytecodeLength} bytes).`);\n            }\n            if (authenticationInstructionsAreMalformed(unlockingInstructions)) {\n                return applyError(initialState, AuthenticationErrorCommon.malformedUnlockingBytecode);\n            }\n            if (!isPushOnly(unlockingBytecode)) {\n                return applyError(initialState, AuthenticationErrorCommon.requiresPushOnly);\n            }\n            if (lockingBytecode.length > ConsensusBCH.maximumBytecodeLength) {\n                return applyError(initialState, AuthenticationErrorCommon.exceededMaximumBytecodeLengthLocking);\n            }\n            if (authenticationInstructionsAreMalformed(lockingInstructions)) {\n                return applyError(initialState, AuthenticationErrorCommon.malformedLockingBytecode);\n            }\n            const unlockingResult = stateEvaluate(initialState);\n            if (unlockingResult.error !== undefined) {\n                return unlockingResult;\n            }\n            if (unlockingResult.controlStack.length !== 0) {\n                return applyError(initialState, AuthenticationErrorCommon.nonEmptyControlStack);\n            }\n            const lockingResult = stateEvaluate(createAuthenticationProgramStateCommon({\n                instructions: lockingInstructions,\n                program,\n                stack: unlockingResult.stack,\n            }));\n            if (!isPayToScriptHash20(lockingBytecode)) {\n                return lockingResult;\n            }\n            const p2shStack = cloneStack(unlockingResult.stack);\n            // eslint-disable-next-line functional/immutable-data\n            const p2shScript = p2shStack.pop() ?? Uint8Array.of();\n            if (p2shStack.length === 0 && isWitnessProgram(p2shScript)) {\n                return lockingResult;\n            }\n            const p2shInstructions = decodeAuthenticationInstructions(p2shScript);\n            return authenticationInstructionsAreMalformed(p2shInstructions)\n                ? {\n                    ...lockingResult,\n                    error: AuthenticationErrorCommon.malformedP2shBytecode,\n                }\n                : stateEvaluate(createAuthenticationProgramStateCommon({\n                    instructions: p2shInstructions,\n                    program,\n                    stack: p2shStack,\n                }));\n        },\n        every: (state) => \n        // TODO: implement sigchecks https://gitlab.com/bitcoin-cash-node/bchn-sw/bitcoincash-upgrade-specifications/-/blob/master/spec/2020-05-15-sigchecks.md\n        state.stack.length + state.alternateStack.length >\n            ConsensusBCH.maximumStackDepth\n            ? applyError(state, AuthenticationErrorCommon.exceededMaximumStackDepth)\n            : state.operationCount > ConsensusBCH.maximumOperationCount\n                ? applyError(state, AuthenticationErrorCommon.exceededMaximumOperationCount)\n                : state,\n        operations: {\n            [OpcodesBCH.OP_0]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_1]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_2]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_3]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_4]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_5]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_6]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_7]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_8]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_9]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_10]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_11]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_12]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_13]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_14]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_15]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_16]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_17]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_18]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_19]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_20]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_21]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_22]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_23]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_24]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_25]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_26]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_27]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_28]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_29]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_30]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_31]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_32]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_33]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_34]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_35]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_36]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_37]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_38]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_39]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_40]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_41]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_42]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_43]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_44]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_45]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_46]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_47]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_48]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_49]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_50]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_51]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_52]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_53]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_54]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_55]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_56]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_57]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_58]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_59]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_60]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_61]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_62]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_63]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_64]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_65]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_66]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_67]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_68]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_69]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_70]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_71]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_72]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_73]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_74]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHBYTES_75]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHDATA_1]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHDATA_2]: conditionallyPush,\n            [OpcodesBCH.OP_PUSHDATA_4]: conditionallyPush,\n            [OpcodesBCH.OP_1NEGATE]: conditionallyEvaluate(pushNumberOperation(-1)),\n            [OpcodesBCH.OP_RESERVED]: conditionallyEvaluate(reservedOperation),\n            [OpcodesBCH.OP_1]: conditionallyEvaluate(pushNumberOperation(1)),\n            /* eslint-disable @typescript-eslint/no-magic-numbers */\n            [OpcodesBCH.OP_2]: conditionallyEvaluate(pushNumberOperation(2)),\n            [OpcodesBCH.OP_3]: conditionallyEvaluate(pushNumberOperation(3)),\n            [OpcodesBCH.OP_4]: conditionallyEvaluate(pushNumberOperation(4)),\n            [OpcodesBCH.OP_5]: conditionallyEvaluate(pushNumberOperation(5)),\n            [OpcodesBCH.OP_6]: conditionallyEvaluate(pushNumberOperation(6)),\n            [OpcodesBCH.OP_7]: conditionallyEvaluate(pushNumberOperation(7)),\n            [OpcodesBCH.OP_8]: conditionallyEvaluate(pushNumberOperation(8)),\n            [OpcodesBCH.OP_9]: conditionallyEvaluate(pushNumberOperation(9)),\n            [OpcodesBCH.OP_10]: conditionallyEvaluate(pushNumberOperation(10)),\n            [OpcodesBCH.OP_11]: conditionallyEvaluate(pushNumberOperation(11)),\n            [OpcodesBCH.OP_12]: conditionallyEvaluate(pushNumberOperation(12)),\n            [OpcodesBCH.OP_13]: conditionallyEvaluate(pushNumberOperation(13)),\n            [OpcodesBCH.OP_14]: conditionallyEvaluate(pushNumberOperation(14)),\n            [OpcodesBCH.OP_15]: conditionallyEvaluate(pushNumberOperation(15)),\n            [OpcodesBCH.OP_16]: conditionallyEvaluate(pushNumberOperation(16)),\n            /* eslint-enable @typescript-eslint/no-magic-numbers */\n            ...mapOverOperations([incrementOperationCount], {\n                [OpcodesBCH.OP_NOP]: conditionallyEvaluate(opNop),\n                [OpcodesBCH.OP_VER]: conditionallyEvaluate(reservedOperation),\n                [OpcodesBCH.OP_IF]: opIf,\n                [OpcodesBCH.OP_NOTIF]: opNotIf,\n                [OpcodesBCH.OP_VERIF]: reservedOperation,\n                [OpcodesBCH.OP_VERNOTIF]: reservedOperation,\n                [OpcodesBCH.OP_ELSE]: opElse,\n                [OpcodesBCH.OP_ENDIF]: opEndIf,\n                [OpcodesBCH.OP_VERIFY]: conditionallyEvaluate(opVerify),\n                [OpcodesBCH.OP_RETURN]: conditionallyEvaluate(opReturn),\n                [OpcodesBCH.OP_TOALTSTACK]: conditionallyEvaluate(opToAltStack),\n                [OpcodesBCH.OP_FROMALTSTACK]: conditionallyEvaluate(opFromAltStack),\n                [OpcodesBCH.OP_2DROP]: conditionallyEvaluate(op2Drop),\n                [OpcodesBCH.OP_2DUP]: conditionallyEvaluate(op2Dup),\n                [OpcodesBCH.OP_3DUP]: conditionallyEvaluate(op3Dup),\n                [OpcodesBCH.OP_2OVER]: conditionallyEvaluate(op2Over),\n                [OpcodesBCH.OP_2ROT]: conditionallyEvaluate(op2Rot),\n                [OpcodesBCH.OP_2SWAP]: conditionallyEvaluate(op2Swap),\n                [OpcodesBCH.OP_IFDUP]: conditionallyEvaluate(opIfDup),\n                [OpcodesBCH.OP_DEPTH]: conditionallyEvaluate(opDepth),\n                [OpcodesBCH.OP_DROP]: conditionallyEvaluate(opDrop),\n                [OpcodesBCH.OP_DUP]: conditionallyEvaluate(opDup),\n                [OpcodesBCH.OP_NIP]: conditionallyEvaluate(opNip),\n                [OpcodesBCH.OP_OVER]: conditionallyEvaluate(opOver),\n                [OpcodesBCH.OP_PICK]: conditionallyEvaluate(opPick),\n                [OpcodesBCH.OP_ROLL]: conditionallyEvaluate(opRoll),\n                [OpcodesBCH.OP_ROT]: conditionallyEvaluate(opRot),\n                [OpcodesBCH.OP_SWAP]: conditionallyEvaluate(opSwap),\n                [OpcodesBCH.OP_TUCK]: conditionallyEvaluate(opTuck),\n                [OpcodesBCH.OP_CAT]: conditionallyEvaluate(opCat),\n                [OpcodesBCH.OP_SPLIT]: conditionallyEvaluate(opSplit),\n                [OpcodesBCH.OP_NUM2BIN]: conditionallyEvaluate(opNum2Bin),\n                [OpcodesBCH.OP_BIN2NUM]: conditionallyEvaluate(opBin2Num),\n                [OpcodesBCH.OP_SIZE]: conditionallyEvaluate(opSize),\n                [OpcodesBCH.OP_INVERT]: disabledOperation,\n                [OpcodesBCH.OP_AND]: conditionallyEvaluate(opAnd),\n                [OpcodesBCH.OP_OR]: conditionallyEvaluate(opOr),\n                [OpcodesBCH.OP_XOR]: conditionallyEvaluate(opXor),\n                [OpcodesBCH.OP_EQUAL]: conditionallyEvaluate(opEqual),\n                [OpcodesBCH.OP_EQUALVERIFY]: conditionallyEvaluate(opEqualVerify),\n                [OpcodesBCH.OP_RESERVED1]: conditionallyEvaluate(reservedOperation),\n                [OpcodesBCH.OP_RESERVED2]: conditionallyEvaluate(reservedOperation),\n                [OpcodesBCH.OP_1ADD]: conditionallyEvaluate(op1Add),\n                [OpcodesBCH.OP_1SUB]: conditionallyEvaluate(op1Sub),\n                [OpcodesBCH.OP_2MUL]: disabledOperation,\n                [OpcodesBCH.OP_2DIV]: disabledOperation,\n                [OpcodesBCH.OP_NEGATE]: conditionallyEvaluate(opNegate),\n                [OpcodesBCH.OP_ABS]: conditionallyEvaluate(opAbs),\n                [OpcodesBCH.OP_NOT]: conditionallyEvaluate(opNot),\n                [OpcodesBCH.OP_0NOTEQUAL]: conditionallyEvaluate(op0NotEqual),\n                [OpcodesBCH.OP_ADD]: conditionallyEvaluate(opAdd),\n                [OpcodesBCH.OP_SUB]: conditionallyEvaluate(opSub),\n                [OpcodesBCH.OP_MUL]: conditionallyEvaluate(opMul),\n                [OpcodesBCH.OP_DIV]: conditionallyEvaluate(opDiv),\n                [OpcodesBCH.OP_MOD]: conditionallyEvaluate(opMod),\n                [OpcodesBCH.OP_LSHIFT]: disabledOperation,\n                [OpcodesBCH.OP_RSHIFT]: disabledOperation,\n                [OpcodesBCH.OP_BOOLAND]: conditionallyEvaluate(opBoolAnd),\n                [OpcodesBCH.OP_BOOLOR]: conditionallyEvaluate(opBoolOr),\n                [OpcodesBCH.OP_NUMEQUAL]: conditionallyEvaluate(opNumEqual),\n                [OpcodesBCH.OP_NUMEQUALVERIFY]: conditionallyEvaluate(opNumEqualVerify),\n                [OpcodesBCH.OP_NUMNOTEQUAL]: conditionallyEvaluate(opNumNotEqual),\n                [OpcodesBCH.OP_LESSTHAN]: conditionallyEvaluate(opLessThan),\n                [OpcodesBCH.OP_GREATERTHAN]: conditionallyEvaluate(opGreaterThan),\n                [OpcodesBCH.OP_LESSTHANOREQUAL]: conditionallyEvaluate(opLessThanOrEqual),\n                [OpcodesBCH.OP_GREATERTHANOREQUAL]: conditionallyEvaluate(opGreaterThanOrEqual),\n                [OpcodesBCH.OP_MIN]: conditionallyEvaluate(opMin),\n                [OpcodesBCH.OP_MAX]: conditionallyEvaluate(opMax),\n                [OpcodesBCH.OP_WITHIN]: conditionallyEvaluate(opWithin),\n                [OpcodesBCH.OP_RIPEMD160]: conditionallyEvaluate(opRipemd160({ ripemd160 })),\n                [OpcodesBCH.OP_SHA1]: conditionallyEvaluate(opSha1({ sha1 })),\n                [OpcodesBCH.OP_SHA256]: conditionallyEvaluate(opSha256({ sha256 })),\n                [OpcodesBCH.OP_HASH160]: conditionallyEvaluate(opHash160({ ripemd160, sha256 })),\n                [OpcodesBCH.OP_HASH256]: conditionallyEvaluate(opHash256({ sha256 })),\n                [OpcodesBCH.OP_CODESEPARATOR]: conditionallyEvaluate(opCodeSeparator),\n                [OpcodesBCH.OP_CHECKSIG]: conditionallyEvaluate(opCheckSig({ secp256k1, sha256 })),\n                [OpcodesBCH.OP_CHECKSIGVERIFY]: conditionallyEvaluate(opCheckSigVerify({ secp256k1, sha256 })),\n                [OpcodesBCH.OP_CHECKMULTISIG]: conditionallyEvaluate(opCheckMultiSig({ secp256k1, sha256 })),\n                [OpcodesBCH.OP_CHECKMULTISIGVERIFY]: conditionallyEvaluate(opCheckMultiSigVerify({ secp256k1, sha256 })),\n                ...(standard\n                    ? {\n                        [OpcodesBCH.OP_NOP1]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_CHECKLOCKTIMEVERIFY]: conditionallyEvaluate(opCheckLockTimeVerify),\n                        [OpcodesBCH.OP_CHECKSEQUENCEVERIFY]: conditionallyEvaluate(opCheckSequenceVerify),\n                        [OpcodesBCH.OP_NOP4]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_NOP5]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_NOP6]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_NOP7]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_NOP8]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_NOP9]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH.OP_NOP10]: conditionallyEvaluate(opNopDisallowed),\n                    }\n                    : {\n                        [OpcodesBCH.OP_NOP1]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_CHECKLOCKTIMEVERIFY]: conditionallyEvaluate(opCheckLockTimeVerify),\n                        [OpcodesBCH.OP_CHECKSEQUENCEVERIFY]: conditionallyEvaluate(opCheckSequenceVerify),\n                        [OpcodesBCH.OP_NOP4]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_NOP5]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_NOP6]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_NOP7]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_NOP8]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_NOP9]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH.OP_NOP10]: conditionallyEvaluate(opNop),\n                    }),\n                [OpcodesBCH.OP_CHECKDATASIG]: conditionallyEvaluate(opCheckDataSig({ secp256k1, sha256 })),\n                [OpcodesBCH.OP_CHECKDATASIGVERIFY]: conditionallyEvaluate(opCheckDataSigVerify({ secp256k1, sha256 })),\n                [OpcodesBCH.OP_REVERSEBYTES]: conditionallyEvaluate(opReverseBytes),\n                [OpcodesBCH.OP_INPUTINDEX]: conditionallyEvaluate(opInputIndex),\n                [OpcodesBCH.OP_ACTIVEBYTECODE]: conditionallyEvaluate(opActiveBytecode),\n                [OpcodesBCH.OP_TXVERSION]: conditionallyEvaluate(opTxVersion),\n                [OpcodesBCH.OP_TXINPUTCOUNT]: conditionallyEvaluate(opTxInputCount),\n                [OpcodesBCH.OP_TXOUTPUTCOUNT]: conditionallyEvaluate(opTxOutputCount),\n                [OpcodesBCH.OP_TXLOCKTIME]: conditionallyEvaluate(opTxLocktime),\n                [OpcodesBCH.OP_UTXOVALUE]: conditionallyEvaluate(opUtxoValue),\n                [OpcodesBCH.OP_UTXOBYTECODE]: conditionallyEvaluate(opUtxoBytecode),\n                [OpcodesBCH.OP_OUTPOINTTXHASH]: conditionallyEvaluate(opOutpointTxHash),\n                [OpcodesBCH.OP_OUTPOINTINDEX]: conditionallyEvaluate(opOutpointIndex),\n                [OpcodesBCH.OP_INPUTBYTECODE]: conditionallyEvaluate(opInputBytecode),\n                [OpcodesBCH.OP_INPUTSEQUENCENUMBER]: conditionallyEvaluate(opInputSequenceNumber),\n                [OpcodesBCH.OP_OUTPUTVALUE]: conditionallyEvaluate(opOutputValue),\n                [OpcodesBCH.OP_OUTPUTBYTECODE]: conditionallyEvaluate(opOutputBytecode),\n            }),\n        },\n        success: (state) => {\n            if (state.error !== undefined) {\n                return state.error;\n            }\n            if (state.controlStack.length !== 0) {\n                return AuthenticationErrorCommon.nonEmptyControlStack;\n            }\n            if (state.stack.length !== 1) {\n                return AuthenticationErrorCommon.requiresCleanStack;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (!stackItemIsTruthy(state.stack[0])) {\n                return AuthenticationErrorCommon.unsuccessfulEvaluation;\n            }\n            return true;\n        },\n        undefined: undefinedOperation,\n        // eslint-disable-next-line complexity\n        verify: ({ sourceOutputs, transaction }, evaluate, stateSuccess) => {\n            if (transaction.inputs.length === 0) {\n                return 'Transactions must have at least one input.';\n            }\n            if (transaction.outputs.length === 0) {\n                return 'Transactions must have at least one output.';\n            }\n            if (transaction.inputs.length !== sourceOutputs.length) {\n                return 'Unable to verify transaction: a single spent output must be provided for each transaction input.';\n            }\n            const transactionSize = encodeTransactionBCH(transaction).length;\n            if (transactionSize < ConsensusBCH.minimumTransactionSize) {\n                return `Transaction does not meet minimum size: the transaction is ${transactionSize} bytes, but the minimum transaction size is ${ConsensusBCH.minimumTransactionSize} bytes.`;\n            }\n            if (transactionSize > ConsensusBCH.maximumTransactionSize) {\n                return `Transaction exceeds maximum size: the transaction is ${transactionSize} bytes, but the maximum transaction size is ${ConsensusBCH.maximumTransactionSize} bytes.`;\n            }\n            if (standard) {\n                if (transaction.version < 1 ||\n                    transaction.version > ConsensusBCH.maximumStandardVersion) {\n                    return `Standard transactions must have a version no less than 1 and no greater than ${ConsensusBCH.maximumStandardVersion}.`;\n                }\n                if (transactionSize > ConsensusBCH.maximumStandardTransactionSize) {\n                    return `Transaction exceeds maximum standard size: this transaction is ${transactionSize} bytes, but the maximum standard transaction size is ${ConsensusBCH.maximumStandardTransactionSize} bytes.`;\n                }\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, output] of sourceOutputs.entries()) {\n                    if (!isStandardOutputBytecode(output.lockingBytecode)) {\n                        return `Standard transactions may only spend standard output types, but source output ${index} is non-standard.`;\n                    }\n                }\n                // eslint-disable-next-line functional/no-let\n                let totalArbitraryDataBytes = 0;\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, output] of transaction.outputs.entries()) {\n                    if (!isStandardOutputBytecode(output.lockingBytecode)) {\n                        return `Standard transactions may only create standard output types, but transaction output ${index} is non-standard.`;\n                    }\n                    // eslint-disable-next-line functional/no-conditional-statement\n                    if (isArbitraryDataOutput(output.lockingBytecode)) {\n                        // eslint-disable-next-line functional/no-expression-statement\n                        totalArbitraryDataBytes += output.lockingBytecode.length + 1;\n                    }\n                    /*\n                     * TODO: disallow dust outputs\n                     * if(IsDustOutput(output)) {\n                     *   return ``;\n                     * }\n                     */\n                }\n                if (totalArbitraryDataBytes > ConsensusBCH.maximumDataCarrierBytes) {\n                    return `Standard transactions may carry no more than ${ConsensusBCH.maximumDataCarrierBytes} bytes in arbitrary data outputs; this transaction includes ${totalArbitraryDataBytes} bytes of arbitrary data.`;\n                }\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, input] of transaction.inputs.entries()) {\n                    if (input.unlockingBytecode.length >\n                        ConsensusBCH.maximumStandardUnlockingBytecodeLength) {\n                        return `Input index ${index} is non-standard: the unlocking bytecode (${input.unlockingBytecode.length} bytes) exceeds the maximum standard unlocking bytecode length (${ConsensusBCH.maximumStandardUnlockingBytecodeLength} bytes).`;\n                    }\n                    if (!isPushOnly(input.unlockingBytecode)) {\n                        return `Input index ${index} is non-standard: unlocking bytecode may contain only push operations.`;\n                    }\n                }\n            }\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const index of transaction.inputs.keys()) {\n                const state = evaluate({\n                    inputIndex: index,\n                    sourceOutputs,\n                    transaction,\n                });\n                const result = stateSuccess(state);\n                if (typeof result === 'string') {\n                    return `Error in evaluating input index ${index}: ${result}`;\n                }\n            }\n            return true;\n        },\n    };\n};\n//# sourceMappingURL=bch-2022-instruction-set.js.map", "export * from './read-components.js';\nexport * from './transaction-encoding.js';\nexport * from './transaction-types.js';\n//# sourceMappingURL=message.js.map", "import { binToBigIntUint64LE, binToNumberUint32LE, formatError, readCompactSizeMinimal, } from '../format/format.js';\nexport var ReadBytesError;\n(function (ReadBytesError) {\n    ReadBytesError[\"insufficientLength\"] = \"Error reading bytes: insufficient length.\";\n})(ReadBytesError || (ReadBytesError = {}));\n/**\n * Returns a function that reads the requested number of bytes from a\n * {@link ReadPosition}, returning either an error message (as a string) or an\n * object containing the `Uint8Array` and the next {@link ReadPosition}.\n *\n * @param length - the number of bytes to read\n */\nexport const readBytes = (length) => (\n/**\n * the {@link ReadPosition} at which to start reading the bytes.\n */\nposition) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.index + length,\n    };\n    const result = position.bin.slice(position.index, nextPosition.index);\n    if (result.length !== length) {\n        return formatError(ReadBytesError.insufficientLength, `Provided length: ${result.length}`);\n    }\n    return { position: nextPosition, result };\n};\nexport var ReadUint32LEError;\n(function (ReadUint32LEError) {\n    ReadUint32LEError[\"insufficientBytes\"] = \"Error reading Uint32LE: requires 4 bytes.\";\n})(ReadUint32LEError || (ReadUint32LEError = {}));\n/**\n * Read a 4-byte, Uint32LE from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * number and the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading\n */\nexport const readUint32LE = (position) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.index + 4 /* ReadConstants.bytesPerUint32 */,\n    };\n    const uint32LEBin = position.bin.subarray(position.index, nextPosition.index);\n    if (uint32LEBin.length !== 4 /* ReadConstants.bytesPerUint32 */) {\n        return formatError(ReadUint32LEError.insufficientBytes, `Provided length: ${uint32LEBin.length}`);\n    }\n    const result = binToNumberUint32LE(uint32LEBin);\n    return { position: nextPosition, result };\n};\nexport var ReadUint64LEError;\n(function (ReadUint64LEError) {\n    ReadUint64LEError[\"insufficientBytes\"] = \"Error reading Uint64LE: requires 8 bytes.\";\n})(ReadUint64LEError || (ReadUint64LEError = {}));\n/**\n * Read {@link Output.valueSatoshis} from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Output.valueSatoshis} and the next {@link ReadPosition}.\n * @param position - the {@link ReadPosition} at which to start reading\n * {@link Output.valueSatoshis}\n */\nexport const readUint64LE = (position) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.index + 8 /* ReadConstants.bytesPerUint64 */,\n    };\n    const uint64LEBin = position.bin.subarray(position.index, nextPosition.index);\n    if (uint64LEBin.length !== 8 /* ReadConstants.bytesPerUint64 */) {\n        return formatError(ReadUint64LEError.insufficientBytes, `Provided length: ${uint64LEBin.length}`);\n    }\n    const result = binToBigIntUint64LE(uint64LEBin);\n    return { position: nextPosition, result };\n};\nexport var CompactSizePrefixedBinError;\n(function (CompactSizePrefixedBinError) {\n    CompactSizePrefixedBinError[\"invalidCompactSize\"] = \"Error reading CompactSize-prefixed bin: invalid CompactSize.\";\n    CompactSizePrefixedBinError[\"insufficientBytes\"] = \"Error reading CompactSize-prefixed bin: insufficient bytes.\";\n})(CompactSizePrefixedBinError || (CompactSizePrefixedBinError = {}));\n/**\n * Read a bin (`Uint8Array`) that is prefixed by a minimally-encoded\n * `CompactSize` starting at the provided {@link ReadPosition}, returning either\n * an error message (as a string) or an object containing the `Uint8Array` and\n * the next {@link ReadPosition}. (In the transaction format,\n * `CompactSize`-prefixes are used to indicate the length of unlocking bytecode,\n * locking bytecode, and non-fungible token commitments.)\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * `CompactSize`-prefixed bin (`Uint8Array`)\n */\nexport const readCompactSizePrefixedBin = (position) => {\n    const read = readCompactSizeMinimal(position);\n    if (typeof read === 'string') {\n        return formatError(CompactSizePrefixedBinError.invalidCompactSize, read);\n    }\n    const { result, position: p2 } = read;\n    const length = Number(result);\n    const nextPosition = { bin: position.bin, index: p2.index + length };\n    const contents = position.bin.slice(p2.index, nextPosition.index);\n    if (contents.length !== length) {\n        return formatError(CompactSizePrefixedBinError.insufficientBytes, `Required bytes: ${length}, remaining bytes: ${contents.length}`);\n    }\n    return { position: nextPosition, result: contents };\n};\n/**\n * Read the remaining bytes from the provided {@link ReadPosition}, returning\n * an object containing the `Uint8Array` and the next {@link ReadPosition}\n * (with `index === bin.length`).\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * remaining bytes\n */\nexport const readRemainingBytes = (position) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.bin.length,\n    };\n    const result = position.bin.subarray(position.index, nextPosition.index);\n    return { position: nextPosition, result };\n};\n//# sourceMappingURL=read-components.js.map", "import { hash256, sha256 as internalSha256 } from '../crypto/crypto.js';\nimport { bigIntToCompactSize, binToHex, flattenBinArray, formatError, numberToBinUint32LE, readCompactSizeMinimal, readItemCount, readMultiple, valueSatoshisToBin, } from '../format/format.js';\nimport { readBytes, readCompactSizePrefixedBin, readRemainingBytes, readUint32LE, readUint64LE, } from './read-components.js';\nimport { NonFungibleTokenCapability } from './transaction-types.js';\n/**\n * Encode a single input for inclusion in an encoded transaction.\n *\n * @param input - the input to encode\n */\nexport const encodeTransactionInput = (input) => flattenBinArray([\n    input.outpointTransactionHash.slice().reverse(),\n    numberToBinUint32LE(input.outpointIndex),\n    bigIntToCompactSize(BigInt(input.unlockingBytecode.length)),\n    input.unlockingBytecode,\n    numberToBinUint32LE(input.sequenceNumber),\n]);\nexport var TransactionDecodingError;\n(function (TransactionDecodingError) {\n    TransactionDecodingError[\"transaction\"] = \"Error reading transaction.\";\n    TransactionDecodingError[\"endsWithUnexpectedBytes\"] = \"Error decoding transaction: the provided input includes unexpected bytes after the encoded transaction.\";\n    TransactionDecodingError[\"input\"] = \"Error reading transaction input.\";\n    TransactionDecodingError[\"inputs\"] = \"Error reading transaction inputs.\";\n    TransactionDecodingError[\"output\"] = \"Error reading transaction output.\";\n    TransactionDecodingError[\"outputs\"] = \"Error reading transaction outputs.\";\n    TransactionDecodingError[\"lockingBytecodeLength\"] = \"Error reading locking bytecode length.\";\n})(TransactionDecodingError || (TransactionDecodingError = {}));\n/**\n * Read a transaction {@link Input} from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Input} and the next {@link ReadPosition}.\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction output\n */\nexport const readTransactionInput = (position) => {\n    const inputRead = readMultiple(position, [\n        readBytes(32 /* TransactionConstants.outpointTransactionHashLength */),\n        readUint32LE,\n        readCompactSizePrefixedBin,\n        readUint32LE,\n    ]);\n    if (typeof inputRead === 'string') {\n        return formatError(TransactionDecodingError.input, inputRead);\n    }\n    const { position: nextPosition, result: [outpointTransactionHash, outpointIndex, unlockingBytecode, sequenceNumber,], } = inputRead;\n    return {\n        position: nextPosition,\n        result: {\n            outpointIndex,\n            outpointTransactionHash: outpointTransactionHash.reverse(),\n            sequenceNumber,\n            unlockingBytecode,\n        },\n    };\n};\n/**\n * Encode a set of {@link Input}s for inclusion in an encoded transaction\n * including the prefixed number of inputs.\n *\n * Format: [CompactSize: input count] [encoded inputs]\n *\n * @param inputs - the set of inputs to encode\n */\nexport const encodeTransactionInputs = (inputs) => flattenBinArray([\n    bigIntToCompactSize(BigInt(inputs.length)),\n    ...inputs.map(encodeTransactionInput),\n]);\n/**\n * Read a set of transaction {@link Input}s beginning at {@link ReadPosition}.\n * A CompactSize will be read to determine the number of inputs, and that\n * number of transaction inputs will be read and returned. Returns either an\n * error message (as a string) or an object containing the array of inputs and\n * the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction inputs\n */\nexport const readTransactionInputs = (position) => {\n    const inputsRead = readItemCount(position, readTransactionInput);\n    if (typeof inputsRead === 'string') {\n        return formatError(TransactionDecodingError.inputs, inputsRead);\n    }\n    return inputsRead;\n};\nconst maximumTokenAmount = 9223372036854775807n;\nexport const nftCapabilityNumberToLabel = [\n    NonFungibleTokenCapability.none,\n    NonFungibleTokenCapability.mutable,\n    NonFungibleTokenCapability.minting,\n];\nexport const nftCapabilityLabelToNumber = {\n    [NonFungibleTokenCapability.none]: 0,\n    [NonFungibleTokenCapability.mutable]: 1,\n    [NonFungibleTokenCapability.minting]: 2,\n};\nexport var CashTokenDecodingError;\n(function (CashTokenDecodingError) {\n    CashTokenDecodingError[\"invalidPrefix\"] = \"Error reading token prefix.\";\n    CashTokenDecodingError[\"insufficientLength\"] = \"Invalid token prefix: insufficient length.\";\n    CashTokenDecodingError[\"reservedBit\"] = \"Invalid token prefix: reserved bit is set.\";\n    CashTokenDecodingError[\"invalidCapability\"] = \"Invalid token prefix: capability must be none (0), mutable (1), or minting (2).\";\n    CashTokenDecodingError[\"commitmentWithoutNft\"] = \"Invalid token prefix: commitment requires an NFT.\";\n    CashTokenDecodingError[\"capabilityWithoutNft\"] = \"Invalid token prefix: capability requires an NFT.\";\n    CashTokenDecodingError[\"commitmentLengthZero\"] = \"Invalid token prefix: if encoded, commitment length must be greater than 0.\";\n    CashTokenDecodingError[\"invalidCommitment\"] = \"Invalid token prefix: invalid non-fungible token commitment.\";\n    CashTokenDecodingError[\"invalidAmountEncoding\"] = \"Invalid token prefix: invalid fungible token amount encoding.\";\n    CashTokenDecodingError[\"zeroAmount\"] = \"Invalid token prefix: if encoded, fungible token amount must be greater than 0.\";\n    CashTokenDecodingError[\"excessiveAmount\"] = \"Invalid token prefix: exceeds maximum fungible token amount of 9223372036854775807.\";\n    CashTokenDecodingError[\"noTokens\"] = \"Invalid token prefix: must encode at least one token.\";\n})(CashTokenDecodingError || (CashTokenDecodingError = {}));\n/**\n * Read a token amount from the provided {@link ReadPosition}, returning either\n * an error message (as a string) or an object containing the value and the next\n * {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * token amount.\n */\nexport const readTokenAmount = (position) => {\n    const amountRead = readCompactSizeMinimal(position);\n    if (typeof amountRead === 'string') {\n        return formatError(CashTokenDecodingError.invalidAmountEncoding, amountRead);\n    }\n    if (amountRead.result > maximumTokenAmount) {\n        return formatError(CashTokenDecodingError.excessiveAmount, `Encoded amount: ${amountRead.result}`);\n    }\n    if (amountRead.result === 0n) {\n        return formatError(CashTokenDecodingError.zeroAmount);\n    }\n    return amountRead;\n};\n/**\n * Attempt to read a transaction {@link Output}'s token prefix from the provided\n * {@link ReadPosition}, returning either an error message (as a string) or an\n * object containing the (optional) token information and the\n * next {@link ReadPosition}.\n *\n * Rather than using this function directly, most applications\n * should use {@link readLockingBytecodeWithPrefix}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * token prefix\n */\n// eslint-disable-next-line complexity\nexport const readTokenPrefix = (position) => {\n    const { bin, index } = position;\n    if (bin[index] !== 239 /* CashTokens.PREFIX_TOKEN */) {\n        return { position, result: {} };\n    }\n    if (bin.length < index + 34 /* CashTokens.minimumPrefixLength */) {\n        return formatError(CashTokenDecodingError.insufficientLength, `The minimum possible length is ${34 /* CashTokens.minimumPrefixLength */}. Missing bytes: ${34 /* CashTokens.minimumPrefixLength */ - (bin.length - index)}`);\n    }\n    const category = bin\n        .slice(index + 1, index + 33 /* CashTokens.tokenBitfieldIndex */)\n        .reverse();\n    const tokenBitfield = bin[index + 33 /* CashTokens.tokenBitfieldIndex */]; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    /* eslint-disable no-bitwise */\n    const prefixStructure = tokenBitfield & 240 /* CashTokens.tokenFormatMask */;\n    if ((prefixStructure & 128 /* CashTokens.RESERVED_BIT */) !== 0) {\n        return formatError(CashTokenDecodingError.reservedBit, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    const nftCapabilityInt = tokenBitfield & 15 /* CashTokens.nftCapabilityMask */;\n    if (nftCapabilityInt > 2 /* CashTokens.maximumCapability */) {\n        return formatError(CashTokenDecodingError.invalidCapability, `Capability value: ${nftCapabilityInt}`);\n    }\n    const capability = nftCapabilityNumberToLabel[nftCapabilityInt]; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    const hasNft = (prefixStructure & 32 /* CashTokens.HAS_NFT */) !== 0;\n    const hasCommitmentLength = (prefixStructure & 64 /* CashTokens.HAS_COMMITMENT_LENGTH */) !== 0;\n    if (hasCommitmentLength && !hasNft) {\n        return formatError(CashTokenDecodingError.commitmentWithoutNft, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    const hasAmount = (prefixStructure & 16 /* CashTokens.HAS_AMOUNT */) !== 0;\n    /* eslint-enable no-bitwise */\n    const nextPosition = {\n        bin,\n        index: index + 33 /* CashTokens.tokenBitfieldIndex */ + 1,\n    };\n    if (hasNft) {\n        const commitmentRead = hasCommitmentLength\n            ? readCompactSizePrefixedBin(nextPosition)\n            : { position: nextPosition, result: Uint8Array.of() };\n        if (typeof commitmentRead === 'string') {\n            return formatError(CashTokenDecodingError.invalidCommitment, commitmentRead);\n        }\n        if (hasCommitmentLength && commitmentRead.result.length === 0) {\n            return formatError(CashTokenDecodingError.commitmentLengthZero);\n        }\n        const amountRead = hasAmount\n            ? readTokenAmount(commitmentRead.position)\n            : { position: commitmentRead.position, result: 0n };\n        if (typeof amountRead === 'string') {\n            return amountRead;\n        }\n        return {\n            position: amountRead.position,\n            result: {\n                token: {\n                    amount: amountRead.result,\n                    category,\n                    nft: { capability, commitment: commitmentRead.result },\n                },\n            },\n        };\n    }\n    if (capability !== NonFungibleTokenCapability.none) {\n        return formatError(CashTokenDecodingError.capabilityWithoutNft, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    if (!hasAmount) {\n        return formatError(CashTokenDecodingError.noTokens, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    const amountRead = readTokenAmount(nextPosition);\n    if (typeof amountRead === 'string') {\n        return amountRead;\n    }\n    return {\n        position: amountRead.position,\n        result: { token: { amount: amountRead.result, category } },\n    };\n};\n/**\n * Read the locking bytecode and token prefix (if present) of a transaction\n * {@link Output}, beginning at the `CompactSize` indicating the\n * combined length.\n * @param position - the {@link ReadPosition} at which to start reading the\n * optional token prefix and locking bytecode\n */\nexport const readLockingBytecodeWithPrefix = (position) => {\n    const bytecodeRead = readCompactSizePrefixedBin(position);\n    if (typeof bytecodeRead === 'string') {\n        return formatError(TransactionDecodingError.lockingBytecodeLength, bytecodeRead);\n    }\n    const { result: contents, position: nextPosition } = bytecodeRead;\n    const contentsRead = readMultiple({ bin: contents, index: 0 }, [\n        readTokenPrefix,\n        readRemainingBytes,\n    ]);\n    if (typeof contentsRead === 'string') {\n        return formatError(CashTokenDecodingError.invalidPrefix, contentsRead);\n    }\n    const { result: [{ token }, lockingBytecode], } = contentsRead;\n    return {\n        position: nextPosition,\n        result: { lockingBytecode, ...(token === undefined ? {} : { token }) },\n    };\n};\n/**\n * Read a transaction {@link Output} from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Output} and the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction output\n */\nexport const readTransactionOutput = (position) => {\n    const outputRead = readMultiple(position, [\n        readUint64LE,\n        readLockingBytecodeWithPrefix,\n    ]);\n    if (typeof outputRead === 'string') {\n        return formatError(TransactionDecodingError.output, outputRead);\n    }\n    const { position: nextPosition, result: [valueSatoshis, { lockingBytecode, token }], } = outputRead;\n    return {\n        position: nextPosition,\n        result: {\n            lockingBytecode,\n            ...(token === undefined ? {} : { token }),\n            valueSatoshis,\n        },\n    };\n};\n/**\n * Given {@link Output.token} data, encode a token prefix.\n *\n * This function does not fail, but returns an empty Uint8Array if the token\n * data does not encode any tokens (even if `token.category` is set).\n *\n * @param token - the token data to encode\n */\n// eslint-disable-next-line complexity\nexport const encodeTokenPrefix = (token) => {\n    if (token === undefined || (token.nft === undefined && token.amount < 1n)) {\n        return Uint8Array.of();\n    }\n    const hasNft = token.nft === undefined ? 0 : 32 /* CashTokens.HAS_NFT */;\n    const capabilityInt = token.nft === undefined\n        ? 0\n        : nftCapabilityLabelToNumber[token.nft.capability];\n    const hasCommitmentLength = token.nft !== undefined && token.nft.commitment.length > 0\n        ? 64 /* CashTokens.HAS_COMMITMENT_LENGTH */\n        : 0;\n    const hasAmount = token.amount > 0n ? 16 /* CashTokens.HAS_AMOUNT */ : 0;\n    const tokenBitfield = \n    // eslint-disable-next-line no-bitwise\n    hasNft | hasCommitmentLength | hasAmount | capabilityInt;\n    return flattenBinArray([\n        Uint8Array.of(239 /* CashTokens.PREFIX_TOKEN */),\n        token.category.slice().reverse(),\n        Uint8Array.of(tokenBitfield),\n        ...(hasCommitmentLength === 0\n            ? []\n            : [\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                bigIntToCompactSize(BigInt(token.nft.commitment.length)),\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                token.nft.commitment,\n            ]),\n        ...(hasAmount === 0 ? [] : [bigIntToCompactSize(token.amount)]),\n    ]);\n};\n/**\n * Encode a single {@link Output} for inclusion in an encoded transaction.\n *\n * @param output - the output to encode\n */\nexport const encodeTransactionOutput = (output) => {\n    const lockingBytecodeField = flattenBinArray([\n        encodeTokenPrefix(output.token),\n        output.lockingBytecode,\n    ]);\n    return flattenBinArray([\n        valueSatoshisToBin(output.valueSatoshis),\n        bigIntToCompactSize(BigInt(lockingBytecodeField.length)),\n        lockingBytecodeField,\n    ]);\n};\n/**\n * Read a set of transaction {@link Output}s beginning at {@link ReadPosition}.\n * A CompactSize will be read to determine the number of outputs, and that\n * number of transaction outputs will be read and returned. Returns either an\n * error message (as a string) or an object containing the array of outputs and\n * the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction outputs\n */\nexport const readTransactionOutputs = (position) => {\n    const outputsRead = readItemCount(position, readTransactionOutput);\n    if (typeof outputsRead === 'string') {\n        return formatError(TransactionDecodingError.outputs, outputsRead);\n    }\n    return outputsRead;\n};\n/**\n * Encode a set of {@link Output}s for inclusion in an encoded transaction\n * including the prefixed number of outputs. Note, this encoding differs from\n * {@link encodeTransactionOutputsForSigning} (used for signing serializations).\n *\n * Format: [CompactSize: output count] [encoded outputs]\n *\n * @param outputs - the set of outputs to encode\n */\nexport const encodeTransactionOutputs = (outputs) => flattenBinArray([\n    bigIntToCompactSize(BigInt(outputs.length)),\n    ...outputs.map(encodeTransactionOutput),\n]);\n/**\n * Read a version 1 or 2 transaction beginning at {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Transaction} and the next {@link ReadPosition}. Rather than using this\n * function directly, most applications should\n * use {@link decodeTransactionCommon}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * {@link TransactionCommon}\n */\nexport const readTransactionCommon = (position) => {\n    const transactionRead = readMultiple(position, [\n        readUint32LE,\n        readTransactionInputs,\n        readTransactionOutputs,\n        readUint32LE,\n    ]);\n    if (typeof transactionRead === 'string') {\n        return formatError(TransactionDecodingError.transaction, transactionRead);\n    }\n    const { position: nextPosition, result: [version, inputs, outputs, locktime], } = transactionRead;\n    return {\n        position: nextPosition,\n        result: { inputs, locktime, outputs, version },\n    };\n};\nexport const readTransaction = readTransactionCommon;\nexport const readTransactionOutputNonTokenAware = (pos) => {\n    const outputRead = readMultiple(pos, [\n        readUint64LE,\n        readCompactSizePrefixedBin,\n    ]);\n    if (typeof outputRead === 'string') {\n        return formatError(TransactionDecodingError.output, outputRead);\n    }\n    const { position: nextPosition, result: [valueSatoshis, lockingBytecode], } = outputRead;\n    return {\n        position: nextPosition,\n        result: { lockingBytecode, valueSatoshis },\n    };\n};\nexport const readTransactionOutputsNonTokenAware = (pos) => {\n    const outputsRead = readItemCount(pos, readTransactionOutputNonTokenAware);\n    if (typeof outputsRead === 'string') {\n        return formatError(TransactionDecodingError.outputs, outputsRead);\n    }\n    return outputsRead;\n};\n/**\n * Read a version 1 or 2 transaction beginning at a {@link ReadPosition} as if\n * CHIP-2022-02-CashTokens were not deployed, returning either an error message\n * (as a string) or an object containing the {@link Transaction} and the next\n * {@link ReadPosition}.\n *\n * This function emulates legacy transaction parsing to test behavior prior to\n * deployment of CHIP-2022-02-CashTokens; most applications should instead\n * use {@link readTransactionCommon}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * {@link TransactionCommon}\n */\nexport const readTransactionNonTokenAware = (position) => {\n    const transactionRead = readMultiple(position, [\n        readUint32LE,\n        readTransactionInputs,\n        readTransactionOutputsNonTokenAware,\n        readUint32LE,\n    ]);\n    if (typeof transactionRead === 'string') {\n        return formatError(TransactionDecodingError.transaction, transactionRead);\n    }\n    const { position: nextPosition, result: [version, inputs, outputs, locktime], } = transactionRead;\n    return {\n        position: nextPosition,\n        result: { inputs, locktime, outputs, version },\n    };\n};\n/**\n * Decode a {@link TransactionCommon} according to the version 1/2 P2P network\n * transaction format.\n *\n * This function verifies that the provided `bin` contains only one transaction\n * and no additional data. To read a transaction from a specific location within\n * a `Uint8Array`, use {@link readTransactionCommon}.\n *\n * @param bin - the encoded transaction to decode\n */\nexport const decodeTransactionCommon = (bin) => {\n    const transactionRead = readTransactionCommon({ bin, index: 0 });\n    if (typeof transactionRead === 'string') {\n        return transactionRead;\n    }\n    if (transactionRead.position.index !== bin.length) {\n        return formatError(TransactionDecodingError.endsWithUnexpectedBytes, `Encoded transaction ends at index ${transactionRead.position.index - 1}, leaving ${bin.length - transactionRead.position.index} remaining bytes.`);\n    }\n    return transactionRead.result;\n};\nexport const decodeTransactionBCH = decodeTransactionCommon;\nexport const decodeTransaction = decodeTransactionBCH;\n/**\n * Decode a {@link TransactionCommon} from a trusted source according to the\n * version 1/2 P2P network transaction format.\n *\n * Note: this method throws runtime errors when attempting to decode messages\n * which do not properly follow the transaction format. If the input is\n * untrusted, use {@link decodeTransactionCommon}.\n *\n * @param bin - the raw message to decode\n */\nexport const decodeTransactionUnsafeCommon = (bin) => {\n    const result = decodeTransactionCommon(bin);\n    if (typeof result === 'string') {\n        // eslint-disable-next-line functional/no-throw-statement\n        throw new Error(result);\n    }\n    return result;\n};\nexport const decodeTransactionUnsafeBCH = decodeTransactionUnsafeCommon;\nexport const decodeTransactionUnsafe = decodeTransactionUnsafeBCH;\n/**\n * Encode a {@link Transaction} using the standard P2P network format. This\n * serialization is also used when computing the transaction's hash (A.K.A.\n * \"transaction ID\" or \"TXID\").\n */\nexport const encodeTransactionCommon = (tx) => flattenBinArray([\n    numberToBinUint32LE(tx.version),\n    encodeTransactionInputs(tx.inputs),\n    encodeTransactionOutputs(tx.outputs),\n    numberToBinUint32LE(tx.locktime),\n]);\nexport const encodeTransactionBCH = encodeTransactionCommon;\nexport const encodeTransaction = encodeTransactionBCH;\nexport const cloneTransactionInputsCommon = (inputs) => inputs.map((input) => ({\n    outpointIndex: input.outpointIndex,\n    outpointTransactionHash: input.outpointTransactionHash.slice(),\n    sequenceNumber: input.sequenceNumber,\n    unlockingBytecode: input.unlockingBytecode.slice(),\n}));\nexport const cloneTransactionOutputsCommon = (outputs) => outputs.map((output) => ({\n    lockingBytecode: output.lockingBytecode.slice(),\n    ...(output.token === undefined\n        ? {}\n        : {\n            token: {\n                amount: output.token.amount,\n                category: output.token.category.slice(),\n                ...(output.token.nft === undefined\n                    ? {}\n                    : {\n                        nft: {\n                            capability: output.token.nft.capability,\n                            commitment: output.token.nft.commitment.slice(),\n                        },\n                    }),\n            },\n        }),\n    valueSatoshis: output.valueSatoshis,\n}));\nexport const cloneTransactionCommon = (transaction) => ({\n    inputs: cloneTransactionInputsCommon(transaction.inputs),\n    locktime: transaction.locktime,\n    outputs: cloneTransactionOutputsCommon(transaction.outputs),\n    version: transaction.version,\n});\n/**\n * Compute a transaction hash (A.K.A. \"transaction ID\" or \"TXID\") from an\n * encoded transaction in P2P network message order. This is the byte order\n * produced by most sha256 libraries and used by encoded P2P network messages.\n * It is also the byte order produced by `OP_SHA256` and `OP_HASH256` in the\n * virtual machine.\n *\n * @returns the transaction hash in P2P network message byte order\n *\n * @param transaction - the encoded transaction\n * @param sha256 - an implementation of sha256\n */\nexport const hashTransactionP2pOrder = (transaction, sha256 = internalSha256) => hash256(transaction, sha256);\n/**\n * Compute a transaction hash (A.K.A. \"transaction ID\" or \"TXID\") from an\n * encoded transaction in user interface byte order. This is the byte order\n * typically used by block explorers, wallets, and other user interfaces.\n *\n * To return this result as a `string`, use {@link hashTransaction}.\n *\n * @returns the transaction hash in User Interface byte order\n *\n * @param transaction - the encoded transaction\n * @param sha256 - an implementation of sha256\n */\nexport const hashTransactionUiOrder = (transaction, sha256 = internalSha256) => hashTransactionP2pOrder(transaction, sha256).reverse();\n/**\n * Return an encoded {@link Transaction}'s hash/ID as a string in user interface\n * byte order (typically used by wallets and block explorers).\n *\n * To return this result as a `Uint8Array`, use {@link hashTransactionUiOrder}.\n *\n * @param transaction - the encoded transaction\n */\nexport const hashTransaction = (transaction) => binToHex(hashTransactionUiOrder(transaction));\n/**\n * Encode all outpoints in a series of transaction inputs. (For use in\n * {@link hashTransactionOutpoints}.)\n *\n * @param inputs - the series of inputs from which to extract the outpoints\n */\nexport const encodeTransactionOutpoints = (inputs) => flattenBinArray(inputs.map((i) => flattenBinArray([\n    i.outpointTransactionHash.slice().reverse(),\n    numberToBinUint32LE(i.outpointIndex),\n])));\n/**\n * Encode an array of transaction {@link Output}s for use in transaction signing\n * serializations. Note, this encoding differs from\n * {@link encodeTransactionOutputs} (used for encoding full transactions).\n *\n * @param outputs - the array of outputs to encode\n */\nexport const encodeTransactionOutputsForSigning = (outputs) => flattenBinArray(outputs.map(encodeTransactionOutput));\n/**\n * Encode the sequence numbers of an array of transaction inputs for use in\n * transaction signing serializations.\n *\n * @param inputs - the array of inputs from which to extract the sequence\n * numbers\n */\nexport const encodeTransactionInputSequenceNumbersForSigning = (inputs) => flattenBinArray(inputs.map((i) => numberToBinUint32LE(i.sequenceNumber)));\n//# sourceMappingURL=transaction-encoding.js.map", "/**\n * The capability assigned to a particular non-fungible token.\n */\nexport var NonFungibleTokenCapability;\n(function (NonFungibleTokenCapability) {\n    /**\n     * No capability, i.e. the token is an **immutable token**.\n     */\n    NonFungibleTokenCapability[\"none\"] = \"none\";\n    /**\n     * The mutable capability (`0x01`), i.e. the token is a **mutable token**.\n     */\n    NonFungibleTokenCapability[\"mutable\"] = \"mutable\";\n    /**\n     * The minting capability (`0x02`), i.e. the token is a **minting token**.\n     */\n    NonFungibleTokenCapability[\"minting\"] = \"minting\";\n})(NonFungibleTokenCapability || (NonFungibleTokenCapability = {}));\n/**\n * The maximum uint64 value – an impossibly large, intentionally invalid value\n * for `valueSatoshis`. See {@link Transaction.valueSatoshis} for details.\n */\n// prettier-ignore\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nexport const excessiveSatoshis = Uint8Array.from([255, 255, 255, 255, 255, 255, 255, 255]);\n//# sourceMappingURL=transaction-types.js.map", "/**\n * The \"common\" instruction set includes all virtual machine (VM) operations,\n * types, and utilities that are used by more than one Libauth-supported VM.\n */\nexport * from './arithmetic.js';\nexport * from './bitwise.js';\nexport * from './combinators.js';\nexport * from './common-types.js';\nexport * from './consensus.js';\nexport * from './crypto.js';\nexport * from './encoding.js';\nexport * from './errors.js';\nexport * from './flow-control.js';\nexport * from './format.js';\nexport * from './inspection.js';\nexport * from './instruction-sets-types.js';\nexport * from './instruction-sets-utils.js';\nexport * from './nop.js';\nexport * from './push.js';\nexport * from './signing-serialization.js';\nexport * from './stack.js';\nexport * from './time.js';\n//# sourceMappingURL=common.js.map", "import { combineOperations, pushToStack, pushToStackVmNumberChecked, useOneVmNumber, useThreeVmNumbers, useTwoVmNumbers, } from './combinators.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { opVerify } from './flow-control.js';\nimport { bigIntToVmNumber, booleanToVmNumber, } from './instruction-sets-utils.js';\nexport const op1Add = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStackVmNumberChecked(nextState, value + 1n));\nexport const op1Sub = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(value - 1n)));\nexport const opNegate = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(-value)));\nexport const opAbs = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(value < 0 ? -value : value)));\nexport const opNot = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, value === 0n ? bigIntToVmNumber(1n) : bigIntToVmNumber(0n)));\nexport const op0NotEqual = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, value === 0n ? bigIntToVmNumber(0n) : bigIntToVmNumber(1n)));\nexport const opAdd = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStackVmNumberChecked(nextState, firstValue + secondValue));\nexport const opSub = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue - secondValue)));\nexport const opBoolAnd = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue !== 0n && secondValue !== 0n)));\nexport const opBoolOr = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue !== 0n || secondValue !== 0n)));\nexport const opNumEqual = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue === secondValue)));\nexport const opNumEqualVerify = combineOperations(opNumEqual, opVerify);\nexport const opNumNotEqual = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue !== secondValue)));\nexport const opLessThan = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue < secondValue)));\nexport const opLessThanOrEqual = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue <= secondValue)));\nexport const opGreaterThan = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue > secondValue)));\nexport const opGreaterThanOrEqual = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue >= secondValue)));\nexport const opMin = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue < secondValue ? firstValue : secondValue)));\nexport const opMax = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue > secondValue ? firstValue : secondValue)));\nexport const opWithin = (state) => useThreeVmNumbers(state, (nextState, [firstValue, secondValue, thirdValue]) => pushToStack(nextState, booleanToVmNumber(secondValue <= firstValue && firstValue < thirdValue)));\nexport const opMul = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStackVmNumberChecked(nextState, firstValue * secondValue));\nexport const opDiv = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => secondValue === 0n\n    ? applyError(nextState, AuthenticationErrorCommon.divisionByZero)\n    : pushToStack(nextState, bigIntToVmNumber(firstValue / secondValue)));\nexport const opMod = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => secondValue === 0n\n    ? applyError(nextState, AuthenticationErrorCommon.divisionByZero)\n    : pushToStack(nextState, bigIntToVmNumber(firstValue % secondValue)));\n//# sourceMappingURL=arithmetic.js.map", "import { ConsensusCommon } from './consensus.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { bigIntToVmNumber, isVmNumberError, vmNumberToBigInt, } from './instruction-sets-utils.js';\nexport const incrementOperationCount = (operation) => (state) => {\n    const nextState = operation(state);\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    nextState.operationCount += 1;\n    return nextState;\n};\nexport const conditionallyEvaluate = (operation) => (state) => state.controlStack.every((item) => item) ? operation(state) : state;\n/**\n * Map a function over each operation in an {@link InstructionSet.operations}\n * object, assigning the result to the same `opcode` in the resulting object.\n * @param operationMap - an operations map from an {@link InstructionSet}\n * @param combinators - a list of functions to apply (in order) to\n * each operation\n */\nexport const mapOverOperations = (combinators, operationMap) => Object.keys(operationMap).reduce((result, opcode) => ({\n    ...result,\n    [opcode]: combinators.reduce((op, combinator) => combinator(op), \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    operationMap[Number(opcode)]),\n}), {});\n/**\n * Pop one stack item off of `state.stack` and provide that item to `operation`.\n */\nexport const useOneStackItem = (state, operation) => {\n    // eslint-disable-next-line functional/immutable-data\n    const item = state.stack.pop();\n    if (item === undefined) {\n        return applyError(state, AuthenticationErrorCommon.emptyStack);\n    }\n    return operation(state, [item]);\n};\nexport const useTwoStackItems = (state, operation) => useOneStackItem(state, (nextState, [valueTwo]) => useOneStackItem(nextState, (lastState, [valueTop]) => operation(lastState, [valueTop, valueTwo])));\nexport const useThreeStackItems = (state, operation) => useOneStackItem(state, (nextState, [valueThree]) => useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [valueTop, valueTwo, valueThree])));\nexport const useFourStackItems = (state, operation) => useTwoStackItems(state, (nextState, [valueThree, valueFour]) => useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [valueTop, valueTwo, valueThree, valueFour])));\nexport const useSixStackItems = (state, operation) => useFourStackItems(state, (nextState, [valueThree, valueFour, valueFive, valueSix]) => useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [\n    valueTop,\n    valueTwo,\n    valueThree,\n    valueFour,\n    valueFive,\n    valueSix,\n])));\nconst typicalMaximumVmNumberByteLength = 8;\nexport const useOneVmNumber = (state, operation, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => useOneStackItem(state, (nextState, [item]) => {\n    const value = vmNumberToBigInt(item, {\n        maximumVmNumberByteLength,\n        requireMinimalEncoding,\n    });\n    if (isVmNumberError(value)) {\n        return applyError(state, AuthenticationErrorCommon.invalidVmNumber);\n    }\n    return operation(nextState, [value]);\n});\nexport const useTwoVmNumbers = (state, operation, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => useOneVmNumber(state, (nextState, [secondValue]) => useOneVmNumber(nextState, (lastState, [firstValue]) => operation(lastState, [firstValue, secondValue]), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n}), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n});\nexport const useThreeVmNumbers = (state, operation, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => useTwoVmNumbers(state, (nextState, [secondValue, thirdValue]) => useOneVmNumber(nextState, (lastState, [firstValue]) => operation(lastState, [firstValue, secondValue, thirdValue]), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n}), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n});\n/**\n * Return the provided state with the provided value pushed to its stack.\n * @param state - the state to update and return\n * @param data - the value to push to the stack\n */\nexport const pushToStack = (state, ...data) => {\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.stack.push(...data);\n    return state;\n};\n/**\n * If the provided item exceeds the maximum stack item length, apply an error.\n * Otherwise, return the provided state with the item pushed to its stack.\n * @param state - the state to update and return\n * @param item - the value to push to the stack\n */\nexport const pushToStackChecked = (state, item, maximumLength = ConsensusCommon.maximumStackItemLength) => {\n    if (item.length > maximumLength) {\n        return applyError(state, `${AuthenticationErrorCommon.exceededMaximumStackItemLength} Item length: ${item.length} bytes.`);\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.stack.push(item);\n    return state;\n};\n/**\n * Return the provided state with the VM number pushed to its stack.\n * @param state - the state to update and return\n * @param vmNumber - the number to push to the stack\n */\nexport const pushToStackVmNumber = (state, vmNumber) => pushToStack(state, bigIntToVmNumber(vmNumber));\n/**\n * If the provided number is outside the VM number range, apply an error.\n * Otherwise, return the provided state with the VM number pushed to its stack.\n * @param state - the state to update and return\n * @param vmNumber - the VM number to push to the stack\n */\nexport const pushToStackVmNumberChecked = (state, vmNumber, minVmNumber = BigInt(ConsensusCommon.minVmNumber), maxVmNumber = BigInt(ConsensusCommon.maxVmNumber)\n// eslint-disable-next-line max-params\n) => {\n    if (vmNumber > maxVmNumber || vmNumber < minVmNumber) {\n        return applyError(state, AuthenticationErrorCommon.overflowsVmNumberRange);\n    }\n    return pushToStackVmNumber(state, vmNumber);\n};\nexport const combineOperations = (firstOperation, secondOperation) => (state) => secondOperation(firstOperation(state));\n//# sourceMappingURL=combinators.js.map", "import { SigningSerializationTypeBCH } from './signing-serialization.js';\n/**\n * Consensus settings for the `BCH_2022_05` instruction set.\n */\nexport var ConsensusCommon;\n(function (ConsensusCommon) {\n    /**\n     * A.K.A. `MAX_SCRIPT_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumBytecodeLength\"] = 10000] = \"maximumBytecodeLength\";\n    /**\n     * A.K.A. `MAX_OP_RETURN_RELAY`, `nMaxDatacarrierBytes`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumDataCarrierBytes\"] = 223] = \"maximumDataCarrierBytes\";\n    /**\n     * A.K.A. `MAX_OPS_PER_SCRIPT`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumOperationCount\"] = 201] = \"maximumOperationCount\";\n    /**\n     * A.K.A. `MAX_STACK_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStackDepth\"] = 1000] = \"maximumStackDepth\";\n    /**\n     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStackItemLength\"] = 520] = \"maximumStackItemLength\";\n    /**\n     * A.K.A. `MAX_STANDARD_VERSION`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStandardVersion\"] = 2] = \"maximumStandardVersion\";\n    /**\n     * A.K.A. `MAX_TX_IN_SCRIPT_SIG_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStandardUnlockingBytecodeLength\"] = 1650] = \"maximumStandardUnlockingBytecodeLength\";\n    /**\n     * A.K.A. `MIN_TX_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"minimumTransactionSize\"] = 100] = \"minimumTransactionSize\";\n    /**\n     * A.K.A. `MAX_STANDARD_TX_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStandardTransactionSize\"] = 100000] = \"maximumStandardTransactionSize\";\n    /**\n     * A.K.A. `MAX_TX_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumTransactionSize\"] = 1000000] = \"maximumTransactionSize\";\n    /**\n     * A.K.A. `MAXIMUM_ELEMENT_SIZE_64_BIT`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumVmNumberLength\"] = 8] = \"maximumVmNumberLength\";\n    ConsensusCommon[\"minVmNumber\"] = \"-9223372036854775807\";\n    ConsensusCommon[\"maxVmNumber\"] = \"9223372036854775807\";\n    ConsensusCommon[ConsensusCommon[\"schnorrSignatureLength\"] = 64] = \"schnorrSignatureLength\";\n})(ConsensusCommon || (ConsensusCommon = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypesCommon = [\n    SigningSerializationTypeBCH.allOutputs,\n    SigningSerializationTypeBCH.allOutputsSingleInput,\n    SigningSerializationTypeBCH.correspondingOutput,\n    SigningSerializationTypeBCH.correspondingOutputSingleInput,\n    SigningSerializationTypeBCH.noOutputs,\n    SigningSerializationTypeBCH.noOutputsSingleInput,\n];\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypesBCH = SigningSerializationTypesCommon;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const ConsensusBCH = ConsensusCommon;\n//# sourceMappingURL=consensus.js.map", "import { hash256, sha256 as internalSha256 } from '../../../crypto/crypto.js';\nimport { bigIntToCompactSize, flattenBinArray, numberToBinUint32LE, valueSatoshisToBin, } from '../../../format/format.js';\nimport { encodeTokenPrefix, encodeTransactionInputSequenceNumbersForSigning, encodeTransactionOutpoints, encodeTransactionOutput, encodeTransactionOutputsForSigning, } from '../../../message/message.js';\n/**\n * A.K.A. `sighash` flags\n */\nexport var SigningSerializationFlag;\n(function (SigningSerializationFlag) {\n    /**\n     * A.K.A. `SIGHASH_ALL`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"allOutputs\"] = 1] = \"allOutputs\";\n    /**\n     * A.K.A `SIGHASH_NONE`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"noOutputs\"] = 2] = \"noOutputs\";\n    /**\n     * A.K.A. `SIGHASH_SINGLE`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"correspondingOutput\"] = 3] = \"correspondingOutput\";\n    /**\n     * A.K.A. `SIGHASH_UTXOS`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"utxos\"] = 32] = \"utxos\";\n    SigningSerializationFlag[SigningSerializationFlag[\"forkId\"] = 64] = \"forkId\";\n    /**\n     * A.K.A `ANYONE_CAN_PAY`/`SIGHASH_ANYONECANPAY`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"singleInput\"] = 128] = \"singleInput\";\n})(SigningSerializationFlag || (SigningSerializationFlag = {}));\n/* eslint-disable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\nexport var SigningSerializationType;\n(function (SigningSerializationType) {\n    SigningSerializationType[SigningSerializationType[\"allOutputs\"] = 65] = \"allOutputs\";\n    SigningSerializationType[SigningSerializationType[\"allOutputsAllUtxos\"] = 97] = \"allOutputsAllUtxos\";\n    SigningSerializationType[SigningSerializationType[\"allOutputsSingleInput\"] = 193] = \"allOutputsSingleInput\";\n    SigningSerializationType[SigningSerializationType[\"correspondingOutput\"] = 67] = \"correspondingOutput\";\n    SigningSerializationType[SigningSerializationType[\"correspondingOutputAllUtxos\"] = 99] = \"correspondingOutputAllUtxos\";\n    SigningSerializationType[SigningSerializationType[\"correspondingOutputSingleInput\"] = 195] = \"correspondingOutputSingleInput\";\n    SigningSerializationType[SigningSerializationType[\"noOutputs\"] = 66] = \"noOutputs\";\n    SigningSerializationType[SigningSerializationType[\"noOutputsAllUtxos\"] = 98] = \"noOutputsAllUtxos\";\n    SigningSerializationType[SigningSerializationType[\"noOutputsSingleInput\"] = 194] = \"noOutputsSingleInput\";\n})(SigningSerializationType || (SigningSerializationType = {}));\n/* eslint-enable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypeBCH = SigningSerializationType;\nconst match = (type, flag) => \n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n(type[0] & flag) !== 0;\nconst equals = (type, flag\n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n) => (type[0] & 31 /* Internal.mask5Bits */) === flag;\nconst shouldSerializeSingleInput = (type) => match(type, SigningSerializationFlag.singleInput);\nconst shouldSerializeCorrespondingOutput = (type) => equals(type, SigningSerializationFlag.correspondingOutput);\nconst shouldSerializeNoOutputs = (type) => equals(type, SigningSerializationFlag.noOutputs);\nconst shouldSerializeUtxos = (type) => match(type, SigningSerializationFlag.utxos);\nconst emptyHash = () => new Uint8Array(32 /* Internal.sha256HashByteLength */).fill(0);\n/**\n * Return the proper `hashPrevouts` value for a given a signing serialization\n * type.\n */\nexport const hashPrevouts = ({ signingSerializationType, transactionOutpoints, }, sha256 = internalSha256) => shouldSerializeSingleInput(signingSerializationType)\n    ? emptyHash()\n    : hash256(transactionOutpoints, sha256);\n/**\n * Return the proper `hashUtxos` value for a given a signing serialization\n * type.\n */\nexport const hashUtxos = ({ signingSerializationType, transactionUtxos, }, sha256 = internalSha256) => shouldSerializeUtxos(signingSerializationType)\n    ? hash256(transactionUtxos, sha256)\n    : Uint8Array.of();\n/**\n * Return the proper `hashSequence` value for a given a signing serialization\n * type.\n */\nexport const hashSequence = ({ signingSerializationType, transactionSequenceNumbers, }, sha256 = internalSha256) => !shouldSerializeSingleInput(signingSerializationType) &&\n    !shouldSerializeCorrespondingOutput(signingSerializationType) &&\n    !shouldSerializeNoOutputs(signingSerializationType)\n    ? hash256(transactionSequenceNumbers, sha256)\n    : emptyHash();\n/**\n * Return the proper `hashOutputs` value for a given a signing serialization\n * type.\n */\nexport const hashOutputs = ({ correspondingOutput, signingSerializationType, transactionOutputs, }, sha256 = internalSha256) => !shouldSerializeCorrespondingOutput(signingSerializationType) &&\n    !shouldSerializeNoOutputs(signingSerializationType)\n    ? hash256(transactionOutputs, sha256)\n    : shouldSerializeCorrespondingOutput(signingSerializationType)\n        ? correspondingOutput === undefined\n            ? emptyHash()\n            : hash256(correspondingOutput, sha256)\n        : emptyHash();\n/**\n * Encode the signature-protected properties of a transaction following the\n * algorithm required by the `signingSerializationType` of a signature.\n *\n * Note: When validating transactions with multiple signatures,\n * performance-critical applications should use a memoized sha256 implementation\n * to avoid re-computing hashes.\n */\nexport const encodeSigningSerializationBCH = ({ correspondingOutput, coveredBytecode, forkId = new Uint8Array([0, 0, 0]), locktime, outpointIndex, outpointTransactionHash, outputTokenPrefix, outputValue, sequenceNumber, signingSerializationType, transactionOutpoints, transactionOutputs, transactionSequenceNumbers, transactionUtxos, version, }, sha256 = internalSha256) => flattenBinArray([\n    numberToBinUint32LE(version),\n    hashPrevouts({ signingSerializationType, transactionOutpoints }, sha256),\n    hashUtxos({ signingSerializationType, transactionUtxos }, sha256),\n    hashSequence({\n        signingSerializationType,\n        transactionSequenceNumbers,\n    }, sha256),\n    outpointTransactionHash.slice().reverse(),\n    numberToBinUint32LE(outpointIndex),\n    outputTokenPrefix,\n    bigIntToCompactSize(BigInt(coveredBytecode.length)),\n    coveredBytecode,\n    outputValue,\n    numberToBinUint32LE(sequenceNumber),\n    hashOutputs({\n        correspondingOutput,\n        signingSerializationType,\n        transactionOutputs,\n    }, sha256),\n    numberToBinUint32LE(locktime),\n    signingSerializationType,\n    forkId,\n]);\n/**\n * Generate the encoded components of a BCH signing serialization from\n * compilation context.\n */\nexport const generateSigningSerializationComponentsBCH = (context) => ({\n    correspondingOutput: context.inputIndex < context.transaction.outputs.length\n        ? encodeTransactionOutput(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        context.transaction.outputs[context.inputIndex])\n        : undefined,\n    locktime: context.transaction.locktime,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    outpointIndex: context.transaction.inputs[context.inputIndex].outpointIndex,\n    outpointTransactionHash: \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.transaction.inputs[context.inputIndex].outpointTransactionHash,\n    outputTokenPrefix: encodeTokenPrefix(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.sourceOutputs[context.inputIndex].token),\n    outputValue: valueSatoshisToBin(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.sourceOutputs[context.inputIndex].valueSatoshis),\n    sequenceNumber: \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.transaction.inputs[context.inputIndex].sequenceNumber,\n    transactionOutpoints: encodeTransactionOutpoints(context.transaction.inputs),\n    transactionOutputs: encodeTransactionOutputsForSigning(context.transaction.outputs),\n    transactionSequenceNumbers: encodeTransactionInputSequenceNumbersForSigning(context.transaction.inputs),\n    transactionUtxos: encodeTransactionOutputsForSigning(context.sourceOutputs),\n    version: context.transaction.version,\n});\n/**\n * Generate the signing serialization for a particular transaction input\n * following the algorithm required by the provided `signingSerializationType`.\n *\n * Note: When validating transactions with multiple signatures,\n * performance-critical applications should use a memoized sha256 implementation\n * to avoid re-computing hashes.\n */\nexport const generateSigningSerializationBCH = (context, { coveredBytecode, signingSerializationType, }, sha256 = internalSha256) => encodeSigningSerializationBCH({\n    ...generateSigningSerializationComponentsBCH(context),\n    coveredBytecode,\n    signingSerializationType,\n}, sha256);\n/**\n * @param signingSerializationType - the 32-bit number indicating the signing\n * serialization algorithm to use\n */\nexport const isLegacySigningSerialization = (signingSerializationType) => {\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const forkValue = signingSerializationType >> 8;\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const newForkValue = (forkValue ^ 0xdead) | 0xff0000;\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const sighashType = (newForkValue << 8) | (signingSerializationType & 0xff);\n    // eslint-disable-next-line no-bitwise\n    return (sighashType & SigningSerializationFlag.forkId) === 0;\n};\n//# sourceMappingURL=signing-serialization.js.map", "import { formatError } from '../../../format/format.js';\nexport var AuthenticationErrorCommon;\n(function (AuthenticationErrorCommon) {\n    AuthenticationErrorCommon[\"calledReserved\"] = \"Program called an unassigned, reserved operation.\";\n    AuthenticationErrorCommon[\"calledReturn\"] = \"Program called an OP_RETURN operation.\";\n    AuthenticationErrorCommon[\"calledUpgradableNop\"] = \"Program called a disallowed upgradable non-operation (OP_NOP1-OP_NOP10).\";\n    AuthenticationErrorCommon[\"checkSequenceUnavailable\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation, but OP_CHECKSEQUENCEVERIFY requires transaction version 2 or higher.\";\n    AuthenticationErrorCommon[\"disabledOpcode\"] = \"Program contains a disabled opcode.\";\n    AuthenticationErrorCommon[\"divisionByZero\"] = \"Program attempted to divide a number by zero.\";\n    AuthenticationErrorCommon[\"emptyAlternateStack\"] = \"Tried to read from an empty alternate stack.\";\n    AuthenticationErrorCommon[\"emptyStack\"] = \"Tried to read from an empty stack.\";\n    AuthenticationErrorCommon[\"exceededMaximumBytecodeLengthLocking\"] = \"The provided locking bytecode exceeds the maximum bytecode length (10,000 bytes).\";\n    AuthenticationErrorCommon[\"exceededMaximumBytecodeLengthUnlocking\"] = \"The provided unlocking bytecode exceeds the maximum bytecode length (10,000 bytes).\";\n    AuthenticationErrorCommon[\"exceededMaximumVmNumberLength\"] = \"Program attempted an OP_BIN2NUM operation on a byte sequence that cannot be encoded within the maximum VM Number length.\";\n    AuthenticationErrorCommon[\"exceededMaximumStackDepth\"] = \"Program exceeded the maximum stack depth (1,000 items).\";\n    AuthenticationErrorCommon[\"exceededMaximumStackItemLength\"] = \"Program attempted to push a stack item that exceeded the maximum stack item length (520 bytes).\";\n    AuthenticationErrorCommon[\"exceededMaximumOperationCount\"] = \"Program exceeded the maximum operation count (201 operations).\";\n    AuthenticationErrorCommon[\"exceedsMaximumMultisigPublicKeyCount\"] = \"Program called an OP_CHECKMULTISIG that exceeds the maximum public key count (20 public keys).\";\n    AuthenticationErrorCommon[\"failedVerify\"] = \"Program failed an OP_VERIFY operation.\";\n    AuthenticationErrorCommon[\"invalidStackIndex\"] = \"Tried to read from an invalid stack index.\";\n    AuthenticationErrorCommon[\"incompatibleLocktimeType\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY operation with an incompatible locktime type. The transaction locktime and required locktime must both refer to either a block height or a block time.\";\n    AuthenticationErrorCommon[\"incompatibleSequenceType\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation with an incompatible sequence type flag. The input sequence number and required sequence number must both use the same sequence locktime type.\";\n    AuthenticationErrorCommon[\"insufficientLength\"] = \"Program called an OP_NUM2BIN operation with an insufficient byte length to re-encode the provided number.\";\n    AuthenticationErrorCommon[\"insufficientPublicKeys\"] = \"Program called an OP_CHECKMULTISIG operation that requires signatures from more public keys than are provided.\";\n    AuthenticationErrorCommon[\"invalidNaturalNumber\"] = \"Invalid input: the key/signature count inputs for OP_CHECKMULTISIG require a natural number (n > 0).\";\n    AuthenticationErrorCommon[\"invalidProtocolBugValue\"] = \"The OP_CHECKMULTISIG protocol bug value must be a VM Number 0 (to comply with the \\\"NULLDUMMY\\\" rule).\";\n    AuthenticationErrorCommon[\"invalidPublicKeyEncoding\"] = \"Encountered an improperly encoded public key.\";\n    AuthenticationErrorCommon[\"invalidVmNumber\"] = \"Invalid input: this operation requires a valid VM Number.\";\n    AuthenticationErrorCommon[\"invalidSignatureEncoding\"] = \"Encountered an improperly encoded signature.\";\n    AuthenticationErrorCommon[\"invalidSplitIndex\"] = \"Program called an OP_SPLIT operation with an invalid index.\";\n    AuthenticationErrorCommon[\"invalidTransactionInputIndex\"] = \"Program attempted to read from an invalid transaction input index.\";\n    AuthenticationErrorCommon[\"invalidTransactionOutputIndex\"] = \"Program attempted to read from an invalid transaction output index.\";\n    AuthenticationErrorCommon[\"invalidTransactionUtxoIndex\"] = \"Program attempted to read from an invalid transaction UTXO index.\";\n    AuthenticationErrorCommon[\"locktimeDisabled\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY operation, but locktime is disabled for this transaction.\";\n    AuthenticationErrorCommon[\"mismatchedBitwiseOperandLength\"] = \"Program attempted a bitwise operation on operands of different lengths.\";\n    AuthenticationErrorCommon[\"malformedLockingBytecode\"] = \"The provided locking bytecode is malformed.\";\n    AuthenticationErrorCommon[\"malformedP2shBytecode\"] = \"Redeem bytecode was malformed prior to P2SH evaluation.\";\n    AuthenticationErrorCommon[\"malformedPush\"] = \"Program must be long enough to push the requested number of bytes.\";\n    AuthenticationErrorCommon[\"malformedUnlockingBytecode\"] = \"The provided unlocking bytecode is malformed.\";\n    AuthenticationErrorCommon[\"negativeLocktime\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY or OP_CHECKSEQUENCEVERIFY operation with a negative locktime.\";\n    AuthenticationErrorCommon[\"nonEmptyControlStack\"] = \"The active bytecode completed with a non-empty control stack (missing `OP_ENDIF`).\";\n    AuthenticationErrorCommon[\"nonMinimalPush\"] = \"Push operations must use the smallest possible encoding.\";\n    AuthenticationErrorCommon[\"nonNullSignatureFailure\"] = \"Program failed a signature verification with a non-null signature (violating the \\\"NULLFAIL\\\" rule).\";\n    AuthenticationErrorCommon[\"overflowsVmNumberRange\"] = \"Program attempted an arithmetic operation which exceeds the range of VM Numbers.\";\n    AuthenticationErrorCommon[\"requiresCleanStack\"] = \"Program completed with an unexpected number of items on the stack (must be exactly 1).\";\n    AuthenticationErrorCommon[\"requiresPushOnly\"] = \"Unlocking bytecode may contain only push operations.\";\n    AuthenticationErrorCommon[\"schnorrSizedSignatureInCheckMultiSig\"] = \"Program used a schnorr-sized signature (65 bytes) in an OP_CHECKMULTISIG operation.\";\n    AuthenticationErrorCommon[\"unexpectedElse\"] = \"Encountered an OP_ELSE outside of an OP_IF ... OP_ENDIF block.\";\n    AuthenticationErrorCommon[\"unexpectedEndIf\"] = \"Encountered an OP_ENDIF that is not following a matching OP_IF.\";\n    AuthenticationErrorCommon[\"unknownOpcode\"] = \"Called an unknown opcode.\";\n    AuthenticationErrorCommon[\"unmatchedSequenceDisable\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation requiring the disable flag, but the input's sequence number is missing the disable flag.\";\n    AuthenticationErrorCommon[\"unsatisfiedLocktime\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY operation that requires a locktime greater than the transaction's locktime.\";\n    AuthenticationErrorCommon[\"unsatisfiedSequenceNumber\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation that requires a sequence number greater than the input's sequence number.\";\n    AuthenticationErrorCommon[\"unsuccessfulEvaluation\"] = \"Unsuccessful evaluation: completed with a non-truthy value on top of the stack.\";\n})(AuthenticationErrorCommon || (AuthenticationErrorCommon = {}));\n/**\n * Applies the `error` to a `state`.\n *\n * @remarks\n * If the state already has an error, this method does not override it.\n * (Evaluation should end after the first encountered error, so further errors\n * aren't relevant.)\n */\nexport const applyError = (state, errorType, errorDetails) => ({\n    ...state,\n    error: state.error === undefined\n        ? formatError(errorType, errorDetails)\n        : state.error,\n});\n//# sourceMappingURL=errors.js.map", "import { isPayToPublicKey, isPayToPublicKeyHash, isPayToScriptHash20, isPayToScriptHash32, } from '../../../address/address.js';\nimport { binToHex, flattenBinArray, numberToBinUint16LE, numberToBinUint32LE, } from '../../../format/format.js';\nimport { encodeTransactionOutput } from '../../../message/message.js';\nimport { OpcodesBCH } from '../bch/2023/bch-2023-opcodes.js';\nimport { OpcodesBTC } from '../btc/btc-opcodes.js';\n/**\n * A type-guard that checks if the provided instruction is malformed.\n * @param instruction - the instruction to check\n */\nexport const authenticationInstructionIsMalformed = (instruction) => 'malformed' in instruction;\n/**\n * A type-guard that checks if the final instruction in the provided array of\n * instructions is malformed. (Only the final instruction can be malformed.)\n * @param instructions - the array of instructions to check\n */\nexport const authenticationInstructionsAreMalformed = (instructions) => instructions.length > 0 &&\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    authenticationInstructionIsMalformed(instructions[instructions.length - 1]);\nexport const authenticationInstructionsArePushInstructions = (instructions) => instructions.every((instruction) => 'data' in instruction);\nconst uint8Bytes = 1;\nconst uint16Bytes = 2;\nconst uint32Bytes = 4;\n/**\n * Decode a little endian number of `length` from virtual machine `bytecode`\n * beginning at `index`.\n */\nexport const decodeLittleEndianNumber = (bytecode, index, length) => {\n    const view = new DataView(bytecode.buffer, index, length);\n    const readAsLittleEndian = true;\n    return length === uint8Bytes\n        ? view.getUint8(0)\n        : length === uint16Bytes\n            ? view.getUint16(0, readAsLittleEndian)\n            : view.getUint32(0, readAsLittleEndian);\n};\n/**\n * Returns the number of bytes used to indicate the length of the push in this\n * operation.\n * @param opcode - an opcode between 0x00 and 0xff\n */\nexport const opcodeToPushLength = (opcode) => ({\n    [76 /* CommonPushOpcodes.OP_PUSHDATA_1 */]: uint8Bytes,\n    [77 /* CommonPushOpcodes.OP_PUSHDATA_2 */]: uint16Bytes,\n    [78 /* CommonPushOpcodes.OP_PUSHDATA_4 */]: uint32Bytes,\n}[opcode] ?? 0);\n/**\n * Decode one instruction from the provided virtual machine bytecode.\n *\n * Returns an object with an `instruction` referencing a\n * {@link AuthenticationInstructionMaybeMalformed}, and a `nextIndex` indicating\n * the next index from which to read. If the next index is greater than or equal\n * to the length of the bytecode, the bytecode has been fully decoded.\n *\n * The final {@link AuthenticationInstructionMaybeMalformed} in the bytecode may\n * be malformed if 1) the final operation is a push and 2) too few bytes remain\n * for the push operation to complete.\n *\n * @param bytecode - the virtual machine bytecode from which to read the next\n * instruction\n * @param index - the index from which to begin reading\n */\n// eslint-disable-next-line complexity\nexport const decodeAuthenticationInstruction = (bytecode, index) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const opcode = bytecode[index];\n    if (opcode > 78 /* CommonPushOpcodes.OP_PUSHDATA_4 */) {\n        return {\n            instruction: {\n                opcode,\n            },\n            nextIndex: index + 1,\n        };\n    }\n    const lengthBytes = opcodeToPushLength(opcode);\n    if (lengthBytes !== 0 && index + lengthBytes >= bytecode.length) {\n        const sliceStart = index + 1;\n        const sliceEnd = sliceStart + lengthBytes;\n        return {\n            instruction: {\n                expectedLengthBytes: lengthBytes,\n                length: bytecode.slice(sliceStart, sliceEnd),\n                malformed: true,\n                opcode,\n            },\n            nextIndex: sliceEnd,\n        };\n    }\n    const dataBytes = lengthBytes === 0\n        ? opcode\n        : decodeLittleEndianNumber(bytecode, index + 1, lengthBytes);\n    const dataStart = index + 1 + lengthBytes;\n    const dataEnd = dataStart + dataBytes;\n    return {\n        instruction: {\n            data: bytecode.slice(dataStart, dataEnd),\n            ...(dataEnd > bytecode.length\n                ? {\n                    expectedDataBytes: dataEnd - dataStart,\n                    malformed: true,\n                }\n                : undefined),\n            opcode,\n        },\n        nextIndex: dataEnd,\n    };\n};\n/**\n * @param instruction - the {@link AuthenticationInstruction} to clone.\n * @returns A copy of the provided {@link AuthenticationInstruction}.\n */\nexport const cloneAuthenticationInstruction = (instruction) => ({\n    ...('data' in instruction ? { data: instruction.data } : {}),\n    opcode: instruction.opcode,\n});\n/**\n * Decode authentication virtual machine bytecode (`lockingBytecode` or\n * `unlockingBytecode`) into {@link AuthenticationInstructionsMaybeMalformed}.\n * The method {@link authenticationInstructionsAreMalformed} can be used to\n * check if these instructions include a malformed instruction. If not, they are\n * valid {@link AuthenticationInstructions}.\n *\n * @param bytecode - the authentication virtual machine bytecode to decode\n */\nexport const decodeAuthenticationInstructions = (bytecode) => {\n    const instructions = [];\n    // eslint-disable-next-line functional/no-let\n    let i = 0;\n    // eslint-disable-next-line functional/no-loop-statement\n    while (i < bytecode.length) {\n        const { instruction, nextIndex } = decodeAuthenticationInstruction(bytecode, i);\n        // eslint-disable-next-line functional/no-expression-statement\n        i = nextIndex;\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        instructions.push(instruction);\n    }\n    return instructions;\n};\n/**\n * OP_0 is the only single-word push. All other push instructions will\n * disassemble to multiple ASM words. (OP_1-OP_16 are handled like normal\n * operations.)\n */\nconst isMultiWordPush = (opcode) => opcode !== 0 /* CommonPushOpcodes.OP_0 */;\nconst formatAsmPushHex = (data) => data.length > 0 ? `0x${binToHex(data)}` : '';\nconst formatMissingBytesAsm = (missing) => `[missing ${missing} byte${missing === 1 ? '' : 's'}]`;\nconst hasMalformedLength = (instruction) => 'length' in instruction;\nconst isPushData = (pushOpcode) => pushOpcode >= 76 /* CommonPushOpcodes.OP_PUSHDATA_1 */;\n/**\n * Disassemble a malformed authentication instruction into a string description.\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instruction - the {@link AuthenticationInstructionMalformed} to\n * disassemble\n */\nexport const disassembleAuthenticationInstructionMalformed = (opcodes, instruction) => `${opcodes[instruction.opcode] ?? 'OP_UNKNOWN'} ${hasMalformedLength(instruction)\n    ? `${formatAsmPushHex(instruction.length)}${formatMissingBytesAsm(instruction.expectedLengthBytes - instruction.length.length)}`\n    : `${isPushData(instruction.opcode)\n        ? `${instruction.expectedDataBytes} `\n        : ''}${formatAsmPushHex(instruction.data)}${formatMissingBytesAsm(instruction.expectedDataBytes - instruction.data.length)}`}`;\n/**\n * Disassemble a properly-formed authentication instruction into a string\n * description.\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instruction - the instruction to disassemble\n */\nexport const disassembleAuthenticationInstruction = (opcodes, instruction) => `${opcodes[instruction.opcode] ?? 'OP_UNKNOWN'}${'data' in instruction && isMultiWordPush(instruction.opcode)\n    ? ` ${isPushData(instruction.opcode) ? `${instruction.data.length} ` : ''}${formatAsmPushHex(instruction.data)}`\n    : ''}`;\n/**\n * Disassemble a single {@link AuthenticationInstructionMaybeMalformed} into its\n * ASM representation.\n *\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instruction - the instruction to disassemble\n */\nexport const disassembleAuthenticationInstructionMaybeMalformed = (opcodes, instruction) => authenticationInstructionIsMalformed(instruction)\n    ? disassembleAuthenticationInstructionMalformed(opcodes, instruction)\n    : disassembleAuthenticationInstruction(opcodes, instruction);\n/**\n * Disassemble an array of {@link AuthenticationInstructionMaybeMalformed}\n * (including potentially malformed instructions) into its ASM representation.\n *\n * This method supports disassembling an array including multiple\n * {@link AuthenticationInstructionMaybeMalformed}s, rather than the more\n * constrained {@link AuthenticationInstructionsMaybeMalformed} (may only\n * include one malformed instruction as the last item in the array).\n *\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instructions - the array of instructions to disassemble\n */\nexport const disassembleAuthenticationInstructionsMaybeMalformed = (opcodes, instructions) => instructions\n    .map((instruction) => disassembleAuthenticationInstructionMaybeMalformed(opcodes, instruction))\n    .join(' ');\n/**\n * Disassemble authentication bytecode into a lossless ASM representation. (All\n * push operations are represented with the same opcodes used in the bytecode,\n * even when non-minimally encoded.)\n *\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param bytecode - the authentication bytecode to disassemble\n */\nexport const disassembleBytecode = (opcodes, bytecode) => disassembleAuthenticationInstructionsMaybeMalformed(opcodes, decodeAuthenticationInstructions(bytecode));\n/**\n * Disassemble BCH authentication bytecode into its ASM representation.\n *\n * Note, this method automatically uses the latest BCH instruction set. To\n * manually select an instruction set, use {@link disassembleBytecode}.\n *\n * @param bytecode - the virtual machine bytecode to disassemble\n */\nexport const disassembleBytecodeBCH = (bytecode) => disassembleAuthenticationInstructionsMaybeMalformed(OpcodesBCH, decodeAuthenticationInstructions(bytecode));\n/**\n * Disassemble BTC authentication bytecode into its ASM representation.\n *\n * Note, this method automatically uses the latest BTC instruction set. To\n * manually select an instruction set, use {@link disassembleBytecode}.\n *\n * @param bytecode - the virtual machine bytecode to disassemble\n */\nexport const disassembleBytecodeBTC = (bytecode) => disassembleAuthenticationInstructionsMaybeMalformed(OpcodesBTC, decodeAuthenticationInstructions(bytecode));\n/**\n * Create an object where each key is an opcode identifier and each value is\n * the bytecode value (`Uint8Array`) it represents.\n * @param opcodes - An opcode enum, e.g. {@link OpcodesBCH}\n */\nexport const generateBytecodeMap = (opcodes) => Object.entries(opcodes)\n    .filter((entry) => typeof entry[1] === 'number')\n    .reduce((identifiers, pair) => ({\n    ...identifiers,\n    [pair[0]]: Uint8Array.of(pair[1]),\n}), {});\nconst getInstructionLengthBytes = (instruction) => {\n    const { opcode } = instruction;\n    const expectedLength = opcodeToPushLength(opcode);\n    return expectedLength === uint8Bytes\n        ? Uint8Array.of(instruction.data.length)\n        : expectedLength === uint16Bytes\n            ? numberToBinUint16LE(instruction.data.length)\n            : numberToBinUint32LE(instruction.data.length);\n};\n/**\n * Re-encode a valid authentication instruction.\n * @param instruction - the instruction to encode\n */\nexport const encodeAuthenticationInstruction = (instruction) => Uint8Array.from([\n    instruction.opcode,\n    ...('data' in instruction\n        ? [\n            ...(isPushData(instruction.opcode)\n                ? getInstructionLengthBytes(instruction)\n                : []),\n            ...instruction.data,\n        ]\n        : []),\n]);\n/**\n * Re-encode a malformed authentication instruction.\n * @param instruction - the {@link AuthenticationInstructionMalformed} to encode\n */\nexport const encodeAuthenticationInstructionMalformed = (instruction) => {\n    const { opcode } = instruction;\n    if (hasMalformedLength(instruction)) {\n        return Uint8Array.from([opcode, ...instruction.length]);\n    }\n    if (isPushData(opcode)) {\n        return Uint8Array.from([\n            opcode,\n            ...(opcode === 76 /* CommonPushOpcodes.OP_PUSHDATA_1 */\n                ? Uint8Array.of(instruction.expectedDataBytes)\n                : opcode === 77 /* CommonPushOpcodes.OP_PUSHDATA_2 */\n                    ? numberToBinUint16LE(instruction.expectedDataBytes)\n                    : numberToBinUint32LE(instruction.expectedDataBytes)),\n            ...instruction.data,\n        ]);\n    }\n    return Uint8Array.from([opcode, ...instruction.data]);\n};\n/**\n * Re-encode a potentially-malformed authentication instruction.\n * @param instruction - the {@link AuthenticationInstructionMaybeMalformed}\n * to encode\n */\nexport const encodeAuthenticationInstructionMaybeMalformed = (instruction) => authenticationInstructionIsMalformed(instruction)\n    ? encodeAuthenticationInstructionMalformed(instruction)\n    : encodeAuthenticationInstruction(instruction);\n/**\n * Re-encode an array of valid authentication instructions.\n * @param instructions - the array of valid instructions to encode\n */\nexport const encodeAuthenticationInstructions = (instructions) => flattenBinArray(instructions.map(encodeAuthenticationInstruction));\n/**\n * Re-encode an array of potentially-malformed authentication instructions.\n * @param instructions - the array of\n * {@link AuthenticationInstructionMaybeMalformed}s to encode\n */\nexport const encodeAuthenticationInstructionsMaybeMalformed = (instructions) => flattenBinArray(instructions.map(encodeAuthenticationInstructionMaybeMalformed));\nexport var VmNumberError;\n(function (VmNumberError) {\n    VmNumberError[\"outOfRange\"] = \"Failed to decode VM Number: overflows VM Number range.\";\n    VmNumberError[\"requiresMinimal\"] = \"Failed to decode VM Number: the number is not minimally-encoded.\";\n})(VmNumberError || (VmNumberError = {}));\nexport const isVmNumberError = (value) => value === VmNumberError.outOfRange || value === VmNumberError.requiresMinimal;\nconst typicalMaximumVmNumberByteLength = 8;\n/**\n * This method attempts to decode a VM Number, a format in which numeric values\n * are represented on the stack. (The Satoshi implementation calls this\n * `CScriptNum`.)\n *\n * If `bytes` is a valid VM Number, this method returns the represented number\n * in BigInt format. If `bytes` is not valid, a {@link VmNumberError}\n * is returned.\n *\n * All common operations accepting numeric parameters or pushing numeric values\n * to the stack currently use the VM Number format. The binary format of numbers\n * wouldn't be important if they could only be operated on by arithmetic\n * operators, but since the results of these operations may become input to\n * other operations (e.g. hashing), the specific representation is consensus-\n * critical.\n *\n * @param bytes - a Uint8Array from the stack\n */\n// eslint-disable-next-line complexity\nexport const vmNumberToBigInt = (bytes, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => {\n    if (bytes.length === 0) {\n        return 0n;\n    }\n    if (bytes.length > maximumVmNumberByteLength) {\n        return VmNumberError.outOfRange;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const mostSignificantByte = bytes[bytes.length - 1];\n    const secondMostSignificantByte = bytes[bytes.length - 1 - 1];\n    const allButTheSignBit = 127;\n    const justTheSignBit = 128;\n    if (requireMinimalEncoding &&\n        // eslint-disable-next-line no-bitwise\n        (mostSignificantByte & allButTheSignBit) === 0 &&\n        // eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n        (bytes.length <= 1 || (secondMostSignificantByte & justTheSignBit) === 0)) {\n        return VmNumberError.requiresMinimal;\n    }\n    const bitsPerByte = 8;\n    const signFlippingByte = 0x80;\n    // eslint-disable-next-line functional/no-let\n    let result = 0n;\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let byte = 0; byte < bytes.length; byte++) {\n        // eslint-disable-next-line functional/no-expression-statement,  no-bitwise, @typescript-eslint/no-non-null-assertion\n        result |= BigInt(bytes[byte]) << BigInt(byte * bitsPerByte);\n    }\n    /* eslint-disable no-bitwise */\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const isNegative = (bytes[bytes.length - 1] & signFlippingByte) !== 0;\n    return isNegative\n        ? -(result &\n            ~(BigInt(signFlippingByte) << BigInt(bitsPerByte * (bytes.length - 1))))\n        : result;\n    /* eslint-enable no-bitwise */\n};\n/**\n * Convert a BigInt into the VM Number format. See {@link vmNumberToBigInt} for\n * more information.\n *\n * @param integer - the BigInt to encode as a VM Number\n */\n// eslint-disable-next-line complexity\nexport const bigIntToVmNumber = (integer) => {\n    if (integer === 0n) {\n        return new Uint8Array();\n    }\n    const bytes = [];\n    const isNegative = integer < 0;\n    const byteStates = 0xff;\n    const bitsPerByte = 8;\n    // eslint-disable-next-line functional/no-let\n    let remaining = isNegative ? -integer : integer;\n    // eslint-disable-next-line functional/no-loop-statement\n    while (remaining > 0) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data, no-bitwise\n        bytes.push(Number(remaining & BigInt(byteStates)));\n        // eslint-disable-next-line functional/no-expression-statement, no-bitwise\n        remaining >>= BigInt(bitsPerByte);\n    }\n    const signFlippingByte = 0x80;\n    // eslint-disable-next-line no-bitwise, functional/no-conditional-statement, @typescript-eslint/no-non-null-assertion\n    if ((bytes[bytes.length - 1] & signFlippingByte) > 0) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        bytes.push(isNegative ? signFlippingByte : 0x00);\n        // eslint-disable-next-line functional/no-conditional-statement\n    }\n    else if (isNegative) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data, no-bitwise\n        bytes[bytes.length - 1] |= signFlippingByte;\n    }\n    return new Uint8Array(bytes);\n};\n/**\n * Returns true if the provided stack item is \"truthy\" in the sense required\n * by several operations (anything but zero and \"negative zero\").\n *\n * The Satoshi implementation calls this method `CastToBool`.\n *\n * @param item - the stack item to check for truthiness\n */\nexport const stackItemIsTruthy = (item) => {\n    const signFlippingByte = 0x80;\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus\n    for (let i = 0; i < item.length; i++) {\n        if (item[i] !== 0) {\n            if (i === item.length - 1 && item[i] === signFlippingByte) {\n                return false;\n            }\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * Convert a boolean into VM Number format (the type used to express\n * boolean values emitted by several operations).\n *\n * @param value - the boolean value to convert\n */\nexport const booleanToVmNumber = (value) => value ? bigIntToVmNumber(1n) : bigIntToVmNumber(0n);\n/**\n * From C++ implementation:\n * Note that IsPushOnly() *does* consider OP_RESERVED to be a push-type\n * opcode, however execution of OP_RESERVED fails, so it's not relevant to\n * P2SH/BIP62 as the scriptSig would fail prior to the P2SH special\n * validation code being executed.\n */\nexport const isPushOperation = (opcode) => opcode <= 96 /* Opcodes.OP_16 */;\nexport const isPushOnly = (bytecode) => {\n    const instructions = decodeAuthenticationInstructions(bytecode);\n    return instructions.every((instruction) => isPushOperation(instruction.opcode));\n};\nexport const isPushOnlyAccurate = (bytecode) => {\n    const instructions = decodeAuthenticationInstructions(bytecode);\n    return (!authenticationInstructionsAreMalformed(instructions) &&\n        authenticationInstructionsArePushInstructions(instructions));\n};\n/**\n * Test if the provided locking bytecode is an arbitrary data output.\n * A.K.A. `TX_NULL_DATA`, \"data carrier\", OP_RETURN output\n * @param lockingBytecode - the locking bytecode to test\n */\nexport const isArbitraryDataOutput = (lockingBytecode) => lockingBytecode.length >= 1 &&\n    lockingBytecode[0] === 106 /* Opcodes.OP_RETURN */ &&\n    isPushOnly(lockingBytecode.slice(1));\n/**\n * Given a number of bytes and a fee rate in satoshis-per-kilobyte, return the\n * minimum required fee. This calculation in important for standardness in dust\n * threshold calculation.\n *\n * @param length - the number of bytes for which the fee is to be paid\n * @param feeRateSatsPerKb - the fee rate in satoshis per 1000 bytes\n */\nexport const getMinimumFee = (length, feeRateSatsPerKb) => {\n    if (length < 1n)\n        return 0n;\n    const truncated = (length * feeRateSatsPerKb) / BigInt(1000 /* Dust.bytesPerKb */);\n    return truncated === 0n ? 1n : truncated;\n};\n/**\n * Given an {@link Output} and (optionally) a dust relay fee in\n * satoshis-per-kilobyte, return the minimum satoshi value for this output to\n * not be considered a \"dust output\". **For nodes to relay or mine a transaction\n * with this output, the output must have a satoshi value greater than or equal\n * to this threshold.**\n *\n * By standardness, if an output is expected to cost more than 1/3 of it's value\n * in fees to spend, it is considered dust. When calculating the expected fee,\n * the input size is assumed to be (at least) the size of a typical P2PKH input\n * spent using a 72-byte ECDSA signature, 148 bytes:\n * - Outpoint transaction hash: 32 bytes\n * - Outpoint index: 4 bytes\n * - Unlocking bytecode length: 1 byte\n * - Push of 72-byte ECDSA signature: 72 + 1 byte\n * - Push of public key: 33 + 1 byte\n * - Sequence number: 4 bytes\n *\n * The encoded length of the serialized output is added to 148 bytes, and the\n * dust threshold for the output is 3 times the minimum fee for the total bytes.\n * For a P2PKH output (34 bytes) and the standard 1000 sat/Kb dust relay fee,\n * this results in a dust limit of `546` satoshis (`(34+148)*3*1000/1000`).\n *\n * Note, arbitrary data outputs are not required to meet the dust limit as\n * they are provably unspendable and can be pruned from the UTXO set.\n *\n * @param output - the output to test\n * @param dustRelayFeeSatPerKb - the \"dust relay fee\", defaults to `1000n`\n */\nexport const getDustThreshold = (output, dustRelayFeeSatPerKb = BigInt(1000 /* Dust.standardDustRelayFee */)) => {\n    if (isArbitraryDataOutput(output.lockingBytecode)) {\n        return 0n;\n    }\n    const encodedOutputLength = encodeTransactionOutput(output).length;\n    const expectedTotalLength = encodedOutputLength + 148 /* Dust.p2pkhInputLength */;\n    return (BigInt(3 /* Dust.minimumFeeMultiple */) *\n        getMinimumFee(BigInt(expectedTotalLength), dustRelayFeeSatPerKb));\n};\n/**\n * Given an {@link Output} and (optionally) a dust relay fee in\n * satoshis-per-kilobyte, return `true` if the provided output is considered\n * a \"dust output\", or `false` otherwise.\n *\n * @param output - the output to test\n * @param dustRelayFeeSatPerKb - the \"dust relay fee\", defaults to `1000n`\n */\nexport const isDustOutput = (output, dustRelayFeeSatPerKb = BigInt(1000 /* Dust.standardDustRelayFee */)) => output.valueSatoshis < getDustThreshold(output, dustRelayFeeSatPerKb);\nexport const isValidUncompressedPublicKeyEncoding = (publicKey) => publicKey.length === 65 /* PublicKey.uncompressedByteLength */ &&\n    publicKey[0] === 4 /* PublicKey.uncompressedHeaderByte */;\nexport const isValidCompressedPublicKeyEncoding = (publicKey) => publicKey.length === 33 /* PublicKey.compressedByteLength */ &&\n    (publicKey[0] === 2 /* PublicKey.compressedHeaderByteEven */ ||\n        publicKey[0] === 3 /* PublicKey.compressedHeaderByteOdd */);\nexport const isValidPublicKeyEncoding = (publicKey) => isValidCompressedPublicKeyEncoding(publicKey) ||\n    isValidUncompressedPublicKeyEncoding(publicKey);\n// eslint-disable-next-line complexity\nexport const pushNumberOpcodeToNumber = (opcode) => {\n    if (opcode === 0 /* Opcodes.OP_0 */) {\n        return 0;\n    }\n    if (opcode === 79 /* Opcodes.OP_1NEGATE */) {\n        return -1;\n    }\n    if (!Number.isInteger(opcode) ||\n        opcode < 81 /* Opcodes.OP_1 */ ||\n        opcode > 96 /* Opcodes.OP_16 */) {\n        return false;\n    }\n    return opcode - 80 /* Opcodes.OP_RESERVED */;\n};\n// eslint-disable-next-line complexity\nexport const isSimpleMultisig = (lockingBytecode) => {\n    const instructions = decodeAuthenticationInstructions(lockingBytecode);\n    if (authenticationInstructionsAreMalformed(instructions)) {\n        return false;\n    }\n    const lastIndex = instructions.length - 1;\n    if (instructions.length < 4 /* Multisig.minimumInstructions */ ||\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        instructions[lastIndex].opcode !== 174 /* Opcodes.OP_CHECKMULTISIG */) {\n        return false;\n    }\n    /**\n     * The required count of signers (the `m` in `m-of-n`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const m = pushNumberOpcodeToNumber(instructions[0].opcode);\n    /**\n     * The total count of signers (the `n` in `m-of-n`).\n     */\n    const n = pushNumberOpcodeToNumber(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    instructions[lastIndex - 1].opcode);\n    if (n === false || m === false) {\n        return false;\n    }\n    const publicKeyInstructions = instructions.slice(1 /* Multisig.keyStart */, -2 /* Multisig.keyEnd */);\n    if (!authenticationInstructionsArePushInstructions(publicKeyInstructions)) {\n        return false;\n    }\n    const publicKeys = publicKeyInstructions.map((instruction) => instruction.data);\n    if (publicKeys.some((key) => !isValidPublicKeyEncoding(key))) {\n        return false;\n    }\n    return { m, n, publicKeys };\n};\n// eslint-disable-next-line complexity\nexport const isStandardMultisig = (lockingBytecode) => {\n    const multisigProperties = isSimpleMultisig(lockingBytecode);\n    if (multisigProperties === false) {\n        return false;\n    }\n    const { m, n } = multisigProperties;\n    if (n < 1 || n > 3 /* Multisig.maximumStandardN */ || m < 1 || m > n) {\n        return false;\n    }\n    return true;\n};\nexport const isStandardOutputBytecode = (lockingBytecode) => isPayToPublicKeyHash(lockingBytecode) ||\n    isPayToScriptHash20(lockingBytecode) ||\n    isPayToPublicKey(lockingBytecode) ||\n    isArbitraryDataOutput(lockingBytecode) ||\n    isStandardMultisig(lockingBytecode);\n// eslint-disable-next-line complexity\nexport const isStandardOutputBytecode2023 = (lockingBytecode) => isPayToPublicKeyHash(lockingBytecode) ||\n    isPayToScriptHash20(lockingBytecode) ||\n    isPayToScriptHash32(lockingBytecode) ||\n    isPayToPublicKey(lockingBytecode) ||\n    isArbitraryDataOutput(lockingBytecode) ||\n    isStandardMultisig(lockingBytecode);\n/**\n * Test a stack item for the SegWit Recovery Rules activated in `BCH_2019_05`.\n *\n * @param bytecode - the stack item to test\n */\n// eslint-disable-next-line complexity\nexport const isWitnessProgram = (bytecode) => {\n    const correctLength = bytecode.length >= 4 /* SegWit.minimumLength */ &&\n        bytecode.length <= 42 /* SegWit.maximumLength */;\n    const validVersionPush = bytecode[0] === 0 /* SegWit.OP_0 */ ||\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        (bytecode[0] >= 81 /* SegWit.OP_1 */ && bytecode[0] <= 96 /* SegWit.OP_16 */);\n    const correctLengthByte = \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    bytecode[1] + 2 /* SegWit.versionAndLengthBytes */ === bytecode.length;\n    return correctLength && validVersionPush && correctLengthByte;\n};\n//# sourceMappingURL=instruction-sets-utils.js.map", "/**\n * The `BCH_2023_05` instruction set.\n */\nexport var OpcodesBCH2023;\n(function (OpcodesBCH2023) {\n    /**\n     * A.K.A. `OP_FALSE` or `OP_PUSHBYTES_0`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_0\"] = 0] = \"OP_0\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_1\"] = 1] = \"OP_PUSHBYTES_1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_2\"] = 2] = \"OP_PUSHBYTES_2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_3\"] = 3] = \"OP_PUSHBYTES_3\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_4\"] = 4] = \"OP_PUSHBYTES_4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_5\"] = 5] = \"OP_PUSHBYTES_5\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_6\"] = 6] = \"OP_PUSHBYTES_6\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_7\"] = 7] = \"OP_PUSHBYTES_7\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_8\"] = 8] = \"OP_PUSHBYTES_8\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_9\"] = 9] = \"OP_PUSHBYTES_9\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_10\"] = 10] = \"OP_PUSHBYTES_10\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_11\"] = 11] = \"OP_PUSHBYTES_11\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_12\"] = 12] = \"OP_PUSHBYTES_12\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_13\"] = 13] = \"OP_PUSHBYTES_13\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_14\"] = 14] = \"OP_PUSHBYTES_14\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_15\"] = 15] = \"OP_PUSHBYTES_15\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_16\"] = 16] = \"OP_PUSHBYTES_16\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_17\"] = 17] = \"OP_PUSHBYTES_17\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_18\"] = 18] = \"OP_PUSHBYTES_18\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_19\"] = 19] = \"OP_PUSHBYTES_19\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_20\"] = 20] = \"OP_PUSHBYTES_20\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_21\"] = 21] = \"OP_PUSHBYTES_21\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_22\"] = 22] = \"OP_PUSHBYTES_22\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_23\"] = 23] = \"OP_PUSHBYTES_23\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_24\"] = 24] = \"OP_PUSHBYTES_24\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_25\"] = 25] = \"OP_PUSHBYTES_25\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_26\"] = 26] = \"OP_PUSHBYTES_26\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_27\"] = 27] = \"OP_PUSHBYTES_27\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_28\"] = 28] = \"OP_PUSHBYTES_28\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_29\"] = 29] = \"OP_PUSHBYTES_29\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_30\"] = 30] = \"OP_PUSHBYTES_30\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_31\"] = 31] = \"OP_PUSHBYTES_31\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_32\"] = 32] = \"OP_PUSHBYTES_32\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_33\"] = 33] = \"OP_PUSHBYTES_33\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_34\"] = 34] = \"OP_PUSHBYTES_34\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_35\"] = 35] = \"OP_PUSHBYTES_35\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_36\"] = 36] = \"OP_PUSHBYTES_36\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_37\"] = 37] = \"OP_PUSHBYTES_37\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_38\"] = 38] = \"OP_PUSHBYTES_38\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_39\"] = 39] = \"OP_PUSHBYTES_39\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_40\"] = 40] = \"OP_PUSHBYTES_40\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_41\"] = 41] = \"OP_PUSHBYTES_41\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_42\"] = 42] = \"OP_PUSHBYTES_42\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_43\"] = 43] = \"OP_PUSHBYTES_43\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_44\"] = 44] = \"OP_PUSHBYTES_44\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_45\"] = 45] = \"OP_PUSHBYTES_45\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_46\"] = 46] = \"OP_PUSHBYTES_46\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_47\"] = 47] = \"OP_PUSHBYTES_47\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_48\"] = 48] = \"OP_PUSHBYTES_48\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_49\"] = 49] = \"OP_PUSHBYTES_49\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_50\"] = 50] = \"OP_PUSHBYTES_50\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_51\"] = 51] = \"OP_PUSHBYTES_51\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_52\"] = 52] = \"OP_PUSHBYTES_52\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_53\"] = 53] = \"OP_PUSHBYTES_53\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_54\"] = 54] = \"OP_PUSHBYTES_54\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_55\"] = 55] = \"OP_PUSHBYTES_55\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_56\"] = 56] = \"OP_PUSHBYTES_56\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_57\"] = 57] = \"OP_PUSHBYTES_57\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_58\"] = 58] = \"OP_PUSHBYTES_58\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_59\"] = 59] = \"OP_PUSHBYTES_59\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_60\"] = 60] = \"OP_PUSHBYTES_60\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_61\"] = 61] = \"OP_PUSHBYTES_61\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_62\"] = 62] = \"OP_PUSHBYTES_62\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_63\"] = 63] = \"OP_PUSHBYTES_63\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_64\"] = 64] = \"OP_PUSHBYTES_64\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_65\"] = 65] = \"OP_PUSHBYTES_65\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_66\"] = 66] = \"OP_PUSHBYTES_66\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_67\"] = 67] = \"OP_PUSHBYTES_67\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_68\"] = 68] = \"OP_PUSHBYTES_68\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_69\"] = 69] = \"OP_PUSHBYTES_69\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_70\"] = 70] = \"OP_PUSHBYTES_70\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_71\"] = 71] = \"OP_PUSHBYTES_71\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_72\"] = 72] = \"OP_PUSHBYTES_72\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_73\"] = 73] = \"OP_PUSHBYTES_73\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_74\"] = 74] = \"OP_PUSHBYTES_74\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_75\"] = 75] = \"OP_PUSHBYTES_75\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHDATA_1\"] = 76] = \"OP_PUSHDATA_1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHDATA_2\"] = 77] = \"OP_PUSHDATA_2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHDATA_4\"] = 78] = \"OP_PUSHDATA_4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    /**\n     * A.K.A. `OP_TRUE`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1\"] = 81] = \"OP_1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2\"] = 82] = \"OP_2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_3\"] = 83] = \"OP_3\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_4\"] = 84] = \"OP_4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_5\"] = 85] = \"OP_5\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_6\"] = 86] = \"OP_6\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_7\"] = 87] = \"OP_7\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_8\"] = 88] = \"OP_8\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_9\"] = 89] = \"OP_9\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_10\"] = 90] = \"OP_10\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_11\"] = 91] = \"OP_11\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_12\"] = 92] = \"OP_12\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_13\"] = 93] = \"OP_13\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_14\"] = 94] = \"OP_14\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_15\"] = 95] = \"OP_15\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_16\"] = 96] = \"OP_16\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VER\"] = 98] = \"OP_VER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_IF\"] = 99] = \"OP_IF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VERIF\"] = 101] = \"OP_VERIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VERNOTIF\"] = 102] = \"OP_VERNOTIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SPLIT\"] = 127] = \"OP_SPLIT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUM2BIN\"] = 128] = \"OP_NUM2BIN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_BIN2NUM\"] = 129] = \"OP_BIN2NUM\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_AND\"] = 132] = \"OP_AND\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OR\"] = 133] = \"OP_OR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKDATASIG\"] = 186] = \"OP_CHECKDATASIG\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKDATASIGVERIFY\"] = 187] = \"OP_CHECKDATASIGVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_REVERSEBYTES\"] = 188] = \"OP_REVERSEBYTES\";\n    /**\n     * First codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN189\"] = 189] = \"OP_UNKNOWN189\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN190\"] = 190] = \"OP_UNKNOWN190\";\n    /**\n     * Last codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN191\"] = 191] = \"OP_UNKNOWN191\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INPUTINDEX\"] = 192] = \"OP_INPUTINDEX\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ACTIVEBYTECODE\"] = 193] = \"OP_ACTIVEBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXVERSION\"] = 194] = \"OP_TXVERSION\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXINPUTCOUNT\"] = 195] = \"OP_TXINPUTCOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXOUTPUTCOUNT\"] = 196] = \"OP_TXOUTPUTCOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXLOCKTIME\"] = 197] = \"OP_TXLOCKTIME\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOVALUE\"] = 198] = \"OP_UTXOVALUE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOBYTECODE\"] = 199] = \"OP_UTXOBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPOINTTXHASH\"] = 200] = \"OP_OUTPOINTTXHASH\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPOINTINDEX\"] = 201] = \"OP_OUTPOINTINDEX\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INPUTBYTECODE\"] = 202] = \"OP_INPUTBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INPUTSEQUENCENUMBER\"] = 203] = \"OP_INPUTSEQUENCENUMBER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTVALUE\"] = 204] = \"OP_OUTPUTVALUE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTBYTECODE\"] = 205] = \"OP_OUTPUTBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOTOKENCATEGORY\"] = 206] = \"OP_UTXOTOKENCATEGORY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOTOKENCOMMITMENT\"] = 207] = \"OP_UTXOTOKENCOMMITMENT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOTOKENAMOUNT\"] = 208] = \"OP_UTXOTOKENAMOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTTOKENCATEGORY\"] = 209] = \"OP_OUTPUTTOKENCATEGORY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTTOKENCOMMITMENT\"] = 210] = \"OP_OUTPUTTOKENCOMMITMENT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTTOKENAMOUNT\"] = 211] = \"OP_OUTPUTTOKENAMOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN212\"] = 212] = \"OP_UNKNOWN212\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN213\"] = 213] = \"OP_UNKNOWN213\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN214\"] = 214] = \"OP_UNKNOWN214\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN215\"] = 215] = \"OP_UNKNOWN215\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN216\"] = 216] = \"OP_UNKNOWN216\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN217\"] = 217] = \"OP_UNKNOWN217\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN218\"] = 218] = \"OP_UNKNOWN218\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN219\"] = 219] = \"OP_UNKNOWN219\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN220\"] = 220] = \"OP_UNKNOWN220\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN221\"] = 221] = \"OP_UNKNOWN221\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN222\"] = 222] = \"OP_UNKNOWN222\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN223\"] = 223] = \"OP_UNKNOWN223\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN224\"] = 224] = \"OP_UNKNOWN224\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN225\"] = 225] = \"OP_UNKNOWN225\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN226\"] = 226] = \"OP_UNKNOWN226\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN227\"] = 227] = \"OP_UNKNOWN227\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN228\"] = 228] = \"OP_UNKNOWN228\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN229\"] = 229] = \"OP_UNKNOWN229\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN230\"] = 230] = \"OP_UNKNOWN230\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN231\"] = 231] = \"OP_UNKNOWN231\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN232\"] = 232] = \"OP_UNKNOWN232\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN233\"] = 233] = \"OP_UNKNOWN233\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN234\"] = 234] = \"OP_UNKNOWN234\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN235\"] = 235] = \"OP_UNKNOWN235\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN236\"] = 236] = \"OP_UNKNOWN236\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN237\"] = 237] = \"OP_UNKNOWN237\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN238\"] = 238] = \"OP_UNKNOWN238\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN239\"] = 239] = \"OP_UNKNOWN239\";\n    /**\n     * A.K.A. `OP_PREFIX_BEGIN`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN240\"] = 240] = \"OP_UNKNOWN240\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN241\"] = 241] = \"OP_UNKNOWN241\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN242\"] = 242] = \"OP_UNKNOWN242\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN243\"] = 243] = \"OP_UNKNOWN243\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN244\"] = 244] = \"OP_UNKNOWN244\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN245\"] = 245] = \"OP_UNKNOWN245\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN246\"] = 246] = \"OP_UNKNOWN246\";\n    /**\n     * A.K.A. `OP_PREFIX_END`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN247\"] = 247] = \"OP_UNKNOWN247\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN248\"] = 248] = \"OP_UNKNOWN248\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN249\"] = 249] = \"OP_UNKNOWN249\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN250\"] = 250] = \"OP_UNKNOWN250\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN251\"] = 251] = \"OP_UNKNOWN251\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN252\"] = 252] = \"OP_UNKNOWN252\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN253\"] = 253] = \"OP_UNKNOWN253\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN254\"] = 254] = \"OP_UNKNOWN254\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN255\"] = 255] = \"OP_UNKNOWN255\";\n})(OpcodesBCH2023 || (OpcodesBCH2023 = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const OpcodesBCH = OpcodesBCH2023;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Opcodes = OpcodesBCH;\n//# sourceMappingURL=bch-2023-opcodes.js.map", "/**\n *  `OpcodesBTC` currently represents the `BTC_2017_08` instruction set.\n */\nexport var OpcodesBTC;\n(function (OpcodesBTC) {\n    OpcodesBTC[OpcodesBTC[\"OP_0\"] = 0] = \"OP_0\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_1\"] = 1] = \"OP_PUSHBYTES_1\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_2\"] = 2] = \"OP_PUSHBYTES_2\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_3\"] = 3] = \"OP_PUSHBYTES_3\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_4\"] = 4] = \"OP_PUSHBYTES_4\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_5\"] = 5] = \"OP_PUSHBYTES_5\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_6\"] = 6] = \"OP_PUSHBYTES_6\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_7\"] = 7] = \"OP_PUSHBYTES_7\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_8\"] = 8] = \"OP_PUSHBYTES_8\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_9\"] = 9] = \"OP_PUSHBYTES_9\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_10\"] = 10] = \"OP_PUSHBYTES_10\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_11\"] = 11] = \"OP_PUSHBYTES_11\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_12\"] = 12] = \"OP_PUSHBYTES_12\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_13\"] = 13] = \"OP_PUSHBYTES_13\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_14\"] = 14] = \"OP_PUSHBYTES_14\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_15\"] = 15] = \"OP_PUSHBYTES_15\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_16\"] = 16] = \"OP_PUSHBYTES_16\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_17\"] = 17] = \"OP_PUSHBYTES_17\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_18\"] = 18] = \"OP_PUSHBYTES_18\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_19\"] = 19] = \"OP_PUSHBYTES_19\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_20\"] = 20] = \"OP_PUSHBYTES_20\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_21\"] = 21] = \"OP_PUSHBYTES_21\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_22\"] = 22] = \"OP_PUSHBYTES_22\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_23\"] = 23] = \"OP_PUSHBYTES_23\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_24\"] = 24] = \"OP_PUSHBYTES_24\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_25\"] = 25] = \"OP_PUSHBYTES_25\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_26\"] = 26] = \"OP_PUSHBYTES_26\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_27\"] = 27] = \"OP_PUSHBYTES_27\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_28\"] = 28] = \"OP_PUSHBYTES_28\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_29\"] = 29] = \"OP_PUSHBYTES_29\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_30\"] = 30] = \"OP_PUSHBYTES_30\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_31\"] = 31] = \"OP_PUSHBYTES_31\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_32\"] = 32] = \"OP_PUSHBYTES_32\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_33\"] = 33] = \"OP_PUSHBYTES_33\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_34\"] = 34] = \"OP_PUSHBYTES_34\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_35\"] = 35] = \"OP_PUSHBYTES_35\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_36\"] = 36] = \"OP_PUSHBYTES_36\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_37\"] = 37] = \"OP_PUSHBYTES_37\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_38\"] = 38] = \"OP_PUSHBYTES_38\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_39\"] = 39] = \"OP_PUSHBYTES_39\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_40\"] = 40] = \"OP_PUSHBYTES_40\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_41\"] = 41] = \"OP_PUSHBYTES_41\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_42\"] = 42] = \"OP_PUSHBYTES_42\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_43\"] = 43] = \"OP_PUSHBYTES_43\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_44\"] = 44] = \"OP_PUSHBYTES_44\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_45\"] = 45] = \"OP_PUSHBYTES_45\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_46\"] = 46] = \"OP_PUSHBYTES_46\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_47\"] = 47] = \"OP_PUSHBYTES_47\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_48\"] = 48] = \"OP_PUSHBYTES_48\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_49\"] = 49] = \"OP_PUSHBYTES_49\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_50\"] = 50] = \"OP_PUSHBYTES_50\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_51\"] = 51] = \"OP_PUSHBYTES_51\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_52\"] = 52] = \"OP_PUSHBYTES_52\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_53\"] = 53] = \"OP_PUSHBYTES_53\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_54\"] = 54] = \"OP_PUSHBYTES_54\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_55\"] = 55] = \"OP_PUSHBYTES_55\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_56\"] = 56] = \"OP_PUSHBYTES_56\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_57\"] = 57] = \"OP_PUSHBYTES_57\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_58\"] = 58] = \"OP_PUSHBYTES_58\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_59\"] = 59] = \"OP_PUSHBYTES_59\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_60\"] = 60] = \"OP_PUSHBYTES_60\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_61\"] = 61] = \"OP_PUSHBYTES_61\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_62\"] = 62] = \"OP_PUSHBYTES_62\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_63\"] = 63] = \"OP_PUSHBYTES_63\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_64\"] = 64] = \"OP_PUSHBYTES_64\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_65\"] = 65] = \"OP_PUSHBYTES_65\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_66\"] = 66] = \"OP_PUSHBYTES_66\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_67\"] = 67] = \"OP_PUSHBYTES_67\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_68\"] = 68] = \"OP_PUSHBYTES_68\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_69\"] = 69] = \"OP_PUSHBYTES_69\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_70\"] = 70] = \"OP_PUSHBYTES_70\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_71\"] = 71] = \"OP_PUSHBYTES_71\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_72\"] = 72] = \"OP_PUSHBYTES_72\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_73\"] = 73] = \"OP_PUSHBYTES_73\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_74\"] = 74] = \"OP_PUSHBYTES_74\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHBYTES_75\"] = 75] = \"OP_PUSHBYTES_75\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHDATA_1\"] = 76] = \"OP_PUSHDATA_1\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHDATA_2\"] = 77] = \"OP_PUSHDATA_2\";\n    OpcodesBTC[OpcodesBTC[\"OP_PUSHDATA_4\"] = 78] = \"OP_PUSHDATA_4\";\n    OpcodesBTC[OpcodesBTC[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    OpcodesBTC[OpcodesBTC[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    OpcodesBTC[OpcodesBTC[\"OP_1\"] = 81] = \"OP_1\";\n    OpcodesBTC[OpcodesBTC[\"OP_2\"] = 82] = \"OP_2\";\n    OpcodesBTC[OpcodesBTC[\"OP_3\"] = 83] = \"OP_3\";\n    OpcodesBTC[OpcodesBTC[\"OP_4\"] = 84] = \"OP_4\";\n    OpcodesBTC[OpcodesBTC[\"OP_5\"] = 85] = \"OP_5\";\n    OpcodesBTC[OpcodesBTC[\"OP_6\"] = 86] = \"OP_6\";\n    OpcodesBTC[OpcodesBTC[\"OP_7\"] = 87] = \"OP_7\";\n    OpcodesBTC[OpcodesBTC[\"OP_8\"] = 88] = \"OP_8\";\n    OpcodesBTC[OpcodesBTC[\"OP_9\"] = 89] = \"OP_9\";\n    OpcodesBTC[OpcodesBTC[\"OP_10\"] = 90] = \"OP_10\";\n    OpcodesBTC[OpcodesBTC[\"OP_11\"] = 91] = \"OP_11\";\n    OpcodesBTC[OpcodesBTC[\"OP_12\"] = 92] = \"OP_12\";\n    OpcodesBTC[OpcodesBTC[\"OP_13\"] = 93] = \"OP_13\";\n    OpcodesBTC[OpcodesBTC[\"OP_14\"] = 94] = \"OP_14\";\n    OpcodesBTC[OpcodesBTC[\"OP_15\"] = 95] = \"OP_15\";\n    OpcodesBTC[OpcodesBTC[\"OP_16\"] = 96] = \"OP_16\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    OpcodesBTC[OpcodesBTC[\"OP_VER\"] = 98] = \"OP_VER\";\n    OpcodesBTC[OpcodesBTC[\"OP_IF\"] = 99] = \"OP_IF\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    OpcodesBTC[OpcodesBTC[\"OP_VERIF\"] = 101] = \"OP_VERIF\";\n    OpcodesBTC[OpcodesBTC[\"OP_VERNOTIF\"] = 102] = \"OP_VERNOTIF\";\n    OpcodesBTC[OpcodesBTC[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    OpcodesBTC[OpcodesBTC[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    OpcodesBTC[OpcodesBTC[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    OpcodesBTC[OpcodesBTC[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    OpcodesBTC[OpcodesBTC[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    OpcodesBTC[OpcodesBTC[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    OpcodesBTC[OpcodesBTC[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    OpcodesBTC[OpcodesBTC[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    OpcodesBTC[OpcodesBTC[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    OpcodesBTC[OpcodesBTC[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    OpcodesBTC[OpcodesBTC[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    OpcodesBTC[OpcodesBTC[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    OpcodesBTC[OpcodesBTC[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    OpcodesBTC[OpcodesBTC[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    OpcodesBTC[OpcodesBTC[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    OpcodesBTC[OpcodesBTC[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    OpcodesBTC[OpcodesBTC[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    OpcodesBTC[OpcodesBTC[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    OpcodesBTC[OpcodesBTC[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    OpcodesBTC[OpcodesBTC[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    OpcodesBTC[OpcodesBTC[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    OpcodesBTC[OpcodesBTC[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    OpcodesBTC[OpcodesBTC[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    OpcodesBTC[OpcodesBTC[\"OP_SUBSTR\"] = 127] = \"OP_SUBSTR\";\n    OpcodesBTC[OpcodesBTC[\"OP_LEFT\"] = 128] = \"OP_LEFT\";\n    OpcodesBTC[OpcodesBTC[\"OP_RIGHT\"] = 129] = \"OP_RIGHT\";\n    OpcodesBTC[OpcodesBTC[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    OpcodesBTC[OpcodesBTC[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    OpcodesBTC[OpcodesBTC[\"OP_AND\"] = 132] = \"OP_AND\";\n    OpcodesBTC[OpcodesBTC[\"OP_OR\"] = 133] = \"OP_OR\";\n    OpcodesBTC[OpcodesBTC[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    OpcodesBTC[OpcodesBTC[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    OpcodesBTC[OpcodesBTC[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    OpcodesBTC[OpcodesBTC[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    OpcodesBTC[OpcodesBTC[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    OpcodesBTC[OpcodesBTC[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    OpcodesBTC[OpcodesBTC[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    OpcodesBTC[OpcodesBTC[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    OpcodesBTC[OpcodesBTC[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    OpcodesBTC[OpcodesBTC[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    OpcodesBTC[OpcodesBTC[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    OpcodesBTC[OpcodesBTC[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    OpcodesBTC[OpcodesBTC[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    OpcodesBTC[OpcodesBTC[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    OpcodesBTC[OpcodesBTC[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    OpcodesBTC[OpcodesBTC[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    OpcodesBTC[OpcodesBTC[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    OpcodesBTC[OpcodesBTC[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    OpcodesBTC[OpcodesBTC[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    OpcodesBTC[OpcodesBTC[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    OpcodesBTC[OpcodesBTC[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    OpcodesBTC[OpcodesBTC[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    OpcodesBTC[OpcodesBTC[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    OpcodesBTC[OpcodesBTC[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    OpcodesBTC[OpcodesBTC[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    OpcodesBTC[OpcodesBTC[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    OpcodesBTC[OpcodesBTC[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    OpcodesBTC[OpcodesBTC[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    OpcodesBTC[OpcodesBTC[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    OpcodesBTC[OpcodesBTC[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    OpcodesBTC[OpcodesBTC[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    OpcodesBTC[OpcodesBTC[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    OpcodesBTC[OpcodesBTC[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    OpcodesBTC[OpcodesBTC[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    OpcodesBTC[OpcodesBTC[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    OpcodesBTC[OpcodesBTC[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    OpcodesBTC[OpcodesBTC[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    OpcodesBTC[OpcodesBTC[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    OpcodesBTC[OpcodesBTC[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    OpcodesBTC[OpcodesBTC[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN186\"] = 186] = \"OP_UNKNOWN186\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN187\"] = 187] = \"OP_UNKNOWN187\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN188\"] = 188] = \"OP_UNKNOWN188\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN189\"] = 189] = \"OP_UNKNOWN189\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN190\"] = 190] = \"OP_UNKNOWN190\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN191\"] = 191] = \"OP_UNKNOWN191\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN192\"] = 192] = \"OP_UNKNOWN192\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN193\"] = 193] = \"OP_UNKNOWN193\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN194\"] = 194] = \"OP_UNKNOWN194\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN195\"] = 195] = \"OP_UNKNOWN195\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN196\"] = 196] = \"OP_UNKNOWN196\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN197\"] = 197] = \"OP_UNKNOWN197\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN198\"] = 198] = \"OP_UNKNOWN198\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN199\"] = 199] = \"OP_UNKNOWN199\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN200\"] = 200] = \"OP_UNKNOWN200\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN201\"] = 201] = \"OP_UNKNOWN201\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN202\"] = 202] = \"OP_UNKNOWN202\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN203\"] = 203] = \"OP_UNKNOWN203\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN204\"] = 204] = \"OP_UNKNOWN204\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN205\"] = 205] = \"OP_UNKNOWN205\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN206\"] = 206] = \"OP_UNKNOWN206\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN207\"] = 207] = \"OP_UNKNOWN207\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN208\"] = 208] = \"OP_UNKNOWN208\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN209\"] = 209] = \"OP_UNKNOWN209\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN210\"] = 210] = \"OP_UNKNOWN210\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN211\"] = 211] = \"OP_UNKNOWN211\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN212\"] = 212] = \"OP_UNKNOWN212\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN213\"] = 213] = \"OP_UNKNOWN213\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN214\"] = 214] = \"OP_UNKNOWN214\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN215\"] = 215] = \"OP_UNKNOWN215\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN216\"] = 216] = \"OP_UNKNOWN216\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN217\"] = 217] = \"OP_UNKNOWN217\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN218\"] = 218] = \"OP_UNKNOWN218\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN219\"] = 219] = \"OP_UNKNOWN219\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN220\"] = 220] = \"OP_UNKNOWN220\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN221\"] = 221] = \"OP_UNKNOWN221\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN222\"] = 222] = \"OP_UNKNOWN222\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN223\"] = 223] = \"OP_UNKNOWN223\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN224\"] = 224] = \"OP_UNKNOWN224\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN225\"] = 225] = \"OP_UNKNOWN225\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN226\"] = 226] = \"OP_UNKNOWN226\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN227\"] = 227] = \"OP_UNKNOWN227\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN228\"] = 228] = \"OP_UNKNOWN228\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN229\"] = 229] = \"OP_UNKNOWN229\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN230\"] = 230] = \"OP_UNKNOWN230\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN231\"] = 231] = \"OP_UNKNOWN231\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN232\"] = 232] = \"OP_UNKNOWN232\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN233\"] = 233] = \"OP_UNKNOWN233\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN234\"] = 234] = \"OP_UNKNOWN234\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN235\"] = 235] = \"OP_UNKNOWN235\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN236\"] = 236] = \"OP_UNKNOWN236\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN237\"] = 237] = \"OP_UNKNOWN237\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN238\"] = 238] = \"OP_UNKNOWN238\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN239\"] = 239] = \"OP_UNKNOWN239\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN240\"] = 240] = \"OP_UNKNOWN240\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN241\"] = 241] = \"OP_UNKNOWN241\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN242\"] = 242] = \"OP_UNKNOWN242\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN243\"] = 243] = \"OP_UNKNOWN243\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN244\"] = 244] = \"OP_UNKNOWN244\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN245\"] = 245] = \"OP_UNKNOWN245\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN246\"] = 246] = \"OP_UNKNOWN246\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN247\"] = 247] = \"OP_UNKNOWN247\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN248\"] = 248] = \"OP_UNKNOWN248\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN249\"] = 249] = \"OP_UNKNOWN249\";\n    /**\n     * Used internally in the C++ implementation.\n     */\n    OpcodesBTC[OpcodesBTC[\"OP_SMALLINTEGER\"] = 250] = \"OP_SMALLINTEGER\";\n    /**\n     * Used internally in the C++ implementation.\n     */\n    OpcodesBTC[OpcodesBTC[\"OP_PUBKEYS\"] = 251] = \"OP_PUBKEYS\";\n    OpcodesBTC[OpcodesBTC[\"OP_UNKNOWN252\"] = 252] = \"OP_UNKNOWN252\";\n    /**\n     * Used internally in the C++ implementation.\n     */\n    OpcodesBTC[OpcodesBTC[\"OP_PUBKEYHASH\"] = 253] = \"OP_PUBKEYHASH\";\n    /**\n     * Used internally in the C++ implementation.\n     */\n    OpcodesBTC[OpcodesBTC[\"OP_PUBKEY\"] = 254] = \"OP_PUBKEY\";\n    /**\n     * Used internally in the C++ implementation.\n     */\n    OpcodesBTC[OpcodesBTC[\"OP_INVALIDOPCODE\"] = 255] = \"OP_INVALIDOPCODE\";\n})(OpcodesBTC || (OpcodesBTC = {}));\n//# sourceMappingURL=btc-opcodes.js.map", "import { useOneStackItem } from './combinators.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { stackItemIsTruthy } from './instruction-sets-utils.js';\nexport const opVerify = (state) => useOneStackItem(state, (nextState, [item]) => stackItemIsTruthy(item)\n    ? nextState\n    : applyError(nextState, AuthenticationErrorCommon.failedVerify));\nexport const reservedOperation = (state) => applyError(state, AuthenticationErrorCommon.calledReserved);\nexport const opReturn = (state) => applyError(state, AuthenticationErrorCommon.calledReturn);\nexport const opIf = (state) => {\n    if (state.controlStack.every((item) => item)) {\n        return useOneStackItem(state, (nextState, [item]) => {\n            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n            nextState.controlStack.push(stackItemIsTruthy(item));\n            return state;\n        });\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.controlStack.push(false);\n    return state;\n};\n/**\n * Note, `OP_NOTIF` is not completely equivalent to `OP_NOT OP_IF`. `OP_NOT`\n * operates on a VM Number (as the inverse of `OP_0NOTEQUAL`), while `OP_NOTIF`\n * checks the \"truthy-ness\" of a stack item like `OP_IF`.\n */\nexport const opNotIf = (state) => {\n    if (state.controlStack.every((item) => item)) {\n        return useOneStackItem(state, (nextState, [item]) => {\n            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n            nextState.controlStack.push(!stackItemIsTruthy(item));\n            return state;\n        });\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.controlStack.push(false);\n    return state;\n};\nexport const opEndIf = (state) => {\n    // eslint-disable-next-line functional/immutable-data\n    const element = state.controlStack.pop();\n    if (element === undefined) {\n        return applyError(state, AuthenticationErrorCommon.unexpectedEndIf);\n    }\n    return state;\n};\nexport const opElse = (state) => {\n    const top = state.controlStack[state.controlStack.length - 1];\n    if (top === undefined) {\n        return applyError(state, AuthenticationErrorCommon.unexpectedElse);\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.controlStack[state.controlStack.length - 1] = !top;\n    return state;\n};\n//# sourceMappingURL=flow-control.js.map", "import { binsAreEqual } from '../../../format/format.js';\nimport { combineOperations, pushToStack, useTwoStackItems, } from './combinators.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { opVerify } from './flow-control.js';\nimport { booleanToVmNumber } from './instruction-sets-utils.js';\nexport const opEqual = (state) => useTwoStackItems(state, (nextState, [element1, element2]) => pushToStack(nextState, booleanToVmNumber(binsAreEqual(element1, element2))));\nexport const opEqualVerify = combineOperations(opEqual, opVerify);\nexport const bitwiseOperation = (combine) => (state) => useTwoStackItems(state, (nextState, [a, b]) => a.length === b.length\n    ? pushToStack(nextState, combine(a, b))\n    : applyError(nextState, AuthenticationErrorCommon.mismatchedBitwiseOperandLength));\n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\nexport const opAnd = bitwiseOperation((a, b) => a.map((v, i) => v & b[i]));\n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\nexport const opOr = bitwiseOperation((a, b) => a.map((v, i) => v | b[i]));\n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\nexport const opXor = bitwiseOperation((a, b) => a.map((v, i) => v ^ b[i]));\n//# sourceMappingURL=bitwise.js.map", "import { cloneTransactionCommon, cloneTransactionOutputsCommon, } from '../../../message/message.js';\nimport { conditionallyEvaluate } from './combinators.js';\nimport { ConsensusCommon } from './consensus.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { cloneAuthenticationInstruction } from './instruction-sets-utils.js';\nexport const undefinedOperation = conditionallyEvaluate((state) => applyError(state, AuthenticationErrorCommon.unknownOpcode));\nexport const checkLimitsCommon = (operation) => (state) => {\n    const nextState = operation(state);\n    return nextState.stack.length + nextState.alternateStack.length >\n        ConsensusCommon.maximumStackDepth\n        ? applyError(nextState, AuthenticationErrorCommon.exceededMaximumStackDepth)\n        : nextState.operationCount > ConsensusCommon.maximumOperationCount\n            ? applyError(nextState, AuthenticationErrorCommon.exceededMaximumOperationCount)\n            : nextState;\n};\nexport const cloneStack = (stack) => stack.map((item) => item.slice());\nexport const createAuthenticationProgramStateCommon = ({ program, instructions, stack, }) => ({\n    alternateStack: [],\n    controlStack: [],\n    instructions,\n    ip: 0,\n    lastCodeSeparator: -1,\n    operationCount: 0,\n    program,\n    signatureOperationsCount: 0,\n    signedMessages: [],\n    stack,\n});\nexport const cloneAuthenticationProgramCommon = (program) => ({\n    inputIndex: program.inputIndex,\n    sourceOutputs: cloneTransactionOutputsCommon(program.sourceOutputs),\n    transaction: cloneTransactionCommon(program.transaction),\n});\nexport const cloneAuthenticationProgramStateCommon = (state) => ({\n    ...(state.error === undefined ? {} : { error: state.error }),\n    alternateStack: cloneStack(state.alternateStack),\n    controlStack: state.controlStack.slice(),\n    instructions: state.instructions.map(cloneAuthenticationInstruction),\n    ip: state.ip,\n    lastCodeSeparator: state.lastCodeSeparator,\n    operationCount: state.operationCount,\n    program: cloneAuthenticationProgramCommon(state.program),\n    signatureOperationsCount: state.signatureOperationsCount,\n    signedMessages: state.signedMessages.map((item) => ({\n        digest: item.digest.slice(),\n        ...('serialization' in item\n            ? { serialization: item.serialization.slice() }\n            : { message: item.message.slice() }),\n    })),\n    stack: cloneStack(state.stack),\n});\nexport const cloneAuthenticationProgramStateBCH = cloneAuthenticationProgramStateCommon;\nexport const cloneAuthenticationProgramState = cloneAuthenticationProgramStateBCH;\nconst sha256HashLength = 32;\n/**\n * This is a meaningless but complete {@link CompilationContextCommon} that uses\n * a different value for each property. This is useful for testing\n * and debugging.\n */\n// eslint-disable-next-line complexity\nexport const createCompilationContextCommonTesting = ({ sourceOutputs, inputs, locktime, version, outputs, } = {}) => ({\n    inputIndex: 0,\n    sourceOutputs: sourceOutputs\n        ? sourceOutputs\n        : [\n            {\n                lockingBytecode: Uint8Array.from([]),\n                valueSatoshis: 0xffffffffffffffffn,\n            },\n        ],\n    transaction: {\n        inputs: inputs\n            ? inputs\n            : [\n                {\n                    outpointIndex: 0,\n                    outpointTransactionHash: new Uint8Array(sha256HashLength).fill(1),\n                    sequenceNumber: 0,\n                    unlockingBytecode: undefined,\n                },\n            ],\n        locktime: locktime === undefined ? 0 : locktime,\n        outputs: outputs === undefined\n            ? [\n                {\n                    lockingBytecode: Uint8Array.from([]),\n                    valueSatoshis: 0xffffffffffffffffn,\n                },\n            ]\n            : outputs,\n        version: version === undefined ? 0 : version,\n    },\n});\n//# sourceMappingURL=common-types.js.map", "import { hash256, ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha1 as internalSha1, sha256 as internalSha256, } from '../../../crypto/crypto.js';\nimport { binToHex } from '../../../format/format.js';\nimport { combineOperations, pushToStack, useOneStackItem, useOneVmNumber, useThreeStackItems, useTwoStackItems, } from './combinators.js';\nimport { ConsensusCommon, SigningSerializationTypesBCH } from './consensus.js';\nimport { decodeBitcoinSignature, isValidSignatureEncodingBCHTransaction, isValidSignatureEncodingDER, } from './encoding.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { opVerify } from './flow-control.js';\nimport { booleanToVmNumber, encodeAuthenticationInstructions, isValidPublicKeyEncoding, } from './instruction-sets-utils.js';\nimport { generateSigningSerializationBCH } from './signing-serialization.js';\nexport const opRipemd160 = ({ ripemd160, } = { ripemd160: internalRipemd160 }) => (state) => useOneStackItem(state, (nextState, [value]) => pushToStack(nextState, ripemd160.hash(value)));\nexport const opSha1 = ({ sha1, } = { sha1: internalSha1 }) => (state) => useOneStackItem(state, (nextState, [value]) => pushToStack(nextState, sha1.hash(value)));\nexport const opSha256 = ({ sha256, } = { sha256: internalSha256 }) => (state) => useOneStackItem(state, (nextState, [value]) => pushToStack(nextState, sha256.hash(value)));\nexport const opHash160 = ({ ripemd160, sha256, } = { ripemd160: internalRipemd160, sha256: internalSha256 }) => (state) => useOneStackItem(state, (nextState, [value]) => pushToStack(nextState, ripemd160.hash(sha256.hash(value))));\nexport const opHash256 = ({ sha256, } = { sha256: internalSha256 }) => (state) => useOneStackItem(state, (nextState, [value]) => pushToStack(nextState, hash256(value, sha256)));\nexport const opCodeSeparator = (state) => {\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.lastCodeSeparator = state.ip;\n    return state;\n};\nexport const opCheckSig = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => (s) => \n// eslint-disable-next-line complexity\nuseTwoStackItems(s, (state, [bitcoinEncodedSignature, publicKey]) => {\n    if (!isValidPublicKeyEncoding(publicKey)) {\n        return applyError(state, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n    }\n    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature, SigningSerializationTypesBCH)) {\n        return applyError(state, AuthenticationErrorCommon.invalidSignatureEncoding, `Transaction signature (including signing serialization): ${binToHex(bitcoinEncodedSignature)}`);\n    }\n    const coveredBytecode = encodeAuthenticationInstructions(state.instructions).subarray(state.lastCodeSeparator + 1);\n    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);\n    const serialization = generateSigningSerializationBCH(state.program, { coveredBytecode, signingSerializationType }, sha256);\n    const digest = hash256(serialization, sha256);\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.signedMessages.push({ digest, serialization });\n    const useSchnorr = signature.length === ConsensusCommon.schnorrSignatureLength;\n    const success = useSchnorr\n        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)\n        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n    return !success && signature.length !== 0\n        ? applyError(state, AuthenticationErrorCommon.nonNullSignatureFailure)\n        : pushToStack(state, booleanToVmNumber(success));\n});\n// TODO: implement schnorr multisig https://gitlab.com/bitcoin-cash-node/bchn-sw/bitcoincash-upgrade-specifications/-/blob/master/spec/2019-11-15-schnorrmultisig.md\nexport const opCheckMultiSig = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => (s) => useOneVmNumber(s, (state, publicKeysValue) => {\n    const potentialPublicKeys = Number(publicKeysValue);\n    if (potentialPublicKeys < 0) {\n        return applyError(state, AuthenticationErrorCommon.invalidNaturalNumber);\n    }\n    if (potentialPublicKeys > 20 /* Multisig.maximumPublicKeys */) {\n        return applyError(state, AuthenticationErrorCommon.exceedsMaximumMultisigPublicKeyCount);\n    }\n    const publicKeys = \n    // eslint-disable-next-line functional/immutable-data\n    potentialPublicKeys > 0 ? state.stack.splice(-potentialPublicKeys) : [];\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.operationCount += potentialPublicKeys;\n    return state.operationCount > ConsensusCommon.maximumOperationCount\n        ? applyError(state, AuthenticationErrorCommon.exceededMaximumOperationCount)\n        : useOneVmNumber(state, (nextState, approvingKeys) => {\n            const requiredApprovingPublicKeys = Number(approvingKeys);\n            if (requiredApprovingPublicKeys < 0) {\n                return applyError(nextState, AuthenticationErrorCommon.invalidNaturalNumber);\n            }\n            if (requiredApprovingPublicKeys > potentialPublicKeys) {\n                return applyError(nextState, AuthenticationErrorCommon.insufficientPublicKeys);\n            }\n            const signatures = requiredApprovingPublicKeys > 0\n                ? // eslint-disable-next-line functional/immutable-data\n                    nextState.stack.splice(-requiredApprovingPublicKeys)\n                : [];\n            return useOneStackItem(nextState, \n            // eslint-disable-next-line complexity\n            (finalState, [protocolBugValue]) => {\n                if (protocolBugValue.length !== 0) {\n                    return applyError(finalState, AuthenticationErrorCommon.invalidProtocolBugValue);\n                }\n                const coveredBytecode = encodeAuthenticationInstructions(finalState.instructions).subarray(finalState.lastCodeSeparator + 1);\n                let approvingPublicKeys = 0; // eslint-disable-line functional/no-let\n                let remainingSignatures = signatures.length; // eslint-disable-line functional/no-let\n                let remainingPublicKeys = publicKeys.length; // eslint-disable-line functional/no-let\n                // eslint-disable-next-line functional/no-loop-statement\n                while (remainingSignatures > 0 &&\n                    remainingPublicKeys > 0 &&\n                    approvingPublicKeys + remainingPublicKeys >=\n                        remainingSignatures &&\n                    approvingPublicKeys !== requiredApprovingPublicKeys) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const publicKey = publicKeys[remainingPublicKeys - 1];\n                    const bitcoinEncodedSignature = \n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    signatures[remainingSignatures - 1];\n                    if (!isValidPublicKeyEncoding(publicKey)) {\n                        return applyError(finalState, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n                    }\n                    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature, SigningSerializationTypesBCH)) {\n                        return applyError(finalState, AuthenticationErrorCommon.invalidSignatureEncoding, `Transaction signature (including signing serialization type): ${binToHex(bitcoinEncodedSignature)}`);\n                    }\n                    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);\n                    const serialization = generateSigningSerializationBCH(state.program, { coveredBytecode, signingSerializationType }, sha256);\n                    const digest = hash256(serialization, sha256);\n                    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n                    finalState.signedMessages.push({ digest, serialization });\n                    if (signature.length ===\n                        ConsensusCommon.schnorrSignatureLength) {\n                        return applyError(finalState, AuthenticationErrorCommon.schnorrSizedSignatureInCheckMultiSig);\n                    }\n                    const signed = secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n                    // eslint-disable-next-line functional/no-conditional-statement\n                    if (signed) {\n                        approvingPublicKeys += 1; // eslint-disable-line functional/no-expression-statement\n                        remainingSignatures -= 1; // eslint-disable-line functional/no-expression-statement\n                    }\n                    remainingPublicKeys -= 1; // eslint-disable-line functional/no-expression-statement\n                }\n                const success = approvingPublicKeys === requiredApprovingPublicKeys;\n                if (!success &&\n                    !signatures.every((signature) => signature.length === 0)) {\n                    return applyError(finalState, AuthenticationErrorCommon.nonNullSignatureFailure);\n                }\n                return pushToStack(finalState, booleanToVmNumber(success));\n            });\n        });\n});\nexport const opCheckSigVerify = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => combineOperations(opCheckSig({ secp256k1, sha256 }), opVerify);\nexport const opCheckMultiSigVerify = ({ secp256k1, sha256, }) => combineOperations(opCheckMultiSig({ secp256k1, sha256 }), opVerify);\n/**\n * Validate the encoding of a raw signature – a signature without a signing\n * serialization type byte (A.K.A. \"sighash\" byte).\n *\n * @param signature - the raw signature\n */\nexport const isValidSignatureEncodingBCHRaw = (signature) => signature.length === 0 ||\n    signature.length === ConsensusCommon.schnorrSignatureLength ||\n    isValidSignatureEncodingDER(signature);\nexport const opCheckDataSig = ({ secp256k1, sha256, }) => (state) => \n// eslint-disable-next-line complexity\nuseThreeStackItems(state, (nextState, [signature, message, publicKey]) => {\n    if (!isValidSignatureEncodingBCHRaw(signature)) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidSignatureEncoding, `Data signature: ${binToHex(signature)}`);\n    }\n    if (!isValidPublicKeyEncoding(publicKey)) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n    }\n    const digest = sha256.hash(message);\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    nextState.signedMessages.push({ digest, message });\n    const useSchnorr = signature.length === ConsensusCommon.schnorrSignatureLength;\n    const success = useSchnorr\n        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)\n        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n    return !success && signature.length !== 0\n        ? applyError(nextState, AuthenticationErrorCommon.nonNullSignatureFailure)\n        : pushToStack(nextState, booleanToVmNumber(success));\n});\nexport const opCheckDataSigVerify = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => combineOperations(opCheckDataSig({ secp256k1, sha256 }), opVerify);\nexport const opReverseBytes = (state) => useOneStackItem(state, (nextState, [item]) => pushToStack(nextState, item.slice().reverse()));\n//# sourceMappingURL=crypto.js.map", "import { ConsensusCommon } from './consensus.js';\nconst isNegative = (value) => \n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n(value & 128 /* Mask.negative */) !== 0;\nconst hasUnnecessaryPadding = (length, firstByte, secondByte\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n) => length > 1 && firstByte === 0 && !isNegative(secondByte);\nconst isValidInteger = (signature, tagIndex, length, valueIndex\n// eslint-disable-next-line max-params\n) => signature[tagIndex] === 2 /* ASN1.integerTagType */ &&\n    length !== 0 &&\n    !isNegative(signature[valueIndex]) &&\n    !hasUnnecessaryPadding(length, signature[valueIndex], signature[valueIndex + 1]);\n/**\n * Validate a DER-encoded signature.\n *\n * @remarks\n * This function is consensus-critical since BIP66, but differs from the BIP66\n * specification in that it does not validate the existence of a signing\n * serialization type byte at the end of the signature (to support\n * OP_CHECKDATASIG). To validate a bitcoin-encoded signature (including null\n * signatures), use {@link isValidSignatureEncodingBCHTransaction}.\n *\n * @privateRemarks\n * From the Bitcoin ABC C++ implementation:\n *\n * Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n * total-length: 1-byte length descriptor of everything that follows,\n * excluding the sighash byte.\n * R-length: 1-byte length descriptor of the R value that follows.\n * R: arbitrary-length big-endian encoded R value. It must use the\n * shortest possible encoding for a positive integers (which means no null\n * bytes at the start, except a single one when the next byte has its highest\n * bit set).\n * S-length: 1-byte length descriptor of the S value that follows.\n * S: arbitrary-length big-endian encoded S value. The same rules apply.\n */\n// eslint-disable-next-line complexity\nexport const isValidSignatureEncodingDER = (signature) => {\n    const correctLengthRange = signature.length > 8 /* DER.minimumLength */ &&\n        signature.length < 72 /* DER.maximumLength */;\n    const correctSequenceTagType = signature[0 /* DER.sequenceTagIndex */] === 48 /* ASN1.sequenceTagType */;\n    const correctSequenceLength = signature[1 /* DER.sequenceLengthIndex */] ===\n        signature.length - 2 /* DER.sequenceMetadataBytes */;\n    const rLength = signature[3 /* DER.rLengthIndex */];\n    if (rLength === undefined) {\n        return false;\n    }\n    const consistentRLength = rLength <= signature.length - 7 /* DER.minimumNonRValueBytes */;\n    const rIsValid = isValidInteger(signature, 2 /* DER.rTagIndex */, rLength, 4 /* DER.rValueIndex */);\n    const sTagIndex = 4 /* DER.rValueIndex */ + rLength; // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    const sLengthIndex = sTagIndex + 1;\n    const sLength = signature[sLengthIndex];\n    if (sLength === undefined) {\n        return false;\n    }\n    const sValueIndex = sLengthIndex + 1;\n    const consistentSLength = sValueIndex + sLength === signature.length;\n    const sIsValid = isValidInteger(signature, sTagIndex, sLength, sValueIndex);\n    return (correctLengthRange &&\n        correctSequenceTagType &&\n        correctSequenceLength &&\n        consistentRLength &&\n        rIsValid &&\n        consistentSLength &&\n        sIsValid);\n};\n/**\n * Validate the encoding of a transaction signature, including a signing\n * serialization type byte (A.K.A. \"sighash\" byte).\n *\n * @param transactionSignature - the full transaction signature\n */\nexport const isValidSignatureEncodingBCHTransaction = (transactionSignature, validSigningSerializationTypes) => transactionSignature.length === 0 ||\n    (validSigningSerializationTypes.includes(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    transactionSignature[transactionSignature.length - 1]) &&\n        (transactionSignature.length ===\n            ConsensusCommon.schnorrSignatureLength + 1 ||\n            isValidSignatureEncodingDER(transactionSignature.slice(0, transactionSignature.length - 1))));\n/**\n * Split a bitcoin-encoded signature into a signature and signing serialization\n * type.\n *\n * While a bitcoin-encoded signature only includes a single byte to encode the\n * signing serialization type, a 3-byte forkId can be appended to the signing\n * serialization to provide replay-protection between different forks. (See\n * Bitcoin Cash's Replay Protected Sighash spec for details.)\n *\n * @param encodedSignature - a signature that passes\n * {@link isValidSignatureEncodingBCHTransaction}\n */\nexport const decodeBitcoinSignature = (encodedSignature) => ({\n    signature: encodedSignature.slice(0, -1),\n    signingSerializationType: encodedSignature.slice(-1),\n});\n//# sourceMappingURL=encoding.js.map", "import { flattenBinArray } from '../../../format/format.js';\nimport { pushToStack, pushToStackChecked, useOneStackItem, useOneVmNumber, useTwoStackItems, } from './combinators.js';\nimport { ConsensusCommon } from './consensus.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { bigIntToVmNumber } from './instruction-sets-utils.js';\nexport const opCat = (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStackChecked(nextState, flattenBinArray([a, b])));\nexport const opSplit = (state) => useOneVmNumber(state, (nextState, value) => {\n    const index = Number(value);\n    return useOneStackItem(nextState, (finalState, [item]) => index < 0 || index > item.length\n        ? applyError(finalState, AuthenticationErrorCommon.invalidSplitIndex)\n        : pushToStack(finalState, item.slice(0, index), item.slice(index)));\n});\n/**\n * Pad a minimally-encoded VM number for `OP_NUM2BIN`.\n */\nexport const padMinimallyEncodedVmNumber = (vmNumber, length) => {\n    // eslint-disable-next-line functional/no-let\n    let signBit = 0 /* Constants.positiveSign */;\n    // eslint-disable-next-line functional/no-conditional-statement\n    if (vmNumber.length > 0) {\n        // eslint-disable-next-line functional/no-expression-statement, no-bitwise, @typescript-eslint/no-non-null-assertion\n        signBit = vmNumber[vmNumber.length - 1] & 128 /* Constants.negativeSign */;\n        // eslint-disable-next-line functional/no-expression-statement, no-bitwise, functional/immutable-data\n        vmNumber[vmNumber.length - 1] &= 128 /* Constants.negativeSign */ - 1;\n    }\n    const result = Array.from(vmNumber);\n    // eslint-disable-next-line functional/no-loop-statement\n    while (result.length < length - 1) {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        result.push(0);\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    result.push(signBit);\n    return Uint8Array.from(result);\n};\nexport const opNum2Bin = (state) => useOneVmNumber(state, (nextState, value) => {\n    const targetLength = Number(value);\n    return targetLength > ConsensusCommon.maximumStackItemLength\n        ? applyError(nextState, `${AuthenticationErrorCommon.exceededMaximumStackItemLength} Item length: ${targetLength} bytes.`)\n        : useOneVmNumber(nextState, (finalState, [target]) => {\n            const minimallyEncoded = bigIntToVmNumber(target);\n            return minimallyEncoded.length > targetLength\n                ? applyError(finalState, AuthenticationErrorCommon.insufficientLength)\n                : minimallyEncoded.length === targetLength\n                    ? pushToStack(finalState, minimallyEncoded)\n                    : pushToStack(finalState, padMinimallyEncodedVmNumber(minimallyEncoded, targetLength));\n        }, {\n            maximumVmNumberByteLength: \n            // TODO: is this right?\n            ConsensusCommon.maximumStackItemLength,\n            requireMinimalEncoding: false,\n        });\n});\nexport const opBin2Num = (state) => useOneVmNumber(state, (nextState, [target]) => {\n    const minimallyEncoded = bigIntToVmNumber(target);\n    return minimallyEncoded.length > ConsensusCommon.maximumVmNumberLength\n        ? applyError(nextState, AuthenticationErrorCommon.exceededMaximumVmNumberLength)\n        : pushToStack(nextState, minimallyEncoded);\n}, {\n    // TODO: is this right?\n    maximumVmNumberByteLength: ConsensusCommon.maximumStackItemLength,\n    requireMinimalEncoding: false,\n});\n//# sourceMappingURL=format.js.map", "import { int32UnsignedToSigned } from '../../../format/format.js';\nimport { pushToStackChecked, pushToStackVmNumberChecked, useOneVmNumber, } from './combinators.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { encodeAuthenticationInstructions } from './instruction-sets-utils.js';\nexport const opInputIndex = (state) => pushToStackVmNumberChecked(state, BigInt(state.program.inputIndex));\nexport const opActiveBytecode = (state) => pushToStackChecked(state, encodeAuthenticationInstructions(state.instructions.slice(state.lastCodeSeparator + 1)));\nexport const opTxVersion = (state) => pushToStackVmNumberChecked(state, BigInt(int32UnsignedToSigned(state.program.transaction.version)));\nexport const opTxInputCount = (state) => pushToStackVmNumberChecked(state, BigInt(state.program.transaction.inputs.length));\nexport const opTxOutputCount = (state) => pushToStackVmNumberChecked(state, BigInt(state.program.transaction.outputs.length));\nexport const opTxLocktime = (state) => pushToStackVmNumberChecked(state, BigInt(state.program.transaction.locktime));\nexport const useTransactionUtxo = (state, operation) => useOneVmNumber(state, (nextState, [index]) => {\n    const utxo = nextState.program.sourceOutputs[Number(index)];\n    if (utxo === undefined) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidTransactionUtxoIndex);\n    }\n    return operation(state, [utxo]);\n});\nexport const opUtxoValue = (state) => useTransactionUtxo(state, (nextState, [utxo]) => pushToStackVmNumberChecked(nextState, utxo.valueSatoshis));\nexport const opUtxoBytecode = (state) => useTransactionUtxo(state, (nextState, [utxo]) => pushToStackChecked(nextState, utxo.lockingBytecode.slice()));\nexport const useTransactionInput = (state, operation) => useOneVmNumber(state, (nextState, [index]) => {\n    const input = nextState.program.transaction.inputs[Number(index)];\n    if (input === undefined) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidTransactionInputIndex);\n    }\n    return operation(state, [input]);\n});\nexport const opOutpointTxHash = (state) => useTransactionInput(state, (nextState, [input]) => pushToStackChecked(nextState, input.outpointTransactionHash.slice().reverse()));\nexport const opOutpointIndex = (state) => useTransactionInput(state, (nextState, [input]) => pushToStackVmNumberChecked(nextState, BigInt(input.outpointIndex)));\nexport const opInputBytecode = (state) => useTransactionInput(state, (nextState, [input]) => pushToStackChecked(nextState, input.unlockingBytecode.slice()));\nexport const opInputSequenceNumber = (state) => useTransactionInput(state, (nextState, [input]) => pushToStackVmNumberChecked(nextState, BigInt(input.sequenceNumber)));\nexport const useTransactionOutput = (state, operation) => useOneVmNumber(state, (nextState, [index]) => {\n    const input = nextState.program.transaction.outputs[Number(index)];\n    if (input === undefined) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidTransactionOutputIndex);\n    }\n    return operation(state, [input]);\n});\nexport const opOutputValue = (state) => useTransactionOutput(state, (nextState, [output]) => pushToStackVmNumberChecked(nextState, output.valueSatoshis));\nexport const opOutputBytecode = (state) => useTransactionOutput(state, (nextState, [output]) => pushToStackChecked(nextState, output.lockingBytecode.slice()));\n//# sourceMappingURL=inspection.js.map", "export {};\n//# sourceMappingURL=instruction-sets-types.js.map", "import { applyError, AuthenticationErrorCommon } from './errors.js';\nexport const opNop = (state) => state;\nexport const opNopDisallowed = (state) => applyError(state, AuthenticationErrorCommon.calledUpgradableNop);\n/**\n * \"Disabled\" operations are explicitly forbidden from occurring anywhere in VM\n * bytecode, even within an unexecuted branch.\n */\nexport const disabledOperation = (state) => applyError(state, AuthenticationErrorCommon.unknownOpcode);\n//# sourceMappingURL=nop.js.map", "import { numberToBinUint16LE, numberToBinUint32LE, } from '../../../format/format.js';\nimport { pushToStack } from './combinators.js';\nimport { ConsensusCommon } from './consensus.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { bigIntToVmNumber } from './instruction-sets-utils.js';\n/**\n * Returns the minimal bytecode required to push the provided `data` to the\n * stack.\n *\n * @remarks\n * This method conservatively encodes a `Uint8Array` as a data push. For VM\n * Numbers that can be pushed using a single opcode (-1 through 16), the\n * equivalent bytecode value is returned. Other `data` values will be prefixed\n * with the proper opcode and push length bytes (if necessary) to create the\n * minimal push instruction.\n *\n * Note, while some single-byte VM Number pushes will be minimally-encoded by\n * this method, all larger inputs will be encoded as-is (it cannot be assumed\n * that inputs are intended to be used as VM Numbers). To encode the push of a\n * VM Number, minimally-encode the number before passing it to this\n * method, e.g.:\n * `encodeDataPush(bigIntToVmNumber(decodeVmNumber(nonMinimalNumber)))`.\n *\n * The maximum `bytecode` length that can be encoded for a push in the Bitcoin\n * system is `4294967295` (~4GB). This method assumes a smaller input – if\n * `bytecode` has the potential to be longer, it should be checked (and the\n * error handled) prior to calling this method.\n *\n * @param data - the Uint8Array to push to the stack\n */\n// eslint-disable-next-line complexity\nexport const encodeDataPush = (data) => data.length <= 75 /* PushOperationConstants.maximumPushByteOperationSize */\n    ? data.length === 0\n        ? Uint8Array.of(0)\n        : data.length === 1\n            ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                data[0] !== 0 && data[0] <= 16 /* PushOperationConstants.pushNumberOpcodes */\n                    ? Uint8Array.of(\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    data[0] + 80 /* PushOperationConstants.pushNumberOpcodesOffset */)\n                    : data[0] === 129 /* PushOperationConstants.negativeOne */\n                        ? Uint8Array.of(79 /* PushOperationConstants.OP_1NEGATE */)\n                        : Uint8Array.from([1, ...data])\n            : Uint8Array.from([data.length, ...data])\n    : data.length <= 255 /* PushOperationConstants.maximumPushData1Size */\n        ? Uint8Array.from([\n            76 /* PushOperationConstants.OP_PUSHDATA_1 */,\n            data.length,\n            ...data,\n        ])\n        : data.length <= 65535 /* PushOperationConstants.maximumPushData2Size */\n            ? Uint8Array.from([\n                77 /* PushOperationConstants.OP_PUSHDATA_2 */,\n                ...numberToBinUint16LE(data.length),\n                ...data,\n            ])\n            : Uint8Array.from([\n                78 /* PushOperationConstants.OP_PUSHDATA_4 */,\n                ...numberToBinUint32LE(data.length),\n                ...data,\n            ]);\n/**\n * Returns true if the provided `data` is minimally-encoded by the provided\n * `opcode`.\n * @param opcode - the opcode used to push `data`\n * @param data - the contents of the push\n */\n// eslint-disable-next-line complexity\nexport const isMinimalDataPush = (opcode, data) => {\n    if (data.length === 0) {\n        return opcode === 0 /* PushOperationConstants.OP_0 */;\n    }\n    if (data.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (data[0] >= 1 && data[0] <= 16 /* PushOperationConstants.pushNumberOpcodes */) {\n            return (\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            opcode === data[0] + 80 /* PushOperationConstants.pushNumberOpcodesOffset */);\n        }\n        if (data[0] === 129 /* PushOperationConstants.negativeOne */) {\n            return opcode === 79 /* PushOperationConstants.OP_1NEGATE */;\n        }\n        return true;\n    }\n    if (data.length <= 75 /* PushOperationConstants.maximumPushByteOperationSize */) {\n        return opcode === data.length;\n    }\n    if (data.length <= 255 /* PushOperationConstants.maximumPushData1Size */) {\n        return opcode === 76 /* PushOperationConstants.OP_PUSHDATA_1 */;\n    }\n    if (data.length <= 65535 /* PushOperationConstants.maximumPushData2Size */) {\n        return opcode === 77 /* PushOperationConstants.OP_PUSHDATA_2 */;\n    }\n    if (data.length <= 4294967295 /* PushOperationConstants.maximumPushData4Size */) {\n        return opcode === 78 /* PushOperationConstants.OP_PUSHDATA_4 */;\n    }\n    return false;\n};\nconst executionIsActive = (state) => state.controlStack.every((item) => item);\n// TODO: add tests that verify the order of operations below (are non-minimal pushes OK inside unexecuted conditionals?)\nexport const pushOperation = (maximumPushSize = ConsensusCommon.maximumStackItemLength) => (state) => {\n    const instruction = state.instructions[state.ip];\n    return instruction.data.length > maximumPushSize\n        ? applyError(state, `${AuthenticationErrorCommon.exceededMaximumStackItemLength} Item length: ${instruction.data.length} bytes.`)\n        : executionIsActive(state)\n            ? isMinimalDataPush(instruction.opcode, instruction.data)\n                ? pushToStack(state, instruction.data)\n                : applyError(state, AuthenticationErrorCommon.nonMinimalPush)\n            : state;\n};\n/**\n * @param number - the number that is pushed to the stack by this operation.\n * @returns an operation that pushes a number to the stack.\n */\nexport const pushNumberOperation = (number) => {\n    const value = bigIntToVmNumber(BigInt(number));\n    return (state) => pushToStack(state, value);\n};\n//# sourceMappingURL=push.js.map", "import { pushToStack, useFourStackItems, useOneStackItem, useOneVmNumber, useSixStackItems, useThreeStackItems, useTwoStackItems, } from './combinators.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { bigIntToVmNumber, stackItemIsTruthy, } from './instruction-sets-utils.js';\nexport const opToAltStack = (state) => useOneStackItem(state, (nextState, [item]) => {\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    nextState.alternateStack.push(item);\n    return nextState;\n});\nexport const opFromAltStack = (state) => {\n    // eslint-disable-next-line functional/immutable-data\n    const item = state.alternateStack.pop();\n    if (item === undefined) {\n        return applyError(state, AuthenticationErrorCommon.emptyAlternateStack);\n    }\n    return pushToStack(state, item);\n};\nexport const op2Drop = (state) => useTwoStackItems(state, (nextState) => nextState);\nexport const op2Dup = (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, a, b, a.slice(), b.slice()));\nexport const op3Dup = (state) => useThreeStackItems(state, (nextState, [a, b, c]) => pushToStack(nextState, a, b, c, a.slice(), b.slice(), c.slice()));\nexport const op2Over = (state) => useFourStackItems(state, (nextState, [a, b, c, d]) => pushToStack(nextState, a, b, c, d, a.slice(), b.slice()));\nexport const op2Rot = (state) => useSixStackItems(state, (nextState, [a, b, c, d, e, f]) => pushToStack(nextState, c, d, e, f, a, b));\nexport const op2Swap = (state) => useFourStackItems(state, (nextState, [a, b, c, d]) => pushToStack(nextState, c, d, a, b));\nexport const opIfDup = (state) => useOneStackItem(state, (nextState, [item]) => pushToStack(nextState, ...(stackItemIsTruthy(item) ? [item, item.slice()] : [item])));\nexport const opDepth = (state) => pushToStack(state, bigIntToVmNumber(BigInt(state.stack.length)));\nexport const opDrop = (state) => useOneStackItem(state, (nextState) => nextState);\nexport const opDup = (state) => useOneStackItem(state, (nextState, [item]) => pushToStack(nextState, item, item.slice()));\nexport const opNip = (state) => useTwoStackItems(state, (nextState, [, b]) => pushToStack(nextState, b));\nexport const opOver = (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, a, b, a.slice()));\nexport const opPick = (state) => useOneVmNumber(state, (nextState, depth) => {\n    const item = nextState.stack[nextState.stack.length - 1 - Number(depth)];\n    if (item === undefined) {\n        return applyError(state, AuthenticationErrorCommon.invalidStackIndex);\n    }\n    return pushToStack(nextState, item.slice());\n});\nexport const opRoll = (state) => useOneVmNumber(state, (nextState, depth) => {\n    const index = nextState.stack.length - 1 - Number(depth);\n    if (index < 0 || index > nextState.stack.length - 1) {\n        return applyError(state, AuthenticationErrorCommon.invalidStackIndex);\n    }\n    // eslint-disable-next-line functional/immutable-data, @typescript-eslint/no-non-null-assertion\n    return pushToStack(nextState, nextState.stack.splice(index, 1)[0]);\n});\nexport const opRot = (state) => useThreeStackItems(state, (nextState, [a, b, c]) => pushToStack(nextState, b, c, a));\nexport const opSwap = (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, b, a));\nexport const opTuck = (state) => useTwoStackItems(state, (nextState, [a, b]) => pushToStack(nextState, b.slice(), a, b));\nexport const opSize = (state) => useOneStackItem(state, (nextState, [item]) => pushToStack(nextState, item, bigIntToVmNumber(BigInt(item.length))));\n//# sourceMappingURL=stack.js.map", "import { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { isVmNumberError, vmNumberToBigInt } from './instruction-sets-utils.js';\nexport const useLocktime = (state, operation) => {\n    const item = state.stack[state.stack.length - 1];\n    if (item === undefined) {\n        return applyError(state, AuthenticationErrorCommon.emptyStack);\n    }\n    const decodedLocktime = vmNumberToBigInt(item, {\n        maximumVmNumberByteLength: 5 /* Constants.locktimeVmNumberByteLength */,\n        requireMinimalEncoding: true,\n    });\n    if (isVmNumberError(decodedLocktime)) {\n        return applyError(state, AuthenticationErrorCommon.invalidVmNumber);\n    }\n    const locktime = Number(decodedLocktime);\n    if (locktime < 0) {\n        return applyError(state, AuthenticationErrorCommon.negativeLocktime);\n    }\n    return operation(state, locktime);\n};\nconst locktimeTypesAreCompatible = (locktime, requiredLocktime) => (locktime < 500000000 /* Constants.locktimeThreshold */ &&\n    requiredLocktime < 500000000 /* Constants.locktimeThreshold */) ||\n    (locktime >= 500000000 /* Constants.locktimeThreshold */ &&\n        requiredLocktime >= 500000000 /* Constants.locktimeThreshold */);\nexport const opCheckLockTimeVerify = (state) => useLocktime(state, (nextState, requiredLocktime) => {\n    if (!locktimeTypesAreCompatible(nextState.program.transaction.locktime, requiredLocktime)) {\n        return applyError(nextState, AuthenticationErrorCommon.incompatibleLocktimeType);\n    }\n    if (requiredLocktime > nextState.program.transaction.locktime) {\n        return applyError(nextState, AuthenticationErrorCommon.unsatisfiedLocktime);\n    }\n    const { sequenceNumber } = \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    nextState.program.transaction.inputs[nextState.program.inputIndex];\n    if (sequenceNumber === 4294967295 /* Constants.locktimeDisablingSequenceNumber */) {\n        return applyError(nextState, AuthenticationErrorCommon.locktimeDisabled);\n    }\n    return nextState;\n});\n// eslint-disable-next-line no-bitwise\nconst includesFlag = (value, flag) => (value & flag) !== 0;\nexport const opCheckSequenceVerify = (state) => useLocktime(state, \n// eslint-disable-next-line complexity\n(nextState, requiredSequence) => {\n    const { sequenceNumber } = \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    nextState.program.transaction.inputs[nextState.program.inputIndex];\n    const sequenceLocktimeDisabled = includesFlag(requiredSequence, 2147483648 /* Constants.sequenceLocktimeDisableFlag */);\n    if (sequenceLocktimeDisabled) {\n        return nextState;\n    }\n    if (nextState.program.transaction.version <\n        2 /* Constants.sequenceLocktimeTransactionVersionMinimum */) {\n        return applyError(nextState, AuthenticationErrorCommon.checkSequenceUnavailable);\n    }\n    if (includesFlag(sequenceNumber, 2147483648 /* Constants.sequenceLocktimeDisableFlag */)) {\n        return applyError(nextState, AuthenticationErrorCommon.unmatchedSequenceDisable);\n    }\n    if (includesFlag(requiredSequence, 4194304 /* Constants.sequenceLocktimeTypeFlag */) !==\n        includesFlag(sequenceNumber, 4194304 /* Constants.sequenceLocktimeTypeFlag */)) {\n        return applyError(nextState, AuthenticationErrorCommon.incompatibleSequenceType);\n    }\n    if (\n    // eslint-disable-next-line no-bitwise\n    (requiredSequence & 65535 /* Constants.sequenceLocktimeMask */) >\n        // eslint-disable-next-line no-bitwise\n        (sequenceNumber & 65535 /* Constants.sequenceLocktimeMask */)) {\n        return applyError(nextState, AuthenticationErrorCommon.unsatisfiedSequenceNumber);\n    }\n    return nextState;\n});\n//# sourceMappingURL=time.js.map", "export * from './bch-2023-consensus.js';\nexport * from './bch-2023-crypto.js';\nexport * from './bch-2023-descriptions.js';\nexport * from './bch-2023-errors.js';\nexport * from './bch-2023-instruction-set.js';\nexport * from './bch-2023-opcodes.js';\nexport * from './bch-2023-tokens.js';\nexport * from './bch-2023-vm.js';\n//# sourceMappingURL=bch-2023.js.map", "import { SigningSerializationTypeBCH, SigningSerializationTypesBCH, } from '../../common/common.js';\n/**\n * Consensus settings for the `BCH_2023_05` instruction set.\n */\nexport var ConsensusBCH2023;\n(function (ConsensusBCH2023) {\n    /**\n     * A.K.A. `MAX_SCRIPT_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumBytecodeLength\"] = 10000] = \"maximumBytecodeLength\";\n    /**\n     * A.K.A. `MAX_OP_RETURN_RELAY`, `nMaxDatacarrierBytes`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumDataCarrierBytes\"] = 223] = \"maximumDataCarrierBytes\";\n    /**\n     * A.K.A. `MAX_OPS_PER_SCRIPT`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumOperationCount\"] = 201] = \"maximumOperationCount\";\n    /**\n     * A.K.A. `MAX_STACK_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumStackDepth\"] = 1000] = \"maximumStackDepth\";\n    /**\n     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumStackItemLength\"] = 520] = \"maximumStackItemLength\";\n    /**\n     * A.K.A. `MAX_STANDARD_VERSION`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumStandardVersion\"] = 2] = \"maximumStandardVersion\";\n    /**\n     * A.K.A. `MAX_TX_IN_SCRIPT_SIG_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumStandardUnlockingBytecodeLength\"] = 1650] = \"maximumStandardUnlockingBytecodeLength\";\n    /**\n     * Transactions smaller than 65 bytes are forbidden to prevent exploits of the\n     * transaction Merkle tree design.\n     *\n     * A.K.A. `MIN_TX_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"minimumTransactionSize\"] = 65] = \"minimumTransactionSize\";\n    /**\n     * A.K.A. `MAX_STANDARD_TX_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumStandardTransactionSize\"] = 100000] = \"maximumStandardTransactionSize\";\n    /**\n     * A.K.A. `MAX_TX_SIZE`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumTransactionSize\"] = 1000000] = \"maximumTransactionSize\";\n    /**\n     * A.K.A. `MAXIMUM_ELEMENT_SIZE_64_BIT`\n     */\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumVmNumberLength\"] = 8] = \"maximumVmNumberLength\";\n    ConsensusBCH2023[\"minVmNumber\"] = \"-9223372036854775807\";\n    ConsensusBCH2023[\"maxVmNumber\"] = \"9223372036854775807\";\n    ConsensusBCH2023[ConsensusBCH2023[\"schnorrSignatureLength\"] = 64] = \"schnorrSignatureLength\";\n    ConsensusBCH2023[ConsensusBCH2023[\"maximumCommitmentLength\"] = 40] = \"maximumCommitmentLength\";\n})(ConsensusBCH2023 || (ConsensusBCH2023 = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypesBCH2023 = [\n    ...SigningSerializationTypesBCH,\n    SigningSerializationTypeBCH.allOutputsAllUtxos,\n    SigningSerializationTypeBCH.correspondingOutputAllUtxos,\n    SigningSerializationTypeBCH.noOutputsAllUtxos,\n];\n//# sourceMappingURL=bch-2023-consensus.js.map", "import { hash256, secp256k1 as internalSecp256k1, sha256 as internalSha256, } from '../../../../crypto/crypto.js';\nimport { binToHex } from '../../../../format/format.js';\nimport { applyError, AuthenticationErrorCommon, booleanToVmNumber, combineOperations, ConsensusCommon, decodeBitcoinSignature, encodeAuthenticationInstructions, generateSigningSerializationBCH, isValidPublicKeyEncoding, isValidSignatureEncodingBCHTransaction, opVerify, pushToStack, useOneStackItem, useOneVmNumber, useTwoStackItems, } from '../../common/common.js';\nimport { SigningSerializationTypesBCH2023 } from './bch-2023-consensus.js';\nexport const opCheckSigBCH2023 = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => (s) => \n// eslint-disable-next-line complexity\nuseTwoStackItems(s, (state, [bitcoinEncodedSignature, publicKey]) => {\n    if (!isValidPublicKeyEncoding(publicKey)) {\n        return applyError(state, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n    }\n    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature, SigningSerializationTypesBCH2023)) {\n        return applyError(state, AuthenticationErrorCommon.invalidSignatureEncoding, `Transaction signature (including signing serialization): ${binToHex(bitcoinEncodedSignature)}`);\n    }\n    const coveredBytecode = encodeAuthenticationInstructions(state.instructions).subarray(state.lastCodeSeparator + 1);\n    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);\n    const serialization = generateSigningSerializationBCH(state.program, { coveredBytecode, signingSerializationType }, sha256);\n    const digest = hash256(serialization, sha256);\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.signedMessages.push({ digest, serialization });\n    const useSchnorr = signature.length === ConsensusCommon.schnorrSignatureLength;\n    const success = useSchnorr\n        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)\n        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n    return !success && signature.length !== 0\n        ? applyError(state, AuthenticationErrorCommon.nonNullSignatureFailure)\n        : pushToStack(state, booleanToVmNumber(success));\n});\n// TODO: implement schnorr multisig https://gitlab.com/bitcoin-cash-node/bchn-sw/bitcoincash-upgrade-specifications/-/blob/master/spec/2019-11-15-schnorrmultisig.md\nexport const opCheckMultiSigBCH2023 = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => (s) => useOneVmNumber(s, (state, publicKeysValue) => {\n    const potentialPublicKeys = Number(publicKeysValue);\n    if (potentialPublicKeys < 0) {\n        return applyError(state, AuthenticationErrorCommon.invalidNaturalNumber);\n    }\n    if (potentialPublicKeys > 20 /* Multisig.maximumPublicKeys */) {\n        return applyError(state, AuthenticationErrorCommon.exceedsMaximumMultisigPublicKeyCount);\n    }\n    const publicKeys = \n    // eslint-disable-next-line functional/immutable-data\n    potentialPublicKeys > 0 ? state.stack.splice(-potentialPublicKeys) : [];\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.operationCount += potentialPublicKeys;\n    return state.operationCount > ConsensusCommon.maximumOperationCount\n        ? applyError(state, AuthenticationErrorCommon.exceededMaximumOperationCount)\n        : useOneVmNumber(state, (nextState, approvingKeys) => {\n            const requiredApprovingPublicKeys = Number(approvingKeys);\n            if (requiredApprovingPublicKeys < 0) {\n                return applyError(nextState, AuthenticationErrorCommon.invalidNaturalNumber);\n            }\n            if (requiredApprovingPublicKeys > potentialPublicKeys) {\n                return applyError(nextState, AuthenticationErrorCommon.insufficientPublicKeys);\n            }\n            const signatures = requiredApprovingPublicKeys > 0\n                ? // eslint-disable-next-line functional/immutable-data\n                    nextState.stack.splice(-requiredApprovingPublicKeys)\n                : [];\n            return useOneStackItem(nextState, \n            // eslint-disable-next-line complexity\n            (finalState, [protocolBugValue]) => {\n                if (protocolBugValue.length !== 0) {\n                    return applyError(finalState, AuthenticationErrorCommon.invalidProtocolBugValue);\n                }\n                const coveredBytecode = encodeAuthenticationInstructions(finalState.instructions).subarray(finalState.lastCodeSeparator + 1);\n                let approvingPublicKeys = 0; // eslint-disable-line functional/no-let\n                let remainingSignatures = signatures.length; // eslint-disable-line functional/no-let\n                let remainingPublicKeys = publicKeys.length; // eslint-disable-line functional/no-let\n                // eslint-disable-next-line functional/no-loop-statement\n                while (remainingSignatures > 0 &&\n                    remainingPublicKeys > 0 &&\n                    approvingPublicKeys + remainingPublicKeys >=\n                        remainingSignatures &&\n                    approvingPublicKeys !== requiredApprovingPublicKeys) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const publicKey = publicKeys[remainingPublicKeys - 1];\n                    const bitcoinEncodedSignature = \n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    signatures[remainingSignatures - 1];\n                    if (!isValidPublicKeyEncoding(publicKey)) {\n                        return applyError(finalState, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n                    }\n                    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature, SigningSerializationTypesBCH2023)) {\n                        return applyError(finalState, AuthenticationErrorCommon.invalidSignatureEncoding, `Transaction signature (including signing serialization type): ${binToHex(bitcoinEncodedSignature)}`);\n                    }\n                    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);\n                    const serialization = generateSigningSerializationBCH(state.program, { coveredBytecode, signingSerializationType }, sha256);\n                    const digest = hash256(serialization, sha256);\n                    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n                    finalState.signedMessages.push({ digest, serialization });\n                    if (signature.length ===\n                        ConsensusCommon.schnorrSignatureLength) {\n                        return applyError(finalState, AuthenticationErrorCommon.schnorrSizedSignatureInCheckMultiSig);\n                    }\n                    const signed = secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n                    // eslint-disable-next-line functional/no-conditional-statement\n                    if (signed) {\n                        approvingPublicKeys += 1; // eslint-disable-line functional/no-expression-statement\n                        remainingSignatures -= 1; // eslint-disable-line functional/no-expression-statement\n                    }\n                    remainingPublicKeys -= 1; // eslint-disable-line functional/no-expression-statement\n                }\n                const success = approvingPublicKeys === requiredApprovingPublicKeys;\n                if (!success &&\n                    !signatures.every((signature) => signature.length === 0)) {\n                    return applyError(finalState, AuthenticationErrorCommon.nonNullSignatureFailure);\n                }\n                return pushToStack(finalState, booleanToVmNumber(success));\n            });\n        });\n});\nexport const opCheckSigVerifyBCH2023 = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => combineOperations(opCheckSigBCH2023({ secp256k1, sha256 }), opVerify);\nexport const opCheckMultiSigVerifyBCH2023 = ({ secp256k1, sha256, }) => combineOperations(opCheckMultiSigBCH2023({ secp256k1, sha256 }), opVerify);\n//# sourceMappingURL=bch-2023-crypto.js.map", "export var OpcodeDescriptionsBCH2023;\n(function (OpcodeDescriptionsBCH2023) {\n    OpcodeDescriptionsBCH2023[\"OP_0\"] = \"Push the VM Number 0 onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_1\"] = \"Push the next byte onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_2\"] = \"Push the next 2 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_3\"] = \"Push the next 3 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_4\"] = \"Push the next 4 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_5\"] = \"Push the next 5 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_6\"] = \"Push the next 6 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_7\"] = \"Push the next 7 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_8\"] = \"Push the next 8 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_9\"] = \"Push the next 9 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_10\"] = \"Push the next 10 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_11\"] = \"Push the next 11 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_12\"] = \"Push the next 12 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_13\"] = \"Push the next 13 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_14\"] = \"Push the next 14 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_15\"] = \"Push the next 15 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_16\"] = \"Push the next 16 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_17\"] = \"Push the next 17 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_18\"] = \"Push the next 18 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_19\"] = \"Push the next 19 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_20\"] = \"Push the next 20 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_21\"] = \"Push the next 21 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_22\"] = \"Push the next 22 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_23\"] = \"Push the next 23 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_24\"] = \"Push the next 24 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_25\"] = \"Push the next 25 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_26\"] = \"Push the next 26 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_27\"] = \"Push the next 27 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_28\"] = \"Push the next 28 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_29\"] = \"Push the next 29 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_30\"] = \"Push the next 30 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_31\"] = \"Push the next 31 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_32\"] = \"Push the next 32 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_33\"] = \"Push the next 33 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_34\"] = \"Push the next 34 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_35\"] = \"Push the next 35 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_36\"] = \"Push the next 36 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_37\"] = \"Push the next 37 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_38\"] = \"Push the next 38 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_39\"] = \"Push the next 39 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_40\"] = \"Push the next 40 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_41\"] = \"Push the next 41 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_42\"] = \"Push the next 42 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_43\"] = \"Push the next 43 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_44\"] = \"Push the next 44 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_45\"] = \"Push the next 45 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_46\"] = \"Push the next 46 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_47\"] = \"Push the next 47 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_48\"] = \"Push the next 48 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_49\"] = \"Push the next 49 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_50\"] = \"Push the next 50 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_51\"] = \"Push the next 51 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_52\"] = \"Push the next 52 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_53\"] = \"Push the next 53 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_54\"] = \"Push the next 54 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_55\"] = \"Push the next 55 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_56\"] = \"Push the next 56 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_57\"] = \"Push the next 57 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_58\"] = \"Push the next 58 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_59\"] = \"Push the next 59 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_60\"] = \"Push the next 60 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_61\"] = \"Push the next 61 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_62\"] = \"Push the next 62 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_63\"] = \"Push the next 63 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_64\"] = \"Push the next 64 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_65\"] = \"Push the next 65 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_66\"] = \"Push the next 66 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_67\"] = \"Push the next 67 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_68\"] = \"Push the next 68 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_69\"] = \"Push the next 69 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_70\"] = \"Push the next 70 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_71\"] = \"Push the next 71 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_72\"] = \"Push the next 72 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_73\"] = \"Push the next 73 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_74\"] = \"Push the next 74 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHBYTES_75\"] = \"Push the next 75 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHDATA_1\"] = \"Read the next Uint8 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHDATA_2\"] = \"Read the next little-endian Uint16 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_PUSHDATA_4\"] = \"Read the next little-endian Uint32 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_1NEGATE\"] = \"Push the VM Number -1 onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_RESERVED\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED does not count toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_1\"] = \"Push a 1 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_2\"] = \"Push a 2 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_3\"] = \"Push a 3 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_4\"] = \"Push a 4 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_5\"] = \"Push a 5 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_6\"] = \"Push a 6 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_7\"] = \"Push a 7 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_8\"] = \"Push a 8 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_9\"] = \"Push a 9 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_10\"] = \"Push a 10 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_11\"] = \"Push a 11 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_12\"] = \"Push a 12 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_13\"] = \"Push a 13 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_14\"] = \"Push a 14 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_15\"] = \"Push a 15 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_16\"] = \"Push a 16 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP\"] = \"No operation. Note: OP_NOP counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_VER\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_VER counts toward the opcode limit. (Historically, this pushed a protocol version number to the stack.)\";\n    OpcodeDescriptionsBCH2023[\"OP_IF\"] = \"Pop the top item from the stack. If it is not \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOTIF\"] = \"Pop the top item from the stack. If it is \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBCH2023[\"OP_VERIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_IF.)\";\n    OpcodeDescriptionsBCH2023[\"OP_VERNOTIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_NOTIF.)\";\n    OpcodeDescriptionsBCH2023[\"OP_ELSE\"] = \"Invert conditional evaluation within the current OP_IF ... OP_ENDIF block. (If evaluation is enabled, disable it, if it is disabled, enable it.)\";\n    OpcodeDescriptionsBCH2023[\"OP_ENDIF\"] = \"End the current OP_IF/OP_NOTIF ... OP_ENDIF block.\";\n    OpcodeDescriptionsBCH2023[\"OP_VERIFY\"] = \"Pop the top item from the stack and error if it isn't \\\"truthy\\\".\";\n    OpcodeDescriptionsBCH2023[\"OP_RETURN\"] = \"Error when executed.\";\n    OpcodeDescriptionsBCH2023[\"OP_TOALTSTACK\"] = \"Pop the top item from the stack and push it onto the alternate stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_FROMALTSTACK\"] = \"Pop the top item from the alternate stack and push it onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_2DROP\"] = \"Pop the top 2 items from the stack and discard them.\";\n    OpcodeDescriptionsBCH2023[\"OP_2DUP\"] = \"Duplicate the top 2 items on the stack. (E.g. [a, b] -> [a, b, a, b])\";\n    OpcodeDescriptionsBCH2023[\"OP_3DUP\"] = \"Duplicate the top 3 items on the stack. (E.g. [a, b, c] -> [a, b, c, a, b, c])\";\n    OpcodeDescriptionsBCH2023[\"OP_2OVER\"] = \"Duplicate the 2 items beginning at a depth of 2 on the stack. (E.g. [a, b, c, d] -> [a, b, c, d, a, b])\";\n    OpcodeDescriptionsBCH2023[\"OP_2ROT\"] = \"Rotate the top 6 items on the stack, bringing the fifth and sixth items to the top. (E.g. [a, b, c, d, e, f] -> [c, d, e, f, a, b])\";\n    OpcodeDescriptionsBCH2023[\"OP_2SWAP\"] = \"Swap the positions of the top two pairs of items on the stack. (E.g. [a, b, c, d] -> [c, d, a, b])\";\n    OpcodeDescriptionsBCH2023[\"OP_IFDUP\"] = \"If the top item on the stack is \\\"truthy\\\", duplicate it.\";\n    OpcodeDescriptionsBCH2023[\"OP_DEPTH\"] = \"Push the current number of stack items as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_DROP\"] = \"Pop the top item from the stack and discard it. (E.g. [a] -> [])\";\n    OpcodeDescriptionsBCH2023[\"OP_DUP\"] = \"Duplicate the top item on the stack. (E.g. [a] -> [a, a])\";\n    OpcodeDescriptionsBCH2023[\"OP_NIP\"] = \"Remove the second-to-top item from the stack. (E.g. [a, b] -> [b])\";\n    OpcodeDescriptionsBCH2023[\"OP_OVER\"] = \"Duplicate the second-to-top item on the stack. (E.g. [a, b] -> [a, b, a])\";\n    OpcodeDescriptionsBCH2023[\"OP_PICK\"] = \"Pop the top item from the stack as a VM Number. Duplicate the item at that depth (zero-indexed), placing it on top of the stack. (E.g. [a, b, c, 2] -> [a, b, c, a])\";\n    OpcodeDescriptionsBCH2023[\"OP_ROLL\"] = \"Pop the top item from the stack as a VM Number. Move the item at that depth (zero-indexed) to the top of the stack. (E.g. [a, b, c, 2] -> [b, c, a])\";\n    OpcodeDescriptionsBCH2023[\"OP_ROT\"] = \"Rotate the top 3 items on the stack, bringing the third item to the top. (E.g. [a, b, c] -> [b, c, a])\";\n    OpcodeDescriptionsBCH2023[\"OP_SWAP\"] = \"Swap the top two items on the stack. (E.g. [a, b] -> [b, a])\";\n    OpcodeDescriptionsBCH2023[\"OP_TUCK\"] = \"Duplicate the item at the top of the stack, inserting it below the second-to-top item. (E.g. [a, b] -> [b, a, b])\";\n    OpcodeDescriptionsBCH2023[\"OP_CAT\"] = \"Pop the top 2 items from the stack and concatenate them, pushing the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_SPLIT\"] = \"Pop the top item from the stack as an index (VM Number) and the next item as a byte array. Split the byte array into two stack items at the index (zero-based), pushing the results.\";\n    OpcodeDescriptionsBCH2023[\"OP_NUM2BIN\"] = \"Pop the top item from the stack as an item length (VM Number) and the next item as a VM Number (without encoding restrictions). Re-encode the number using a byte array of the provided length, filling any unused bytes with zeros, then push the result. (If the requested length is too short to encode the number, error.)\";\n    OpcodeDescriptionsBCH2023[\"OP_BIN2NUM\"] = \"Pop the top item from the stack as a VM Number without encoding restrictions. Minimally-encode the number and push the result. (If the number can't be encoded in 4 bytes or less, error.)\";\n    OpcodeDescriptionsBCH2023[\"OP_SIZE\"] = \"Push the byte-length of the top stack item as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_INVERT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this flipped all the bits in a stack item.)\";\n    OpcodeDescriptionsBCH2023[\"OP_AND\"] = \"Pop the top 2 items from the stack and perform a bitwise AND on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCH2023[\"OP_OR\"] = \"Pop the top 2 items from the stack and perform a bitwise OR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCH2023[\"OP_XOR\"] = \"Pop the top 2 items from the stack and perform a bitwise XOR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCH2023[\"OP_EQUAL\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If they are the same, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_EQUALVERIFY\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If the values are different, error. (This operation is a combination of OP_EQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2023[\"OP_RESERVED1\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_RESERVED2\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED2 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_1ADD\"] = \"Pop the top item from the stack as a VM Number, add 1, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_1SUB\"] = \"Pop the top item from the stack as a VM Number, subtract 1, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_2MUL\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this multiplied a VM Number by 2.)\";\n    OpcodeDescriptionsBCH2023[\"OP_2DIV\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this divided a VM Number by 2.)\";\n    OpcodeDescriptionsBCH2023[\"OP_NEGATE\"] = \"Pop the top item from the stack as a VM Number, negate it, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_ABS\"] = \"Pop the top item from the stack as a VM Number, take its absolute value, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOT\"] = \"Pop the top item from the stack as a VM Number. If its value is 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_0NOTEQUAL\"] = \"Pop the top item from the stack as a VM Number. If its value is not 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_ADD\"] = \"Pop the top two items from the stack as VM Numbers. Add them, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_SUB\"] = \"Pop the top two items from the stack as VM Numbers. Subtract the top item from the second item, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_MUL\"] = \"Pop the top two items from the stack as VM Numbers. Multiply them, then push the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_DIV\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the result to the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_MOD\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the remainder to the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_LSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, left bit shift.)\";\n    OpcodeDescriptionsBCH2023[\"OP_RSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, right bit shift.)\";\n    OpcodeDescriptionsBCH2023[\"OP_BOOLAND\"] = \"Pop the top two items from the stack as VM Numbers. If neither value is a 0 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_BOOLOR\"] = \"Pop the top two items from the stack as VM Numbers. If either value is a 1 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_NUMEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_NUMEQUALVERIFY\"] = \"Pop the top two items from the stack as VM Numbers. If the values are different, error. (This operation is a combination of OP_NUMEQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2023[\"OP_NUMNOTEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are not equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_LESSTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_GREATERTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_LESSTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_GREATERTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_MIN\"] = \"Pop the top two items from the stack as VM Numbers. Push the smaller of the two numbers.\";\n    OpcodeDescriptionsBCH2023[\"OP_MAX\"] = \"Pop the top two items from the stack as VM Numbers. Push the larger of the two numbers.\";\n    OpcodeDescriptionsBCH2023[\"OP_WITHIN\"] = \"Pop the top three items from the stack as VM Numbers. If the top number is within the range defined by the following two numbers (left-inclusive), push a 1 (VM Number). Otherwise, push a 0 (VM Number). (E.g. for [a, b, c]: if (b <= a), and (a < c), [1]. Else [0].)\";\n    OpcodeDescriptionsBCH2023[\"OP_RIPEMD160\"] = \"Pop the top item from the stack and pass it through ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_SHA1\"] = \"Pop the top item from the stack and pass it through sha1, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_SHA256\"] = \"Pop the top item from the stack and pass it through sha256, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_HASH160\"] = \"Pop the top item from the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_HASH256\"] = \"Pop the top item from the stack and pass it through sha256 twice, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_CODESEPARATOR\"] = \"Update the value of lastCodeSeparator to the instruction pointer's current value. (This reduces the coverage of signing serializations used in signature verification operations.)\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKSIG\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKSIGVERIFY\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is not valid, error. (This operation is a combination of OP_CHECKSIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKMULTISIG\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, pop a final VM Number that must be 0 due to a protocol bug. Checking each signature against each public key in order, if all signatures are valid \\u2013 and the required number of signatures have been provided \\u2013 push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKMULTISIGVERIFY\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, (due to a protocol bug) pop an unused final VM Number that must be 0. Checking each signature against each public key in order, if any signatures are invalid \\u2013 or the required number of signatures have not been provided \\u2013 error. (This operation is a combination of OP_CHECKMULTISIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP1\"] = \"No operation (reserved for future expansion). Note: OP_NOP1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKLOCKTIMEVERIFY\"] = \"Verify the transaction occurs after an absolute block time or height: read the top item on the stack as a VM Number (without removing it), and compare it to the transaction's locktime. If the required locktime has not passed, or if locktime has been disabled for this input by a maximized sequence number, error.\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKSEQUENCEVERIFY\"] = \"Verify the transaction occurs after the output being spent has \\\"aged\\\" by a relative block time or block height since it was created: read the top item on the stack as a VM Number (without removing it), and compare it to the age encoded in the input's sequence number. If the required relative locktime has not passed, or if relative locktime has been disabled by the sequence number or the transaction version, error.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP4\"] = \"No operation (reserved for future expansion). Note: OP_NOP4 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP6\"] = \"No operation (reserved for future expansion). Note: OP_NOP6 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP5\"] = \"No operation (reserved for future expansion). Note: OP_NOP5 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP7\"] = \"No operation (reserved for future expansion). Note: OP_NOP7 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP8\"] = \"No operation (reserved for future expansion). Note: OP_NOP8 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP9\"] = \"No operation (reserved for future expansion). Note: OP_NOP9 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_NOP10\"] = \"No operation (reserved for future expansion). Note: OP_NOP10 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKDATASIG\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_CHECKDATASIGVERIFY\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is not valid, error. (This operation is a combination of OP_CHECKDATASIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2023[\"OP_REVERSEBYTES\"] = \"Pop the top item from the stack and reverse it, pushing the result.\";\n    OpcodeDescriptionsBCH2023[\"OP_INPUTINDEX\"] = \"Push the index of the input being evaluated to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_ACTIVEBYTECODE\"] = \"Push the bytecode currently being evaluated, beginning after the last executed OP_CODESEPARATOR, to the stack. For Pay-to-Script-Hash (P2SH) evaluations, this is the redeem bytecode of the Unspent Transaction Output (UTXO) being spent; for all other evaluations, this is the locking bytecode of the UTXO being spent.\";\n    OpcodeDescriptionsBCH2023[\"OP_TXVERSION\"] = \"Push the version of the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_TXINPUTCOUNT\"] = \"Push the count of inputs in the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_TXOUTPUTCOUNT\"] = \"Push the count of outputs in the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_TXLOCKTIME\"] = \"Push the locktime of the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_UTXOVALUE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the value (in satoshis) of the Unspent Transaction Output (UTXO) spent by that input to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_UTXOBYTECODE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the full locking bytecode of the Unspent Transaction Output (UTXO) spent by that input to the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPOINTTXHASH\"] = \"Pop the top item from the stack as an input index (VM Number). From that input, push the outpoint transaction hash \\u2013 the hash of the transaction that created the Unspent Transaction Output (UTXO) that is being spent \\u2013 to the stack in OP_HASH256 byte order.\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPOINTINDEX\"] = \"Pop the top item from the stack as an input index (VM Number). From that input, push the outpoint index \\u2013 the index of the output in the transaction that created the Unspent Transaction Output (UTXO) that is being spent \\u2013 to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_INPUTBYTECODE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the unlocking bytecode of the input at that index to the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_INPUTSEQUENCENUMBER\"] = \"Pop the top item from the stack as an input index (VM Number). Push the sequence number of the input at that index to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPUTVALUE\"] = \"Pop the top item from the stack as an output index (VM Number). Push the value (in satoshis) of the output at that index to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPUTBYTECODE\"] = \"Pop the top item from the stack as an output index (VM Number). Push the locking bytecode of the output at that index to the stack.\";\n    OpcodeDescriptionsBCH2023[\"OP_UTXOTOKENCATEGORY\"] = \"Pop the top item from the stack as an input index (VM Number). If the Unspent Transaction Output (UTXO) spent by that input includes no tokens, push a 0 (VM Number) to the stack. If the UTXO does not include a non-fungible token with a capability, push the UTXO's token category, otherwise, push the concatenation of the token category and capability, where the mutable capability is represented by 1 (VM Number) and the minting capability is represented by 2 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_UTXOTOKENCOMMITMENT\"] = \"Pop the top item from the stack as an input index (VM Number). Push the token commitment of the Unspent Transaction Output (UTXO) spent by that input to the stack. If the UTXO does not include a non-fungible token, or if it includes a non-fungible token with a zero-length commitment, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_UTXOTOKENAMOUNT\"] = \"Pop the top item from the stack as an input index (VM Number). Push the fungible token amount of the Unspent Transaction Output (UTXO) spent by that input to the stack as a VM Number. If the UTXO includes no fungible tokens, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPUTTOKENCATEGORY\"] = \"Pop the top item from the stack as an output index (VM Number). If the output spent by that input includes no tokens, push a 0 (VM Number) to the stack. If the output does not include a non-fungible token with a capability, push the output's token category, otherwise, push the concatenation of the token category and capability, where the mutable capability is represented by 1 (VM Number) and the minting capability is represented by 2 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPUTTOKENCOMMITMENT\"] = \"Pop the top item from the stack as an output index (VM Number). Push the token commitment of the output at that index to the stack. If the output does not include a non-fungible token, or if it includes a non-fungible token with a zero-length commitment, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2023[\"OP_OUTPUTTOKENAMOUNT\"] = \"Pop the top item from the stack as an output index (VM Number). Push the fungible token amount of the output at that index to the stack as a VM Number. If the output includes no fungible tokens, push a 0 (VM Number).\";\n})(OpcodeDescriptionsBCH2023 || (OpcodeDescriptionsBCH2023 = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const OpcodeDescriptionsBCH = OpcodeDescriptionsBCH2023;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const OpcodeDescriptions = OpcodeDescriptionsBCH;\n//# sourceMappingURL=bch-2023-descriptions.js.map", "export var AuthenticationErrorBCH2023;\n(function (AuthenticationErrorBCH2023) {\n    AuthenticationErrorBCH2023[\"exceededMaximumVmNumberLength\"] = \"Program attempted an OP_BIN2NUM operation on a byte sequence that cannot be encoded within the maximum VM Number length (8 bytes).\";\n})(AuthenticationErrorBCH2023 || (AuthenticationErrorBCH2023 = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const AuthenticationErrorBCH = AuthenticationErrorBCH2023;\n//# sourceMappingURL=bch-2023-errors.js.map", "import { isPayToScriptHash20, isPayToScriptHash32, } from '../../../../address/address.js';\nimport { ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha1 as internalSha1, sha256 as internalSha256, } from '../../../../crypto/crypto.js';\nimport { binToHex } from '../../../../format/format.js';\nimport { encodeTransactionBCH } from '../../../../message/message.js';\nimport { applyError, AuthenticationErrorCommon, authenticationInstructionsAreMalformed, cloneAuthenticationProgramStateBCH, cloneStack, conditionallyEvaluate, createAuthenticationProgramStateCommon, decodeAuthenticationInstructions, disabledOperation, getDustThreshold, incrementOperationCount, isArbitraryDataOutput, isDustOutput, isPushOnly, isStandardOutputBytecode2023, isWitnessProgram, mapOverOperations, op0NotEqual, op1Add, op1Sub, op2Drop, op2Dup, op2Over, op2Rot, op2Swap, op3Dup, opAbs, opActiveBytecode, opAdd, opAnd, opBin2Num, opBoolAnd, opBoolOr, opCat, opCheckDataSig, opCheckDataSigVerify, opCheckLockTimeVerify, opCheckSequenceVerify, opCodeSeparator, opDepth, opDiv, opDrop, opDup, opElse, opEndIf, opEqual, opEqualVerify, opFromAltStack, opGreaterThan, opGreaterThanOrEqual, opHash160, opHash256, opIf, opIfDup, opInputBytecode, opInputIndex, opInputSequenceNumber, opLessThan, opLessThanOrEqual, opMax, opMin, opMod, opMul, opNegate, opNip, opNop, opNopDisallowed, opNot, opNotIf, opNum2Bin, opNumEqual, opNumEqualVerify, opNumNotEqual, opOr, opOutpointIndex, opOutpointTxHash, opOutputBytecode, opOutputValue, opOver, opPick, opReturn, opReverseBytes, opRipemd160, opRoll, opRot, opSha1, opSha256, opSize, opSplit, opSub, opSwap, opToAltStack, opTuck, opTxInputCount, opTxLocktime, opTxOutputCount, opTxVersion, opUtxoBytecode, opUtxoValue, opVerify, opWithin, opXor, pushNumberOperation, pushOperation, reservedOperation, stackItemIsTruthy, undefinedOperation, } from '../../common/common.js';\nimport { ConsensusBCH2023 } from './bch-2023-consensus.js';\nimport { opCheckMultiSigBCH2023, opCheckMultiSigVerifyBCH2023, opCheckSigBCH2023, opCheckSigVerifyBCH2023, } from './bch-2023-crypto.js';\nimport { OpcodesBCH2023 } from './bch-2023-opcodes.js';\nimport { opOutputTokenAmount, opOutputTokenCategory, opOutputTokenCommitment, opUtxoTokenAmount, opUtxoTokenCategory, opUtxoTokenCommitment, verifyTransactionTokens, } from './bch-2023-tokens.js';\n/**\n * create an instance of the BCH 2023 virtual machine instruction set.\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createInstructionSetBCH2023 = (standard = true, { ripemd160, secp256k1, sha1, sha256, } = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha1: internalSha1,\n    sha256: internalSha256,\n}) => {\n    const conditionallyPush = pushOperation();\n    return {\n        clone: cloneAuthenticationProgramStateBCH,\n        continue: (state) => state.error === undefined && state.ip < state.instructions.length,\n        // eslint-disable-next-line complexity\n        evaluate: (program, stateEvaluate) => {\n            const { unlockingBytecode } = \n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            program.transaction.inputs[program.inputIndex];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const { lockingBytecode } = program.sourceOutputs[program.inputIndex];\n            const unlockingInstructions = decodeAuthenticationInstructions(unlockingBytecode);\n            const lockingInstructions = decodeAuthenticationInstructions(lockingBytecode);\n            const initialState = createAuthenticationProgramStateCommon({\n                instructions: unlockingInstructions,\n                program,\n                stack: [],\n            });\n            if (unlockingBytecode.length > ConsensusBCH2023.maximumBytecodeLength) {\n                return applyError(initialState, `The provided unlocking bytecode (${unlockingBytecode.length} bytes) exceeds the maximum bytecode length (${ConsensusBCH2023.maximumBytecodeLength} bytes).`);\n            }\n            if (authenticationInstructionsAreMalformed(unlockingInstructions)) {\n                return applyError(initialState, AuthenticationErrorCommon.malformedUnlockingBytecode);\n            }\n            if (!isPushOnly(unlockingBytecode)) {\n                return applyError(initialState, AuthenticationErrorCommon.requiresPushOnly);\n            }\n            if (lockingBytecode.length > ConsensusBCH2023.maximumBytecodeLength) {\n                return applyError(initialState, AuthenticationErrorCommon.exceededMaximumBytecodeLengthLocking);\n            }\n            if (authenticationInstructionsAreMalformed(lockingInstructions)) {\n                return applyError(initialState, AuthenticationErrorCommon.malformedLockingBytecode);\n            }\n            const unlockingResult = stateEvaluate(initialState);\n            if (unlockingResult.error !== undefined) {\n                return unlockingResult;\n            }\n            if (unlockingResult.controlStack.length !== 0) {\n                return applyError(initialState, AuthenticationErrorCommon.nonEmptyControlStack);\n            }\n            const lockingResult = stateEvaluate(createAuthenticationProgramStateCommon({\n                instructions: lockingInstructions,\n                program,\n                stack: unlockingResult.stack,\n            }));\n            const p2sh20 = isPayToScriptHash20(lockingBytecode);\n            const p2sh32 = isPayToScriptHash32(lockingBytecode);\n            if (!p2sh20 && !p2sh32) {\n                return lockingResult;\n            }\n            const p2shStack = cloneStack(unlockingResult.stack);\n            // eslint-disable-next-line functional/immutable-data\n            const p2shScript = p2shStack.pop() ?? Uint8Array.of();\n            if (p2sh20 && p2shStack.length === 0 && isWitnessProgram(p2shScript)) {\n                return lockingResult;\n            }\n            const p2shInstructions = decodeAuthenticationInstructions(p2shScript);\n            return authenticationInstructionsAreMalformed(p2shInstructions)\n                ? {\n                    ...lockingResult,\n                    error: AuthenticationErrorCommon.malformedP2shBytecode,\n                }\n                : stateEvaluate(createAuthenticationProgramStateCommon({\n                    instructions: p2shInstructions,\n                    program,\n                    stack: p2shStack,\n                }));\n        },\n        every: (state) => \n        // TODO: implement sigchecks https://gitlab.com/bitcoin-cash-node/bchn-sw/bitcoincash-upgrade-specifications/-/blob/master/spec/2020-05-15-sigchecks.md\n        state.stack.length + state.alternateStack.length >\n            ConsensusBCH2023.maximumStackDepth\n            ? applyError(state, AuthenticationErrorCommon.exceededMaximumStackDepth)\n            : state.operationCount > ConsensusBCH2023.maximumOperationCount\n                ? applyError(state, AuthenticationErrorCommon.exceededMaximumOperationCount)\n                : state,\n        operations: {\n            [OpcodesBCH2023.OP_0]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_1]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_2]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_3]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_4]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_5]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_6]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_7]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_8]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_9]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_10]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_11]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_12]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_13]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_14]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_15]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_16]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_17]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_18]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_19]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_20]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_21]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_22]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_23]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_24]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_25]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_26]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_27]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_28]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_29]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_30]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_31]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_32]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_33]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_34]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_35]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_36]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_37]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_38]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_39]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_40]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_41]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_42]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_43]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_44]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_45]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_46]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_47]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_48]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_49]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_50]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_51]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_52]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_53]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_54]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_55]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_56]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_57]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_58]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_59]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_60]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_61]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_62]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_63]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_64]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_65]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_66]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_67]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_68]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_69]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_70]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_71]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_72]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_73]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_74]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHBYTES_75]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHDATA_1]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHDATA_2]: conditionallyPush,\n            [OpcodesBCH2023.OP_PUSHDATA_4]: conditionallyPush,\n            [OpcodesBCH2023.OP_1NEGATE]: conditionallyEvaluate(pushNumberOperation(-1)),\n            [OpcodesBCH2023.OP_RESERVED]: conditionallyEvaluate(reservedOperation),\n            [OpcodesBCH2023.OP_1]: conditionallyEvaluate(pushNumberOperation(1)),\n            /* eslint-disable @typescript-eslint/no-magic-numbers */\n            [OpcodesBCH2023.OP_2]: conditionallyEvaluate(pushNumberOperation(2)),\n            [OpcodesBCH2023.OP_3]: conditionallyEvaluate(pushNumberOperation(3)),\n            [OpcodesBCH2023.OP_4]: conditionallyEvaluate(pushNumberOperation(4)),\n            [OpcodesBCH2023.OP_5]: conditionallyEvaluate(pushNumberOperation(5)),\n            [OpcodesBCH2023.OP_6]: conditionallyEvaluate(pushNumberOperation(6)),\n            [OpcodesBCH2023.OP_7]: conditionallyEvaluate(pushNumberOperation(7)),\n            [OpcodesBCH2023.OP_8]: conditionallyEvaluate(pushNumberOperation(8)),\n            [OpcodesBCH2023.OP_9]: conditionallyEvaluate(pushNumberOperation(9)),\n            [OpcodesBCH2023.OP_10]: conditionallyEvaluate(pushNumberOperation(10)),\n            [OpcodesBCH2023.OP_11]: conditionallyEvaluate(pushNumberOperation(11)),\n            [OpcodesBCH2023.OP_12]: conditionallyEvaluate(pushNumberOperation(12)),\n            [OpcodesBCH2023.OP_13]: conditionallyEvaluate(pushNumberOperation(13)),\n            [OpcodesBCH2023.OP_14]: conditionallyEvaluate(pushNumberOperation(14)),\n            [OpcodesBCH2023.OP_15]: conditionallyEvaluate(pushNumberOperation(15)),\n            [OpcodesBCH2023.OP_16]: conditionallyEvaluate(pushNumberOperation(16)),\n            /* eslint-enable @typescript-eslint/no-magic-numbers */\n            ...mapOverOperations([incrementOperationCount], {\n                [OpcodesBCH2023.OP_NOP]: conditionallyEvaluate(opNop),\n                [OpcodesBCH2023.OP_VER]: conditionallyEvaluate(reservedOperation),\n                [OpcodesBCH2023.OP_IF]: opIf,\n                [OpcodesBCH2023.OP_NOTIF]: opNotIf,\n                [OpcodesBCH2023.OP_VERIF]: reservedOperation,\n                [OpcodesBCH2023.OP_VERNOTIF]: reservedOperation,\n                [OpcodesBCH2023.OP_ELSE]: opElse,\n                [OpcodesBCH2023.OP_ENDIF]: opEndIf,\n                [OpcodesBCH2023.OP_VERIFY]: conditionallyEvaluate(opVerify),\n                [OpcodesBCH2023.OP_RETURN]: conditionallyEvaluate(opReturn),\n                [OpcodesBCH2023.OP_TOALTSTACK]: conditionallyEvaluate(opToAltStack),\n                [OpcodesBCH2023.OP_FROMALTSTACK]: conditionallyEvaluate(opFromAltStack),\n                [OpcodesBCH2023.OP_2DROP]: conditionallyEvaluate(op2Drop),\n                [OpcodesBCH2023.OP_2DUP]: conditionallyEvaluate(op2Dup),\n                [OpcodesBCH2023.OP_3DUP]: conditionallyEvaluate(op3Dup),\n                [OpcodesBCH2023.OP_2OVER]: conditionallyEvaluate(op2Over),\n                [OpcodesBCH2023.OP_2ROT]: conditionallyEvaluate(op2Rot),\n                [OpcodesBCH2023.OP_2SWAP]: conditionallyEvaluate(op2Swap),\n                [OpcodesBCH2023.OP_IFDUP]: conditionallyEvaluate(opIfDup),\n                [OpcodesBCH2023.OP_DEPTH]: conditionallyEvaluate(opDepth),\n                [OpcodesBCH2023.OP_DROP]: conditionallyEvaluate(opDrop),\n                [OpcodesBCH2023.OP_DUP]: conditionallyEvaluate(opDup),\n                [OpcodesBCH2023.OP_NIP]: conditionallyEvaluate(opNip),\n                [OpcodesBCH2023.OP_OVER]: conditionallyEvaluate(opOver),\n                [OpcodesBCH2023.OP_PICK]: conditionallyEvaluate(opPick),\n                [OpcodesBCH2023.OP_ROLL]: conditionallyEvaluate(opRoll),\n                [OpcodesBCH2023.OP_ROT]: conditionallyEvaluate(opRot),\n                [OpcodesBCH2023.OP_SWAP]: conditionallyEvaluate(opSwap),\n                [OpcodesBCH2023.OP_TUCK]: conditionallyEvaluate(opTuck),\n                [OpcodesBCH2023.OP_CAT]: conditionallyEvaluate(opCat),\n                [OpcodesBCH2023.OP_SPLIT]: conditionallyEvaluate(opSplit),\n                [OpcodesBCH2023.OP_NUM2BIN]: conditionallyEvaluate(opNum2Bin),\n                [OpcodesBCH2023.OP_BIN2NUM]: conditionallyEvaluate(opBin2Num),\n                [OpcodesBCH2023.OP_SIZE]: conditionallyEvaluate(opSize),\n                [OpcodesBCH2023.OP_INVERT]: disabledOperation,\n                [OpcodesBCH2023.OP_AND]: conditionallyEvaluate(opAnd),\n                [OpcodesBCH2023.OP_OR]: conditionallyEvaluate(opOr),\n                [OpcodesBCH2023.OP_XOR]: conditionallyEvaluate(opXor),\n                [OpcodesBCH2023.OP_EQUAL]: conditionallyEvaluate(opEqual),\n                [OpcodesBCH2023.OP_EQUALVERIFY]: conditionallyEvaluate(opEqualVerify),\n                [OpcodesBCH2023.OP_RESERVED1]: conditionallyEvaluate(reservedOperation),\n                [OpcodesBCH2023.OP_RESERVED2]: conditionallyEvaluate(reservedOperation),\n                [OpcodesBCH2023.OP_1ADD]: conditionallyEvaluate(op1Add),\n                [OpcodesBCH2023.OP_1SUB]: conditionallyEvaluate(op1Sub),\n                [OpcodesBCH2023.OP_2MUL]: disabledOperation,\n                [OpcodesBCH2023.OP_2DIV]: disabledOperation,\n                [OpcodesBCH2023.OP_NEGATE]: conditionallyEvaluate(opNegate),\n                [OpcodesBCH2023.OP_ABS]: conditionallyEvaluate(opAbs),\n                [OpcodesBCH2023.OP_NOT]: conditionallyEvaluate(opNot),\n                [OpcodesBCH2023.OP_0NOTEQUAL]: conditionallyEvaluate(op0NotEqual),\n                [OpcodesBCH2023.OP_ADD]: conditionallyEvaluate(opAdd),\n                [OpcodesBCH2023.OP_SUB]: conditionallyEvaluate(opSub),\n                [OpcodesBCH2023.OP_MUL]: conditionallyEvaluate(opMul),\n                [OpcodesBCH2023.OP_DIV]: conditionallyEvaluate(opDiv),\n                [OpcodesBCH2023.OP_MOD]: conditionallyEvaluate(opMod),\n                [OpcodesBCH2023.OP_LSHIFT]: disabledOperation,\n                [OpcodesBCH2023.OP_RSHIFT]: disabledOperation,\n                [OpcodesBCH2023.OP_BOOLAND]: conditionallyEvaluate(opBoolAnd),\n                [OpcodesBCH2023.OP_BOOLOR]: conditionallyEvaluate(opBoolOr),\n                [OpcodesBCH2023.OP_NUMEQUAL]: conditionallyEvaluate(opNumEqual),\n                [OpcodesBCH2023.OP_NUMEQUALVERIFY]: conditionallyEvaluate(opNumEqualVerify),\n                [OpcodesBCH2023.OP_NUMNOTEQUAL]: conditionallyEvaluate(opNumNotEqual),\n                [OpcodesBCH2023.OP_LESSTHAN]: conditionallyEvaluate(opLessThan),\n                [OpcodesBCH2023.OP_GREATERTHAN]: conditionallyEvaluate(opGreaterThan),\n                [OpcodesBCH2023.OP_LESSTHANOREQUAL]: conditionallyEvaluate(opLessThanOrEqual),\n                [OpcodesBCH2023.OP_GREATERTHANOREQUAL]: conditionallyEvaluate(opGreaterThanOrEqual),\n                [OpcodesBCH2023.OP_MIN]: conditionallyEvaluate(opMin),\n                [OpcodesBCH2023.OP_MAX]: conditionallyEvaluate(opMax),\n                [OpcodesBCH2023.OP_WITHIN]: conditionallyEvaluate(opWithin),\n                [OpcodesBCH2023.OP_RIPEMD160]: conditionallyEvaluate(opRipemd160({ ripemd160 })),\n                [OpcodesBCH2023.OP_SHA1]: conditionallyEvaluate(opSha1({ sha1 })),\n                [OpcodesBCH2023.OP_SHA256]: conditionallyEvaluate(opSha256({ sha256 })),\n                [OpcodesBCH2023.OP_HASH160]: conditionallyEvaluate(opHash160({ ripemd160, sha256 })),\n                [OpcodesBCH2023.OP_HASH256]: conditionallyEvaluate(opHash256({ sha256 })),\n                [OpcodesBCH2023.OP_CODESEPARATOR]: conditionallyEvaluate(opCodeSeparator),\n                [OpcodesBCH2023.OP_CHECKSIG]: conditionallyEvaluate(opCheckSigBCH2023({ secp256k1, sha256 })),\n                [OpcodesBCH2023.OP_CHECKSIGVERIFY]: conditionallyEvaluate(opCheckSigVerifyBCH2023({ secp256k1, sha256 })),\n                [OpcodesBCH2023.OP_CHECKMULTISIG]: conditionallyEvaluate(opCheckMultiSigBCH2023({ secp256k1, sha256 })),\n                [OpcodesBCH2023.OP_CHECKMULTISIGVERIFY]: conditionallyEvaluate(opCheckMultiSigVerifyBCH2023({ secp256k1, sha256 })),\n                ...(standard\n                    ? {\n                        [OpcodesBCH2023.OP_NOP1]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_CHECKLOCKTIMEVERIFY]: conditionallyEvaluate(opCheckLockTimeVerify),\n                        [OpcodesBCH2023.OP_CHECKSEQUENCEVERIFY]: conditionallyEvaluate(opCheckSequenceVerify),\n                        [OpcodesBCH2023.OP_NOP4]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_NOP5]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_NOP6]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_NOP7]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_NOP8]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_NOP9]: conditionallyEvaluate(opNopDisallowed),\n                        [OpcodesBCH2023.OP_NOP10]: conditionallyEvaluate(opNopDisallowed),\n                    }\n                    : {\n                        [OpcodesBCH2023.OP_NOP1]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_CHECKLOCKTIMEVERIFY]: conditionallyEvaluate(opCheckLockTimeVerify),\n                        [OpcodesBCH2023.OP_CHECKSEQUENCEVERIFY]: conditionallyEvaluate(opCheckSequenceVerify),\n                        [OpcodesBCH2023.OP_NOP4]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_NOP5]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_NOP6]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_NOP7]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_NOP8]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_NOP9]: conditionallyEvaluate(opNop),\n                        [OpcodesBCH2023.OP_NOP10]: conditionallyEvaluate(opNop),\n                    }),\n                [OpcodesBCH2023.OP_CHECKDATASIG]: conditionallyEvaluate(opCheckDataSig({ secp256k1, sha256 })),\n                [OpcodesBCH2023.OP_CHECKDATASIGVERIFY]: conditionallyEvaluate(opCheckDataSigVerify({ secp256k1, sha256 })),\n                [OpcodesBCH2023.OP_REVERSEBYTES]: conditionallyEvaluate(opReverseBytes),\n                [OpcodesBCH2023.OP_INPUTINDEX]: conditionallyEvaluate(opInputIndex),\n                [OpcodesBCH2023.OP_ACTIVEBYTECODE]: conditionallyEvaluate(opActiveBytecode),\n                [OpcodesBCH2023.OP_TXVERSION]: conditionallyEvaluate(opTxVersion),\n                [OpcodesBCH2023.OP_TXINPUTCOUNT]: conditionallyEvaluate(opTxInputCount),\n                [OpcodesBCH2023.OP_TXOUTPUTCOUNT]: conditionallyEvaluate(opTxOutputCount),\n                [OpcodesBCH2023.OP_TXLOCKTIME]: conditionallyEvaluate(opTxLocktime),\n                [OpcodesBCH2023.OP_UTXOVALUE]: conditionallyEvaluate(opUtxoValue),\n                [OpcodesBCH2023.OP_UTXOBYTECODE]: conditionallyEvaluate(opUtxoBytecode),\n                [OpcodesBCH2023.OP_OUTPOINTTXHASH]: conditionallyEvaluate(opOutpointTxHash),\n                [OpcodesBCH2023.OP_OUTPOINTINDEX]: conditionallyEvaluate(opOutpointIndex),\n                [OpcodesBCH2023.OP_INPUTBYTECODE]: conditionallyEvaluate(opInputBytecode),\n                [OpcodesBCH2023.OP_INPUTSEQUENCENUMBER]: conditionallyEvaluate(opInputSequenceNumber),\n                [OpcodesBCH2023.OP_OUTPUTVALUE]: conditionallyEvaluate(opOutputValue),\n                [OpcodesBCH2023.OP_OUTPUTBYTECODE]: conditionallyEvaluate(opOutputBytecode),\n                [OpcodesBCH2023.OP_UTXOTOKENCATEGORY]: conditionallyEvaluate(opUtxoTokenCategory),\n                [OpcodesBCH2023.OP_UTXOTOKENCOMMITMENT]: conditionallyEvaluate(opUtxoTokenCommitment),\n                [OpcodesBCH2023.OP_UTXOTOKENAMOUNT]: conditionallyEvaluate(opUtxoTokenAmount),\n                [OpcodesBCH2023.OP_OUTPUTTOKENCATEGORY]: conditionallyEvaluate(opOutputTokenCategory),\n                [OpcodesBCH2023.OP_OUTPUTTOKENCOMMITMENT]: conditionallyEvaluate(opOutputTokenCommitment),\n                [OpcodesBCH2023.OP_OUTPUTTOKENAMOUNT]: conditionallyEvaluate(opOutputTokenAmount),\n            }),\n        },\n        success: (state) => {\n            if (state.error !== undefined) {\n                return state.error;\n            }\n            if (state.controlStack.length !== 0) {\n                return AuthenticationErrorCommon.nonEmptyControlStack;\n            }\n            if (state.stack.length !== 1) {\n                return AuthenticationErrorCommon.requiresCleanStack;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (!stackItemIsTruthy(state.stack[0])) {\n                return AuthenticationErrorCommon.unsuccessfulEvaluation;\n            }\n            return true;\n        },\n        undefined: undefinedOperation,\n        // eslint-disable-next-line complexity\n        verify: ({ sourceOutputs, transaction }, evaluate, stateSuccess) => {\n            if (transaction.inputs.length === 0) {\n                return 'Transactions must have at least one input.';\n            }\n            if (transaction.outputs.length === 0) {\n                return 'Transactions must have at least one output.';\n            }\n            if (transaction.inputs.length !== sourceOutputs.length) {\n                return 'Unable to verify transaction: a single spent output must be provided for each transaction input.';\n            }\n            const transactionSize = encodeTransactionBCH(transaction).length;\n            if (transactionSize < ConsensusBCH2023.minimumTransactionSize) {\n                return `Invalid transaction size: the transaction is ${transactionSize} bytes, but transactions must be no smaller than ${ConsensusBCH2023.minimumTransactionSize} bytes to prevent an exploit of the transaction Merkle tree design.`;\n            }\n            if (transactionSize > ConsensusBCH2023.maximumTransactionSize) {\n                return `Transaction exceeds maximum size: the transaction is ${transactionSize} bytes, but the maximum transaction size is ${ConsensusBCH2023.maximumTransactionSize} bytes.`;\n            }\n            const inputValue = sourceOutputs.reduce((sum, utxo) => sum + utxo.valueSatoshis, 0n);\n            const outputValue = transaction.outputs.reduce((sum, output) => sum + output.valueSatoshis, 0n);\n            if (outputValue > inputValue) {\n                return `Unable to verify transaction: the sum of transaction outputs exceeds the sum of transaction inputs. Input value: ${inputValue}, output value: ${outputValue}`;\n            }\n            const outpointList = transaction.inputs.map((input) => `outpointTransactionHash: ${binToHex(input.outpointTransactionHash)}, outpointIndex: ${input.outpointIndex}`);\n            const firstDuplicate = outpointList.find((outpoint, index) => outpointList.lastIndexOf(outpoint) !== index);\n            /**\n             * This check isn't strictly necessary to perform in the VM (assuming the\n             * provider of `sourceOutputs` is checking for double spends), but it's\n             * included here for debugging purposes.\n             */\n            if (firstDuplicate !== undefined) {\n                return `Unable to verify transaction: the transaction attempts to spend the same outpoint in multiple inputs. ${firstDuplicate}`;\n            }\n            if (standard) {\n                if (transaction.version < 1 ||\n                    transaction.version > ConsensusBCH2023.maximumStandardVersion) {\n                    return `Standard transactions must have a version no less than 1 and no greater than ${ConsensusBCH2023.maximumStandardVersion}.`;\n                }\n                if (transactionSize > ConsensusBCH2023.maximumStandardTransactionSize) {\n                    return `Transaction exceeds maximum standard size: this transaction is ${transactionSize} bytes, but the maximum standard transaction size is ${ConsensusBCH2023.maximumStandardTransactionSize} bytes.`;\n                }\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, output] of sourceOutputs.entries()) {\n                    if (!isStandardOutputBytecode2023(output.lockingBytecode)) {\n                        return `Standard transactions may only spend standard output types, but source output ${index} is non-standard.`;\n                    }\n                }\n                // eslint-disable-next-line functional/no-let\n                let totalArbitraryDataBytes = 0;\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, output] of transaction.outputs.entries()) {\n                    if (!isStandardOutputBytecode2023(output.lockingBytecode)) {\n                        return `Standard transactions may only create standard output types, but transaction output ${index} is non-standard.`;\n                    }\n                    // eslint-disable-next-line functional/no-conditional-statement\n                    if (isArbitraryDataOutput(output.lockingBytecode)) {\n                        // eslint-disable-next-line functional/no-expression-statement\n                        totalArbitraryDataBytes += output.lockingBytecode.length + 1;\n                    }\n                    if (isDustOutput(output)) {\n                        return `Standard transactions may not have dust outputs, but transaction output ${index} is a dust output. Output ${index} must have a value of at least ${getDustThreshold(output)} satoshis. Current value: ${output.valueSatoshis}`;\n                    }\n                }\n                if (totalArbitraryDataBytes > ConsensusBCH2023.maximumDataCarrierBytes) {\n                    return `Standard transactions may carry no more than ${ConsensusBCH2023.maximumDataCarrierBytes} bytes in arbitrary data outputs; this transaction includes ${totalArbitraryDataBytes} bytes of arbitrary data.`;\n                }\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, input] of transaction.inputs.entries()) {\n                    if (input.unlockingBytecode.length >\n                        ConsensusBCH2023.maximumStandardUnlockingBytecodeLength) {\n                        return `Input index ${index} is non-standard: the unlocking bytecode (${input.unlockingBytecode.length} bytes) exceeds the maximum standard unlocking bytecode length (${ConsensusBCH2023.maximumStandardUnlockingBytecodeLength} bytes).`;\n                    }\n                    if (!isPushOnly(input.unlockingBytecode)) {\n                        return `Input index ${index} is non-standard: unlocking bytecode may contain only push operations.`;\n                    }\n                }\n            }\n            const tokenValidationResult = verifyTransactionTokens(transaction, sourceOutputs);\n            if (tokenValidationResult !== true) {\n                return tokenValidationResult;\n            }\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const index of transaction.inputs.keys()) {\n                const state = evaluate({\n                    inputIndex: index,\n                    sourceOutputs,\n                    transaction,\n                });\n                const result = stateSuccess(state);\n                if (typeof result === 'string') {\n                    return `Error in evaluating input index ${index}: ${result}`;\n                }\n            }\n            return true;\n        },\n    };\n};\nexport const createInstructionSetBCH = createInstructionSetBCH2023;\n//# sourceMappingURL=bch-2023-instruction-set.js.map", "import { binToHex, flattenBinArray } from '../../../../format/format.js';\nimport { pushToStackChecked, pushToStackVmNumber, pushToStackVmNumberChecked, useTransactionOutput, useTransactionUtxo, } from '../../common/common.js';\nimport { ConsensusBCH2023 } from './bch-2023-consensus.js';\n/**\n * Given a list of transaction inputs, extract a hex-encoded list of all\n * {@link Input.outpointTransactionHash}es from inputs that spend output `0` of\n * that transaction (i.e. where {@link Input.outpointIndex} is `0`).\n * @param inputs - a list of transaction inputs\n * @returns a hex-encoded list of {@link Input.outpointTransactionHash}es\n */\nexport const extractGenesisCategories = (inputs) => inputs.reduce((agg, input) => input.outpointIndex === 0\n    ? [...agg, binToHex(input.outpointTransactionHash)]\n    : agg, []);\n/**\n * Given the resolved list of a transaction's source outputs – the Unspent\n * Transaction Outputs (UTXOs) spent by the transaction, extract all token data\n * for token-aware validation. See CHIP-2022-02-CashTokens for details.\n * @param sourceOutputs - a list of resolved source outputs (UTXOs)\n * @returns an object containing `availableImmutableTokens`,\n * `availableMutableTokensByCategory`, `availableSumsByCategory`, and\n * `inputMintingCategories`. See CHIP-2022-02-CashTokens for details.\n */\nexport const extractSourceOutputTokenData = (sourceOutputs) => sourceOutputs.reduce(\n// eslint-disable-next-line complexity\n(agg, sourceOutput) => {\n    if (sourceOutput.token === undefined)\n        return agg;\n    const categoryHex = binToHex(sourceOutput.token.category);\n    return {\n        availableImmutableTokens: [\n            ...agg.availableImmutableTokens,\n            ...(sourceOutput.token.nft?.capability === 'none'\n                ? [\n                    {\n                        categoryHex: binToHex(sourceOutput.token.category),\n                        commitmentHex: binToHex(sourceOutput.token.nft.commitment),\n                    },\n                ]\n                : []),\n        ],\n        availableMutableTokensByCategory: sourceOutput.token.nft?.capability === 'mutable'\n            ? {\n                ...agg.availableMutableTokensByCategory,\n                [categoryHex]: (agg.availableMutableTokensByCategory[categoryHex] ?? 0) + 1,\n            }\n            : agg.availableMutableTokensByCategory,\n        availableSumsByCategory: {\n            ...agg.availableSumsByCategory,\n            [categoryHex]: (agg.availableSumsByCategory[categoryHex] ?? 0n) +\n                sourceOutput.token.amount,\n        },\n        inputMintingCategories: [\n            ...agg.inputMintingCategories,\n            ...(sourceOutput.token.nft?.capability === 'minting'\n                ? [binToHex(sourceOutput.token.category)]\n                : []),\n        ],\n    };\n}, {\n    availableImmutableTokens: [],\n    availableMutableTokensByCategory: {},\n    availableSumsByCategory: {},\n    inputMintingCategories: [],\n});\n/**\n * Given a transaction's outputs, extract all token data for token-aware\n * validation. See CHIP-2022-02-CashTokens for details.\n * @param outputs - a list of transaction outputs\n * @returns an object containing `outputImmutableTokens`,\n * `outputMintingCategories`, `outputMutableTokensByCategory`, and\n * `outputSumsByCategory`. See CHIP-2022-02-CashTokens for details.\n */\nexport const extractTransactionOutputTokenData = (outputs) => outputs.reduce(\n// eslint-disable-next-line complexity\n(agg, output) => {\n    if (output.token === undefined)\n        return agg;\n    const categoryHex = binToHex(output.token.category);\n    return {\n        outputImmutableTokens: [\n            ...agg.outputImmutableTokens,\n            ...(output.token.nft?.capability === 'none'\n                ? [\n                    {\n                        categoryHex: binToHex(output.token.category),\n                        commitmentHex: binToHex(output.token.nft.commitment),\n                    },\n                ]\n                : []),\n        ],\n        outputMintingCategories: [\n            ...agg.outputMintingCategories,\n            ...(output.token.nft?.capability === 'minting'\n                ? [binToHex(output.token.category)]\n                : []),\n        ],\n        outputMutableTokensByCategory: output.token.nft?.capability === 'mutable'\n            ? {\n                ...agg.outputMutableTokensByCategory,\n                [categoryHex]: (agg.outputMutableTokensByCategory[categoryHex] ?? 0) + 1,\n            }\n            : agg.outputMutableTokensByCategory,\n        outputSumsByCategory: {\n            ...agg.outputSumsByCategory,\n            [categoryHex]: (agg.outputSumsByCategory[categoryHex] ?? 0n) + output.token.amount,\n        },\n    };\n}, {\n    outputImmutableTokens: [],\n    outputMintingCategories: [],\n    outputMutableTokensByCategory: {},\n    outputSumsByCategory: {},\n});\n/**\n * Given a transaction and its resolved source outputs – the Unspent Transaction\n * Outputs (UTXOs) it spends – verify that the transaction passes token-aware\n * validation.\n * @param transaction - the transaction to verify\n * @param sourceOutputs - the resolved list of the transaction's source outputs\n * @returns `true` on success, or an error message (string) on failure.\n */\n// eslint-disable-next-line complexity\nexport const verifyTransactionTokens = (transaction, sourceOutputs) => {\n    const excessiveCommitment = [...sourceOutputs, ...transaction.outputs].find((output) => output.token?.nft?.commitment !== undefined &&\n        output.token.nft.commitment.length >\n            ConsensusBCH2023.maximumCommitmentLength);\n    if (excessiveCommitment !== undefined) {\n        return `Transaction violates token validation: a token commitment exceeds the consensus limit of ${ConsensusBCH2023.maximumCommitmentLength} bytes. Excessive token commitment length: ${\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        excessiveCommitment.token.nft.commitment.length}`;\n    }\n    const genesisCategories = extractGenesisCategories(transaction.inputs);\n    const { availableSumsByCategory, availableMutableTokensByCategory, inputMintingCategories, availableImmutableTokens, } = extractSourceOutputTokenData(sourceOutputs);\n    const { outputSumsByCategory, outputMutableTokensByCategory, outputMintingCategories, outputImmutableTokens, } = extractTransactionOutputTokenData(transaction.outputs);\n    const availableMintingCategories = [\n        ...genesisCategories,\n        ...inputMintingCategories,\n    ];\n    const missingMintingCategory = outputMintingCategories.find((category) => !availableMintingCategories.includes(category));\n    if (missingMintingCategory !== undefined) {\n        return `Transaction violates token validation: the transaction outputs include a minting token that is not substantiated by the transaction's inputs. Invalid output minting token category: ${missingMintingCategory}`;\n    }\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const [categoryHex, sum] of Object.entries(outputSumsByCategory)) {\n        if (sum > BigInt(ConsensusBCH2023.maxVmNumber)) {\n            return `Transaction violates token validation: the transaction outputs include a sum of fungible tokens for a category exceeding the maximum supply (${ConsensusBCH2023.maxVmNumber}). Category: ${categoryHex}, total amount: ${sum.toString()}.`;\n        }\n        const availableSum = availableSumsByCategory[categoryHex];\n        if (availableSum === undefined &&\n            sum > 0 &&\n            !genesisCategories.includes(categoryHex)) {\n            return `Transaction violates token validation: the transaction creates new fungible tokens for a category without a matching genesis input. Category: ${categoryHex}, tokens created: ${sum}`;\n        }\n        if (availableSum !== undefined && sum > availableSum) {\n            return `Transaction violates token validation: the sum of fungible tokens in the transaction's outputs exceed that of the transactions inputs for a category. Category: ${categoryHex}, input amount: ${availableSum}, output amount: ${sum}`;\n        }\n    }\n    const remainingMutableTokens = Object.entries(outputMutableTokensByCategory).reduce((agg, [categoryHex, sum]) => {\n        if (availableMintingCategories.includes(categoryHex)) {\n            return agg;\n        }\n        return { ...agg, [categoryHex]: (agg[categoryHex] ?? 0) - sum };\n    }, availableMutableTokensByCategory);\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const [categoryHex, sum] of Object.entries(remainingMutableTokens)) {\n        if (sum < 0) {\n            return `Transaction violates token validation: the transaction creates more mutable tokens than are available for a category without a matching minting token. Category: ${categoryHex}, excess mutable tokens: ${0 - sum}`;\n        }\n    }\n    const { unmatchedImmutableTokens } = outputImmutableTokens.reduce((agg, token) => {\n        const { categoryHex, commitmentHex } = token;\n        if (availableMintingCategories.includes(categoryHex)) {\n            return agg;\n        }\n        const firstMatch = availableImmutableTokens.findIndex((available) => available.categoryHex === categoryHex &&\n            available.commitmentHex === commitmentHex);\n        if (firstMatch === -1) {\n            return {\n                availableImmutableTokens: agg.availableImmutableTokens,\n                unmatchedImmutableTokens: [...agg.unmatchedImmutableTokens, token],\n            };\n        }\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        agg.availableImmutableTokens.splice(firstMatch, 1);\n        return agg;\n    }, {\n        availableImmutableTokens,\n        unmatchedImmutableTokens: [],\n    });\n    const requiredMutableTokens = unmatchedImmutableTokens.reduce((agg, token) => ({\n        ...agg,\n        [token.categoryHex]: (agg[token.categoryHex] ?? 0) + 1,\n    }), {});\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const [categoryHex, required] of Object.entries(requiredMutableTokens)) {\n        const available = remainingMutableTokens[categoryHex] ?? 0;\n        if (available < required) {\n            return `Transaction violates token validation: the transaction creates an immutable token for a category without a matching minting token or sufficient mutable tokens. Category ${categoryHex}, available mutable tokens: ${available}, new immutable tokens: ${required}`;\n        }\n    }\n    return true;\n};\nexport const pushTokenExtendedCategory = (state, utxo) => {\n    const { token } = utxo;\n    if (token === undefined) {\n        return pushToStackVmNumber(state, 0n);\n    }\n    const capabilityByte = token.nft?.capability === 'minting'\n        ? [2 /* Constants.mintingCapabilityByte */]\n        : token.nft?.capability === 'mutable'\n            ? [1 /* Constants.mutableCapabilityByte */]\n            : [];\n    const extendedCategory = flattenBinArray([\n        token.category.slice().reverse(),\n        Uint8Array.from(capabilityByte),\n    ]);\n    return pushToStackChecked(state, extendedCategory);\n};\nexport const pushTokenCommitment = (state, utxo) => {\n    const { token } = utxo;\n    if (token === undefined || token.nft === undefined) {\n        return pushToStackVmNumber(state, 0n);\n    }\n    return pushToStackChecked(state, token.nft.commitment);\n};\nexport const pushTokenAmount = (state, utxo) => {\n    const { token } = utxo;\n    if (token === undefined) {\n        return pushToStackVmNumber(state, 0n);\n    }\n    return pushToStackVmNumberChecked(state, token.amount);\n};\nexport const opUtxoTokenCategory = (state) => useTransactionUtxo(state, (nextState, [utxo]) => pushTokenExtendedCategory(nextState, utxo));\nexport const opUtxoTokenCommitment = (state) => useTransactionUtxo(state, (nextState, [utxo]) => pushTokenCommitment(nextState, utxo));\nexport const opUtxoTokenAmount = (state) => useTransactionUtxo(state, (nextState, [utxo]) => pushTokenAmount(nextState, utxo));\nexport const opOutputTokenCategory = (state) => useTransactionOutput(state, (nextState, [output]) => pushTokenExtendedCategory(nextState, output));\nexport const opOutputTokenCommitment = (state) => useTransactionOutput(state, (nextState, [output]) => pushTokenCommitment(nextState, output));\nexport const opOutputTokenAmount = (state) => useTransactionOutput(state, (nextState, [output]) => pushTokenAmount(nextState, output));\n//# sourceMappingURL=bch-2023-tokens.js.map", "import { createAuthenticationVirtualMachine } from '../../../virtual-machine.js';\nimport { createInstructionSetBCH2023 } from './bch-2023-instruction-set.js';\n/**\n * Initialize a virtual machine using the `BCH_2023_05` instruction set.\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createVirtualMachineBCH2023 = (standard = true) => createAuthenticationVirtualMachine(createInstructionSetBCH2023(standard));\nexport const createVirtualMachineBCH = createVirtualMachineBCH2023;\n//# sourceMappingURL=bch-2023-vm.js.map", "import { range } from '../format/format.js';\n/**\n * Create an {@link AuthenticationVirtualMachine} to evaluate authentication\n * programs constructed from operations in the `instructionSet`.\n * @param instructionSet - an {@link InstructionSet}\n */\nexport const createAuthenticationVirtualMachine = (instructionSet) => {\n    const availableOpcodes = 256;\n    const operators = range(availableOpcodes).map((codepoint) => instructionSet.operations[codepoint] === undefined\n        ? instructionSet.undefined\n        : instructionSet.operations[codepoint]);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getCodepoint = (state) => state.instructions[state.ip];\n    const after = (state) => {\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        state.ip += 1;\n        return state;\n    };\n    const getOperation = (state) => \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    operators[getCodepoint(state).opcode];\n    const noOp = ((state) => state);\n    const stateEvery = instructionSet.every ?? noOp;\n    const stateStepMutate = (state) => {\n        const operator = getOperation(state);\n        return after(stateEvery(operator(state)));\n    };\n    const stateContinue = instructionSet.continue;\n    /**\n     * When we get real tail call optimization, this can be replaced\n     * with recursion.\n     */\n    const untilComplete = (state, stepFunction) => {\n        // eslint-disable-next-line functional/no-loop-statement\n        while (stateContinue(state)) {\n            // eslint-disable-next-line functional/no-expression-statement, no-param-reassign\n            state = stepFunction(state);\n        }\n        return state;\n    };\n    const stateClone = instructionSet.clone;\n    const { success } = instructionSet;\n    const stateEvaluate = (state) => untilComplete(stateClone(state), stateStepMutate);\n    const stateDebugStep = (state) => {\n        const operator = getOperation(state);\n        return after(stateEvery(operator(stateClone(state))));\n    };\n    const stateDebug = (state) => {\n        const trace = [];\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        trace.push(state);\n        // eslint-disable-next-line functional/no-expression-statement\n        untilComplete(state, (currentState) => {\n            const nextState = stateDebugStep(currentState);\n            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n            trace.push(nextState);\n            return nextState;\n        });\n        return trace;\n    };\n    const stateStep = (state) => stateStepMutate(stateClone(state));\n    const evaluate = (program) => instructionSet.evaluate(program, stateEvaluate);\n    const debug = (program) => {\n        const results = [];\n        const proxyDebug = (state) => {\n            const debugResult = stateDebug(state);\n            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n            results.push(...debugResult);\n            return debugResult[debugResult.length - 1] ?? state;\n        };\n        const finalResult = instructionSet.evaluate(program, proxyDebug);\n        return [...results, finalResult];\n    };\n    const verify = (resolvedTransaction) => instructionSet.verify(resolvedTransaction, evaluate, success);\n    return {\n        debug,\n        evaluate,\n        stateClone,\n        stateContinue,\n        stateDebug,\n        stateEvaluate,\n        stateStep,\n        stateStepMutate,\n        stateSuccess: success,\n        verify,\n    };\n};\n//# sourceMappingURL=virtual-machine.js.map", "/**\n * The `BCH_2022_05` instruction set.\n */\nexport var OpcodesBCH2022;\n(function (OpcodesBCH2022) {\n    /**\n     * A.K.A. `OP_FALSE` or `OP_PUSHBYTES_0`\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_0\"] = 0] = \"OP_0\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_1\"] = 1] = \"OP_PUSHBYTES_1\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_2\"] = 2] = \"OP_PUSHBYTES_2\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_3\"] = 3] = \"OP_PUSHBYTES_3\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_4\"] = 4] = \"OP_PUSHBYTES_4\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_5\"] = 5] = \"OP_PUSHBYTES_5\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_6\"] = 6] = \"OP_PUSHBYTES_6\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_7\"] = 7] = \"OP_PUSHBYTES_7\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_8\"] = 8] = \"OP_PUSHBYTES_8\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_9\"] = 9] = \"OP_PUSHBYTES_9\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_10\"] = 10] = \"OP_PUSHBYTES_10\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_11\"] = 11] = \"OP_PUSHBYTES_11\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_12\"] = 12] = \"OP_PUSHBYTES_12\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_13\"] = 13] = \"OP_PUSHBYTES_13\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_14\"] = 14] = \"OP_PUSHBYTES_14\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_15\"] = 15] = \"OP_PUSHBYTES_15\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_16\"] = 16] = \"OP_PUSHBYTES_16\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_17\"] = 17] = \"OP_PUSHBYTES_17\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_18\"] = 18] = \"OP_PUSHBYTES_18\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_19\"] = 19] = \"OP_PUSHBYTES_19\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_20\"] = 20] = \"OP_PUSHBYTES_20\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_21\"] = 21] = \"OP_PUSHBYTES_21\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_22\"] = 22] = \"OP_PUSHBYTES_22\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_23\"] = 23] = \"OP_PUSHBYTES_23\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_24\"] = 24] = \"OP_PUSHBYTES_24\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_25\"] = 25] = \"OP_PUSHBYTES_25\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_26\"] = 26] = \"OP_PUSHBYTES_26\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_27\"] = 27] = \"OP_PUSHBYTES_27\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_28\"] = 28] = \"OP_PUSHBYTES_28\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_29\"] = 29] = \"OP_PUSHBYTES_29\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_30\"] = 30] = \"OP_PUSHBYTES_30\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_31\"] = 31] = \"OP_PUSHBYTES_31\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_32\"] = 32] = \"OP_PUSHBYTES_32\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_33\"] = 33] = \"OP_PUSHBYTES_33\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_34\"] = 34] = \"OP_PUSHBYTES_34\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_35\"] = 35] = \"OP_PUSHBYTES_35\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_36\"] = 36] = \"OP_PUSHBYTES_36\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_37\"] = 37] = \"OP_PUSHBYTES_37\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_38\"] = 38] = \"OP_PUSHBYTES_38\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_39\"] = 39] = \"OP_PUSHBYTES_39\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_40\"] = 40] = \"OP_PUSHBYTES_40\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_41\"] = 41] = \"OP_PUSHBYTES_41\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_42\"] = 42] = \"OP_PUSHBYTES_42\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_43\"] = 43] = \"OP_PUSHBYTES_43\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_44\"] = 44] = \"OP_PUSHBYTES_44\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_45\"] = 45] = \"OP_PUSHBYTES_45\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_46\"] = 46] = \"OP_PUSHBYTES_46\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_47\"] = 47] = \"OP_PUSHBYTES_47\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_48\"] = 48] = \"OP_PUSHBYTES_48\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_49\"] = 49] = \"OP_PUSHBYTES_49\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_50\"] = 50] = \"OP_PUSHBYTES_50\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_51\"] = 51] = \"OP_PUSHBYTES_51\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_52\"] = 52] = \"OP_PUSHBYTES_52\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_53\"] = 53] = \"OP_PUSHBYTES_53\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_54\"] = 54] = \"OP_PUSHBYTES_54\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_55\"] = 55] = \"OP_PUSHBYTES_55\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_56\"] = 56] = \"OP_PUSHBYTES_56\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_57\"] = 57] = \"OP_PUSHBYTES_57\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_58\"] = 58] = \"OP_PUSHBYTES_58\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_59\"] = 59] = \"OP_PUSHBYTES_59\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_60\"] = 60] = \"OP_PUSHBYTES_60\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_61\"] = 61] = \"OP_PUSHBYTES_61\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_62\"] = 62] = \"OP_PUSHBYTES_62\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_63\"] = 63] = \"OP_PUSHBYTES_63\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_64\"] = 64] = \"OP_PUSHBYTES_64\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_65\"] = 65] = \"OP_PUSHBYTES_65\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_66\"] = 66] = \"OP_PUSHBYTES_66\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_67\"] = 67] = \"OP_PUSHBYTES_67\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_68\"] = 68] = \"OP_PUSHBYTES_68\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_69\"] = 69] = \"OP_PUSHBYTES_69\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_70\"] = 70] = \"OP_PUSHBYTES_70\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_71\"] = 71] = \"OP_PUSHBYTES_71\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_72\"] = 72] = \"OP_PUSHBYTES_72\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_73\"] = 73] = \"OP_PUSHBYTES_73\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_74\"] = 74] = \"OP_PUSHBYTES_74\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHBYTES_75\"] = 75] = \"OP_PUSHBYTES_75\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHDATA_1\"] = 76] = \"OP_PUSHDATA_1\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHDATA_2\"] = 77] = \"OP_PUSHDATA_2\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PUSHDATA_4\"] = 78] = \"OP_PUSHDATA_4\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    /**\n     * A.K.A. `OP_TRUE`\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_1\"] = 81] = \"OP_1\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2\"] = 82] = \"OP_2\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_3\"] = 83] = \"OP_3\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_4\"] = 84] = \"OP_4\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_5\"] = 85] = \"OP_5\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_6\"] = 86] = \"OP_6\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_7\"] = 87] = \"OP_7\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_8\"] = 88] = \"OP_8\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_9\"] = 89] = \"OP_9\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_10\"] = 90] = \"OP_10\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_11\"] = 91] = \"OP_11\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_12\"] = 92] = \"OP_12\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_13\"] = 93] = \"OP_13\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_14\"] = 94] = \"OP_14\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_15\"] = 95] = \"OP_15\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_16\"] = 96] = \"OP_16\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_VER\"] = 98] = \"OP_VER\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_IF\"] = 99] = \"OP_IF\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_VERIF\"] = 101] = \"OP_VERIF\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_VERNOTIF\"] = 102] = \"OP_VERNOTIF\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_SPLIT\"] = 127] = \"OP_SPLIT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NUM2BIN\"] = 128] = \"OP_NUM2BIN\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_BIN2NUM\"] = 129] = \"OP_BIN2NUM\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_AND\"] = 132] = \"OP_AND\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_OR\"] = 133] = \"OP_OR\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKDATASIG\"] = 186] = \"OP_CHECKDATASIG\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_CHECKDATASIGVERIFY\"] = 187] = \"OP_CHECKDATASIGVERIFY\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_REVERSEBYTES\"] = 188] = \"OP_REVERSEBYTES\";\n    /**\n     * First codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN189\"] = 189] = \"OP_UNKNOWN189\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN190\"] = 190] = \"OP_UNKNOWN190\";\n    /**\n     * Last codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN191\"] = 191] = \"OP_UNKNOWN191\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_INPUTINDEX\"] = 192] = \"OP_INPUTINDEX\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_ACTIVEBYTECODE\"] = 193] = \"OP_ACTIVEBYTECODE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_TXVERSION\"] = 194] = \"OP_TXVERSION\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_TXINPUTCOUNT\"] = 195] = \"OP_TXINPUTCOUNT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_TXOUTPUTCOUNT\"] = 196] = \"OP_TXOUTPUTCOUNT\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_TXLOCKTIME\"] = 197] = \"OP_TXLOCKTIME\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UTXOVALUE\"] = 198] = \"OP_UTXOVALUE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UTXOBYTECODE\"] = 199] = \"OP_UTXOBYTECODE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_OUTPOINTTXHASH\"] = 200] = \"OP_OUTPOINTTXHASH\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_OUTPOINTINDEX\"] = 201] = \"OP_OUTPOINTINDEX\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_INPUTBYTECODE\"] = 202] = \"OP_INPUTBYTECODE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_INPUTSEQUENCENUMBER\"] = 203] = \"OP_INPUTSEQUENCENUMBER\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_OUTPUTVALUE\"] = 204] = \"OP_OUTPUTVALUE\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_OUTPUTBYTECODE\"] = 205] = \"OP_OUTPUTBYTECODE\";\n    /**\n     * Reserved for unary introspection operations.\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RESERVED3\"] = 206] = \"OP_RESERVED3\";\n    /**\n     * Reserved for unary introspection operations.\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_RESERVED4\"] = 207] = \"OP_RESERVED4\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN208\"] = 208] = \"OP_UNKNOWN208\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN209\"] = 209] = \"OP_UNKNOWN209\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN210\"] = 210] = \"OP_UNKNOWN210\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN211\"] = 211] = \"OP_UNKNOWN211\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN212\"] = 212] = \"OP_UNKNOWN212\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN213\"] = 213] = \"OP_UNKNOWN213\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN214\"] = 214] = \"OP_UNKNOWN214\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN215\"] = 215] = \"OP_UNKNOWN215\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN216\"] = 216] = \"OP_UNKNOWN216\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN217\"] = 217] = \"OP_UNKNOWN217\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN218\"] = 218] = \"OP_UNKNOWN218\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN219\"] = 219] = \"OP_UNKNOWN219\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN220\"] = 220] = \"OP_UNKNOWN220\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN221\"] = 221] = \"OP_UNKNOWN221\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN222\"] = 222] = \"OP_UNKNOWN222\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN223\"] = 223] = \"OP_UNKNOWN223\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN224\"] = 224] = \"OP_UNKNOWN224\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN225\"] = 225] = \"OP_UNKNOWN225\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN226\"] = 226] = \"OP_UNKNOWN226\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN227\"] = 227] = \"OP_UNKNOWN227\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN228\"] = 228] = \"OP_UNKNOWN228\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN229\"] = 229] = \"OP_UNKNOWN229\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN230\"] = 230] = \"OP_UNKNOWN230\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN231\"] = 231] = \"OP_UNKNOWN231\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN232\"] = 232] = \"OP_UNKNOWN232\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN233\"] = 233] = \"OP_UNKNOWN233\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN234\"] = 234] = \"OP_UNKNOWN234\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN235\"] = 235] = \"OP_UNKNOWN235\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN236\"] = 236] = \"OP_UNKNOWN236\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN237\"] = 237] = \"OP_UNKNOWN237\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN238\"] = 238] = \"OP_UNKNOWN238\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN239\"] = 239] = \"OP_UNKNOWN239\";\n    /**\n     * A.K.A. `OP_PREFIX_BEGIN`\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN240\"] = 240] = \"OP_UNKNOWN240\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN241\"] = 241] = \"OP_UNKNOWN241\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN242\"] = 242] = \"OP_UNKNOWN242\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN243\"] = 243] = \"OP_UNKNOWN243\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN244\"] = 244] = \"OP_UNKNOWN244\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN245\"] = 245] = \"OP_UNKNOWN245\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN246\"] = 246] = \"OP_UNKNOWN246\";\n    /**\n     * A.K.A. `OP_PREFIX_END`\n     */\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN247\"] = 247] = \"OP_UNKNOWN247\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN248\"] = 248] = \"OP_UNKNOWN248\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN249\"] = 249] = \"OP_UNKNOWN249\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN250\"] = 250] = \"OP_UNKNOWN250\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN251\"] = 251] = \"OP_UNKNOWN251\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN252\"] = 252] = \"OP_UNKNOWN252\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN253\"] = 253] = \"OP_UNKNOWN253\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN254\"] = 254] = \"OP_UNKNOWN254\";\n    OpcodesBCH2022[OpcodesBCH2022[\"OP_UNKNOWN255\"] = 255] = \"OP_UNKNOWN255\";\n})(OpcodesBCH2022 || (OpcodesBCH2022 = {}));\n//# sourceMappingURL=bch-2022-opcodes.js.map", "import { applyError, AuthenticationErrorCommon, bigIntToVmNumber, booleanToVmNumber, combineOperations, opVerify, padMinimallyEncodedVmNumber, pushToStack, useOneStackItem, useOneVmNumber, useThreeVmNumbers, useTwoVmNumbers, } from '../common/common.js';\nimport { ConsensusXEC } from './xec-types.js';\nconst maximumVmNumberByteLength = ConsensusXEC.maximumVmNumberLength;\nexport const opPick4Byte = (state) => useOneVmNumber(state, (nextState, depth) => {\n    const item = nextState.stack[nextState.stack.length - 1 - Number(depth)];\n    if (item === undefined) {\n        return applyError(state, AuthenticationErrorCommon.invalidStackIndex);\n    }\n    return pushToStack(nextState, item.slice());\n});\nexport const opRoll4Byte = (state) => useOneVmNumber(state, (nextState, depth) => {\n    const index = nextState.stack.length - 1 - Number(depth);\n    if (index < 0 || index > nextState.stack.length - 1) {\n        return applyError(state, AuthenticationErrorCommon.invalidStackIndex);\n    }\n    // eslint-disable-next-line functional/immutable-data, @typescript-eslint/no-non-null-assertion\n    return pushToStack(nextState, nextState.stack.splice(index, 1)[0]);\n});\nexport const opSplit4Byte = (state) => useOneVmNumber(state, (nextState, value) => {\n    const index = Number(value);\n    return useOneStackItem(nextState, (finalState, [item]) => index < 0 || index > item.length\n        ? applyError(finalState, AuthenticationErrorCommon.invalidSplitIndex)\n        : pushToStack(finalState, item.slice(0, index), item.slice(index)));\n}, { maximumVmNumberByteLength });\nexport const opNum2Bin4Byte = (state) => useOneVmNumber(state, (nextState, value) => {\n    const targetLength = Number(value);\n    return targetLength > ConsensusXEC.maximumStackItemLength\n        ? applyError(nextState, AuthenticationErrorCommon.exceededMaximumStackItemLength)\n        : useOneVmNumber(nextState, (finalState, [target]) => {\n            const minimallyEncoded = bigIntToVmNumber(target);\n            return minimallyEncoded.length > targetLength\n                ? applyError(finalState, AuthenticationErrorCommon.insufficientLength)\n                : minimallyEncoded.length === targetLength\n                    ? pushToStack(finalState, minimallyEncoded)\n                    : pushToStack(finalState, padMinimallyEncodedVmNumber(minimallyEncoded, targetLength));\n        }, {\n            maximumVmNumberByteLength: ConsensusXEC.maximumStackItemLength,\n            requireMinimalEncoding: false,\n        });\n});\nexport const opBin2Num4Byte = (state) => useOneVmNumber(state, (nextState, [target]) => {\n    const minimallyEncoded = bigIntToVmNumber(target);\n    return minimallyEncoded.length > ConsensusXEC.maximumVmNumberLength\n        ? applyError(nextState, AuthenticationErrorCommon.exceededMaximumVmNumberLength)\n        : pushToStack(nextState, minimallyEncoded);\n}, {\n    maximumVmNumberByteLength: ConsensusXEC.maximumStackItemLength,\n    requireMinimalEncoding: false,\n});\nexport const op1Add4Byte = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(value + 1n)), { maximumVmNumberByteLength });\nexport const op1Sub4Byte = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(value - 1n)), { maximumVmNumberByteLength });\nexport const opNegate4Byte = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(-value)), { maximumVmNumberByteLength });\nexport const opAbs4Byte = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, bigIntToVmNumber(value < 0 ? -value : value)), { maximumVmNumberByteLength });\nexport const opNot4Byte = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, value === 0n ? bigIntToVmNumber(1n) : bigIntToVmNumber(0n)), { maximumVmNumberByteLength });\nexport const op0NotEqual4Byte = (state) => useOneVmNumber(state, (nextState, [value]) => pushToStack(nextState, value === 0n ? bigIntToVmNumber(0n) : bigIntToVmNumber(1n)), { maximumVmNumberByteLength });\nexport const opAdd4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue + secondValue)), { maximumVmNumberByteLength });\nexport const opSub4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue - secondValue)), { maximumVmNumberByteLength });\nexport const opDiv4Byte = (state) => useTwoVmNumbers(state, (nextState, [a, b]) => b === 0n\n    ? applyError(nextState, AuthenticationErrorCommon.divisionByZero)\n    : pushToStack(nextState, bigIntToVmNumber(a / b)), { maximumVmNumberByteLength });\nexport const opMod4Byte = (state) => useTwoVmNumbers(state, (nextState, [a, b]) => b === 0n\n    ? applyError(nextState, AuthenticationErrorCommon.divisionByZero)\n    : pushToStack(nextState, bigIntToVmNumber(a % b)), { maximumVmNumberByteLength });\nexport const opBoolAnd4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue !== 0n && secondValue !== 0n)), { maximumVmNumberByteLength });\nexport const opBoolOr4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue !== 0n || secondValue !== 0n)), { maximumVmNumberByteLength });\nexport const opNumEqual4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue === secondValue)), { maximumVmNumberByteLength });\nexport const opNumEqualVerify4Byte = combineOperations(opNumEqual4Byte, opVerify);\nexport const opNumNotEqual4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue !== secondValue)), { maximumVmNumberByteLength });\nexport const opLessThan4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue < secondValue)), { maximumVmNumberByteLength });\nexport const opLessThanOrEqual4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue <= secondValue)), { maximumVmNumberByteLength });\nexport const opGreaterThan4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue > secondValue)), { maximumVmNumberByteLength });\nexport const opGreaterThanOrEqual4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, booleanToVmNumber(firstValue >= secondValue)), { maximumVmNumberByteLength });\nexport const opMin4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue < secondValue ? firstValue : secondValue)), { maximumVmNumberByteLength });\nexport const opMax4Byte = (state) => useTwoVmNumbers(state, (nextState, [firstValue, secondValue]) => pushToStack(nextState, bigIntToVmNumber(firstValue > secondValue ? firstValue : secondValue)), { maximumVmNumberByteLength });\nexport const opWithin4Byte = (state) => useThreeVmNumbers(state, (nextState, [firstValue, secondValue, thirdValue]) => pushToStack(nextState, booleanToVmNumber(secondValue <= firstValue && firstValue < thirdValue)), { maximumVmNumberByteLength });\n//# sourceMappingURL=xec-vm-number-operations.js.map", "export var ConsensusXEC;\n(function (ConsensusXEC) {\n    /**\n     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`\n     */\n    ConsensusXEC[ConsensusXEC[\"maximumStackItemLength\"] = 520] = \"maximumStackItemLength\";\n    ConsensusXEC[ConsensusXEC[\"maximumVmNumberLength\"] = 4] = \"maximumVmNumberLength\";\n    /**\n     * A.K.A. `MAX_OPS_PER_SCRIPT`\n     */\n    ConsensusXEC[ConsensusXEC[\"maximumOperationCount\"] = 201] = \"maximumOperationCount\";\n    /**\n     * A.K.A. `MAX_SCRIPT_SIZE`\n     */\n    ConsensusXEC[ConsensusXEC[\"maximumBytecodeLength\"] = 10000] = \"maximumBytecodeLength\";\n    /**\n     * A.K.A. `MAX_STACK_SIZE`\n     */\n    ConsensusXEC[ConsensusXEC[\"maximumStackDepth\"] = 1000] = \"maximumStackDepth\";\n    ConsensusXEC[ConsensusXEC[\"schnorrSignatureLength\"] = 64] = \"schnorrSignatureLength\";\n})(ConsensusXEC || (ConsensusXEC = {}));\n//# sourceMappingURL=xec-types.js.map", "export var OpcodesXEC;\n(function (OpcodesXEC) {\n    /**\n     * A.K.A. `OP_FALSE` or `OP_PUSHBYTES_0`\n     */\n    OpcodesXEC[OpcodesXEC[\"OP_0\"] = 0] = \"OP_0\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_1\"] = 1] = \"OP_PUSHBYTES_1\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_2\"] = 2] = \"OP_PUSHBYTES_2\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_3\"] = 3] = \"OP_PUSHBYTES_3\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_4\"] = 4] = \"OP_PUSHBYTES_4\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_5\"] = 5] = \"OP_PUSHBYTES_5\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_6\"] = 6] = \"OP_PUSHBYTES_6\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_7\"] = 7] = \"OP_PUSHBYTES_7\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_8\"] = 8] = \"OP_PUSHBYTES_8\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_9\"] = 9] = \"OP_PUSHBYTES_9\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_10\"] = 10] = \"OP_PUSHBYTES_10\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_11\"] = 11] = \"OP_PUSHBYTES_11\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_12\"] = 12] = \"OP_PUSHBYTES_12\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_13\"] = 13] = \"OP_PUSHBYTES_13\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_14\"] = 14] = \"OP_PUSHBYTES_14\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_15\"] = 15] = \"OP_PUSHBYTES_15\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_16\"] = 16] = \"OP_PUSHBYTES_16\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_17\"] = 17] = \"OP_PUSHBYTES_17\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_18\"] = 18] = \"OP_PUSHBYTES_18\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_19\"] = 19] = \"OP_PUSHBYTES_19\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_20\"] = 20] = \"OP_PUSHBYTES_20\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_21\"] = 21] = \"OP_PUSHBYTES_21\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_22\"] = 22] = \"OP_PUSHBYTES_22\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_23\"] = 23] = \"OP_PUSHBYTES_23\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_24\"] = 24] = \"OP_PUSHBYTES_24\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_25\"] = 25] = \"OP_PUSHBYTES_25\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_26\"] = 26] = \"OP_PUSHBYTES_26\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_27\"] = 27] = \"OP_PUSHBYTES_27\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_28\"] = 28] = \"OP_PUSHBYTES_28\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_29\"] = 29] = \"OP_PUSHBYTES_29\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_30\"] = 30] = \"OP_PUSHBYTES_30\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_31\"] = 31] = \"OP_PUSHBYTES_31\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_32\"] = 32] = \"OP_PUSHBYTES_32\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_33\"] = 33] = \"OP_PUSHBYTES_33\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_34\"] = 34] = \"OP_PUSHBYTES_34\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_35\"] = 35] = \"OP_PUSHBYTES_35\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_36\"] = 36] = \"OP_PUSHBYTES_36\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_37\"] = 37] = \"OP_PUSHBYTES_37\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_38\"] = 38] = \"OP_PUSHBYTES_38\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_39\"] = 39] = \"OP_PUSHBYTES_39\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_40\"] = 40] = \"OP_PUSHBYTES_40\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_41\"] = 41] = \"OP_PUSHBYTES_41\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_42\"] = 42] = \"OP_PUSHBYTES_42\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_43\"] = 43] = \"OP_PUSHBYTES_43\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_44\"] = 44] = \"OP_PUSHBYTES_44\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_45\"] = 45] = \"OP_PUSHBYTES_45\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_46\"] = 46] = \"OP_PUSHBYTES_46\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_47\"] = 47] = \"OP_PUSHBYTES_47\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_48\"] = 48] = \"OP_PUSHBYTES_48\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_49\"] = 49] = \"OP_PUSHBYTES_49\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_50\"] = 50] = \"OP_PUSHBYTES_50\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_51\"] = 51] = \"OP_PUSHBYTES_51\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_52\"] = 52] = \"OP_PUSHBYTES_52\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_53\"] = 53] = \"OP_PUSHBYTES_53\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_54\"] = 54] = \"OP_PUSHBYTES_54\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_55\"] = 55] = \"OP_PUSHBYTES_55\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_56\"] = 56] = \"OP_PUSHBYTES_56\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_57\"] = 57] = \"OP_PUSHBYTES_57\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_58\"] = 58] = \"OP_PUSHBYTES_58\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_59\"] = 59] = \"OP_PUSHBYTES_59\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_60\"] = 60] = \"OP_PUSHBYTES_60\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_61\"] = 61] = \"OP_PUSHBYTES_61\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_62\"] = 62] = \"OP_PUSHBYTES_62\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_63\"] = 63] = \"OP_PUSHBYTES_63\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_64\"] = 64] = \"OP_PUSHBYTES_64\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_65\"] = 65] = \"OP_PUSHBYTES_65\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_66\"] = 66] = \"OP_PUSHBYTES_66\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_67\"] = 67] = \"OP_PUSHBYTES_67\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_68\"] = 68] = \"OP_PUSHBYTES_68\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_69\"] = 69] = \"OP_PUSHBYTES_69\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_70\"] = 70] = \"OP_PUSHBYTES_70\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_71\"] = 71] = \"OP_PUSHBYTES_71\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_72\"] = 72] = \"OP_PUSHBYTES_72\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_73\"] = 73] = \"OP_PUSHBYTES_73\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_74\"] = 74] = \"OP_PUSHBYTES_74\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHBYTES_75\"] = 75] = \"OP_PUSHBYTES_75\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHDATA_1\"] = 76] = \"OP_PUSHDATA_1\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHDATA_2\"] = 77] = \"OP_PUSHDATA_2\";\n    OpcodesXEC[OpcodesXEC[\"OP_PUSHDATA_4\"] = 78] = \"OP_PUSHDATA_4\";\n    OpcodesXEC[OpcodesXEC[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    OpcodesXEC[OpcodesXEC[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    /**\n     * A.K.A. `OP_TRUE`\n     */\n    OpcodesXEC[OpcodesXEC[\"OP_1\"] = 81] = \"OP_1\";\n    OpcodesXEC[OpcodesXEC[\"OP_2\"] = 82] = \"OP_2\";\n    OpcodesXEC[OpcodesXEC[\"OP_3\"] = 83] = \"OP_3\";\n    OpcodesXEC[OpcodesXEC[\"OP_4\"] = 84] = \"OP_4\";\n    OpcodesXEC[OpcodesXEC[\"OP_5\"] = 85] = \"OP_5\";\n    OpcodesXEC[OpcodesXEC[\"OP_6\"] = 86] = \"OP_6\";\n    OpcodesXEC[OpcodesXEC[\"OP_7\"] = 87] = \"OP_7\";\n    OpcodesXEC[OpcodesXEC[\"OP_8\"] = 88] = \"OP_8\";\n    OpcodesXEC[OpcodesXEC[\"OP_9\"] = 89] = \"OP_9\";\n    OpcodesXEC[OpcodesXEC[\"OP_10\"] = 90] = \"OP_10\";\n    OpcodesXEC[OpcodesXEC[\"OP_11\"] = 91] = \"OP_11\";\n    OpcodesXEC[OpcodesXEC[\"OP_12\"] = 92] = \"OP_12\";\n    OpcodesXEC[OpcodesXEC[\"OP_13\"] = 93] = \"OP_13\";\n    OpcodesXEC[OpcodesXEC[\"OP_14\"] = 94] = \"OP_14\";\n    OpcodesXEC[OpcodesXEC[\"OP_15\"] = 95] = \"OP_15\";\n    OpcodesXEC[OpcodesXEC[\"OP_16\"] = 96] = \"OP_16\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    OpcodesXEC[OpcodesXEC[\"OP_VER\"] = 98] = \"OP_VER\";\n    OpcodesXEC[OpcodesXEC[\"OP_IF\"] = 99] = \"OP_IF\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    OpcodesXEC[OpcodesXEC[\"OP_VERIF\"] = 101] = \"OP_VERIF\";\n    OpcodesXEC[OpcodesXEC[\"OP_VERNOTIF\"] = 102] = \"OP_VERNOTIF\";\n    OpcodesXEC[OpcodesXEC[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    OpcodesXEC[OpcodesXEC[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    OpcodesXEC[OpcodesXEC[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    OpcodesXEC[OpcodesXEC[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    OpcodesXEC[OpcodesXEC[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    OpcodesXEC[OpcodesXEC[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    OpcodesXEC[OpcodesXEC[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    OpcodesXEC[OpcodesXEC[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    OpcodesXEC[OpcodesXEC[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    OpcodesXEC[OpcodesXEC[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    OpcodesXEC[OpcodesXEC[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    OpcodesXEC[OpcodesXEC[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    OpcodesXEC[OpcodesXEC[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    OpcodesXEC[OpcodesXEC[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    OpcodesXEC[OpcodesXEC[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    OpcodesXEC[OpcodesXEC[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    OpcodesXEC[OpcodesXEC[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    OpcodesXEC[OpcodesXEC[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    OpcodesXEC[OpcodesXEC[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    OpcodesXEC[OpcodesXEC[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    OpcodesXEC[OpcodesXEC[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    OpcodesXEC[OpcodesXEC[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    OpcodesXEC[OpcodesXEC[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    OpcodesXEC[OpcodesXEC[\"OP_SPLIT\"] = 127] = \"OP_SPLIT\";\n    OpcodesXEC[OpcodesXEC[\"OP_NUM2BIN\"] = 128] = \"OP_NUM2BIN\";\n    OpcodesXEC[OpcodesXEC[\"OP_BIN2NUM\"] = 129] = \"OP_BIN2NUM\";\n    OpcodesXEC[OpcodesXEC[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    OpcodesXEC[OpcodesXEC[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    OpcodesXEC[OpcodesXEC[\"OP_AND\"] = 132] = \"OP_AND\";\n    OpcodesXEC[OpcodesXEC[\"OP_OR\"] = 133] = \"OP_OR\";\n    OpcodesXEC[OpcodesXEC[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    OpcodesXEC[OpcodesXEC[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    OpcodesXEC[OpcodesXEC[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    OpcodesXEC[OpcodesXEC[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    OpcodesXEC[OpcodesXEC[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    OpcodesXEC[OpcodesXEC[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    OpcodesXEC[OpcodesXEC[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    OpcodesXEC[OpcodesXEC[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    OpcodesXEC[OpcodesXEC[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    OpcodesXEC[OpcodesXEC[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    OpcodesXEC[OpcodesXEC[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    OpcodesXEC[OpcodesXEC[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    OpcodesXEC[OpcodesXEC[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    OpcodesXEC[OpcodesXEC[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    OpcodesXEC[OpcodesXEC[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    OpcodesXEC[OpcodesXEC[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    OpcodesXEC[OpcodesXEC[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    OpcodesXEC[OpcodesXEC[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    OpcodesXEC[OpcodesXEC[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    OpcodesXEC[OpcodesXEC[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    OpcodesXEC[OpcodesXEC[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    OpcodesXEC[OpcodesXEC[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    OpcodesXEC[OpcodesXEC[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    OpcodesXEC[OpcodesXEC[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    OpcodesXEC[OpcodesXEC[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    OpcodesXEC[OpcodesXEC[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    OpcodesXEC[OpcodesXEC[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    OpcodesXEC[OpcodesXEC[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    OpcodesXEC[OpcodesXEC[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    OpcodesXEC[OpcodesXEC[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    OpcodesXEC[OpcodesXEC[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    OpcodesXEC[OpcodesXEC[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    OpcodesXEC[OpcodesXEC[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    OpcodesXEC[OpcodesXEC[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    OpcodesXEC[OpcodesXEC[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    OpcodesXEC[OpcodesXEC[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKDATASIG\"] = 186] = \"OP_CHECKDATASIG\";\n    OpcodesXEC[OpcodesXEC[\"OP_CHECKDATASIGVERIFY\"] = 187] = \"OP_CHECKDATASIGVERIFY\";\n    OpcodesXEC[OpcodesXEC[\"OP_REVERSEBYTES\"] = 188] = \"OP_REVERSEBYTES\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN189\"] = 189] = \"OP_UNKNOWN189\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN190\"] = 190] = \"OP_UNKNOWN190\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN191\"] = 191] = \"OP_UNKNOWN191\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN192\"] = 192] = \"OP_UNKNOWN192\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN193\"] = 193] = \"OP_UNKNOWN193\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN194\"] = 194] = \"OP_UNKNOWN194\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN195\"] = 195] = \"OP_UNKNOWN195\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN196\"] = 196] = \"OP_UNKNOWN196\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN197\"] = 197] = \"OP_UNKNOWN197\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN198\"] = 198] = \"OP_UNKNOWN198\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN199\"] = 199] = \"OP_UNKNOWN199\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN200\"] = 200] = \"OP_UNKNOWN200\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN201\"] = 201] = \"OP_UNKNOWN201\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN202\"] = 202] = \"OP_UNKNOWN202\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN203\"] = 203] = \"OP_UNKNOWN203\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN204\"] = 204] = \"OP_UNKNOWN204\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN205\"] = 205] = \"OP_UNKNOWN205\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN206\"] = 206] = \"OP_UNKNOWN206\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN207\"] = 207] = \"OP_UNKNOWN207\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN208\"] = 208] = \"OP_UNKNOWN208\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN209\"] = 209] = \"OP_UNKNOWN209\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN210\"] = 210] = \"OP_UNKNOWN210\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN211\"] = 211] = \"OP_UNKNOWN211\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN212\"] = 212] = \"OP_UNKNOWN212\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN213\"] = 213] = \"OP_UNKNOWN213\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN214\"] = 214] = \"OP_UNKNOWN214\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN215\"] = 215] = \"OP_UNKNOWN215\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN216\"] = 216] = \"OP_UNKNOWN216\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN217\"] = 217] = \"OP_UNKNOWN217\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN218\"] = 218] = \"OP_UNKNOWN218\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN219\"] = 219] = \"OP_UNKNOWN219\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN220\"] = 220] = \"OP_UNKNOWN220\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN221\"] = 221] = \"OP_UNKNOWN221\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN222\"] = 222] = \"OP_UNKNOWN222\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN223\"] = 223] = \"OP_UNKNOWN223\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN224\"] = 224] = \"OP_UNKNOWN224\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN225\"] = 225] = \"OP_UNKNOWN225\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN226\"] = 226] = \"OP_UNKNOWN226\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN227\"] = 227] = \"OP_UNKNOWN227\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN228\"] = 228] = \"OP_UNKNOWN228\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN229\"] = 229] = \"OP_UNKNOWN229\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN230\"] = 230] = \"OP_UNKNOWN230\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN231\"] = 231] = \"OP_UNKNOWN231\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN232\"] = 232] = \"OP_UNKNOWN232\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN233\"] = 233] = \"OP_UNKNOWN233\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN234\"] = 234] = \"OP_UNKNOWN234\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN235\"] = 235] = \"OP_UNKNOWN235\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN236\"] = 236] = \"OP_UNKNOWN236\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN237\"] = 237] = \"OP_UNKNOWN237\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN238\"] = 238] = \"OP_UNKNOWN238\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN239\"] = 239] = \"OP_UNKNOWN239\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN240\"] = 240] = \"OP_UNKNOWN240\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN241\"] = 241] = \"OP_UNKNOWN241\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN242\"] = 242] = \"OP_UNKNOWN242\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN243\"] = 243] = \"OP_UNKNOWN243\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN244\"] = 244] = \"OP_UNKNOWN244\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN245\"] = 245] = \"OP_UNKNOWN245\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN246\"] = 246] = \"OP_UNKNOWN246\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN247\"] = 247] = \"OP_UNKNOWN247\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN248\"] = 248] = \"OP_UNKNOWN248\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN249\"] = 249] = \"OP_UNKNOWN249\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN250\"] = 250] = \"OP_UNKNOWN250\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN251\"] = 251] = \"OP_UNKNOWN251\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN252\"] = 252] = \"OP_UNKNOWN252\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN253\"] = 253] = \"OP_UNKNOWN253\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN254\"] = 254] = \"OP_UNKNOWN254\";\n    OpcodesXEC[OpcodesXEC[\"OP_UNKNOWN255\"] = 255] = \"OP_UNKNOWN255\";\n})(OpcodesXEC || (OpcodesXEC = {}));\n//# sourceMappingURL=xec-opcodes.js.map", "import { createAuthenticationVirtualMachine } from '../../virtual-machine.js';\nimport { createInstructionSetXEC } from './xec-instruction-set.js';\n/**\n * Initialize a virtual machine using the XEC instruction set.\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createVirtualMachineXEC = (standard = true) => createAuthenticationVirtualMachine(createInstructionSetXEC(standard));\n//# sourceMappingURL=xec-vm.js.map", "import { flattenBinArray, hexToBin, utf8ToBin, } from '../../../../../format/format.js';\nimport { bigIntToVmNumber, encodeDataPush, generateBytecodeMap, } from '../../../common/common.js';\nimport { OpcodesXEC } from '../../xec-opcodes.js';\nexport const bitcoinSatoshiOpcodes = Object.entries(generateBytecodeMap(OpcodesXEC)).reduce((acc, cur) => ({ ...acc, [cur[0].slice('OP_'.length)]: cur[1] }), {\n    PUSHDATA1: Uint8Array.of(OpcodesXEC.OP_PUSHDATA_1),\n    PUSHDATA2: Uint8Array.of(OpcodesXEC.OP_PUSHDATA_2),\n    PUSHDATA4: Uint8Array.of(OpcodesXEC.OP_PUSHDATA_4), // eslint-disable-line @typescript-eslint/naming-convention\n});\n/**\n * Convert a string from the Satoshi implementation's `script_tests.json`\n * text-format to bytecode. The string must be valid – this method attempts to\n * convert all unmatched tokens to `BigInt`s.\n *\n * @privateRemarks\n * This method doesn't use {@link compileScript} because of a slight\n * incompatibility in the languages. In CashAssembly, BigIntLiterals are a\n * primitive type, and must be surrounded by a push statement (e.g. `<100>`) to\n * push a number to the stack. In the `script_tests.json` text-format, numbers\n * are assumed to be pushed. We could implement a transformation after the\n * compiler's parse step, but because this format doesn't require any other\n * features of the compiler, we opt to implement this as a simple method.\n * @param satoshiScript - the script in the Satoshi implementation's\n * `script_tests.json` text format\n */\nexport const assembleBitcoinSatoshiScript = (satoshiScript) => flattenBinArray(satoshiScript\n    .split(' ')\n    .filter((token) => token !== '')\n    .map((token) => token.startsWith('0x')\n    ? hexToBin(token.slice('0x'.length))\n    : token.startsWith(\"'\")\n        ? encodeDataPush(utf8ToBin(token.slice(1, token.length - 1)))\n        : bitcoinSatoshiOpcodes[token] === undefined\n            ? encodeDataPush(bigIntToVmNumber(BigInt(token)))\n            : bitcoinSatoshiOpcodes[token]));\n//# sourceMappingURL=bitcoin-satoshi-utils.js.map", "export * from './bch-2022-descriptions.js';\nexport * from './bch-2022-errors.js';\nexport * from './bch-2022-instruction-set.js';\nexport * from './bch-2022-opcodes.js';\nexport * from './bch-2022-types.js';\nexport * from './bch-2022-vm.js';\n//# sourceMappingURL=bch-2022.js.map", "export var OpcodeDescriptionsBCH2022;\n(function (OpcodeDescriptionsBCH2022) {\n    OpcodeDescriptionsBCH2022[\"OP_0\"] = \"Push the VM Number 0 onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_1\"] = \"Push the next byte onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_2\"] = \"Push the next 2 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_3\"] = \"Push the next 3 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_4\"] = \"Push the next 4 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_5\"] = \"Push the next 5 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_6\"] = \"Push the next 6 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_7\"] = \"Push the next 7 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_8\"] = \"Push the next 8 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_9\"] = \"Push the next 9 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_10\"] = \"Push the next 10 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_11\"] = \"Push the next 11 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_12\"] = \"Push the next 12 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_13\"] = \"Push the next 13 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_14\"] = \"Push the next 14 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_15\"] = \"Push the next 15 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_16\"] = \"Push the next 16 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_17\"] = \"Push the next 17 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_18\"] = \"Push the next 18 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_19\"] = \"Push the next 19 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_20\"] = \"Push the next 20 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_21\"] = \"Push the next 21 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_22\"] = \"Push the next 22 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_23\"] = \"Push the next 23 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_24\"] = \"Push the next 24 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_25\"] = \"Push the next 25 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_26\"] = \"Push the next 26 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_27\"] = \"Push the next 27 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_28\"] = \"Push the next 28 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_29\"] = \"Push the next 29 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_30\"] = \"Push the next 30 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_31\"] = \"Push the next 31 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_32\"] = \"Push the next 32 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_33\"] = \"Push the next 33 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_34\"] = \"Push the next 34 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_35\"] = \"Push the next 35 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_36\"] = \"Push the next 36 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_37\"] = \"Push the next 37 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_38\"] = \"Push the next 38 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_39\"] = \"Push the next 39 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_40\"] = \"Push the next 40 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_41\"] = \"Push the next 41 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_42\"] = \"Push the next 42 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_43\"] = \"Push the next 43 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_44\"] = \"Push the next 44 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_45\"] = \"Push the next 45 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_46\"] = \"Push the next 46 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_47\"] = \"Push the next 47 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_48\"] = \"Push the next 48 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_49\"] = \"Push the next 49 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_50\"] = \"Push the next 50 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_51\"] = \"Push the next 51 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_52\"] = \"Push the next 52 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_53\"] = \"Push the next 53 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_54\"] = \"Push the next 54 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_55\"] = \"Push the next 55 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_56\"] = \"Push the next 56 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_57\"] = \"Push the next 57 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_58\"] = \"Push the next 58 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_59\"] = \"Push the next 59 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_60\"] = \"Push the next 60 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_61\"] = \"Push the next 61 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_62\"] = \"Push the next 62 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_63\"] = \"Push the next 63 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_64\"] = \"Push the next 64 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_65\"] = \"Push the next 65 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_66\"] = \"Push the next 66 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_67\"] = \"Push the next 67 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_68\"] = \"Push the next 68 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_69\"] = \"Push the next 69 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_70\"] = \"Push the next 70 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_71\"] = \"Push the next 71 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_72\"] = \"Push the next 72 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_73\"] = \"Push the next 73 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_74\"] = \"Push the next 74 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHBYTES_75\"] = \"Push the next 75 bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHDATA_1\"] = \"Read the next Uint8 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHDATA_2\"] = \"Read the next little-endian Uint16 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_PUSHDATA_4\"] = \"Read the next little-endian Uint32 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_1NEGATE\"] = \"Push the VM Number -1 onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_RESERVED\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED does not count toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_1\"] = \"Push a 1 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_2\"] = \"Push a 2 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_3\"] = \"Push a 3 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_4\"] = \"Push a 4 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_5\"] = \"Push a 5 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_6\"] = \"Push a 6 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_7\"] = \"Push a 7 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_8\"] = \"Push a 8 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_9\"] = \"Push a 9 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_10\"] = \"Push a 10 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_11\"] = \"Push a 11 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_12\"] = \"Push a 12 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_13\"] = \"Push a 13 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_14\"] = \"Push a 14 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_15\"] = \"Push a 15 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_16\"] = \"Push a 16 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP\"] = \"No operation. Note: OP_NOP counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_VER\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_VER counts toward the opcode limit. (Historically, this pushed a protocol version number to the stack.)\";\n    OpcodeDescriptionsBCH2022[\"OP_IF\"] = \"Pop the top item from the stack. If it is not \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOTIF\"] = \"Pop the top item from the stack. If it is \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBCH2022[\"OP_VERIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_IF.)\";\n    OpcodeDescriptionsBCH2022[\"OP_VERNOTIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_NOTIF.)\";\n    OpcodeDescriptionsBCH2022[\"OP_ELSE\"] = \"Invert conditional evaluation within the current OP_IF ... OP_ENDIF block. (If evaluation is enabled, disable it, if it is disabled, enable it.)\";\n    OpcodeDescriptionsBCH2022[\"OP_ENDIF\"] = \"End the current OP_IF/OP_NOTIF ... OP_ENDIF block.\";\n    OpcodeDescriptionsBCH2022[\"OP_VERIFY\"] = \"Pop the top item from the stack and error if it isn't \\\"truthy\\\".\";\n    OpcodeDescriptionsBCH2022[\"OP_RETURN\"] = \"Error when executed.\";\n    OpcodeDescriptionsBCH2022[\"OP_TOALTSTACK\"] = \"Pop the top item from the stack and push it onto the alternate stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_FROMALTSTACK\"] = \"Pop the top item from the alternate stack and push it onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_2DROP\"] = \"Pop the top 2 items from the stack and discard them.\";\n    OpcodeDescriptionsBCH2022[\"OP_2DUP\"] = \"Duplicate the top 2 items on the stack. (E.g. [a, b] -> [a, b, a, b])\";\n    OpcodeDescriptionsBCH2022[\"OP_3DUP\"] = \"Duplicate the top 3 items on the stack. (E.g. [a, b, c] -> [a, b, c, a, b, c])\";\n    OpcodeDescriptionsBCH2022[\"OP_2OVER\"] = \"Duplicate the 2 items beginning at a depth of 2 on the stack. (E.g. [a, b, c, d] -> [a, b, c, d, a, b])\";\n    OpcodeDescriptionsBCH2022[\"OP_2ROT\"] = \"Rotate the top 6 items on the stack, bringing the fifth and sixth items to the top. (E.g. [a, b, c, d, e, f] -> [c, d, e, f, a, b])\";\n    OpcodeDescriptionsBCH2022[\"OP_2SWAP\"] = \"Swap the positions of the top two pairs of items on the stack. (E.g. [a, b, c, d] -> [c, d, a, b])\";\n    OpcodeDescriptionsBCH2022[\"OP_IFDUP\"] = \"If the top item on the stack is \\\"truthy\\\", duplicate it.\";\n    OpcodeDescriptionsBCH2022[\"OP_DEPTH\"] = \"Push the current number of stack items as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_DROP\"] = \"Pop the top item from the stack and discard it. (E.g. [a] -> [])\";\n    OpcodeDescriptionsBCH2022[\"OP_DUP\"] = \"Duplicate the top item on the stack. (E.g. [a] -> [a, a])\";\n    OpcodeDescriptionsBCH2022[\"OP_NIP\"] = \"Remove the second-to-top item from the stack. (E.g. [a, b] -> [b])\";\n    OpcodeDescriptionsBCH2022[\"OP_OVER\"] = \"Duplicate the second-to-top item on the stack. (E.g. [a, b] -> [a, b, a])\";\n    OpcodeDescriptionsBCH2022[\"OP_PICK\"] = \"Pop the top item from the stack as a VM Number. Duplicate the item at that depth (zero-indexed), placing it on top of the stack. (E.g. [a, b, c, 2] -> [a, b, c, a])\";\n    OpcodeDescriptionsBCH2022[\"OP_ROLL\"] = \"Pop the top item from the stack as a VM Number. Move the item at that depth (zero-indexed) to the top of the stack. (E.g. [a, b, c, 2] -> [b, c, a])\";\n    OpcodeDescriptionsBCH2022[\"OP_ROT\"] = \"Rotate the top 3 items on the stack, bringing the third item to the top. (E.g. [a, b, c] -> [b, c, a])\";\n    OpcodeDescriptionsBCH2022[\"OP_SWAP\"] = \"Swap the top two items on the stack. (E.g. [a, b] -> [b, a])\";\n    OpcodeDescriptionsBCH2022[\"OP_TUCK\"] = \"Duplicate the item at the top of the stack, inserting it below the second-to-top item. (E.g. [a, b] -> [b, a, b])\";\n    OpcodeDescriptionsBCH2022[\"OP_CAT\"] = \"Pop the top 2 items from the stack and concatenate them, pushing the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_SPLIT\"] = \"Pop the top item from the stack as an index (VM Number) and the next item as a byte array. Split the byte array into two stack items at the index (zero-based), pushing the results.\";\n    OpcodeDescriptionsBCH2022[\"OP_NUM2BIN\"] = \"Pop the top item from the stack as an item length (VM Number) and the next item as a VM Number (without encoding restrictions). Re-encode the number using a byte array of the provided length, filling any unused bytes with zeros, then push the result. (If the requested length is too short to encode the number, error.)\";\n    OpcodeDescriptionsBCH2022[\"OP_BIN2NUM\"] = \"Pop the top item from the stack as a VM Number without encoding restrictions. Minimally-encode the number and push the result. (If the number can't be encoded in 4 bytes or less, error.)\";\n    OpcodeDescriptionsBCH2022[\"OP_SIZE\"] = \"Push the byte-length of the top stack item as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_INVERT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this flipped all the bits in a stack item.)\";\n    OpcodeDescriptionsBCH2022[\"OP_AND\"] = \"Pop the top 2 items from the stack and perform a bitwise AND on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCH2022[\"OP_OR\"] = \"Pop the top 2 items from the stack and perform a bitwise OR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCH2022[\"OP_XOR\"] = \"Pop the top 2 items from the stack and perform a bitwise XOR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCH2022[\"OP_EQUAL\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If they are the same, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_EQUALVERIFY\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If the values are different, error. (This operation is a combination of OP_EQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2022[\"OP_RESERVED1\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_RESERVED2\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED2 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_1ADD\"] = \"Pop the top item from the stack as a VM Number, add 1, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_1SUB\"] = \"Pop the top item from the stack as a VM Number, subtract 1, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_2MUL\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this multiplied a VM Number by 2.)\";\n    OpcodeDescriptionsBCH2022[\"OP_2DIV\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this divided a VM Number by 2.)\";\n    OpcodeDescriptionsBCH2022[\"OP_NEGATE\"] = \"Pop the top item from the stack as a VM Number, negate it, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_ABS\"] = \"Pop the top item from the stack as a VM Number, take its absolute value, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOT\"] = \"Pop the top item from the stack as a VM Number. If its value is 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_0NOTEQUAL\"] = \"Pop the top item from the stack as a VM Number. If its value is not 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_ADD\"] = \"Pop the top two items from the stack as VM Numbers. Add them, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_SUB\"] = \"Pop the top two items from the stack as VM Numbers. Subtract the top item from the second item, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_MUL\"] = \"Pop the top two items from the stack as VM Numbers. Multiply them, then push the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_DIV\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the result to the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_MOD\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the remainder to the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_LSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, left bit shift.)\";\n    OpcodeDescriptionsBCH2022[\"OP_RSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, right bit shift.)\";\n    OpcodeDescriptionsBCH2022[\"OP_BOOLAND\"] = \"Pop the top two items from the stack as VM Numbers. If neither value is a 0 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_BOOLOR\"] = \"Pop the top two items from the stack as VM Numbers. If either value is a 1 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_NUMEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_NUMEQUALVERIFY\"] = \"Pop the top two items from the stack as VM Numbers. If the values are different, error. (This operation is a combination of OP_NUMEQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2022[\"OP_NUMNOTEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are not equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_LESSTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_GREATERTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_LESSTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_GREATERTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_MIN\"] = \"Pop the top two items from the stack as VM Numbers. Push the smaller of the two numbers.\";\n    OpcodeDescriptionsBCH2022[\"OP_MAX\"] = \"Pop the top two items from the stack as VM Numbers. Push the larger of the two numbers.\";\n    OpcodeDescriptionsBCH2022[\"OP_WITHIN\"] = \"Pop the top three items from the stack as VM Numbers. If the top number is within the range defined by the following two numbers (left-inclusive), push a 1 (VM Number). Otherwise, push a 0 (VM Number). (E.g. for [a, b, c]: if (b <= a), and (a < c), [1]. Else [0].)\";\n    OpcodeDescriptionsBCH2022[\"OP_RIPEMD160\"] = \"Pop the top item from the stack and pass it through ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_SHA1\"] = \"Pop the top item from the stack and pass it through sha1, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_SHA256\"] = \"Pop the top item from the stack and pass it through sha256, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_HASH160\"] = \"Pop the top item from the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_HASH256\"] = \"Pop the top item from the stack and pass it through sha256 twice, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_CODESEPARATOR\"] = \"Update the value of lastCodeSeparator to the instruction pointer's current value. (This reduces the coverage of signing serializations used in signature verification operations.)\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKSIG\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKSIGVERIFY\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is not valid, error. (This operation is a combination of OP_CHECKSIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKMULTISIG\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, pop a final VM Number that must be 0 due to a protocol bug. Checking each signature against each public key in order, if all signatures are valid \\u2013 and the required number of signatures have been provided \\u2013 push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKMULTISIGVERIFY\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, (due to a protocol bug) pop an unused final VM Number that must be 0. Checking each signature against each public key in order, if any signatures are invalid \\u2013 or the required number of signatures have not been provided \\u2013 error. (This operation is a combination of OP_CHECKMULTISIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP1\"] = \"No operation (reserved for future expansion). Note: OP_NOP1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKLOCKTIMEVERIFY\"] = \"Verify the transaction occurs after an absolute block time or height: read the top item on the stack as a VM Number (without removing it), and compare it to the transaction's locktime. If the required locktime has not passed, or if locktime has been disabled for this input by a maximized sequence number, error.\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKSEQUENCEVERIFY\"] = \"Verify the transaction occurs after the output being spent has \\\"aged\\\" by a relative block time or block height since it was created: read the top item on the stack as a VM Number (without removing it), and compare it to the age encoded in the input's sequence number. If the required relative locktime has not passed, or if relative locktime has been disabled by the sequence number or the transaction version, error.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP4\"] = \"No operation (reserved for future expansion). Note: OP_NOP4 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP6\"] = \"No operation (reserved for future expansion). Note: OP_NOP6 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP5\"] = \"No operation (reserved for future expansion). Note: OP_NOP5 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP7\"] = \"No operation (reserved for future expansion). Note: OP_NOP7 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP8\"] = \"No operation (reserved for future expansion). Note: OP_NOP8 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP9\"] = \"No operation (reserved for future expansion). Note: OP_NOP9 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_NOP10\"] = \"No operation (reserved for future expansion). Note: OP_NOP10 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKDATASIG\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCH2022[\"OP_CHECKDATASIGVERIFY\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is not valid, error. (This operation is a combination of OP_CHECKDATASIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCH2022[\"OP_REVERSEBYTES\"] = \"Pop the top item from the stack and reverse it, pushing the result.\";\n    OpcodeDescriptionsBCH2022[\"OP_INPUTINDEX\"] = \"Push the index of the input being evaluated to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_ACTIVEBYTECODE\"] = \"Push the bytecode currently being evaluated, beginning after the last executed OP_CODESEPARATOR, to the stack. For Pay-to-Script-Hash (P2SH) evaluations, this is the redeem bytecode of the Unspent Transaction Output (UTXO) being spent; for all other evaluations, this is the locking bytecode of the UTXO being spent.\";\n    OpcodeDescriptionsBCH2022[\"OP_TXVERSION\"] = \"Push the version of the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_TXINPUTCOUNT\"] = \"Push the count of inputs in the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_TXOUTPUTCOUNT\"] = \"Push the count of outputs in the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_TXLOCKTIME\"] = \"Push the locktime of the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_UTXOVALUE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the value (in satoshis) of the Unspent Transaction Output (UTXO) spent by that input to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_UTXOBYTECODE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the full locking bytecode of the Unspent Transaction Output (UTXO) spent by that input to the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_OUTPOINTTXHASH\"] = \"Pop the top item from the stack as an input index (VM Number). From that input, push the outpoint transaction hash \\u2013 the hash of the transaction that created the Unspent Transaction Output (UTXO) that is being spent \\u2013 to the stack in OP_HASH256 byte order.\";\n    OpcodeDescriptionsBCH2022[\"OP_OUTPOINTINDEX\"] = \"Pop the top item from the stack as an input index (VM Number). From that input, push the outpoint index \\u2013 the index of the output in the transaction that created the Unspent Transaction Output (UTXO) that is being spent \\u2013 to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_INPUTBYTECODE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the unlocking bytecode of the input at that index to the stack.\";\n    OpcodeDescriptionsBCH2022[\"OP_INPUTSEQUENCENUMBER\"] = \"Pop the top item from the stack as an input index (VM Number). Push the sequence number of the input at that index to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_OUTPUTVALUE\"] = \"Pop the top item from the stack as an output index (VM Number). Push the value (in satoshis) of the output at that index to the stack as a VM Number.\";\n    OpcodeDescriptionsBCH2022[\"OP_OUTPUTBYTECODE\"] = \"Pop the top item from the stack as an output index (VM Number). Push the locking bytecode of the output at that index to the stack.\";\n})(OpcodeDescriptionsBCH2022 || (OpcodeDescriptionsBCH2022 = {}));\n//# sourceMappingURL=bch-2022-descriptions.js.map", "export var AuthenticationErrorBCH2022;\n(function (AuthenticationErrorBCH2022) {\n    AuthenticationErrorBCH2022[\"exceededMaximumVmNumberLength\"] = \"Program attempted an OP_BIN2NUM operation on a byte sequence that cannot be encoded within the maximum VM Number length (8 bytes).\";\n})(AuthenticationErrorBCH2022 || (AuthenticationErrorBCH2022 = {}));\n//# sourceMappingURL=bch-2022-errors.js.map", "import { hexToBin } from '../../../../format/format.js';\nimport { encodeTransactionCommon, hashTransactionP2pOrder, } from '../../../../message/message.js';\n// TODO: replace with scenarios\nexport const createTestAuthenticationProgramBCH = ({ lockingBytecode, valueSatoshis, unlockingBytecode, }) => {\n    const testFundingTransaction = {\n        inputs: [\n            {\n                outpointIndex: 0xffffffff,\n                outpointTransactionHash: hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),\n                sequenceNumber: 0xffffffff,\n                unlockingBytecode: Uint8Array.of(0, 0),\n            },\n        ],\n        locktime: 0,\n        outputs: [{ lockingBytecode, valueSatoshis }],\n        version: 1,\n    };\n    const testSpendingTransaction = {\n        inputs: [\n            {\n                outpointIndex: 0,\n                outpointTransactionHash: hashTransactionP2pOrder(encodeTransactionCommon(testFundingTransaction)),\n                sequenceNumber: 0xffffffff,\n                unlockingBytecode,\n            },\n        ],\n        locktime: 0,\n        outputs: [{ lockingBytecode: Uint8Array.of(), valueSatoshis }],\n        version: 1,\n    };\n    return {\n        inputIndex: 0,\n        sourceOutputs: testFundingTransaction.outputs,\n        transaction: testSpendingTransaction,\n    };\n};\n//# sourceMappingURL=bch-2022-types.js.map", "import { createAuthenticationVirtualMachine } from '../../../virtual-machine.js';\nimport { createInstructionSetBCH2022 } from './bch-2022-instruction-set.js';\n/**\n * Initialize a virtual machine using the BCH instruction set.\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createVirtualMachineBCH2022 = (standard = true) => createAuthenticationVirtualMachine(createInstructionSetBCH2022(standard));\n//# sourceMappingURL=bch-2022-vm.js.map", "export * from './bch-chips-crypto.js';\nexport * from './bch-chips-descriptions.js';\nexport * from './bch-chips-errors.js';\nexport * from './bch-chips-instruction-set.js';\nexport * from './bch-chips-loops.js';\nexport * from './bch-chips-opcodes.js';\nexport * from './bch-chips-types.js';\nexport * from './bch-chips-vm.js';\n//# sourceMappingURL=bch-chips.js.map", "import { hash256, ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha1 as internalSha1, sha256 as internalSha256, } from '../../../../crypto/crypto.js';\nimport { binToHex } from '../../../../format/format.js';\nimport { applyError, AuthenticationErrorCommon, booleanToVmNumber, combineOperations, ConsensusCommon, decodeBitcoinSignature, encodeAuthenticationInstructions, generateSigningSerializationBCH, isValidPublicKeyEncoding, isValidSignatureEncodingBCHRaw, isValidSignatureEncodingBCHTransaction, opVerify, pushToStack, useOneStackItem, useOneVmNumber, useThreeStackItems, useTwoStackItems, } from '../../common/common.js';\nimport { SigningSerializationTypesBCH2023 } from '../2023/bch-2023.js';\nimport { AuthenticationErrorBCHCHIPs } from './bch-chips-errors.js';\nimport { ConsensusBCHCHIPs } from './bch-chips-types.js';\n/**\n * Given a message length, compute and return the number of hash digest\n * iterations required. (See `CHIP-2021-05-vm-limits`)\n */\nexport const hashDigestIterations = (messageLength) => \n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n1 + (((messageLength + 8) / 64) | 0);\n/**\n * Given a program state, increment the hash digest iteration count for a\n * message of the provided length. If the total would exceed the maximum, append\n * an error.\n *\n * @param state - the program state\n * @param messageLength - the message length\n * @param operation - the operation to execute if no error occurred\n */\nexport const incrementHashDigestIterations = (state, messageLength, operation) => {\n    const requiredTotalIterations = state.hashDigestIterations + hashDigestIterations(messageLength);\n    if (requiredTotalIterations > ConsensusBCHCHIPs.maximumHashDigestIterations) {\n        return applyError(state, AuthenticationErrorBCHCHIPs.excessiveHashing, `Required cumulative iterations: ${requiredTotalIterations}`);\n    }\n    return operation(state);\n};\nexport const opRipemd160ChipLimits = ({ ripemd160, } = { ripemd160: internalRipemd160 }) => (state) => useOneStackItem(state, (nextState, [value]) => incrementHashDigestIterations(nextState, value.length, (finalState) => pushToStack(finalState, ripemd160.hash(value))));\nexport const opSha1ChipLimits = ({ sha1, } = { sha1: internalSha1 }) => (state) => useOneStackItem(state, (nextState, [value]) => incrementHashDigestIterations(nextState, value.length, (finalState) => pushToStack(finalState, sha1.hash(value))));\nexport const opSha256ChipLimits = ({ sha256, } = { sha256: internalSha256 }) => (state) => useOneStackItem(state, (nextState, [value]) => incrementHashDigestIterations(nextState, value.length, (finalState) => pushToStack(finalState, sha256.hash(value))));\nexport const opHash160ChipLimits = ({ ripemd160, sha256, } = { ripemd160: internalRipemd160, sha256: internalSha256 }) => (state) => useOneStackItem(state, (nextState, [value]) => incrementHashDigestIterations(nextState, value.length, (finalState) => pushToStack(finalState, ripemd160.hash(sha256.hash(value)))));\nexport const opHash256ChipLimits = ({ sha256, } = { sha256: internalSha256 }) => (state) => useOneStackItem(state, (nextState, [value]) => incrementHashDigestIterations(nextState, value.length, (finalState) => pushToStack(finalState, hash256(value, sha256))));\nexport const opCheckSigChipLimits = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => (s) => \n// eslint-disable-next-line complexity\nuseTwoStackItems(s, (state, [bitcoinEncodedSignature, publicKey]) => {\n    if (!isValidPublicKeyEncoding(publicKey)) {\n        return applyError(state, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n    }\n    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature, SigningSerializationTypesBCH2023)) {\n        return applyError(state, AuthenticationErrorCommon.invalidSignatureEncoding, `Transaction signature (including signing serialization type): ${binToHex(bitcoinEncodedSignature)}`);\n    }\n    const coveredBytecode = encodeAuthenticationInstructions(state.instructions).subarray(state.lastCodeSeparator + 1);\n    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);\n    const serialization = generateSigningSerializationBCH(state.program, { coveredBytecode, signingSerializationType }, sha256);\n    const requiredTotalIterations = state.hashDigestIterations + hashDigestIterations(serialization.length);\n    if (requiredTotalIterations > ConsensusBCHCHIPs.maximumHashDigestIterations) {\n        return applyError(state, AuthenticationErrorBCHCHIPs.excessiveHashing, `Required cumulative iterations: ${requiredTotalIterations}`);\n    }\n    const digest = hash256(serialization, sha256);\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.signedMessages.push({ digest, serialization });\n    const useSchnorr = signature.length === ConsensusCommon.schnorrSignatureLength;\n    const success = useSchnorr\n        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)\n        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n    return !success && signature.length !== 0\n        ? applyError(state, AuthenticationErrorCommon.nonNullSignatureFailure)\n        : pushToStack(state, booleanToVmNumber(success));\n});\n// TODO: implement schnorr multisig https://gitlab.com/bitcoin-cash-node/bchn-sw/bitcoincash-upgrade-specifications/-/blob/master/spec/2019-11-15-schnorrmultisig.md\nexport const opCheckMultiSigChipLimits = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => (s) => useOneVmNumber(s, (state, publicKeysValue) => {\n    const potentialPublicKeys = Number(publicKeysValue);\n    if (potentialPublicKeys < 0) {\n        return applyError(state, AuthenticationErrorCommon.invalidNaturalNumber);\n    }\n    if (potentialPublicKeys > 20 /* Multisig.maximumPublicKeys */) {\n        return applyError(state, AuthenticationErrorCommon.exceedsMaximumMultisigPublicKeyCount);\n    }\n    const publicKeys = \n    // eslint-disable-next-line functional/immutable-data\n    potentialPublicKeys > 0 ? state.stack.splice(-potentialPublicKeys) : [];\n    return useOneVmNumber(state, (nextState, approvingKeys) => {\n        const requiredApprovingPublicKeys = Number(approvingKeys);\n        if (requiredApprovingPublicKeys < 0) {\n            return applyError(nextState, AuthenticationErrorCommon.invalidNaturalNumber);\n        }\n        if (requiredApprovingPublicKeys > potentialPublicKeys) {\n            return applyError(nextState, AuthenticationErrorCommon.insufficientPublicKeys);\n        }\n        const signatures = requiredApprovingPublicKeys > 0\n            ? // eslint-disable-next-line functional/immutable-data\n                nextState.stack.splice(-requiredApprovingPublicKeys)\n            : [];\n        return useOneStackItem(nextState, \n        // eslint-disable-next-line complexity\n        (finalState, [protocolBugValue]) => {\n            if (protocolBugValue.length !== 0) {\n                return applyError(finalState, AuthenticationErrorCommon.invalidProtocolBugValue);\n            }\n            const coveredBytecode = encodeAuthenticationInstructions(finalState.instructions).subarray(finalState.lastCodeSeparator + 1);\n            let approvingPublicKeys = 0; // eslint-disable-line functional/no-let\n            let remainingSignatures = signatures.length; // eslint-disable-line functional/no-let\n            let remainingPublicKeys = publicKeys.length; // eslint-disable-line functional/no-let\n            // eslint-disable-next-line functional/no-loop-statement\n            while (remainingSignatures > 0 &&\n                remainingPublicKeys > 0 &&\n                approvingPublicKeys + remainingPublicKeys >=\n                    remainingSignatures &&\n                approvingPublicKeys !== requiredApprovingPublicKeys) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const publicKey = publicKeys[remainingPublicKeys - 1];\n                const bitcoinEncodedSignature = \n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                signatures[remainingSignatures - 1];\n                if (!isValidPublicKeyEncoding(publicKey)) {\n                    return applyError(finalState, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n                }\n                if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature, SigningSerializationTypesBCH2023)) {\n                    return applyError(finalState, AuthenticationErrorCommon.invalidSignatureEncoding, `Transaction signature (including signing serialization type): ${binToHex(bitcoinEncodedSignature)}`);\n                }\n                const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);\n                const serialization = generateSigningSerializationBCH(state.program, { coveredBytecode, signingSerializationType }, sha256);\n                const requiredTotalIterations = state.hashDigestIterations +\n                    hashDigestIterations(serialization.length);\n                if (requiredTotalIterations >\n                    ConsensusBCHCHIPs.maximumHashDigestIterations) {\n                    return applyError(state, AuthenticationErrorBCHCHIPs.excessiveHashing, `Required cumulative iterations: ${requiredTotalIterations}`);\n                }\n                const digest = hash256(serialization, sha256);\n                // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n                finalState.signedMessages.push({ digest, serialization });\n                if (signature.length === ConsensusCommon.schnorrSignatureLength) {\n                    return applyError(finalState, AuthenticationErrorCommon.schnorrSizedSignatureInCheckMultiSig);\n                }\n                const signed = secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n                // eslint-disable-next-line functional/no-conditional-statement\n                if (signed) {\n                    approvingPublicKeys += 1; // eslint-disable-line functional/no-expression-statement\n                    remainingSignatures -= 1; // eslint-disable-line functional/no-expression-statement\n                }\n                remainingPublicKeys -= 1; // eslint-disable-line functional/no-expression-statement\n            }\n            const success = approvingPublicKeys === requiredApprovingPublicKeys;\n            if (!success &&\n                !signatures.every((signature) => signature.length === 0)) {\n                return applyError(finalState, AuthenticationErrorCommon.nonNullSignatureFailure);\n            }\n            return pushToStack(finalState, booleanToVmNumber(success));\n        });\n    });\n});\nexport const opCheckSigVerifyChipLimits = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => combineOperations(opCheckSigChipLimits({ secp256k1, sha256 }), opVerify);\nexport const opCheckMultiSigVerifyChipLimits = ({ secp256k1, sha256, }) => combineOperations(opCheckMultiSigChipLimits({ secp256k1, sha256 }), opVerify);\nexport const opCheckDataSigChipLimits = ({ secp256k1, sha256, }) => (state) => \n// eslint-disable-next-line complexity\nuseThreeStackItems(state, (nextState, [signature, message, publicKey]) => {\n    if (!isValidSignatureEncodingBCHRaw(signature)) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidSignatureEncoding, `Data signature: ${binToHex(signature)}`);\n    }\n    if (!isValidPublicKeyEncoding(publicKey)) {\n        return applyError(nextState, AuthenticationErrorCommon.invalidPublicKeyEncoding);\n    }\n    const requiredTotalIterations = state.hashDigestIterations + hashDigestIterations(message.length);\n    if (requiredTotalIterations > ConsensusBCHCHIPs.maximumHashDigestIterations) {\n        return applyError(state, AuthenticationErrorBCHCHIPs.excessiveHashing, `Required cumulative iterations: ${requiredTotalIterations}`);\n    }\n    const digest = sha256.hash(message);\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    nextState.signedMessages.push({ digest, message });\n    const useSchnorr = signature.length === ConsensusCommon.schnorrSignatureLength;\n    const success = useSchnorr\n        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)\n        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);\n    return !success && signature.length !== 0\n        ? applyError(nextState, AuthenticationErrorCommon.nonNullSignatureFailure)\n        : pushToStack(nextState, booleanToVmNumber(success));\n});\nexport const opCheckDataSigVerifyChipLimits = ({ secp256k1, sha256, } = { secp256k1: internalSecp256k1, sha256: internalSha256 }) => combineOperations(opCheckDataSigChipLimits({ secp256k1, sha256 }), opVerify);\n//# sourceMappingURL=bch-chips-crypto.js.map", "export var AuthenticationErrorBCHCHIPs;\n(function (AuthenticationErrorBCHCHIPs) {\n    AuthenticationErrorBCHCHIPs[\"invalidBoolean\"] = \"Invalid input: this operation requires a valid boolean (VM Number 0 or VM Number 1).\";\n    AuthenticationErrorBCHCHIPs[\"unexpectedUntil\"] = \"Encountered an OP_UNTIL that is not following a matching OP_BEGIN.\";\n    AuthenticationErrorBCHCHIPs[\"excessiveHashing\"] = \"Program attempted a hashing operation that would exceed the hashing limit (660 hash digest iterations).\";\n    AuthenticationErrorBCHCHIPs[\"excessiveLooping\"] = \"Program attempted an OP_UNTIL operation that would exceed the limit of repeated bytes (10,000 bytes minus active bytecode length).\";\n})(AuthenticationErrorBCHCHIPs || (AuthenticationErrorBCHCHIPs = {}));\n//# sourceMappingURL=bch-chips-errors.js.map", "import { cloneAuthenticationInstruction, cloneAuthenticationProgramCommon, cloneStack, } from '../../common/common.js';\n/**\n * Consensus settings for the `BCH_CHIPs` instruction set.\n */\nexport var ConsensusBCHCHIPs;\n(function (ConsensusBCHCHIPs) {\n    ConsensusBCHCHIPs[ConsensusBCHCHIPs[\"maximumTransactionVersion\"] = 2] = \"maximumTransactionVersion\";\n    ConsensusBCHCHIPs[ConsensusBCHCHIPs[\"bannedTransactionSize\"] = 64] = \"bannedTransactionSize\";\n    ConsensusBCHCHIPs[ConsensusBCHCHIPs[\"maximumHashDigestIterations\"] = 660] = \"maximumHashDigestIterations\";\n})(ConsensusBCHCHIPs || (ConsensusBCHCHIPs = {}));\nexport const cloneAuthenticationProgramStateBCHCHIPs = (state) => ({\n    ...(state.error === undefined ? {} : { error: state.error }),\n    alternateStack: cloneStack(state.alternateStack),\n    controlStack: state.controlStack.slice(),\n    hashDigestIterations: state.hashDigestIterations,\n    instructions: state.instructions.map(cloneAuthenticationInstruction),\n    ip: state.ip,\n    lastCodeSeparator: state.lastCodeSeparator,\n    program: cloneAuthenticationProgramCommon(state.program),\n    repeatedBytes: state.repeatedBytes,\n    signedMessages: state.signedMessages.map((item) => ({\n        digest: item.digest.slice(),\n        ...('serialization' in item\n            ? { serialization: item.serialization.slice() }\n            : { message: item.message.slice() }),\n    })),\n    stack: cloneStack(state.stack),\n});\nexport const createAuthenticationProgramStateBCHCHIPs = ({ program, instructions, stack, }) => ({\n    alternateStack: [],\n    controlStack: [],\n    hashDigestIterations: 0,\n    instructions,\n    ip: 0,\n    lastCodeSeparator: -1,\n    program,\n    repeatedBytes: 0,\n    signedMessages: [],\n    stack,\n});\n//# sourceMappingURL=bch-chips-types.js.map", "export var OpcodeDescriptionsBCHCHIPs;\n(function (OpcodeDescriptionsBCHCHIPs) {\n    OpcodeDescriptionsBCHCHIPs[\"OP_0\"] = \"Push the VM Number 0 onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_1\"] = \"Push the next byte onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_2\"] = \"Push the next 2 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_3\"] = \"Push the next 3 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_4\"] = \"Push the next 4 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_5\"] = \"Push the next 5 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_6\"] = \"Push the next 6 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_7\"] = \"Push the next 7 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_8\"] = \"Push the next 8 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_9\"] = \"Push the next 9 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_10\"] = \"Push the next 10 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_11\"] = \"Push the next 11 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_12\"] = \"Push the next 12 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_13\"] = \"Push the next 13 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_14\"] = \"Push the next 14 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_15\"] = \"Push the next 15 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_16\"] = \"Push the next 16 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_17\"] = \"Push the next 17 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_18\"] = \"Push the next 18 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_19\"] = \"Push the next 19 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_20\"] = \"Push the next 20 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_21\"] = \"Push the next 21 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_22\"] = \"Push the next 22 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_23\"] = \"Push the next 23 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_24\"] = \"Push the next 24 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_25\"] = \"Push the next 25 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_26\"] = \"Push the next 26 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_27\"] = \"Push the next 27 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_28\"] = \"Push the next 28 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_29\"] = \"Push the next 29 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_30\"] = \"Push the next 30 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_31\"] = \"Push the next 31 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_32\"] = \"Push the next 32 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_33\"] = \"Push the next 33 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_34\"] = \"Push the next 34 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_35\"] = \"Push the next 35 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_36\"] = \"Push the next 36 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_37\"] = \"Push the next 37 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_38\"] = \"Push the next 38 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_39\"] = \"Push the next 39 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_40\"] = \"Push the next 40 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_41\"] = \"Push the next 41 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_42\"] = \"Push the next 42 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_43\"] = \"Push the next 43 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_44\"] = \"Push the next 44 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_45\"] = \"Push the next 45 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_46\"] = \"Push the next 46 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_47\"] = \"Push the next 47 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_48\"] = \"Push the next 48 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_49\"] = \"Push the next 49 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_50\"] = \"Push the next 50 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_51\"] = \"Push the next 51 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_52\"] = \"Push the next 52 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_53\"] = \"Push the next 53 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_54\"] = \"Push the next 54 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_55\"] = \"Push the next 55 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_56\"] = \"Push the next 56 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_57\"] = \"Push the next 57 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_58\"] = \"Push the next 58 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_59\"] = \"Push the next 59 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_60\"] = \"Push the next 60 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_61\"] = \"Push the next 61 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_62\"] = \"Push the next 62 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_63\"] = \"Push the next 63 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_64\"] = \"Push the next 64 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_65\"] = \"Push the next 65 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_66\"] = \"Push the next 66 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_67\"] = \"Push the next 67 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_68\"] = \"Push the next 68 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_69\"] = \"Push the next 69 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_70\"] = \"Push the next 70 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_71\"] = \"Push the next 71 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_72\"] = \"Push the next 72 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_73\"] = \"Push the next 73 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_74\"] = \"Push the next 74 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHBYTES_75\"] = \"Push the next 75 bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHDATA_1\"] = \"Read the next Uint8 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHDATA_2\"] = \"Read the next little-endian Uint16 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PUSHDATA_4\"] = \"Read the next little-endian Uint32 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_1NEGATE\"] = \"Push the VM Number -1 onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_RESERVED\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED does not count toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_1\"] = \"Push a 1 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2\"] = \"Push a 2 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_3\"] = \"Push a 3 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_4\"] = \"Push a 4 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_5\"] = \"Push a 5 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_6\"] = \"Push a 6 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_7\"] = \"Push a 7 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_8\"] = \"Push a 8 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_9\"] = \"Push a 9 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_10\"] = \"Push a 10 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_11\"] = \"Push a 11 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_12\"] = \"Push a 12 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_13\"] = \"Push a 13 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_14\"] = \"Push a 14 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_15\"] = \"Push a 15 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_16\"] = \"Push a 16 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP\"] = \"No operation. Note: OP_NOP counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_VER\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_VER counts toward the opcode limit. (Historically, this pushed a protocol version number to the stack.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_IF\"] = \"Pop the top item from the stack. If it is not \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOTIF\"] = \"Pop the top item from the stack. If it is \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_BEGIN\"] = \"Push the current instruction pointer index to the control stack as an integer (to be read by OP_UNTIL).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_UNTIL\"] = \"Pop the top item from the control stack (if the control value is not an integer, error). Add the difference between the control value and the current instruction pointer index to the repeated bytes counter, if the sum of the repeated bytes counter and the active bytecode length is greater than the maximum bytecode length, error. Pop the top item from the stack, if the value is a 0 (VM Number), move the instruction pointer to the control value (and re-evaluate the OP_BEGIN).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ELSE\"] = \"Invert conditional evaluation within the current OP_IF ... OP_ENDIF block. (If evaluation is enabled, disable it, if it is disabled, enable it.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ENDIF\"] = \"End the current OP_IF/OP_NOTIF ... OP_ENDIF block.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_VERIFY\"] = \"Pop the top item from the stack and error if it isn't \\\"truthy\\\".\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_RETURN\"] = \"Error when executed.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_TOALTSTACK\"] = \"Pop the top item from the stack and push it onto the alternate stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_FROMALTSTACK\"] = \"Pop the top item from the alternate stack and push it onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2DROP\"] = \"Pop the top 2 items from the stack and discard them.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2DUP\"] = \"Duplicate the top 2 items on the stack. (E.g. [a, b] -> [a, b, a, b])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_3DUP\"] = \"Duplicate the top 3 items on the stack. (E.g. [a, b, c] -> [a, b, c, a, b, c])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2OVER\"] = \"Duplicate the 2 items beginning at a depth of 2 on the stack. (E.g. [a, b, c, d] -> [a, b, c, d, a, b])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2ROT\"] = \"Rotate the top 6 items on the stack, bringing the fifth and sixth items to the top. (E.g. [a, b, c, d, e, f] -> [c, d, e, f, a, b])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2SWAP\"] = \"Swap the positions of the top two pairs of items on the stack. (E.g. [a, b, c, d] -> [c, d, a, b])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_IFDUP\"] = \"If the top item on the stack is \\\"truthy\\\", duplicate it.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_DEPTH\"] = \"Push the current number of stack items as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_DROP\"] = \"Pop the top item from the stack and discard it. (E.g. [a] -> [])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_DUP\"] = \"Duplicate the top item on the stack. (E.g. [a] -> [a, a])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NIP\"] = \"Remove the second-to-top item from the stack. (E.g. [a, b] -> [b])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OVER\"] = \"Duplicate the second-to-top item on the stack. (E.g. [a, b] -> [a, b, a])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_PICK\"] = \"Pop the top item from the stack as a VM Number. Duplicate the item at that depth (zero-indexed), placing it on top of the stack. (E.g. [a, b, c, 2] -> [a, b, c, a])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ROLL\"] = \"Pop the top item from the stack as a VM Number. Move the item at that depth (zero-indexed) to the top of the stack. (E.g. [a, b, c, 2] -> [b, c, a])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ROT\"] = \"Rotate the top 3 items on the stack, bringing the third item to the top. (E.g. [a, b, c] -> [b, c, a])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_SWAP\"] = \"Swap the top two items on the stack. (E.g. [a, b] -> [b, a])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_TUCK\"] = \"Duplicate the item at the top of the stack, inserting it below the second-to-top item. (E.g. [a, b] -> [b, a, b])\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CAT\"] = \"Pop the top 2 items from the stack and concatenate them, pushing the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_SPLIT\"] = \"Pop the top item from the stack as an index (VM Number) and the next item as a byte array. Split the byte array into two stack items at the index (zero-based), pushing the results.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NUM2BIN\"] = \"Pop the top item from the stack as an item length (VM Number) and the next item as a VM Number (without encoding restrictions). Re-encode the number using a byte array of the provided length, filling any unused bytes with zeros, then push the result. (If the requested length is too short to encode the number, error.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_BIN2NUM\"] = \"Pop the top item from the stack as a VM Number without encoding restrictions. Minimally-encode the number and push the result. (If the number can't be encoded in 4 bytes or less, error.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_SIZE\"] = \"Push the byte-length of the top stack item as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_INVERT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this flipped all the bits in a stack item.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_AND\"] = \"Pop the top 2 items from the stack and perform a bitwise AND on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OR\"] = \"Pop the top 2 items from the stack and perform a bitwise OR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_XOR\"] = \"Pop the top 2 items from the stack and perform a bitwise XOR on each byte, pushing the result. If the length of the items are not equal, error.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_EQUAL\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If they are the same, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_EQUALVERIFY\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If the values are different, error. (This operation is a combination of OP_EQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_RESERVED1\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_RESERVED2\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED2 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_1ADD\"] = \"Pop the top item from the stack as a VM Number, add 1, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_1SUB\"] = \"Pop the top item from the stack as a VM Number, subtract 1, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2MUL\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this multiplied a VM Number by 2.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_2DIV\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this divided a VM Number by 2.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NEGATE\"] = \"Pop the top item from the stack as a VM Number, negate it, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ABS\"] = \"Pop the top item from the stack as a VM Number, take its absolute value, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOT\"] = \"Pop the top item from the stack as a VM Number. If its value is 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_0NOTEQUAL\"] = \"Pop the top item from the stack as a VM Number. If its value is not 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ADD\"] = \"Pop the top two items from the stack as VM Numbers. Add them, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_SUB\"] = \"Pop the top two items from the stack as VM Numbers. Subtract the top item from the second item, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_MUL\"] = \"Pop the top two items from the stack as VM Numbers. Multiply them, then push the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_DIV\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the result to the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_MOD\"] = \"Pop the top item from the stack as a denominator (VM Number) and the next as a numerator (VM Number). Divide and push the remainder to the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_LSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, left bit shift.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_RSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, right bit shift.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_BOOLAND\"] = \"Pop the top two items from the stack as VM Numbers. If neither value is a 0 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_BOOLOR\"] = \"Pop the top two items from the stack as VM Numbers. If either value is a 1 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NUMEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NUMEQUALVERIFY\"] = \"Pop the top two items from the stack as VM Numbers. If the values are different, error. (This operation is a combination of OP_NUMEQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NUMNOTEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are not equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_LESSTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_GREATERTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_LESSTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_GREATERTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_MIN\"] = \"Pop the top two items from the stack as VM Numbers. Push the smaller of the two numbers.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_MAX\"] = \"Pop the top two items from the stack as VM Numbers. Push the larger of the two numbers.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_WITHIN\"] = \"Pop the top three items from the stack as VM Numbers. If the top number is within the range defined by the following two numbers (left-inclusive), push a 1 (VM Number). Otherwise, push a 0 (VM Number). (E.g. for [a, b, c]: if (b <= a), and (a < c), [1]. Else [0].)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_RIPEMD160\"] = \"Pop the top item from the stack and pass it through ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_SHA1\"] = \"Pop the top item from the stack and pass it through sha1, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_SHA256\"] = \"Pop the top item from the stack and pass it through sha256, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_HASH160\"] = \"Pop the top item from the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_HASH256\"] = \"Pop the top item from the stack and pass it through sha256 twice, pushing the result onto the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CODESEPARATOR\"] = \"Update the value of lastCodeSeparator to the instruction pointer's current value. (This reduces the coverage of signing serializations used in signature verification operations.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKSIG\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKSIGVERIFY\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is not valid, error. (This operation is a combination of OP_CHECKSIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKMULTISIG\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, pop a final VM Number that must be 0 due to a protocol bug. Checking each signature against each public key in order, if all signatures are valid \\u2013 and the required number of signatures have been provided \\u2013 push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKMULTISIGVERIFY\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, (due to a protocol bug) pop an unused final VM Number that must be 0. Checking each signature against each public key in order, if any signatures are invalid \\u2013 or the required number of signatures have not been provided \\u2013 error. (This operation is a combination of OP_CHECKMULTISIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP1\"] = \"No operation (reserved for future expansion). Note: OP_NOP1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKLOCKTIMEVERIFY\"] = \"Verify the transaction occurs after an absolute block time or height: read the top item on the stack as a VM Number (without removing it), and compare it to the transaction's locktime. If the required locktime has not passed, or if locktime has been disabled for this input by a maximized sequence number, error.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKSEQUENCEVERIFY\"] = \"Verify the transaction occurs after the output being spent has \\\"aged\\\" by a relative block time or block height since it was created: read the top item on the stack as a VM Number (without removing it), and compare it to the age encoded in the input's sequence number. If the required relative locktime has not passed, or if relative locktime has been disabled by the sequence number or the transaction version, error.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP4\"] = \"No operation (reserved for future expansion). Note: OP_NOP4 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP6\"] = \"No operation (reserved for future expansion). Note: OP_NOP6 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP5\"] = \"No operation (reserved for future expansion). Note: OP_NOP5 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP7\"] = \"No operation (reserved for future expansion). Note: OP_NOP7 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP8\"] = \"No operation (reserved for future expansion). Note: OP_NOP8 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP9\"] = \"No operation (reserved for future expansion). Note: OP_NOP9 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_NOP10\"] = \"No operation (reserved for future expansion). Note: OP_NOP10 counts toward the opcode limit.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKDATASIG\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_CHECKDATASIGVERIFY\"] = \"Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is not valid, error. (This operation is a combination of OP_CHECKDATASIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_REVERSEBYTES\"] = \"Pop the top item from the stack and reverse it, pushing the result.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_INPUTINDEX\"] = \"Push the index of the input being evaluated to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_ACTIVEBYTECODE\"] = \"Push the bytecode currently being evaluated, beginning after the last executed OP_CODESEPARATOR, to the stack. For Pay-to-Script-Hash (P2SH) evaluations, this is the redeem bytecode of the Unspent Transaction Output (UTXO) being spent; for all other evaluations, this is the locking bytecode of the UTXO being spent.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_TXVERSION\"] = \"Push the version of the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_TXINPUTCOUNT\"] = \"Push the count of inputs in the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_TXOUTPUTCOUNT\"] = \"Push the count of outputs in the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_TXLOCKTIME\"] = \"Push the locktime of the current transaction to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_UTXOVALUE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the value (in satoshis) of the Unspent Transaction Output (UTXO) spent by that input to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_UTXOBYTECODE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the full locking bytecode of the Unspent Transaction Output (UTXO) spent by that input to the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPOINTTXHASH\"] = \"Pop the top item from the stack as an input index (VM Number). From that input, push the outpoint transaction hash \\u2013 the hash of the transaction that created the Unspent Transaction Output (UTXO) that is being spent \\u2013 to the stack in OP_HASH256 byte order.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPOINTINDEX\"] = \"Pop the top item from the stack as an input index (VM Number). From that input, push the outpoint index \\u2013 the index of the output in the transaction that created the Unspent Transaction Output (UTXO) that is being spent \\u2013 to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_INPUTBYTECODE\"] = \"Pop the top item from the stack as an input index (VM Number). Push the unlocking bytecode of the input at that index to the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_INPUTSEQUENCENUMBER\"] = \"Pop the top item from the stack as an input index (VM Number). Push the sequence number of the input at that index to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPUTVALUE\"] = \"Pop the top item from the stack as an output index (VM Number). Push the value (in satoshis) of the output at that index to the stack as a VM Number.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPUTBYTECODE\"] = \"Pop the top item from the stack as an output index (VM Number). Push the locking bytecode of the output at that index to the stack.\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_UTXOTOKENCATEGORY\"] = \"Pop the top item from the stack as an input index (VM Number). If the Unspent Transaction Output (UTXO) spent by that input includes no tokens, push a 0 (VM Number) to the stack. If the UTXO does not include a non-fungible token with a capability, push the UTXO's token category, otherwise, push the concatenation of the token category and capability, where the mutable capability is represented by 1 (VM Number) and the minting capability is represented by 2 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_UTXOTOKENCOMMITMENT\"] = \"Pop the top item from the stack as an input index (VM Number). Push the token commitment of the Unspent Transaction Output (UTXO) spent by that input to the stack. If the UTXO does not include a non-fungible token, or if it includes a non-fungible token with a zero-length commitment, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_UTXOTOKENAMOUNT\"] = \"Pop the top item from the stack as an input index (VM Number). Push the fungible token amount of the Unspent Transaction Output (UTXO) spent by that input to the stack as a VM Number. If the UTXO includes no fungible tokens, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPUTTOKENCATEGORY\"] = \"Pop the top item from the stack as an output index (VM Number). If the output spent by that input includes no tokens, push a 0 (VM Number) to the stack. If the output does not include a non-fungible token with a capability, push the output's token category, otherwise, push the concatenation of the token category and capability, where the mutable capability is represented by 1 (VM Number) and the minting capability is represented by 2 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPUTTOKENCOMMITMENT\"] = \"Pop the top item from the stack as an output index (VM Number). Push the token commitment of the output at that index to the stack. If the output does not include a non-fungible token, or if it includes a non-fungible token with a zero-length commitment, push a 0 (VM Number).\";\n    OpcodeDescriptionsBCHCHIPs[\"OP_OUTPUTTOKENAMOUNT\"] = \"Pop the top item from the stack as an output index (VM Number). Push the fungible token amount of the output at that index to the stack as a VM Number. If the output includes no fungible tokens, push a 0 (VM Number).\";\n})(OpcodeDescriptionsBCHCHIPs || (OpcodeDescriptionsBCHCHIPs = {}));\n//# sourceMappingURL=bch-chips-descriptions.js.map", "import { isPayToScriptHash20 } from '../../../../address/address.js';\nimport { ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha1 as internalSha1, sha256 as internalSha256, } from '../../../../crypto/crypto.js';\nimport { encodeTransactionBCH } from '../../../../message/message.js';\nimport { applyError, AuthenticationErrorCommon, authenticationInstructionsAreMalformed, cloneStack, ConsensusBCH, decodeAuthenticationInstructions, disabledOperation, isArbitraryDataOutput, isPushOnly, isStandardOutputBytecode, isWitnessProgram, op0NotEqual, op1Add, op1Sub, op2Drop, op2Dup, op2Over, op2Rot, op2Swap, op3Dup, opAbs, opActiveBytecode, opAdd, opAnd, opBin2Num, opBoolAnd, opBoolOr, opCat, opCheckDataSig, opCheckDataSigVerify, opCheckLockTimeVerify, opCheckSequenceVerify, opCodeSeparator, opDepth, opDiv, opDrop, opDup, opEqual, opEqualVerify, opFromAltStack, opGreaterThan, opGreaterThanOrEqual, opHash160, opHash256, opIfDup, opInputBytecode, opInputIndex, opInputSequenceNumber, opLessThan, opLessThanOrEqual, opMax, opMin, opMod, opMul, opNegate, opNip, opNop, opNopDisallowed, opNot, opNum2Bin, opNumEqual, opNumEqualVerify, opNumNotEqual, opOr, opOutpointIndex, opOutpointTxHash, opOutputBytecode, opOutputValue, opOver, opPick, opReturn, opReverseBytes, opRipemd160, opRoll, opRot, opSha1, opSha256, opSize, opSplit, opSub, opSwap, opToAltStack, opTuck, opTxInputCount, opTxLocktime, opTxOutputCount, opTxVersion, opUtxoBytecode, opUtxoValue, opVerify, opWithin, opXor, pushNumberOperation, reservedOperation, stackItemIsTruthy, } from '../../common/common.js';\nimport { opOutputTokenAmount, opOutputTokenCategory, opOutputTokenCommitment, opUtxoTokenAmount, opUtxoTokenCategory, opUtxoTokenCommitment, } from '../2023/bch-2023.js';\nimport { opCheckMultiSigChipLimits, opCheckMultiSigVerifyChipLimits, opCheckSigChipLimits, opCheckSigVerifyChipLimits, } from './bch-chips-crypto.js';\nimport { conditionallyEvaluateChipLoops, opBegin, opElseChipLoops, opEndIfChipLoops, opIfChipLoops, opNotIfChipLoops, opUntil, pushOperationChipLoops, undefinedOperationChipLoops, } from './bch-chips-loops.js';\nimport { OpcodesBCHCHIPs } from './bch-chips-opcodes.js';\nimport { cloneAuthenticationProgramStateBCHCHIPs, createAuthenticationProgramStateBCHCHIPs, } from './bch-chips-types.js';\n/**\n * create an instance of the BCH CHIPs virtual machine instruction set, an\n * informal, speculative instruction set that implements a variety of future\n * Bitcoin Cash Improvement Proposals (CHIPs).\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createInstructionSetBCHCHIPs = (standard = true, { ripemd160, secp256k1, sha1, sha256, } = {\n    ripemd160: internalRipemd160,\n    secp256k1: internalSecp256k1,\n    sha1: internalSha1,\n    sha256: internalSha256,\n}) => {\n    const conditionallyPush = pushOperationChipLoops();\n    return {\n        clone: cloneAuthenticationProgramStateBCHCHIPs,\n        continue: (state) => state.error === undefined && state.ip < state.instructions.length,\n        // eslint-disable-next-line complexity\n        evaluate: (program, stateEvaluate) => {\n            const { unlockingBytecode } = \n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            program.transaction.inputs[program.inputIndex];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const { lockingBytecode } = program.sourceOutputs[program.inputIndex];\n            const unlockingInstructions = decodeAuthenticationInstructions(unlockingBytecode);\n            const lockingInstructions = decodeAuthenticationInstructions(lockingBytecode);\n            const initialState = createAuthenticationProgramStateBCHCHIPs({\n                instructions: unlockingInstructions,\n                program,\n                stack: [],\n            });\n            if (unlockingBytecode.length > ConsensusBCH.maximumBytecodeLength) {\n                return applyError(initialState, `The provided unlocking bytecode (${unlockingBytecode.length} bytes) exceeds the maximum bytecode length (${ConsensusBCH.maximumBytecodeLength} bytes).`);\n            }\n            if (authenticationInstructionsAreMalformed(unlockingInstructions)) {\n                return applyError(initialState, AuthenticationErrorCommon.malformedUnlockingBytecode);\n            }\n            if (!isPushOnly(unlockingBytecode)) {\n                return applyError(initialState, AuthenticationErrorCommon.requiresPushOnly);\n            }\n            if (lockingBytecode.length > ConsensusBCH.maximumBytecodeLength) {\n                return applyError(initialState, AuthenticationErrorCommon.exceededMaximumBytecodeLengthLocking);\n            }\n            if (authenticationInstructionsAreMalformed(lockingInstructions)) {\n                return applyError(initialState, AuthenticationErrorCommon.malformedLockingBytecode);\n            }\n            const unlockingResult = stateEvaluate(initialState);\n            if (unlockingResult.error !== undefined) {\n                return unlockingResult;\n            }\n            if (unlockingResult.controlStack.length !== 0) {\n                return applyError(initialState, AuthenticationErrorCommon.nonEmptyControlStack);\n            }\n            const lockingResult = stateEvaluate(createAuthenticationProgramStateBCHCHIPs({\n                instructions: lockingInstructions,\n                program,\n                stack: unlockingResult.stack,\n            }));\n            if (!isPayToScriptHash20(lockingBytecode)) {\n                return lockingResult;\n            }\n            const p2shStack = cloneStack(unlockingResult.stack);\n            // eslint-disable-next-line functional/immutable-data\n            const p2shScript = p2shStack.pop() ?? Uint8Array.of();\n            if (p2shStack.length === 0 && isWitnessProgram(p2shScript)) {\n                return lockingResult;\n            }\n            const p2shInstructions = decodeAuthenticationInstructions(p2shScript);\n            return authenticationInstructionsAreMalformed(p2shInstructions)\n                ? {\n                    ...lockingResult,\n                    error: AuthenticationErrorCommon.malformedP2shBytecode,\n                }\n                : stateEvaluate(createAuthenticationProgramStateBCHCHIPs({\n                    instructions: p2shInstructions,\n                    program,\n                    stack: p2shStack,\n                }));\n        },\n        every: (state) => {\n            if (state.stack.length + state.alternateStack.length >\n                ConsensusBCH.maximumStackDepth) {\n                return applyError(state, AuthenticationErrorCommon.exceededMaximumStackDepth);\n            }\n            return state;\n        },\n        operations: {\n            [OpcodesBCHCHIPs.OP_0]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_1]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_2]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_3]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_4]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_5]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_6]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_7]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_8]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_9]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_10]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_11]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_12]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_13]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_14]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_15]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_16]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_17]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_18]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_19]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_20]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_21]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_22]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_23]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_24]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_25]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_26]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_27]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_28]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_29]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_30]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_31]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_32]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_33]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_34]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_35]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_36]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_37]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_38]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_39]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_40]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_41]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_42]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_43]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_44]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_45]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_46]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_47]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_48]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_49]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_50]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_51]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_52]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_53]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_54]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_55]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_56]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_57]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_58]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_59]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_60]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_61]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_62]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_63]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_64]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_65]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_66]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_67]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_68]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_69]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_70]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_71]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_72]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_73]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_74]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHBYTES_75]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHDATA_1]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHDATA_2]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_PUSHDATA_4]: conditionallyPush,\n            [OpcodesBCHCHIPs.OP_1NEGATE]: conditionallyEvaluateChipLoops(pushNumberOperation(-1)),\n            [OpcodesBCHCHIPs.OP_RESERVED]: conditionallyEvaluateChipLoops(reservedOperation),\n            [OpcodesBCHCHIPs.OP_1]: conditionallyEvaluateChipLoops(pushNumberOperation(1)),\n            /* eslint-disable @typescript-eslint/no-magic-numbers */\n            [OpcodesBCHCHIPs.OP_2]: conditionallyEvaluateChipLoops(pushNumberOperation(2)),\n            [OpcodesBCHCHIPs.OP_3]: conditionallyEvaluateChipLoops(pushNumberOperation(3)),\n            [OpcodesBCHCHIPs.OP_4]: conditionallyEvaluateChipLoops(pushNumberOperation(4)),\n            [OpcodesBCHCHIPs.OP_5]: conditionallyEvaluateChipLoops(pushNumberOperation(5)),\n            [OpcodesBCHCHIPs.OP_6]: conditionallyEvaluateChipLoops(pushNumberOperation(6)),\n            [OpcodesBCHCHIPs.OP_7]: conditionallyEvaluateChipLoops(pushNumberOperation(7)),\n            [OpcodesBCHCHIPs.OP_8]: conditionallyEvaluateChipLoops(pushNumberOperation(8)),\n            [OpcodesBCHCHIPs.OP_9]: conditionallyEvaluateChipLoops(pushNumberOperation(9)),\n            [OpcodesBCHCHIPs.OP_10]: conditionallyEvaluateChipLoops(pushNumberOperation(10)),\n            [OpcodesBCHCHIPs.OP_11]: conditionallyEvaluateChipLoops(pushNumberOperation(11)),\n            [OpcodesBCHCHIPs.OP_12]: conditionallyEvaluateChipLoops(pushNumberOperation(12)),\n            [OpcodesBCHCHIPs.OP_13]: conditionallyEvaluateChipLoops(pushNumberOperation(13)),\n            [OpcodesBCHCHIPs.OP_14]: conditionallyEvaluateChipLoops(pushNumberOperation(14)),\n            [OpcodesBCHCHIPs.OP_15]: conditionallyEvaluateChipLoops(pushNumberOperation(15)),\n            [OpcodesBCHCHIPs.OP_16]: conditionallyEvaluateChipLoops(pushNumberOperation(16)),\n            /* eslint-enable @typescript-eslint/no-magic-numbers */\n            [OpcodesBCHCHIPs.OP_NOP]: conditionallyEvaluateChipLoops(opNop),\n            [OpcodesBCHCHIPs.OP_VER]: conditionallyEvaluateChipLoops(reservedOperation),\n            [OpcodesBCHCHIPs.OP_IF]: opIfChipLoops,\n            [OpcodesBCHCHIPs.OP_NOTIF]: opNotIfChipLoops,\n            [OpcodesBCHCHIPs.OP_BEGIN]: conditionallyEvaluateChipLoops(opBegin),\n            [OpcodesBCHCHIPs.OP_UNTIL]: conditionallyEvaluateChipLoops(opUntil),\n            [OpcodesBCHCHIPs.OP_ELSE]: opElseChipLoops,\n            [OpcodesBCHCHIPs.OP_ENDIF]: opEndIfChipLoops,\n            [OpcodesBCHCHIPs.OP_VERIFY]: conditionallyEvaluateChipLoops(opVerify),\n            [OpcodesBCHCHIPs.OP_RETURN]: conditionallyEvaluateChipLoops(opReturn),\n            [OpcodesBCHCHIPs.OP_TOALTSTACK]: conditionallyEvaluateChipLoops(opToAltStack),\n            [OpcodesBCHCHIPs.OP_FROMALTSTACK]: conditionallyEvaluateChipLoops(opFromAltStack),\n            [OpcodesBCHCHIPs.OP_2DROP]: conditionallyEvaluateChipLoops(op2Drop),\n            [OpcodesBCHCHIPs.OP_2DUP]: conditionallyEvaluateChipLoops(op2Dup),\n            [OpcodesBCHCHIPs.OP_3DUP]: conditionallyEvaluateChipLoops(op3Dup),\n            [OpcodesBCHCHIPs.OP_2OVER]: conditionallyEvaluateChipLoops(op2Over),\n            [OpcodesBCHCHIPs.OP_2ROT]: conditionallyEvaluateChipLoops(op2Rot),\n            [OpcodesBCHCHIPs.OP_2SWAP]: conditionallyEvaluateChipLoops(op2Swap),\n            [OpcodesBCHCHIPs.OP_IFDUP]: conditionallyEvaluateChipLoops(opIfDup),\n            [OpcodesBCHCHIPs.OP_DEPTH]: conditionallyEvaluateChipLoops(opDepth),\n            [OpcodesBCHCHIPs.OP_DROP]: conditionallyEvaluateChipLoops(opDrop),\n            [OpcodesBCHCHIPs.OP_DUP]: conditionallyEvaluateChipLoops(opDup),\n            [OpcodesBCHCHIPs.OP_NIP]: conditionallyEvaluateChipLoops(opNip),\n            [OpcodesBCHCHIPs.OP_OVER]: conditionallyEvaluateChipLoops(opOver),\n            [OpcodesBCHCHIPs.OP_PICK]: conditionallyEvaluateChipLoops(opPick),\n            [OpcodesBCHCHIPs.OP_ROLL]: conditionallyEvaluateChipLoops(opRoll),\n            [OpcodesBCHCHIPs.OP_ROT]: conditionallyEvaluateChipLoops(opRot),\n            [OpcodesBCHCHIPs.OP_SWAP]: conditionallyEvaluateChipLoops(opSwap),\n            [OpcodesBCHCHIPs.OP_TUCK]: conditionallyEvaluateChipLoops(opTuck),\n            [OpcodesBCHCHIPs.OP_CAT]: conditionallyEvaluateChipLoops(opCat),\n            [OpcodesBCHCHIPs.OP_SPLIT]: conditionallyEvaluateChipLoops(opSplit),\n            [OpcodesBCHCHIPs.OP_NUM2BIN]: conditionallyEvaluateChipLoops(opNum2Bin),\n            [OpcodesBCHCHIPs.OP_BIN2NUM]: conditionallyEvaluateChipLoops(opBin2Num),\n            [OpcodesBCHCHIPs.OP_SIZE]: conditionallyEvaluateChipLoops(opSize),\n            [OpcodesBCHCHIPs.OP_INVERT]: disabledOperation,\n            [OpcodesBCHCHIPs.OP_AND]: conditionallyEvaluateChipLoops(opAnd),\n            [OpcodesBCHCHIPs.OP_OR]: conditionallyEvaluateChipLoops(opOr),\n            [OpcodesBCHCHIPs.OP_XOR]: conditionallyEvaluateChipLoops(opXor),\n            [OpcodesBCHCHIPs.OP_EQUAL]: conditionallyEvaluateChipLoops(opEqual),\n            [OpcodesBCHCHIPs.OP_EQUALVERIFY]: conditionallyEvaluateChipLoops(opEqualVerify),\n            [OpcodesBCHCHIPs.OP_RESERVED1]: conditionallyEvaluateChipLoops(reservedOperation),\n            [OpcodesBCHCHIPs.OP_RESERVED2]: conditionallyEvaluateChipLoops(reservedOperation),\n            [OpcodesBCHCHIPs.OP_1ADD]: conditionallyEvaluateChipLoops(op1Add),\n            [OpcodesBCHCHIPs.OP_1SUB]: conditionallyEvaluateChipLoops(op1Sub),\n            [OpcodesBCHCHIPs.OP_2MUL]: disabledOperation,\n            [OpcodesBCHCHIPs.OP_2DIV]: disabledOperation,\n            [OpcodesBCHCHIPs.OP_NEGATE]: conditionallyEvaluateChipLoops(opNegate),\n            [OpcodesBCHCHIPs.OP_ABS]: conditionallyEvaluateChipLoops(opAbs),\n            [OpcodesBCHCHIPs.OP_NOT]: conditionallyEvaluateChipLoops(opNot),\n            [OpcodesBCHCHIPs.OP_0NOTEQUAL]: conditionallyEvaluateChipLoops(op0NotEqual),\n            [OpcodesBCHCHIPs.OP_ADD]: conditionallyEvaluateChipLoops(opAdd),\n            [OpcodesBCHCHIPs.OP_SUB]: conditionallyEvaluateChipLoops(opSub),\n            [OpcodesBCHCHIPs.OP_MUL]: conditionallyEvaluateChipLoops(opMul),\n            [OpcodesBCHCHIPs.OP_DIV]: conditionallyEvaluateChipLoops(opDiv),\n            [OpcodesBCHCHIPs.OP_MOD]: conditionallyEvaluateChipLoops(opMod),\n            [OpcodesBCHCHIPs.OP_LSHIFT]: disabledOperation,\n            [OpcodesBCHCHIPs.OP_RSHIFT]: disabledOperation,\n            [OpcodesBCHCHIPs.OP_BOOLAND]: conditionallyEvaluateChipLoops(opBoolAnd),\n            [OpcodesBCHCHIPs.OP_BOOLOR]: conditionallyEvaluateChipLoops(opBoolOr),\n            [OpcodesBCHCHIPs.OP_NUMEQUAL]: conditionallyEvaluateChipLoops(opNumEqual),\n            [OpcodesBCHCHIPs.OP_NUMEQUALVERIFY]: conditionallyEvaluateChipLoops(opNumEqualVerify),\n            [OpcodesBCHCHIPs.OP_NUMNOTEQUAL]: conditionallyEvaluateChipLoops(opNumNotEqual),\n            [OpcodesBCHCHIPs.OP_LESSTHAN]: conditionallyEvaluateChipLoops(opLessThan),\n            [OpcodesBCHCHIPs.OP_GREATERTHAN]: conditionallyEvaluateChipLoops(opGreaterThan),\n            [OpcodesBCHCHIPs.OP_LESSTHANOREQUAL]: conditionallyEvaluateChipLoops(opLessThanOrEqual),\n            [OpcodesBCHCHIPs.OP_GREATERTHANOREQUAL]: conditionallyEvaluateChipLoops(opGreaterThanOrEqual),\n            [OpcodesBCHCHIPs.OP_MIN]: conditionallyEvaluateChipLoops(opMin),\n            [OpcodesBCHCHIPs.OP_MAX]: conditionallyEvaluateChipLoops(opMax),\n            [OpcodesBCHCHIPs.OP_WITHIN]: conditionallyEvaluateChipLoops(opWithin),\n            [OpcodesBCHCHIPs.OP_RIPEMD160]: conditionallyEvaluateChipLoops(opRipemd160({ ripemd160 })),\n            [OpcodesBCHCHIPs.OP_SHA1]: conditionallyEvaluateChipLoops(opSha1({ sha1 })),\n            [OpcodesBCHCHIPs.OP_SHA256]: conditionallyEvaluateChipLoops(opSha256({ sha256 })),\n            [OpcodesBCHCHIPs.OP_HASH160]: conditionallyEvaluateChipLoops(opHash160({ ripemd160, sha256 })),\n            [OpcodesBCHCHIPs.OP_HASH256]: conditionallyEvaluateChipLoops(opHash256({ sha256 })),\n            [OpcodesBCHCHIPs.OP_CODESEPARATOR]: conditionallyEvaluateChipLoops(opCodeSeparator),\n            [OpcodesBCHCHIPs.OP_CHECKSIG]: conditionallyEvaluateChipLoops(opCheckSigChipLimits({ secp256k1, sha256 })),\n            [OpcodesBCHCHIPs.OP_CHECKSIGVERIFY]: conditionallyEvaluateChipLoops(opCheckSigVerifyChipLimits({ secp256k1, sha256 })),\n            [OpcodesBCHCHIPs.OP_CHECKMULTISIG]: conditionallyEvaluateChipLoops(opCheckMultiSigChipLimits({ secp256k1, sha256 })),\n            [OpcodesBCHCHIPs.OP_CHECKMULTISIGVERIFY]: conditionallyEvaluateChipLoops(opCheckMultiSigVerifyChipLimits({ secp256k1, sha256 })),\n            ...(standard\n                ? {\n                    [OpcodesBCHCHIPs.OP_NOP1]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_CHECKLOCKTIMEVERIFY]: conditionallyEvaluateChipLoops(opCheckLockTimeVerify),\n                    [OpcodesBCHCHIPs.OP_CHECKSEQUENCEVERIFY]: conditionallyEvaluateChipLoops(opCheckSequenceVerify),\n                    [OpcodesBCHCHIPs.OP_NOP4]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_NOP5]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_NOP6]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_NOP7]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_NOP8]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_NOP9]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                    [OpcodesBCHCHIPs.OP_NOP10]: conditionallyEvaluateChipLoops(opNopDisallowed),\n                }\n                : {\n                    [OpcodesBCHCHIPs.OP_NOP1]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_CHECKLOCKTIMEVERIFY]: conditionallyEvaluateChipLoops(opCheckLockTimeVerify),\n                    [OpcodesBCHCHIPs.OP_CHECKSEQUENCEVERIFY]: conditionallyEvaluateChipLoops(opCheckSequenceVerify),\n                    [OpcodesBCHCHIPs.OP_NOP4]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_NOP5]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_NOP6]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_NOP7]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_NOP8]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_NOP9]: conditionallyEvaluateChipLoops(opNop),\n                    [OpcodesBCHCHIPs.OP_NOP10]: conditionallyEvaluateChipLoops(opNop),\n                }),\n            [OpcodesBCHCHIPs.OP_CHECKDATASIG]: conditionallyEvaluateChipLoops(opCheckDataSig({ secp256k1, sha256 })),\n            [OpcodesBCHCHIPs.OP_CHECKDATASIGVERIFY]: conditionallyEvaluateChipLoops(opCheckDataSigVerify({ secp256k1, sha256 })),\n            [OpcodesBCHCHIPs.OP_REVERSEBYTES]: conditionallyEvaluateChipLoops(opReverseBytes),\n            [OpcodesBCHCHIPs.OP_INPUTINDEX]: conditionallyEvaluateChipLoops(opInputIndex),\n            [OpcodesBCHCHIPs.OP_ACTIVEBYTECODE]: conditionallyEvaluateChipLoops(opActiveBytecode),\n            [OpcodesBCHCHIPs.OP_TXVERSION]: conditionallyEvaluateChipLoops(opTxVersion),\n            [OpcodesBCHCHIPs.OP_TXINPUTCOUNT]: conditionallyEvaluateChipLoops(opTxInputCount),\n            [OpcodesBCHCHIPs.OP_TXOUTPUTCOUNT]: conditionallyEvaluateChipLoops(opTxOutputCount),\n            [OpcodesBCHCHIPs.OP_TXLOCKTIME]: conditionallyEvaluateChipLoops(opTxLocktime),\n            [OpcodesBCHCHIPs.OP_UTXOVALUE]: conditionallyEvaluateChipLoops(opUtxoValue),\n            [OpcodesBCHCHIPs.OP_UTXOBYTECODE]: conditionallyEvaluateChipLoops(opUtxoBytecode),\n            [OpcodesBCHCHIPs.OP_OUTPOINTTXHASH]: conditionallyEvaluateChipLoops(opOutpointTxHash),\n            [OpcodesBCHCHIPs.OP_OUTPOINTINDEX]: conditionallyEvaluateChipLoops(opOutpointIndex),\n            [OpcodesBCHCHIPs.OP_INPUTBYTECODE]: conditionallyEvaluateChipLoops(opInputBytecode),\n            [OpcodesBCHCHIPs.OP_INPUTSEQUENCENUMBER]: conditionallyEvaluateChipLoops(opInputSequenceNumber),\n            [OpcodesBCHCHIPs.OP_OUTPUTVALUE]: conditionallyEvaluateChipLoops(opOutputValue),\n            [OpcodesBCHCHIPs.OP_OUTPUTBYTECODE]: conditionallyEvaluateChipLoops(opOutputBytecode),\n            [OpcodesBCHCHIPs.OP_UTXOTOKENCATEGORY]: conditionallyEvaluateChipLoops(opUtxoTokenCategory),\n            [OpcodesBCHCHIPs.OP_UTXOTOKENCOMMITMENT]: conditionallyEvaluateChipLoops(opUtxoTokenCommitment),\n            [OpcodesBCHCHIPs.OP_UTXOTOKENAMOUNT]: conditionallyEvaluateChipLoops(opUtxoTokenAmount),\n            [OpcodesBCHCHIPs.OP_OUTPUTTOKENCATEGORY]: conditionallyEvaluateChipLoops(opOutputTokenCategory),\n            [OpcodesBCHCHIPs.OP_OUTPUTTOKENCOMMITMENT]: conditionallyEvaluateChipLoops(opOutputTokenCommitment),\n            [OpcodesBCHCHIPs.OP_OUTPUTTOKENAMOUNT]: conditionallyEvaluateChipLoops(opOutputTokenAmount),\n        },\n        success: (state) => {\n            if (state.error !== undefined) {\n                return state.error;\n            }\n            if (state.controlStack.length !== 0) {\n                return AuthenticationErrorCommon.nonEmptyControlStack;\n            }\n            if (state.stack.length !== 1) {\n                return AuthenticationErrorCommon.requiresCleanStack;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (!stackItemIsTruthy(state.stack[0])) {\n                return AuthenticationErrorCommon.unsuccessfulEvaluation;\n            }\n            return true;\n        },\n        undefined: undefinedOperationChipLoops,\n        // eslint-disable-next-line complexity\n        verify: ({ sourceOutputs, transaction }, evaluate, stateSuccess) => {\n            if (transaction.inputs.length === 0) {\n                return 'Transactions must have at least one input.';\n            }\n            if (transaction.outputs.length === 0) {\n                return 'Transactions must have at least one output.';\n            }\n            if (transaction.inputs.length !== sourceOutputs.length) {\n                return 'Unable to verify transaction: a single spent output must be provided for each transaction input.';\n            }\n            const transactionSize = encodeTransactionBCH(transaction).length;\n            if (transactionSize < ConsensusBCH.minimumTransactionSize) {\n                return `Transaction does not meet minimum size: the transaction is ${transactionSize} bytes, but the minimum transaction size is ${ConsensusBCH.minimumTransactionSize} bytes.`;\n            }\n            if (transactionSize > ConsensusBCH.maximumTransactionSize) {\n                return `Transaction exceeds maximum size: the transaction is ${transactionSize} bytes, but the maximum transaction size is ${ConsensusBCH.maximumTransactionSize} bytes.`;\n            }\n            if (standard) {\n                if (transaction.version < 1 ||\n                    transaction.version > ConsensusBCH.maximumStandardVersion) {\n                    return `Standard transactions must have a version no less than 1 and no greater than ${ConsensusBCH.maximumStandardVersion}.`;\n                }\n                if (transactionSize > ConsensusBCH.maximumStandardTransactionSize) {\n                    return `Transaction exceeds maximum standard size: this transaction is ${transactionSize} bytes, but the maximum standard transaction size is ${ConsensusBCH.maximumStandardTransactionSize} bytes.`;\n                }\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, output] of sourceOutputs.entries()) {\n                    if (!isStandardOutputBytecode(output.lockingBytecode)) {\n                        return `Standard transactions may only spend standard output types, but source output ${index} is non-standard.`;\n                    }\n                }\n                // eslint-disable-next-line functional/no-let\n                let totalArbitraryDataBytes = 0;\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, output] of transaction.outputs.entries()) {\n                    if (!isStandardOutputBytecode(output.lockingBytecode)) {\n                        return `Standard transactions may only create standard output types, but transaction output ${index} is non-standard.`;\n                    }\n                    // eslint-disable-next-line functional/no-conditional-statement\n                    if (isArbitraryDataOutput(output.lockingBytecode)) {\n                        // eslint-disable-next-line functional/no-expression-statement\n                        totalArbitraryDataBytes += output.lockingBytecode.length + 1;\n                    }\n                    /*\n                     * TODO: disallow dust outputs\n                     * if(IsDustOutput(output)) {\n                     *   return ``;\n                     * }\n                     */\n                }\n                if (totalArbitraryDataBytes > ConsensusBCH.maximumDataCarrierBytes) {\n                    return `Standard transactions may carry no more than ${ConsensusBCH.maximumDataCarrierBytes} bytes in arbitrary data outputs; this transaction includes ${totalArbitraryDataBytes} bytes of arbitrary data.`;\n                }\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const [index, input] of transaction.inputs.entries()) {\n                    if (input.unlockingBytecode.length >\n                        ConsensusBCH.maximumStandardUnlockingBytecodeLength) {\n                        return `Input index ${index} is non-standard: the unlocking bytecode (${input.unlockingBytecode.length} bytes) exceeds the maximum standard unlocking bytecode length (${ConsensusBCH.maximumStandardUnlockingBytecodeLength} bytes).`;\n                    }\n                    if (!isPushOnly(input.unlockingBytecode)) {\n                        return `Input index ${index} is non-standard: unlocking bytecode may contain only push operations.`;\n                    }\n                }\n            }\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const index of transaction.inputs.keys()) {\n                const state = evaluate({\n                    inputIndex: index,\n                    sourceOutputs,\n                    transaction,\n                });\n                const result = stateSuccess(state);\n                if (typeof result === 'string') {\n                    return `Error in evaluating input index ${index}: ${result}`;\n                }\n            }\n            return true;\n        },\n    };\n};\n//# sourceMappingURL=bch-chips-instruction-set.js.map", "import { applyError, AuthenticationErrorCommon, ConsensusCommon, encodeAuthenticationInstructions, isMinimalDataPush, pushToStack, stackItemIsTruthy, useOneStackItem, } from '../../common/common.js';\nimport { AuthenticationErrorBCHCHIPs } from './bch-chips-errors.js';\nconst executionIsActive = (state) => state.controlStack.every((item) => item !== false);\n/**\n * An implementation of {@link conditionallyEvaluate} that supports\n * `CHIP-2021-05-loops`.\n */\nexport const conditionallyEvaluateChipLoops = (operation) => (state) => executionIsActive(state) ? operation(state) : state;\nexport const undefinedOperationChipLoops = conditionallyEvaluateChipLoops((state) => applyError(state, AuthenticationErrorCommon.unknownOpcode));\nexport const pushOperationChipLoops = (maximumPushSize = ConsensusCommon.maximumStackItemLength) => (state) => {\n    const instruction = state.instructions[state.ip];\n    return instruction.data.length > maximumPushSize\n        ? applyError(state, `${AuthenticationErrorCommon.exceededMaximumStackItemLength} Item length: ${instruction.data.length} bytes.`)\n        : executionIsActive(state)\n            ? isMinimalDataPush(instruction.opcode, instruction.data)\n                ? pushToStack(state, instruction.data)\n                : applyError(state, AuthenticationErrorCommon.nonMinimalPush)\n            : state;\n};\n/**\n * Return the provided state with the provided value pushed to its control stack.\n * @param state - the state to update and return\n * @param data - the value to push to the stack\n */\nexport const pushToControlStackChipLoops = (state, value) => {\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.controlStack.push(value);\n    return state;\n};\nexport const opIfChipLoops = (state) => {\n    if (executionIsActive(state)) {\n        return useOneStackItem(state, (nextState, [item]) => pushToControlStackChipLoops(nextState, stackItemIsTruthy(item)));\n    }\n    return pushToControlStackChipLoops(state, false);\n};\nexport const opNotIfChipLoops = (state) => {\n    if (executionIsActive(state)) {\n        return useOneStackItem(state, (nextState, [item]) => pushToControlStackChipLoops(nextState, !stackItemIsTruthy(item)));\n    }\n    return pushToControlStackChipLoops(state, false);\n};\nexport const opEndIfChipLoops = (state) => {\n    // eslint-disable-next-line functional/immutable-data\n    const element = state.controlStack.pop();\n    if (typeof element !== 'boolean') {\n        return applyError(state, AuthenticationErrorCommon.unexpectedEndIf);\n    }\n    return state;\n};\nexport const opElseChipLoops = (state) => {\n    const top = state.controlStack[state.controlStack.length - 1];\n    if (typeof top !== 'boolean') {\n        return applyError(state, AuthenticationErrorCommon.unexpectedElse);\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.controlStack[state.controlStack.length - 1] = !top;\n    return state;\n};\nexport const opBegin = (state) => pushToControlStackChipLoops(state, state.ip);\nexport const opUntil = (state) => {\n    // eslint-disable-next-line functional/immutable-data\n    const controlValue = state.controlStack.pop();\n    if (typeof controlValue !== 'number') {\n        return applyError(state, AuthenticationErrorBCHCHIPs.unexpectedUntil);\n    }\n    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n    state.repeatedBytes += encodeAuthenticationInstructions(state.instructions.slice(controlValue, state.ip)).length;\n    const activeBytecodeLength = encodeAuthenticationInstructions(state.instructions).length;\n    if (state.repeatedBytes + activeBytecodeLength >\n        ConsensusCommon.maximumBytecodeLength) {\n        return applyError(state, AuthenticationErrorBCHCHIPs.excessiveLooping, `Repeated bytes: ${state.repeatedBytes}; active bytecode length: ${activeBytecodeLength}`);\n    }\n    return useOneStackItem(state, (nextState, [item]) => {\n        if (item.length === 1 && item[0] === 1) {\n            return nextState;\n        }\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        nextState.ip = controlValue - 1;\n        return nextState;\n    });\n};\n//# sourceMappingURL=bch-chips-loops.js.map", "/**\n * The `BCH_CHIPs` instruction set.\n *\n * Note: to maximize script compilation compatibility, this instruction set also\n * includes the previous names for new opcodes (e.g. `OP_VERIF` for `OP_BEGIN`).\n */\nexport var OpcodesBCHCHIPs;\n(function (OpcodesBCHCHIPs) {\n    /**\n     * A.K.A. `OP_FALSE` or `OP_PUSHBYTES_0`\n     */\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_0\"] = 0] = \"OP_0\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_1\"] = 1] = \"OP_PUSHBYTES_1\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_2\"] = 2] = \"OP_PUSHBYTES_2\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_3\"] = 3] = \"OP_PUSHBYTES_3\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_4\"] = 4] = \"OP_PUSHBYTES_4\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_5\"] = 5] = \"OP_PUSHBYTES_5\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_6\"] = 6] = \"OP_PUSHBYTES_6\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_7\"] = 7] = \"OP_PUSHBYTES_7\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_8\"] = 8] = \"OP_PUSHBYTES_8\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_9\"] = 9] = \"OP_PUSHBYTES_9\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_10\"] = 10] = \"OP_PUSHBYTES_10\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_11\"] = 11] = \"OP_PUSHBYTES_11\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_12\"] = 12] = \"OP_PUSHBYTES_12\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_13\"] = 13] = \"OP_PUSHBYTES_13\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_14\"] = 14] = \"OP_PUSHBYTES_14\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_15\"] = 15] = \"OP_PUSHBYTES_15\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_16\"] = 16] = \"OP_PUSHBYTES_16\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_17\"] = 17] = \"OP_PUSHBYTES_17\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_18\"] = 18] = \"OP_PUSHBYTES_18\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_19\"] = 19] = \"OP_PUSHBYTES_19\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_20\"] = 20] = \"OP_PUSHBYTES_20\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_21\"] = 21] = \"OP_PUSHBYTES_21\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_22\"] = 22] = \"OP_PUSHBYTES_22\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_23\"] = 23] = \"OP_PUSHBYTES_23\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_24\"] = 24] = \"OP_PUSHBYTES_24\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_25\"] = 25] = \"OP_PUSHBYTES_25\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_26\"] = 26] = \"OP_PUSHBYTES_26\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_27\"] = 27] = \"OP_PUSHBYTES_27\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_28\"] = 28] = \"OP_PUSHBYTES_28\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_29\"] = 29] = \"OP_PUSHBYTES_29\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_30\"] = 30] = \"OP_PUSHBYTES_30\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_31\"] = 31] = \"OP_PUSHBYTES_31\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_32\"] = 32] = \"OP_PUSHBYTES_32\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_33\"] = 33] = \"OP_PUSHBYTES_33\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_34\"] = 34] = \"OP_PUSHBYTES_34\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_35\"] = 35] = \"OP_PUSHBYTES_35\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_36\"] = 36] = \"OP_PUSHBYTES_36\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_37\"] = 37] = \"OP_PUSHBYTES_37\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_38\"] = 38] = \"OP_PUSHBYTES_38\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_39\"] = 39] = \"OP_PUSHBYTES_39\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_40\"] = 40] = \"OP_PUSHBYTES_40\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_41\"] = 41] = \"OP_PUSHBYTES_41\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_42\"] = 42] = \"OP_PUSHBYTES_42\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_43\"] = 43] = \"OP_PUSHBYTES_43\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_44\"] = 44] = \"OP_PUSHBYTES_44\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_45\"] = 45] = \"OP_PUSHBYTES_45\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_46\"] = 46] = \"OP_PUSHBYTES_46\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_47\"] = 47] = \"OP_PUSHBYTES_47\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_48\"] = 48] = \"OP_PUSHBYTES_48\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_49\"] = 49] = \"OP_PUSHBYTES_49\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_50\"] = 50] = \"OP_PUSHBYTES_50\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_51\"] = 51] = \"OP_PUSHBYTES_51\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_52\"] = 52] = \"OP_PUSHBYTES_52\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_53\"] = 53] = \"OP_PUSHBYTES_53\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_54\"] = 54] = \"OP_PUSHBYTES_54\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_55\"] = 55] = \"OP_PUSHBYTES_55\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_56\"] = 56] = \"OP_PUSHBYTES_56\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_57\"] = 57] = \"OP_PUSHBYTES_57\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_58\"] = 58] = \"OP_PUSHBYTES_58\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_59\"] = 59] = \"OP_PUSHBYTES_59\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_60\"] = 60] = \"OP_PUSHBYTES_60\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_61\"] = 61] = \"OP_PUSHBYTES_61\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_62\"] = 62] = \"OP_PUSHBYTES_62\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_63\"] = 63] = \"OP_PUSHBYTES_63\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_64\"] = 64] = \"OP_PUSHBYTES_64\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_65\"] = 65] = \"OP_PUSHBYTES_65\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_66\"] = 66] = \"OP_PUSHBYTES_66\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_67\"] = 67] = \"OP_PUSHBYTES_67\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_68\"] = 68] = \"OP_PUSHBYTES_68\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_69\"] = 69] = \"OP_PUSHBYTES_69\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_70\"] = 70] = \"OP_PUSHBYTES_70\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_71\"] = 71] = \"OP_PUSHBYTES_71\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_72\"] = 72] = \"OP_PUSHBYTES_72\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_73\"] = 73] = \"OP_PUSHBYTES_73\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_74\"] = 74] = \"OP_PUSHBYTES_74\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHBYTES_75\"] = 75] = \"OP_PUSHBYTES_75\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHDATA_1\"] = 76] = \"OP_PUSHDATA_1\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHDATA_2\"] = 77] = \"OP_PUSHDATA_2\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PUSHDATA_4\"] = 78] = \"OP_PUSHDATA_4\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    /**\n     * A.K.A. `OP_TRUE`\n     */\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_1\"] = 81] = \"OP_1\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2\"] = 82] = \"OP_2\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_3\"] = 83] = \"OP_3\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_4\"] = 84] = \"OP_4\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_5\"] = 85] = \"OP_5\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_6\"] = 86] = \"OP_6\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_7\"] = 87] = \"OP_7\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_8\"] = 88] = \"OP_8\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_9\"] = 89] = \"OP_9\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_10\"] = 90] = \"OP_10\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_11\"] = 91] = \"OP_11\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_12\"] = 92] = \"OP_12\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_13\"] = 93] = \"OP_13\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_14\"] = 94] = \"OP_14\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_15\"] = 95] = \"OP_15\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_16\"] = 96] = \"OP_16\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_VER\"] = 98] = \"OP_VER\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_IF\"] = 99] = \"OP_IF\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_VERIF\"] = 101] = \"OP_VERIF\";\n    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_BEGIN\"] = 101] = \"OP_BEGIN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_VERNOTIF\"] = 102] = \"OP_VERNOTIF\";\n    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNTIL\"] = 102] = \"OP_UNTIL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_SPLIT\"] = 127] = \"OP_SPLIT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NUM2BIN\"] = 128] = \"OP_NUM2BIN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_BIN2NUM\"] = 129] = \"OP_BIN2NUM\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_AND\"] = 132] = \"OP_AND\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OR\"] = 133] = \"OP_OR\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_0EQUAL\"] = 145] = \"OP_0EQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKDATASIG\"] = 186] = \"OP_CHECKDATASIG\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_CHECKDATASIGVERIFY\"] = 187] = \"OP_CHECKDATASIGVERIFY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_REVERSEBYTES\"] = 188] = \"OP_REVERSEBYTES\";\n    /**\n     * First codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN189\"] = 189] = \"OP_UNKNOWN189\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN190\"] = 190] = \"OP_UNKNOWN190\";\n    /**\n     * Last codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN191\"] = 191] = \"OP_UNKNOWN191\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_INPUTINDEX\"] = 192] = \"OP_INPUTINDEX\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_ACTIVEBYTECODE\"] = 193] = \"OP_ACTIVEBYTECODE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_TXVERSION\"] = 194] = \"OP_TXVERSION\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_TXINPUTCOUNT\"] = 195] = \"OP_TXINPUTCOUNT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_TXOUTPUTCOUNT\"] = 196] = \"OP_TXOUTPUTCOUNT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_TXLOCKTIME\"] = 197] = \"OP_TXLOCKTIME\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UTXOVALUE\"] = 198] = \"OP_UTXOVALUE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UTXOBYTECODE\"] = 199] = \"OP_UTXOBYTECODE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPOINTTXHASH\"] = 200] = \"OP_OUTPOINTTXHASH\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPOINTINDEX\"] = 201] = \"OP_OUTPOINTINDEX\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_INPUTBYTECODE\"] = 202] = \"OP_INPUTBYTECODE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_INPUTSEQUENCENUMBER\"] = 203] = \"OP_INPUTSEQUENCENUMBER\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPUTVALUE\"] = 204] = \"OP_OUTPUTVALUE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPUTBYTECODE\"] = 205] = \"OP_OUTPUTBYTECODE\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UTXOTOKENCATEGORY\"] = 206] = \"OP_UTXOTOKENCATEGORY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UTXOTOKENCOMMITMENT\"] = 207] = \"OP_UTXOTOKENCOMMITMENT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UTXOTOKENAMOUNT\"] = 208] = \"OP_UTXOTOKENAMOUNT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPUTTOKENCATEGORY\"] = 209] = \"OP_OUTPUTTOKENCATEGORY\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPUTTOKENCOMMITMENT\"] = 210] = \"OP_OUTPUTTOKENCOMMITMENT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_OUTPUTTOKENAMOUNT\"] = 211] = \"OP_OUTPUTTOKENAMOUNT\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN212\"] = 212] = \"OP_UNKNOWN212\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN213\"] = 213] = \"OP_UNKNOWN213\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN214\"] = 214] = \"OP_UNKNOWN214\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN215\"] = 215] = \"OP_UNKNOWN215\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN216\"] = 216] = \"OP_UNKNOWN216\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN217\"] = 217] = \"OP_UNKNOWN217\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN218\"] = 218] = \"OP_UNKNOWN218\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN219\"] = 219] = \"OP_UNKNOWN219\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN220\"] = 220] = \"OP_UNKNOWN220\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN221\"] = 221] = \"OP_UNKNOWN221\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN222\"] = 222] = \"OP_UNKNOWN222\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN223\"] = 223] = \"OP_UNKNOWN223\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN224\"] = 224] = \"OP_UNKNOWN224\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN225\"] = 225] = \"OP_UNKNOWN225\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN226\"] = 226] = \"OP_UNKNOWN226\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN227\"] = 227] = \"OP_UNKNOWN227\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN228\"] = 228] = \"OP_UNKNOWN228\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN229\"] = 229] = \"OP_UNKNOWN229\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN230\"] = 230] = \"OP_UNKNOWN230\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN231\"] = 231] = \"OP_UNKNOWN231\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN232\"] = 232] = \"OP_UNKNOWN232\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN233\"] = 233] = \"OP_UNKNOWN233\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN234\"] = 234] = \"OP_UNKNOWN234\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN235\"] = 235] = \"OP_UNKNOWN235\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN236\"] = 236] = \"OP_UNKNOWN236\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN237\"] = 237] = \"OP_UNKNOWN237\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN238\"] = 238] = \"OP_UNKNOWN238\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN239\"] = 239] = \"OP_UNKNOWN239\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN240\"] = 240] = \"OP_UNKNOWN240\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN241\"] = 241] = \"OP_UNKNOWN241\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN242\"] = 242] = \"OP_UNKNOWN242\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN243\"] = 243] = \"OP_UNKNOWN243\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN244\"] = 244] = \"OP_UNKNOWN244\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN245\"] = 245] = \"OP_UNKNOWN245\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN246\"] = 246] = \"OP_UNKNOWN246\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN247\"] = 247] = \"OP_UNKNOWN247\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN248\"] = 248] = \"OP_UNKNOWN248\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN249\"] = 249] = \"OP_UNKNOWN249\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN250\"] = 250] = \"OP_UNKNOWN250\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN251\"] = 251] = \"OP_UNKNOWN251\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN252\"] = 252] = \"OP_UNKNOWN252\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN253\"] = 253] = \"OP_UNKNOWN253\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN254\"] = 254] = \"OP_UNKNOWN254\";\n    OpcodesBCHCHIPs[OpcodesBCHCHIPs[\"OP_UNKNOWN255\"] = 255] = \"OP_UNKNOWN255\";\n})(OpcodesBCHCHIPs || (OpcodesBCHCHIPs = {}));\n//# sourceMappingURL=bch-chips-opcodes.js.map", "import { createAuthenticationVirtualMachine } from '../../../virtual-machine.js';\nimport { createInstructionSetBCHCHIPs } from './bch-chips-instruction-set.js';\n/**\n * Initialize a virtual machine using the BCH CHIPs instruction set, an\n * informal, speculative instruction set that implements a variety of future\n * Bitcoin Cash Improvement Proposals (CHIPs).\n *\n * @param standard - If `true`, the additional `isStandard` validations will be\n * enabled. Transactions that fail these rules are often called \"non-standard\"\n * and can technically be included by miners in valid blocks, but most network\n * nodes will refuse to relay them. (Default: `true`)\n */\nexport const createVirtualMachineBCHCHIPs = (standard = true) => createAuthenticationVirtualMachine(createInstructionSetBCHCHIPs(standard));\n//# sourceMappingURL=bch-chips-vm.js.map", "export * from './btc-descriptions.js';\nexport * from './btc-opcodes.js';\nexport * from './btc-types.js';\n//# sourceMappingURL=btc.js.map", "export var OpcodeDescriptionsBTC;\n(function (OpcodeDescriptionsBTC) {\n    OpcodeDescriptionsBTC[\"OP_0\"] = \"Push the VM Number 0 onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_1\"] = \"Push the next byte onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_2\"] = \"Push the next 2 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_3\"] = \"Push the next 3 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_4\"] = \"Push the next 4 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_5\"] = \"Push the next 5 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_6\"] = \"Push the next 6 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_7\"] = \"Push the next 7 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_8\"] = \"Push the next 8 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_9\"] = \"Push the next 9 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_10\"] = \"Push the next 10 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_11\"] = \"Push the next 11 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_12\"] = \"Push the next 12 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_13\"] = \"Push the next 13 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_14\"] = \"Push the next 14 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_15\"] = \"Push the next 15 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_16\"] = \"Push the next 16 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_17\"] = \"Push the next 17 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_18\"] = \"Push the next 18 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_19\"] = \"Push the next 19 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_20\"] = \"Push the next 20 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_21\"] = \"Push the next 21 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_22\"] = \"Push the next 22 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_23\"] = \"Push the next 23 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_24\"] = \"Push the next 24 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_25\"] = \"Push the next 25 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_26\"] = \"Push the next 26 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_27\"] = \"Push the next 27 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_28\"] = \"Push the next 28 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_29\"] = \"Push the next 29 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_30\"] = \"Push the next 30 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_31\"] = \"Push the next 31 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_32\"] = \"Push the next 32 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_33\"] = \"Push the next 33 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_34\"] = \"Push the next 34 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_35\"] = \"Push the next 35 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_36\"] = \"Push the next 36 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_37\"] = \"Push the next 37 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_38\"] = \"Push the next 38 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_39\"] = \"Push the next 39 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_40\"] = \"Push the next 40 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_41\"] = \"Push the next 41 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_42\"] = \"Push the next 42 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_43\"] = \"Push the next 43 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_44\"] = \"Push the next 44 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_45\"] = \"Push the next 45 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_46\"] = \"Push the next 46 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_47\"] = \"Push the next 47 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_48\"] = \"Push the next 48 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_49\"] = \"Push the next 49 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_50\"] = \"Push the next 50 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_51\"] = \"Push the next 51 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_52\"] = \"Push the next 52 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_53\"] = \"Push the next 53 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_54\"] = \"Push the next 54 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_55\"] = \"Push the next 55 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_56\"] = \"Push the next 56 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_57\"] = \"Push the next 57 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_58\"] = \"Push the next 58 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_59\"] = \"Push the next 59 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_60\"] = \"Push the next 60 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_61\"] = \"Push the next 61 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_62\"] = \"Push the next 62 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_63\"] = \"Push the next 63 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_64\"] = \"Push the next 64 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_65\"] = \"Push the next 65 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_66\"] = \"Push the next 66 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_67\"] = \"Push the next 67 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_68\"] = \"Push the next 68 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_69\"] = \"Push the next 69 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_70\"] = \"Push the next 70 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_71\"] = \"Push the next 71 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_72\"] = \"Push the next 72 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_73\"] = \"Push the next 73 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_74\"] = \"Push the next 74 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHBYTES_75\"] = \"Push the next 75 bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHDATA_1\"] = \"Read the next Uint8 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHDATA_2\"] = \"Read the next little-endian Uint16 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_PUSHDATA_4\"] = \"Read the next little-endian Uint32 and push that number of bytes onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_1NEGATE\"] = \"Push the VM Number -1 onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_RESERVED\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED does not count toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_1\"] = \"Push a 1 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_2\"] = \"Push a 2 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_3\"] = \"Push a 3 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_4\"] = \"Push a 4 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_5\"] = \"Push a 5 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_6\"] = \"Push a 6 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_7\"] = \"Push a 7 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_8\"] = \"Push a 8 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_9\"] = \"Push a 9 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_10\"] = \"Push a 10 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_11\"] = \"Push a 11 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_12\"] = \"Push a 12 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_13\"] = \"Push a 13 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_14\"] = \"Push a 14 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_15\"] = \"Push a 15 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_16\"] = \"Push a 16 (VM Number) onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_NOP\"] = \"No operation. Note: OP_NOP counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_VER\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_VER counts toward the opcode limit. (Historically, this pushed a protocol version number to the stack.)\";\n    OpcodeDescriptionsBTC[\"OP_IF\"] = \"Pop the top item from the stack. If it is not \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBTC[\"OP_NOTIF\"] = \"Pop the top item from the stack. If it is \\\"truthy\\\", skip evaluation until a matching OP_ELSE or OP_ENDIF.\";\n    OpcodeDescriptionsBTC[\"OP_VERIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_IF.)\";\n    OpcodeDescriptionsBTC[\"OP_VERNOTIF\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this was a combination of OP_VER and OP_NOTIF.)\";\n    OpcodeDescriptionsBTC[\"OP_ELSE\"] = \"Invert conditional evaluation within the current OP_IF ... OP_ENDIF block. (If evaluation is enabled, disable it, if it is disabled, enable it.)\";\n    OpcodeDescriptionsBTC[\"OP_ENDIF\"] = \"End the current OP_IF/OP_NOTIF ... OP_ENDIF block.\";\n    OpcodeDescriptionsBTC[\"OP_VERIFY\"] = \"Pop the top item from the stack and error if it isn't \\\"truthy\\\".\";\n    OpcodeDescriptionsBTC[\"OP_RETURN\"] = \"Error when executed.\";\n    OpcodeDescriptionsBTC[\"OP_TOALTSTACK\"] = \"Pop the top item from the stack and push it onto the alternate stack.\";\n    OpcodeDescriptionsBTC[\"OP_FROMALTSTACK\"] = \"Pop the top item from the alternate stack and push it onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_2DROP\"] = \"Pop the top 2 items from the stack and discard them.\";\n    OpcodeDescriptionsBTC[\"OP_2DUP\"] = \"Duplicate the top 2 items on the stack. (E.g. [a, b] -> [a, b, a, b])\";\n    OpcodeDescriptionsBTC[\"OP_3DUP\"] = \"Duplicate the top 3 items on the stack. (E.g. [a, b, c] -> [a, b, c, a, b, c])\";\n    OpcodeDescriptionsBTC[\"OP_2OVER\"] = \"Duplicate the 2 items beginning at a depth of 2 on the stack. (E.g. [a, b, c, d] -> [a, b, c, d, a, b])\";\n    OpcodeDescriptionsBTC[\"OP_2ROT\"] = \"Rotate the top 6 items on the stack, bringing the fifth and sixth items to the top. (E.g. [a, b, c, d, e, f] -> [c, d, e, f, a, b])\";\n    OpcodeDescriptionsBTC[\"OP_2SWAP\"] = \"Swap the positions of the top two pairs of items on the stack. (E.g. [a, b, c, d] -> [c, d, a, b])\";\n    OpcodeDescriptionsBTC[\"OP_IFDUP\"] = \"If the top item on the stack is \\\"truthy\\\", duplicate it.\";\n    OpcodeDescriptionsBTC[\"OP_DEPTH\"] = \"Push the current number of stack items as a VM Number.\";\n    OpcodeDescriptionsBTC[\"OP_DROP\"] = \"Pop the top item from the stack and discard it. (E.g. [a] -> [])\";\n    OpcodeDescriptionsBTC[\"OP_DUP\"] = \"Duplicate the top item on the stack. (E.g. [a] -> [a, a])\";\n    OpcodeDescriptionsBTC[\"OP_NIP\"] = \"Remove the second-to-top item from the stack. (E.g. [a, b] -> [b])\";\n    OpcodeDescriptionsBTC[\"OP_OVER\"] = \"Duplicate the second-to-top item on the stack. (E.g. [a, b] -> [a, b, a])\";\n    OpcodeDescriptionsBTC[\"OP_PICK\"] = \"Pop the top item from the stack as a VM Number. Duplicate the item at that depth (zero-indexed), placing it on top of the stack. (E.g. [a, b, c, 2] -> [a, b, c, a])\";\n    OpcodeDescriptionsBTC[\"OP_ROLL\"] = \"Pop the top item from the stack as a VM Number. Move the item at that depth (zero-indexed) to the top of the stack. (E.g. [a, b, c, 2] -> [b, c, a])\";\n    OpcodeDescriptionsBTC[\"OP_ROT\"] = \"Rotate the top 3 items on the stack, bringing the third item to the top. (E.g. [a, b, c] -> [b, c, a])\";\n    OpcodeDescriptionsBTC[\"OP_SWAP\"] = \"Swap the top two items on the stack. (E.g. [a, b] -> [b, a])\";\n    OpcodeDescriptionsBTC[\"OP_TUCK\"] = \"Duplicate the item at the top of the stack, inserting it below the second-to-top item. (E.g. [a, b] -> [b, a, b])\";\n    OpcodeDescriptionsBTC[\"OP_CAT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this concatenated two stack items.)\";\n    OpcodeDescriptionsBTC[\"OP_SUBSTR\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this returned a section of a stack item.)\";\n    OpcodeDescriptionsBTC[\"OP_LEFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this returned a section to the left of a point in a stack item.)\";\n    OpcodeDescriptionsBTC[\"OP_RIGHT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this returned a section to the right of a point in a stack item.)\";\n    OpcodeDescriptionsBTC[\"OP_SIZE\"] = \"Push the byte-length of the top stack item as a VM Number.\";\n    OpcodeDescriptionsBTC[\"OP_INVERT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this flipped all the bits in a stack item.)\";\n    OpcodeDescriptionsBTC[\"OP_AND\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a boolean AND on each bit in two stack items.)\";\n    OpcodeDescriptionsBTC[\"OP_OR\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a boolean OR on each bit in two stack items.)\";\n    OpcodeDescriptionsBTC[\"OP_XOR\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a boolean XOR on each bit in two stack items.)\";\n    OpcodeDescriptionsBTC[\"OP_EQUAL\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If they are the same, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_EQUALVERIFY\"] = \"Pop the top two items from the stack and compare them byte-by-byte. If the values are different, error. (This operation is a combination of OP_EQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBTC[\"OP_RESERVED1\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_RESERVED2\"] = \"Error unless found in an unexecuted conditional branch. Note: OP_RESERVED2 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_MUL\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this multiplied two VM Numbers.)\";\n    OpcodeDescriptionsBTC[\"OP_DIV\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this divided a VM Number by another.)\";\n    OpcodeDescriptionsBTC[\"OP_MOD\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this returned the remainder after dividing one VM Number by another.)\";\n    OpcodeDescriptionsBTC[\"OP_1ADD\"] = \"Pop the top item from the stack as a VM Number, add 1, then push the result.\";\n    OpcodeDescriptionsBTC[\"OP_1SUB\"] = \"Pop the top item from the stack as a VM Number, subtract 1, then push the result.\";\n    OpcodeDescriptionsBTC[\"OP_2MUL\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this multiplied a VM Number by 2.)\";\n    OpcodeDescriptionsBTC[\"OP_2DIV\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this divided a VM Number by 2.)\";\n    OpcodeDescriptionsBTC[\"OP_NEGATE\"] = \"Pop the top item from the stack as a VM Number, negate it, then push the result.\";\n    OpcodeDescriptionsBTC[\"OP_ABS\"] = \"Pop the top item from the stack as a VM Number, take its absolute value, then push the result.\";\n    OpcodeDescriptionsBTC[\"OP_NOT\"] = \"Pop the top item from the stack as a VM Number. If its value is 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_0NOTEQUAL\"] = \"Pop the top item from the stack as a VM Number. If its value is not 0, push a 1 (VM Number), otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_ADD\"] = \"Pop the top two items from the stack as VM Numbers. Add them, then push the result.\";\n    OpcodeDescriptionsBTC[\"OP_SUB\"] = \"Pop the top two items from the stack as VM Numbers. Subtract the top item from the second item, then push the result.\";\n    OpcodeDescriptionsBTC[\"OP_LSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, left bit shift.)\";\n    OpcodeDescriptionsBTC[\"OP_RSHIFT\"] = \"Error, even when found in an unexecuted conditional branch. (Historically, this performed a sign-preserving, right bit shift.)\";\n    OpcodeDescriptionsBTC[\"OP_BOOLAND\"] = \"Pop the top two items from the stack as VM Numbers. If neither value is a 0 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_BOOLOR\"] = \"Pop the top two items from the stack as VM Numbers. If either value is a 1 (VM Number), push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_NUMEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_NUMEQUALVERIFY\"] = \"Pop the top two items from the stack as VM Numbers. If the values are different, error. (This operation is a combination of OP_NUMEQUAL followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBTC[\"OP_NUMNOTEQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the values are not equal, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_LESSTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_GREATERTHAN\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_LESSTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is less than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_GREATERTHANOREQUAL\"] = \"Pop the top two items from the stack as VM Numbers. If the second item is greater than or equal to the top item, push a 1 (VM Number). Otherwise, push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_MIN\"] = \"Pop the top two items from the stack as VM Numbers. Push the smaller of the two numbers.\";\n    OpcodeDescriptionsBTC[\"OP_MAX\"] = \"Pop the top two items from the stack as VM Numbers. Push the larger of the two numbers.\";\n    OpcodeDescriptionsBTC[\"OP_WITHIN\"] = \"Pop the top three items from the stack as VM Numbers. If the top number is within the range defined by the following two numbers (left-inclusive), push a 1 (VM Number). Otherwise, push a 0 (VM Number). (E.g. for [a, b, c]: if (b <= a), and (a < c), [1]. Else [0].)\";\n    OpcodeDescriptionsBTC[\"OP_RIPEMD160\"] = \"Pop the top item from the stack and pass it through ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_SHA1\"] = \"Pop the top item from the stack and pass it through sha1, pushing the result onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_SHA256\"] = \"Pop the top item from the stack and pass it through sha256, pushing the result onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_HASH160\"] = \"Pop the top item from the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_HASH256\"] = \"Pop the top item from the stack and pass it through sha256 twice, pushing the result onto the stack.\";\n    OpcodeDescriptionsBTC[\"OP_CODESEPARATOR\"] = \"Update the value of lastCodeSeparator to the instruction pointer's current value. (This reduces the coverage of signing serializations used in signature verification operations.)\";\n    OpcodeDescriptionsBTC[\"OP_CHECKSIG\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is valid, push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_CHECKSIGVERIFY\"] = \"Pop the top two items from the stack. Treat the top as a signature and the second as a public key. If the signature is not valid, error. (This operation is a combination of OP_CHECKSIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBTC[\"OP_CHECKMULTISIG\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, pop a final VM Number that must be 0 due to a protocol bug. Checking each signature against each public key in order, if all signatures are valid \\u2013 and the required number of signatures have been provided \\u2013 push a 1 (VM Number), otherwise push a 0 (VM Number).\";\n    OpcodeDescriptionsBTC[\"OP_CHECKMULTISIGVERIFY\"] = \"Pop items from the stack: first pop the VM Number of public keys, then pop each of those public keys. Next, pop the VM Number of required signatures, then pop each of those signatures. Finally, (due to a protocol bug) pop an unused final VM Number that must be 0. Checking each signature against each public key in order, if any signatures are invalid \\u2013 or the required number of signatures have not been provided \\u2013 error. (This operation is a combination of OP_CHECKMULTISIG followed by OP_VERIFY.)\";\n    OpcodeDescriptionsBTC[\"OP_NOP1\"] = \"No operation (reserved for future expansion). Note: OP_NOP1 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_CHECKLOCKTIMEVERIFY\"] = \"Verify the transaction occurs after an absolute block time or height: read the top item on the stack as a VM Number (without removing it), and compare it to the transaction's locktime. If the required locktime has not passed, or if locktime has been disabled for this input by a maximized sequence number, error.\";\n    OpcodeDescriptionsBTC[\"OP_CHECKSEQUENCEVERIFY\"] = \"Verify the transaction occurs after the output being spent has \\\"aged\\\" by a relative block time or block height since it was created: read the top item on the stack as a VM Number (without removing it), and compare it to the age encoded in the input's sequence number. If the required relative locktime has not passed, or if relative locktime has been disabled by the sequence number or the transaction version, error.\";\n    OpcodeDescriptionsBTC[\"OP_NOP4\"] = \"No operation (reserved for future expansion). Note: OP_NOP4 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_NOP6\"] = \"No operation (reserved for future expansion). Note: OP_NOP6 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_NOP5\"] = \"No operation (reserved for future expansion). Note: OP_NOP5 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_NOP7\"] = \"No operation (reserved for future expansion). Note: OP_NOP7 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_NOP8\"] = \"No operation (reserved for future expansion). Note: OP_NOP8 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_NOP9\"] = \"No operation (reserved for future expansion). Note: OP_NOP9 counts toward the opcode limit.\";\n    OpcodeDescriptionsBTC[\"OP_NOP10\"] = \"No operation (reserved for future expansion). Note: OP_NOP10 counts toward the opcode limit.\";\n})(OpcodeDescriptionsBTC || (OpcodeDescriptionsBTC = {}));\n//# sourceMappingURL=btc-descriptions.js.map", "export {};\n//# sourceMappingURL=btc-types.js.map", "export {};\n//# sourceMappingURL=vm-types.js.map", "export var IdentifierResolutionType;\n(function (IdentifierResolutionType) {\n    IdentifierResolutionType[\"opcode\"] = \"opcode\";\n    IdentifierResolutionType[\"variable\"] = \"variable\";\n    IdentifierResolutionType[\"script\"] = \"script\";\n})(IdentifierResolutionType || (IdentifierResolutionType = {}));\nexport var IdentifierResolutionErrorType;\n(function (IdentifierResolutionErrorType) {\n    IdentifierResolutionErrorType[\"unknown\"] = \"unknown\";\n    IdentifierResolutionErrorType[\"variable\"] = \"variable\";\n    IdentifierResolutionErrorType[\"script\"] = \"script\";\n})(IdentifierResolutionErrorType || (IdentifierResolutionErrorType = {}));\n//# sourceMappingURL=language-types.js.map", "import { binToHex, flattenBinArray } from '../format/format.js';\nimport { authenticationInstructionIsMalformed, decodeAuthenticationInstructions, encodeAuthenticationInstructionMalformed, OpcodesBCHCHIPs, vmNumberToBigInt, } from '../vm/vm.js';\nconst pluckStartPosition = (range) => ({\n    startColumn: range.startColumn,\n    startLineNumber: range.startLineNumber,\n});\nconst pluckEndPosition = (range) => ({\n    endColumn: range.endColumn,\n    endLineNumber: range.endLineNumber,\n});\n/**\n * Combine an array of `Range`s into a single larger `Range`.\n *\n * @param ranges - an array of `Range`s\n * @param parentRange - the range to assume if `ranges` is an empty array\n */\nexport const mergeRanges = (ranges, parentRange = {\n    endColumn: 0,\n    endLineNumber: 0,\n    startColumn: 0,\n    startLineNumber: 0,\n}) => {\n    const minimumRangesToMerge = 2;\n    const unsortedMerged = ranges.length < minimumRangesToMerge\n        ? ranges.length === 1\n            ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                ranges[0]\n            : parentRange\n        : ranges.reduce(\n        // eslint-disable-next-line complexity\n        (merged, range) => ({\n            ...(range.endLineNumber > merged.endLineNumber\n                ? pluckEndPosition(range)\n                : range.endLineNumber === merged.endLineNumber &&\n                    range.endColumn > merged.endColumn\n                    ? pluckEndPosition(range)\n                    : pluckEndPosition(merged)),\n            ...(range.startLineNumber < merged.startLineNumber\n                ? pluckStartPosition(range)\n                : range.startLineNumber === merged.startLineNumber &&\n                    range.startColumn < merged.startColumn\n                    ? pluckStartPosition(range)\n                    : pluckStartPosition(merged)),\n        }), \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        ranges[0]);\n    return {\n        ...pluckEndPosition(unsortedMerged),\n        ...pluckStartPosition(unsortedMerged),\n    };\n};\n/**\n * Returns true if the `outerRange` fully contains the `innerRange`, otherwise,\n * `false`.\n *\n * @param outerRange - the bounds of the outer range\n * @param innerRange - the inner range to test\n * @param exclusive - disallow the `innerRange` from overlapping the\n * `outerRange` (such that the outer start and end columns may not be equal) –\n * defaults to `true`\n */\n// eslint-disable-next-line complexity\nexport const containsRange = (outerRange, innerRange, exclusive = true) => {\n    const startsAfter = outerRange.startLineNumber < innerRange.startLineNumber\n        ? true\n        : outerRange.startLineNumber === innerRange.startLineNumber\n            ? exclusive\n                ? outerRange.startColumn < innerRange.startColumn\n                : outerRange.startColumn <= innerRange.startColumn\n            : false;\n    const endsBefore = outerRange.endLineNumber > innerRange.endLineNumber\n        ? true\n        : outerRange.endLineNumber === innerRange.endLineNumber\n            ? exclusive\n                ? outerRange.endColumn > innerRange.endColumn\n                : outerRange.endColumn >= innerRange.endColumn\n            : false;\n    return startsAfter && endsBefore;\n};\n/**\n * Extract a list of the errors that occurred while resolving a script.\n *\n * @param resolvedScript - the result of {@link resolveScript} from which to\n * extract errors\n */\nexport const getResolutionErrors = (resolvedScript) => resolvedScript.reduce((errors, segment) => {\n    switch (segment.type) {\n        case 'error':\n            return [\n                ...errors,\n                {\n                    error: segment.value,\n                    ...(segment.missingIdentifier === undefined\n                        ? {}\n                        : {\n                            missingIdentifier: segment.missingIdentifier,\n                            owningEntity: segment.owningEntity,\n                        }),\n                    range: segment.range,\n                },\n            ];\n        case 'push':\n        case 'evaluation':\n            return [...errors, ...getResolutionErrors(segment.value)];\n        default:\n            return errors;\n    }\n}, []);\n/**\n * Verify that every error in the provided array can be resolved by providing\n * additional variables in the compilation data (rather than deeper issues, like\n * problems with the authentication template or wallet implementation).\n *\n * Note, errors are only recoverable if the \"entity ownership\" of each missing\n * identifier is known (specified in `CompilationData`'s `entityOwnership`).\n *\n * @param errors - an array of compilation errors\n */\nexport const allErrorsAreRecoverable = (errors) => errors.every((error) => 'missingIdentifier' in error && 'owningEntity' in error);\n/**\n * Get an array of all resolutions used in a {@link ResolvedScript}.\n * @param resolvedScript - the resolved script to search\n */\nexport const extractBytecodeResolutions = (resolvedScript) => \n// eslint-disable-next-line complexity\nresolvedScript.reduce((all, segment) => {\n    switch (segment.type) {\n        case 'push':\n        case 'evaluation':\n            return [...all, ...extractBytecodeResolutions(segment.value)];\n        case 'bytecode':\n            if ('variable' in segment) {\n                return [\n                    ...all,\n                    {\n                        bytecode: segment.value,\n                        text: segment.variable,\n                        type: 'variable',\n                    },\n                ];\n            }\n            if ('script' in segment) {\n                return [\n                    ...all,\n                    ...extractBytecodeResolutions(segment.source),\n                    {\n                        bytecode: segment.value,\n                        text: segment.script,\n                        type: 'script',\n                    },\n                ];\n            }\n            if ('opcode' in segment) {\n                return [\n                    ...all,\n                    {\n                        bytecode: segment.value,\n                        text: segment.opcode,\n                        type: 'opcode',\n                    },\n                ];\n            }\n            return [\n                ...all,\n                {\n                    bytecode: segment.value,\n                    text: segment.literal,\n                    type: segment.literalType,\n                },\n            ];\n        default:\n            return all;\n    }\n}, []);\n/**\n * Extract an object mapping the variable identifiers used in a\n * {@link ResolvedScript} to their resolved bytecode.\n *\n * @param resolvedScript - the resolved script to search\n */\nexport const extractResolvedVariableBytecodeMap = (resolvedScript) => extractBytecodeResolutions(resolvedScript).reduce((all, resolution) => resolution.type === 'variable'\n    ? { ...all, [resolution.text]: resolution.bytecode }\n    : all, {});\n/**\n * Format a list of {@link CompilationError}s into a single string, with an\n * error start position following each error. E.g. for line 1, column 2:\n * `The error message. [1, 2]`\n *\n * Errors are separated with the `separator`, which defaults to `; `, e.g.:\n * `The first error message. [1, 2]; The second error message. [3, 4]`\n *\n * @param errors - an array of compilation errors\n * @param separator - the characters with which to join the formatted errors.\n */\nexport const stringifyErrors = (errors, separator = '; ') => `${errors\n    .map((error) => `[${error.range.startLineNumber}, ${error.range.startColumn}] ${error.error}`)\n    .join(separator)}`;\n/**\n * Extract a set of \"evaluation samples\" from the result of a CashAssembly\n * compilation and a matching debug trace (from `vm.debug`), pairing program\n * states with the source ranges that produced them – like a \"source map\" for\n * complete evaluations. This is useful for omniscient debuggers like\n * Bitauth IDE.\n *\n * Returns an array of samples and an array of unmatched program states\n * remaining if `nodes` doesn't contain enough instructions to consume all\n * program states provided in `trace`. Returned samples are ordered by the\n * ending position (line and column) of their range.\n *\n * If all program states are consumed before the available nodes are exhausted,\n * the remaining nodes are ignored (the produced samples end at the last\n * instruction for which a program state exists). This usually occurs when an\n * error halts evaluation before the end of the script. (Note: if this occurs,\n * the final trace state will not be used, as it is expected to be the\n * duplicated final result produced by `vm.debug`, and should not be matched\n * with the next instruction. The returned `unmatchedStates` will have a length\n * of `0`.)\n *\n * This method allows for samples to be extracted from a single evaluation;\n * most applications should use\n * {@link extractEvaluationSamplesRecursive} instead.\n *\n * @remarks\n * This method incrementally concatenates the reduced bytecode from each node,\n * parsing the result into evaluation samples.\n *\n * Each node can contain only a portion of an instruction (like a long push\n * operation), or it can contain multiple instructions (like a long hex literal\n * representing a string of bytecode or an evaluation that is not wrapped by a\n * push).\n *\n * If a node contains only a portion of an instruction, the bytecode from\n * additional nodes are concatenated (and ranges merged) until an instruction\n * can be created. If any bytecode remains after a sample has been created, the\n * next sample begins in the same range. (For this reason, it's possible that\n * samples overlap.)\n *\n * If a node contains more than one instruction, the intermediate states\n * produced before the final state for that sample are saved to the sample's\n * `intermediateStates` array.\n *\n * If the program states in `trace` are exhausted before the final instruction\n * in a sample (usually caused by an evaluation error), the last instruction\n * with a matching program state is used for the sample (with its program\n * state), and the unmatched instructions are ignored. (This allows the \"last\n * known state\" to be displayed for the sample that caused evaluation to halt.)\n *\n * ---\n *\n * For example, the following script demonstrates many of these cases:\n *\n * `0x00 0x01 0xab01 0xcd9300 $(OP_3 <0x00> OP_SWAP OP_CAT) 0x010203`\n *\n * Which compiles to `0x0001ab01cd93000003010203`, disassembled:\n *\n * `OP_0 OP_PUSHBYTES_1 0xab OP_PUSHBYTES_1 0xcd OP_ADD OP_0 OP_0 OP_PUSHBYTES_3 0x010203`\n *\n * In the script, there are 6 top-level nodes (identified below within `[]`):\n *\n * `[0x00] [0x01] [0xab01] [0xcd9300] [$(OP_3 <0x00> OP_SWAP OP_CAT)] [0x010203]`\n *\n * These nodes together encode 7 instructions, some within a single node, and\n * some split between several nodes. Below we substitute the evaluation for its\n * result `0x0003` to group instructions by `[]`:\n *\n * `[0x00] [0x01 0xab][01 0xcd][93][00] [0x00][03 0x010203]`\n *\n * The \"resolution\" of samples is limited to the range of single nodes: nodes\n * cannot always be introspected to determine where contained instructions begin\n * and end. For example, it is ambiguous which portions of the evaluation are\n * responsible for the initial `0x00` and which are responsible for the `0x03`.\n *\n * For this reason, the range of each sample is limited to the range(s) of one\n * or more adjacent nodes. Samples may overlap in the range of a node that is\n * responsible for both ending a previous sample and beginning a new sample.\n * (Though, only 2 samples can overlap. If a node is responsible for more than 2\n * instructions, the second sample includes `internalStates` for instructions\n * that occur before the end of the second sample.)\n *\n * In this case, there are 6 samples identified below within `[]`, where each\n * `[` is closed by the closest following `]` (no nesting):\n *\n * `[0x00] [0x01 [0xab01] [0xcd9300]] [[$(OP_3 <0x00> OP_SWAP OP_CAT)] 0x010203]`\n *\n * The ranges for each sample (in terms of nodes) are as follows:\n * - Sample 1: node 1\n * - Sample 2: node 2 + node 3\n * - Sample 3: node 3 + node 4\n * - Sample 4: node 4\n * - Sample 5: node 5\n * - Sample 6: node 5 + node 6\n *\n * Note that the following samples overlap:\n * - Sample 2 and Sample 3\n * - Sample 3 and Sample 4\n * - Sample 5 and Sample 6\n *\n * Finally, note that Sample 4 will have one internal state produced by the\n * `OP_ADD` instruction. Sample 4 then ends with the `OP_0` (`0x00`) instruction\n * at the end of the `0xcd9300` node.\n *\n * ---\n *\n * Note, this implementation relies on the expectation that `trace` begins with\n * the initial program state, contains a single program state per instruction,\n * and ends with the final program state (as produced by `vm.debug`). It also\n * expects the `bytecode` provided by nodes to be parsable by\n * {@link decodeAuthenticationInstructions}.\n */\n// eslint-disable-next-line complexity\nexport const extractEvaluationSamples = ({ evaluationRange, nodes, trace, }) => {\n    const traceWithoutFinalState = trace.length > 1 ? trace.slice(0, -1) : trace.slice();\n    if (traceWithoutFinalState.length === 0) {\n        return {\n            samples: [],\n            unmatchedStates: [],\n        };\n    }\n    const samples = [\n        {\n            evaluationRange,\n            internalStates: [],\n            range: {\n                endColumn: evaluationRange.startColumn,\n                endLineNumber: evaluationRange.startLineNumber,\n                startColumn: evaluationRange.startColumn,\n                startLineNumber: evaluationRange.startLineNumber,\n            },\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            state: traceWithoutFinalState[0],\n        },\n    ];\n    // eslint-disable-next-line functional/no-let\n    let nextState = 1;\n    // eslint-disable-next-line functional/no-let\n    let nextNode = 0;\n    // eslint-disable-next-line functional/no-let, @typescript-eslint/init-declarations\n    let incomplete;\n    // eslint-disable-next-line functional/no-loop-statement\n    while (nextState < traceWithoutFinalState.length && nextNode < nodes.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const currentNode = nodes[nextNode];\n        const { mergedBytecode, mergedRange } = incomplete === undefined\n            ? {\n                mergedBytecode: currentNode.bytecode,\n                mergedRange: currentNode.range,\n            }\n            : {\n                mergedBytecode: flattenBinArray([\n                    incomplete.bytecode,\n                    currentNode.bytecode,\n                ]),\n                mergedRange: mergeRanges([incomplete.range, currentNode.range]),\n            };\n        const decoded = decodeAuthenticationInstructions(mergedBytecode);\n        const [zeroth] = decoded;\n        const hasNonMalformedInstructions = zeroth !== undefined && !('malformed' in zeroth);\n        if (hasNonMalformedInstructions) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const lastInstruction = decoded[decoded.length - 1];\n            const validInstructions = authenticationInstructionIsMalformed(lastInstruction)\n                ? decoded.slice(0, decoded.length - 1)\n                : decoded;\n            const firstUnmatchedStateIndex = nextState + validInstructions.length;\n            const matchingStates = traceWithoutFinalState.slice(nextState, firstUnmatchedStateIndex);\n            const pairedStates = validInstructions.map((instruction, index) => ({\n                instruction,\n                state: matchingStates[index],\n            }));\n            /**\n             * Guaranteed to have a defined `state` (or the loop would have exited).\n             */\n            const firstPairedState = pairedStates[0];\n            const closesCurrentlyOpenSample = incomplete !== undefined;\n            // eslint-disable-next-line functional/no-conditional-statement\n            if (closesCurrentlyOpenSample) {\n                // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n                samples.push({\n                    evaluationRange,\n                    instruction: firstPairedState.instruction,\n                    internalStates: [],\n                    range: mergedRange,\n                    state: firstPairedState.state,\n                });\n            }\n            const firstUndefinedStateIndex = pairedStates.findIndex(({ state }) => state === undefined);\n            const sampleHasError = firstUndefinedStateIndex !== -1;\n            const sampleClosingIndex = sampleHasError\n                ? firstUndefinedStateIndex - 1\n                : pairedStates.length - 1;\n            const closesASecondSample = !closesCurrentlyOpenSample || sampleClosingIndex > 0;\n            // eslint-disable-next-line functional/no-conditional-statement\n            if (closesASecondSample) {\n                const finalState = pairedStates[sampleClosingIndex];\n                const secondSamplePairsBegin = closesCurrentlyOpenSample ? 1 : 0;\n                const internalStates = pairedStates.slice(secondSamplePairsBegin, sampleClosingIndex);\n                // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n                samples.push({\n                    evaluationRange,\n                    instruction: finalState.instruction,\n                    internalStates,\n                    range: currentNode.range,\n                    state: finalState.state,\n                });\n            }\n            // eslint-disable-next-line functional/no-expression-statement\n            nextState = firstUnmatchedStateIndex;\n            // eslint-disable-next-line functional/no-conditional-statement\n            if (authenticationInstructionIsMalformed(lastInstruction)) {\n                // eslint-disable-next-line functional/no-expression-statement\n                incomplete = {\n                    bytecode: encodeAuthenticationInstructionMalformed(lastInstruction),\n                    range: currentNode.range,\n                };\n                // eslint-disable-next-line functional/no-conditional-statement\n            }\n            else {\n                // eslint-disable-next-line functional/no-expression-statement\n                incomplete = undefined;\n            }\n            // eslint-disable-next-line functional/no-conditional-statement\n        }\n        else {\n            const lastInstruction = decoded[decoded.length - 1];\n            // eslint-disable-next-line functional/no-expression-statement\n            incomplete =\n                lastInstruction === undefined\n                    ? undefined\n                    : {\n                        bytecode: encodeAuthenticationInstructionMalformed(lastInstruction),\n                        range: mergedRange,\n                    };\n        }\n        // eslint-disable-next-line functional/no-expression-statement\n        nextNode += 1;\n    }\n    /**\n     * Because we ran out of `trace` states before all `nodes` were matched, we\n     * know an error occurred which halted evaluation. This error is indicated in\n     * the result by returning an empty array of `unmatchedStates`. Successful\n     * evaluations will always return at least one unmatched state: the final\n     * \"evaluation result\" state produced by `vm.debug`.\n     */\n    const errorOccurred = nextNode < nodes.length;\n    const unmatchedStates = errorOccurred\n        ? []\n        : trace.slice(nextState);\n    return {\n        samples,\n        unmatchedStates,\n    };\n};\n/**\n * Similar to {@link extractEvaluationSamples}, but recursively extracts samples\n * from evaluations within the provided array of nodes.\n *\n * Because CashAssembly evaluations are fully self-contained, there should never\n * be unmatched states from evaluations within a script reduction trace tree.\n * (For this reason, this method does not return the `unmatchedStates` from\n * nested evaluations.)\n *\n * Returned samples are ordered by the ending position (line and column) of\n * their range. Samples from CashAssembly evaluations that occur within an\n * outer evaluation appear before their parent sample (which uses their result).\n */\nexport const extractEvaluationSamplesRecursive = ({ \n/**\n * The range of the script node that was evaluated to produce the `trace`\n */\nevaluationRange, \n/**\n * An array of reduced nodes to parse\n */\nnodes, \n/**\n * The `vm.debug` result to map to these nodes\n */\ntrace, }) => {\n    const extractEvaluations = (node, depth = 1) => {\n        if ('push' in node) {\n            return node.push.script.reduce((all, childNode) => [...all, ...extractEvaluations(childNode, depth)], []);\n        }\n        if ('source' in node) {\n            const childSamples = node.source.script.reduce((all, childNode) => [\n                ...all,\n                ...extractEvaluations(childNode, depth + 1),\n            ], []);\n            const traceWithoutUnlockingPhase = node.trace.slice(1);\n            const evaluationBeginToken = '$(';\n            const evaluationEndToken = ')';\n            const extracted = extractEvaluationSamples({\n                evaluationRange: {\n                    endColumn: node.range.endColumn - evaluationEndToken.length,\n                    endLineNumber: node.range.endLineNumber,\n                    startColumn: node.range.startColumn + evaluationBeginToken.length,\n                    startLineNumber: node.range.startLineNumber,\n                },\n                nodes: node.source.script,\n                trace: traceWithoutUnlockingPhase,\n            });\n            return [...extracted.samples, ...childSamples];\n        }\n        return [];\n    };\n    const { samples, unmatchedStates } = extractEvaluationSamples({\n        evaluationRange,\n        nodes,\n        trace,\n    });\n    const childSamples = nodes.reduce((all, node) => [...all, ...extractEvaluations(node)], []);\n    const endingOrderedSamples = [...samples, ...childSamples].sort((a, b) => {\n        const linesOrdered = a.range.endLineNumber - b.range.endLineNumber;\n        return linesOrdered === 0\n            ? a.range.endColumn - b.range.endColumn\n            : linesOrdered;\n    });\n    return {\n        samples: endingOrderedSamples,\n        unmatchedStates,\n    };\n};\nconst stateIsExecuting = (state) => state.controlStack.every((item) => item !== false);\n/**\n * Extract an array of ranges that were unused by an evaluation. This is useful\n * in development tooling for fading out or hiding code that is unimportant to\n * the current evaluation being tested.\n *\n * @remarks\n * Only ranges that are guaranteed to be unimportant to an evaluation are\n * returned by this method. These ranges are extracted from samples that:\n * - are preceded by a sample that ends with execution disabled (e.g. an\n * unsuccessful `OP_IF`)\n * - end with execution disabled, and\n * - contain no `internalStates` that enable execution.\n *\n * Note, internal states that temporarily re-enable and then disable execution\n * again can still have an effect on the parent evaluation, so this method\n * conservatively excludes such samples. For example, the hex literal\n * `0x675167`, which encodes `OP_ELSE OP_1 OP_ELSE`, could begin and end with\n * states in which execution is disabled, yet a `1` is pushed to the stack\n * during the sample's evaluation. (Samples like this are unusual, and can\n * almost always be reformatted to clearly separate the executed and unexecuted\n * instructions.)\n *\n * @param samples - an array of samples ordered by the ending position (line and\n * column) of their range.\n * @param evaluationBegins - the line and column at which the initial sample's\n * evaluation range begins (where the preceding state is assumed to be\n * executing), defaults to `1,1`\n */\nexport const extractUnexecutedRanges = (samples, evaluationBegins = '1,1') => {\n    const reduced = samples.reduce((all, sample) => {\n        const { precedingStateSkipsByEvaluation, unexecutedRanges } = all;\n        const currentEvaluationStartLineAndColumn = `${sample.evaluationRange.startLineNumber},${sample.evaluationRange.startColumn}`;\n        const precedingStateSkips = \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        precedingStateSkipsByEvaluation[currentEvaluationStartLineAndColumn];\n        const endsWithSkip = !stateIsExecuting(sample.state);\n        const sampleHasNoExecutedInstructions = endsWithSkip &&\n            sample.internalStates.every((group) => !stateIsExecuting(group.state));\n        if (precedingStateSkips && sampleHasNoExecutedInstructions) {\n            return {\n                precedingStateSkipsByEvaluation: {\n                    ...precedingStateSkipsByEvaluation,\n                    [currentEvaluationStartLineAndColumn]: true,\n                },\n                unexecutedRanges: [...unexecutedRanges, sample.range],\n            };\n        }\n        return {\n            precedingStateSkipsByEvaluation: {\n                ...precedingStateSkipsByEvaluation,\n                [currentEvaluationStartLineAndColumn]: endsWithSkip,\n            },\n            unexecutedRanges,\n        };\n    }, {\n        precedingStateSkipsByEvaluation: {\n            [evaluationBegins]: false,\n        },\n        unexecutedRanges: [],\n    });\n    const canHaveContainedRanges = 2;\n    const containedRangesExcluded = reduced.unexecutedRanges.length < canHaveContainedRanges\n        ? reduced.unexecutedRanges\n        : reduced.unexecutedRanges.slice(0, -1).reduceRight((all, range) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (containsRange(all[0], range)) {\n                return all;\n            }\n            return [range, ...all];\n        }, \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        [reduced.unexecutedRanges[reduced.unexecutedRanges.length - 1]]);\n    return containedRangesExcluded;\n};\n/**\n * Given a stack, return a summary of the stack's contents, encoding valid VM\n * numbers as numbers, and all other stack items as hex literals.\n *\n * @param stack - a stack of Uint8Array values\n */\nexport const summarizeStack = (stack) => stack.map((item) => {\n    const asNumber = vmNumberToBigInt(item);\n    return `0x${binToHex(item)}${typeof asNumber === 'string' ? '' : `(${asNumber.toString()})`}`;\n});\n/**\n * Given a debug trace (produced by {@link AuthenticationVirtualMachine.debug}),\n * return an array summarizing each step of the trace. Note, debug traces\n * include the full program state at the beginning of each evaluation step; the\n * summary produced by this method instead shows the resulting stacks after each\n * evaluation step.\n */\nexport const summarizeDebugTrace = (trace) => trace.reduce(\n// eslint-disable-next-line max-params\n(steps, state, stateIndex, states) => {\n    const nextState = states[stateIndex + 1];\n    return nextState === undefined\n        ? steps\n        : [\n            ...steps,\n            {\n                alternateStack: summarizeStack(nextState.alternateStack),\n                ...(nextState.error === undefined\n                    ? {}\n                    : { error: nextState.error }),\n                execute: state.controlStack[state.controlStack.length - 1] !== false,\n                instruction: state.instructions[state.ip],\n                ip: state.ip,\n                stack: summarizeStack(nextState.stack),\n            },\n        ];\n}, []);\n/**\n * Return a string with the result of {@link summarizeDebugTrace} including one\n * step per line.\n *\n * @param summary - a summary produced by {@link summarizeDebugTrace}\n */\nexport const stringifyDebugTraceSummary = (summary, { opcodes, padInstruction, } = {\n    opcodes: OpcodesBCHCHIPs,\n    padInstruction: 23,\n}) => summary\n    .map(\n// eslint-disable-next-line complexity\n(line) => `${(line.instruction === undefined\n    ? '=>'\n    : `${line.ip}. ${line.execute ? '' : '(skip)'}${opcodes[line.instruction.opcode] ??\n        `OP_UNKNOWN${line.instruction.opcode}`}:`).padEnd(padInstruction)} ${typeof line.error === 'string'\n    ? line.error\n    : `${line.stack.join(' ')}${line.alternateStack.length === 0\n        ? ''\n        : `| alt: ${line.alternateStack.join(' ')}`}`}`)\n    .join('\\n');\n//# sourceMappingURL=language-utils.js.map", "import { P } from './parsimmon.js';\n/* eslint-disable sort-keys, @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access */\nconst cashAssemblyParser = P.createLanguage({\n    script: (r) => P.seqMap(P.optWhitespace, r.expression.sepBy(P.optWhitespace), P.optWhitespace, (_, expressions) => expressions).node('Script'),\n    expression: (r) => P.alt(r.comment, r.push, r.evaluation, r.utf8, r.binary, r.hex, r.bigint, r.identifier),\n    comment: (r) => P.alt(r.singleLineComment, r.multiLineComment).node('Comment'),\n    singleLineComment: () => P.seqMap(P.string('//').desc(\"the start of a single-line comment ('//')\"), P.regexp(/[^\\n]*/u), (__, comment) => comment.trim()),\n    multiLineComment: () => P.seqMap(P.string('/*').desc(\"the start of a multi-line comment ('/*')\"), P.regexp(/[\\s\\S]*?\\*\\//u).desc(\"the end of this multi-line comment ('*/')\"), (__, comment) => comment.slice(0, -'*/'.length).trim()),\n    push: (r) => P.seqMap(P.string('<').desc(\"the start of a push statement ('<')\"), r.script, P.string('>').desc(\"the end of this push statement ('>')\"), (_, push) => push).node('Push'),\n    evaluation: (r) => P.seqMap(P.string('$').desc(\"the start of an evaluation ('$')\"), P.string('(').desc(\"the opening parenthesis of this evaluation ('(')\"), r.script, P.string(')').desc(\"the closing parenthesis of this evaluation (')')\"), (_, __, evaluation) => evaluation).node('Evaluation'),\n    identifier: () => P.regexp(/[a-zA-Z_][.a-zA-Z0-9_-]*/u)\n        .desc('a valid identifier')\n        .node('Identifier'),\n    utf8: () => P.alt(P.seqMap(P.string('\"').desc('a double quote (\")'), P.regexp(/[^\"]*/u), P.string('\"').desc('a closing double quote (\")'), (__, literal) => literal), P.seqMap(P.string(\"'\").desc(\"a single quote (')\"), P.regexp(/[^']*/u), P.string(\"'\").desc(\"a closing single quote (')\"), (__, literal) => literal)).node('UTF8Literal'),\n    hex: () => P.seqMap(P.string('0x').desc(\"a hex literal ('0x...')\"), P.regexp(/[0-9a-f]_*(?:_*[0-9a-f]_*[0-9a-f]_*)*[0-9a-f]/iu).desc('a valid hexadecimal string'), (__, literal) => literal).node('HexLiteral'),\n    binary: () => P.seqMap(P.string('0b').desc(\"a binary literal ('0b...')\"), P.regexp(/[01]+(?:[01_]*[01]+)*/iu).desc('a string of binary digits'), (__, literal) => literal).node('BinaryLiteral'),\n    bigint: () => P.regexp(/-?[0-9]+(?:[0-9_]*[0-9]+)*/u)\n        .desc('an integer literal')\n        .node('BigIntLiteral'),\n});\n/* eslint-enable sort-keys, @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access */\nexport const parseScript = (script) => cashAssemblyParser.script.parse(script);\n//# sourceMappingURL=parse.js.map", "/**\n * This file is derived from https://github.com/jneen/parsimmon and\n * https://github.com/DefinitelyTyped/DefinitelyTyped.\n */\n/* eslint-disable @typescript-eslint/unified-signatures, functional/no-method-signature, functional/no-throw-statement, functional/no-conditional-statement, @typescript-eslint/no-this-alias, consistent-this, @typescript-eslint/ban-ts-comment, prefer-spread, @typescript-eslint/restrict-template-expressions, func-names, @typescript-eslint/init-declarations, new-cap, @typescript-eslint/require-array-sort-compare, guard-for-in, no-plusplus, functional/no-let, functional/no-loop-statement, @typescript-eslint/prefer-for-of, @typescript-eslint/restrict-plus-operands, functional/immutable-data, @typescript-eslint/no-use-before-define, @typescript-eslint/strict-boolean-expressions, no-param-reassign, functional/no-expression-statement, functional/no-this-expression, @typescript-eslint/no-explicit-any, func-style, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-return, @typescript-eslint/naming-convention, @typescript-eslint/method-signature-style, @typescript-eslint/no-confusing-void-expression, prefer-arrow-callback, functional/no-return-void, @typescript-eslint/no-unsafe-argument */\n// cspell: ignore accum\nfunction Parsimmon(action) {\n    // @ts-expect-error\n    if (!(this instanceof Parsimmon)) {\n        // @ts-expect-error\n        return new Parsimmon(action);\n    }\n    // @ts-expect-error\n    this._ = action;\n}\nconst _ = Parsimmon.prototype;\n// -*- Helpers -*-\nfunction makeSuccess(index, value) {\n    return {\n        expected: [],\n        furthest: -1,\n        index,\n        status: true,\n        value,\n    };\n}\nfunction makeFailure(index, expected) {\n    expected = [expected];\n    return {\n        expected,\n        furthest: index,\n        index: -1,\n        status: false,\n        value: null,\n    };\n}\nfunction mergeReplies(result, last) {\n    if (!last) {\n        return result;\n    }\n    if (result.furthest > last.furthest) {\n        return result;\n    }\n    const expected = result.furthest === last.furthest\n        ? union(result.expected, last.expected)\n        : last.expected;\n    return {\n        expected,\n        furthest: last.furthest,\n        index: result.index,\n        status: result.status,\n        value: result.value,\n    };\n}\nfunction makeLineColumnIndex(input, i) {\n    const lines = input.slice(0, i).split('\\n');\n    /*\n     * Note that unlike the character offset, the line and column offsets are\n     * 1-based.\n     */\n    const lineWeAreUpTo = lines.length;\n    const columnWeAreUpTo = lines[lines.length - 1].length + 1;\n    return {\n        column: columnWeAreUpTo,\n        line: lineWeAreUpTo,\n        offset: i,\n    };\n}\n// Returns the sorted set union of two arrays of strings\nfunction union(xs, ys) {\n    const obj = {};\n    for (let i = 0; i < xs.length; i++) {\n        // @ts-expect-error\n        obj[xs[i]] = true;\n    }\n    for (let j = 0; j < ys.length; j++) {\n        // @ts-expect-error\n        obj[ys[j]] = true;\n    }\n    const keys = [];\n    for (const k in obj) {\n        keys.push(k);\n    }\n    keys.sort();\n    return keys;\n}\n// -*- Error Formatting -*-\nfunction flags(re) {\n    const s = String(re);\n    return s.slice(s.lastIndexOf('/') + 1);\n}\nfunction anchoredRegexp(re) {\n    return RegExp(`^(?:${re.source})`, flags(re));\n}\n// -*- Combinators -*-\nfunction seq(...params) {\n    const parsers = [].slice.call(params);\n    const numParsers = parsers.length;\n    return Parsimmon(function (input, i) {\n        let result;\n        const accum = new Array(numParsers);\n        for (let j = 0; j < numParsers; j += 1) {\n            result = mergeReplies(parsers[j]._(input, i), result);\n            if (!result.status) {\n                return result;\n            }\n            accum[j] = result.value;\n            i = result.index;\n        }\n        return mergeReplies(makeSuccess(i, accum), result);\n    });\n}\nfunction seqMap(...params) {\n    const args = [].slice.call(params);\n    const mapper = args.pop();\n    return seq.apply(null, args).map(function (results) {\n        // @ts-expect-error\n        return mapper.apply(null, results);\n    });\n}\nfunction createLanguage(parsers) {\n    const language = {};\n    for (const key in parsers) {\n        (function (rule) {\n            const func = function () {\n                // @ts-expect-error\n                return parsers[rule](language);\n            };\n            // @ts-expect-error\n            language[rule] = lazy(func);\n        })(key);\n    }\n    return language;\n}\nfunction alt(...params) {\n    const parsers = [].slice.call(params);\n    return Parsimmon(function (input, i) {\n        let result;\n        for (let j = 0; j < parsers.length; j += 1) {\n            result = mergeReplies(parsers[j]._(input, i), result);\n            if (result.status) {\n                return result;\n            }\n        }\n        return result;\n    });\n}\nfunction sepBy(parser, separator) {\n    return sepBy1(parser, separator).or(succeed([]));\n}\nfunction sepBy1(parser, separator) {\n    const pairs = separator.then(parser).many();\n    return seqMap(parser, pairs, function (r, rs) {\n        return [r].concat(rs);\n    });\n}\n// -*- Core Parsing Methods -*-\n_.parse = function (input) {\n    const result = this.skip(eof)._(input, 0);\n    if (result.status) {\n        return {\n            status: true,\n            value: result.value,\n        };\n    }\n    return {\n        expected: result.expected,\n        index: makeLineColumnIndex(input, result.furthest),\n        status: false,\n    };\n};\n// -*- Other Methods -*-\n_.or = function (alternative) {\n    return alt(this, alternative);\n};\n_.then = function (next) {\n    return seq(this, next).map(function (results) {\n        return results[1];\n    });\n};\n_.many = function () {\n    const self = this;\n    return Parsimmon(function (input, i) {\n        const accum = [];\n        let result;\n        for (;;) {\n            result = mergeReplies(self._(input, i), result);\n            if (result.status) {\n                /* istanbul ignore if */ if (i === result.index) {\n                    throw new Error('infinite loop detected in .many() parser --- calling .many() on ' +\n                        'a parser that can accept zero characters is usually the cause');\n                }\n                i = result.index;\n                accum.push(result.value);\n            }\n            else {\n                return mergeReplies(makeSuccess(i, accum), result);\n            }\n        }\n    });\n};\n_.map = function (fn) {\n    const self = this;\n    return Parsimmon(function (input, i) {\n        const result = self._(input, i);\n        if (!result.status) {\n            return result;\n        }\n        return mergeReplies(makeSuccess(result.index, fn(result.value)), result);\n    });\n};\n_.skip = function (next) {\n    return seq(this, next).map(function (results) {\n        return results[0];\n    });\n};\n_.node = function (name) {\n    return seqMap(index, this, index, function (start, value, end) {\n        return {\n            end,\n            name,\n            start,\n            value,\n        };\n    });\n};\n_.sepBy = function (separator) {\n    return sepBy(this, separator);\n};\n_.desc = function (expected) {\n    expected = [expected];\n    const self = this;\n    return Parsimmon(function (input, i) {\n        const reply = self._(input, i);\n        if (!reply.status) {\n            reply.expected = expected;\n        }\n        return reply;\n    });\n};\n// -*- Constructors -*-\nfunction string(str) {\n    const expected = `'${str}'`;\n    return Parsimmon(function (input, i) {\n        const j = i + str.length;\n        const head = input.slice(i, j);\n        if (head === str) {\n            return makeSuccess(j, head);\n        }\n        return makeFailure(i, expected);\n    });\n}\nfunction regexp(re, group = 0) {\n    const anchored = anchoredRegexp(re);\n    const expected = String(re);\n    return Parsimmon(function (input, i) {\n        const match = anchored.exec(input.slice(i));\n        if (match) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const fullMatch = match[0];\n            const groupMatch = match[group];\n            return makeSuccess(i + fullMatch.length, groupMatch);\n        }\n        return makeFailure(i, expected);\n    });\n}\nfunction succeed(value) {\n    return Parsimmon(function (__, i) {\n        return makeSuccess(i, value);\n    });\n}\nfunction lazy(f) {\n    const parser = Parsimmon(function (input, i) {\n        parser._ = f()._;\n        return parser._(input, i);\n    });\n    return parser;\n}\n// -*- Base Parsers -*-\nconst index = Parsimmon(function (input, i) {\n    return makeSuccess(i, makeLineColumnIndex(input, i));\n});\nconst eof = Parsimmon(function (input, i) {\n    if (i < input.length) {\n        return makeFailure(i, 'EOF');\n    }\n    return makeSuccess(i, null);\n});\nconst optWhitespace = regexp(/\\s*/u).desc('optional whitespace');\nconst whitespace = regexp(/\\s+/u).desc('whitespace');\nexport const P = {\n    alt,\n    createLanguage,\n    index,\n    lazy,\n    makeFailure,\n    makeSuccess,\n    of: succeed,\n    optWhitespace,\n    regexp,\n    sepBy,\n    sepBy1,\n    seq,\n    seqMap,\n    string,\n    succeed,\n    whitespace,\n};\n//# sourceMappingURL=parsimmon.js.map", "import { flattenBinArray } from '../format/format.js';\nimport { AuthenticationErrorCommon, encodeDataPush } from '../vm/vm.js';\nimport { mergeRanges } from './language-utils.js';\nconst emptyReductionTraceNode = (range) => ({\n    bytecode: Uint8Array.of(),\n    range,\n});\n/**\n * Perform the standard verification of CashAssembly evaluation results. This\n * ensures that evaluations complete as expected: if an error occurs while\n * computing an evaluation, script compilation should fail.\n *\n * Three requirements are enforced:\n * - the evaluation may not produce an `error`\n * - the resulting stack must contain exactly 1 item\n * - the resulting execution stack must be empty (no missing `OP_ENDIF`s)\n *\n * This differs from the virtual machine's built-in `vm.verify` in that it is\n * often more lenient, for example, evaluations can succeed with an non-truthy\n * value on top of the stack.\n *\n * @param state - the final program state to verify\n */\nexport const verifyCashAssemblyEvaluationState = (state) => {\n    if (state.error !== undefined) {\n        return state.error;\n    }\n    if (state.controlStack.length !== 0) {\n        return AuthenticationErrorCommon.nonEmptyControlStack;\n    }\n    if (state.stack.length !== 1) {\n        return AuthenticationErrorCommon.requiresCleanStack;\n    }\n    return true;\n};\n/**\n * Reduce a resolved script, returning the resulting bytecode and a trace of the\n * reduction process.\n *\n * This method will return an error if provided a {@link resolvedScript} with\n * resolution errors. To check for resolution errors, use\n * {@link getResolutionErrors}.\n *\n * @param resolvedScript - the {@link CompiledScript} to reduce\n * @param vm - the {@link AuthenticationVirtualMachine} to use for evaluations\n * @param createEvaluationProgram - a method which accepts the compiled bytecode\n * of an evaluation and returns the authentication program used to evaluate it\n */\nexport const reduceScript = (resolvedScript, vm, createEvaluationProgram) => {\n    const script = resolvedScript.map((segment) => {\n        switch (segment.type) {\n            case 'bytecode':\n                return { bytecode: segment.value, range: segment.range };\n            case 'push': {\n                const push = reduceScript(segment.value, vm, createEvaluationProgram);\n                const bytecode = encodeDataPush(push.bytecode);\n                return {\n                    bytecode,\n                    ...(push.errors === undefined ? undefined : { errors: push.errors }),\n                    push,\n                    range: segment.range,\n                };\n            }\n            case 'evaluation': {\n                if (typeof vm === 'undefined' ||\n                    typeof createEvaluationProgram === 'undefined') {\n                    return {\n                        errors: [\n                            {\n                                error: 'Both a VM and a createState method are required to reduce evaluations.',\n                                range: segment.range,\n                            },\n                        ],\n                        ...emptyReductionTraceNode(segment.range),\n                    };\n                }\n                const reductionTrace = reduceScript(segment.value, vm, createEvaluationProgram);\n                if (reductionTrace.errors !== undefined) {\n                    return {\n                        ...emptyReductionTraceNode(segment.range),\n                        errors: reductionTrace.errors,\n                        source: reductionTrace,\n                        trace: [],\n                    };\n                }\n                const trace = vm.debug(createEvaluationProgram(reductionTrace.bytecode));\n                /**\n                 * `vm.debug` should always return at least one state.\n                 */\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const lastState = trace[trace.length - 1];\n                const result = verifyCashAssemblyEvaluationState(lastState);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const bytecode = lastState.stack[lastState.stack.length - 1];\n                return {\n                    ...(typeof result === 'string'\n                        ? {\n                            bytecode: Uint8Array.of(),\n                            errors: [\n                                {\n                                    error: `Failed to reduce evaluation: ${result}`,\n                                    range: segment.range,\n                                },\n                            ],\n                        }\n                        : {\n                            bytecode,\n                        }),\n                    range: segment.range,\n                    source: reductionTrace,\n                    trace,\n                };\n            }\n            case 'comment':\n                return emptyReductionTraceNode(segment.range);\n            case 'error':\n                return {\n                    errors: [\n                        {\n                            error: `Tried to reduce a CashAssembly script with resolution errors: ${segment.value}`,\n                            range: segment.range,\n                        },\n                    ],\n                    ...emptyReductionTraceNode(segment.range),\n                };\n            default:\n                // eslint-disable-next-line functional/no-throw-statement, @typescript-eslint/no-throw-literal\n                throw new Error(`\"${segment.type}\" is not a known segment type.`);\n        }\n    });\n    const reduction = script.reduce((all, segment) => ({\n        bytecode: [...all.bytecode, segment.bytecode],\n        ranges: [...all.ranges, segment.range],\n        ...(all.errors !== undefined || segment.errors !== undefined\n            ? {\n                errors: [\n                    ...(all.errors === undefined ? [] : all.errors),\n                    ...(segment.errors === undefined ? [] : segment.errors),\n                ],\n            }\n            : undefined),\n    }), { bytecode: [], ranges: [] });\n    return {\n        ...(reduction.errors === undefined\n            ? undefined\n            : { errors: reduction.errors }),\n        bytecode: flattenBinArray(reduction.bytecode),\n        range: mergeRanges(reduction.ranges, \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        resolvedScript.length === 0 ? undefined : resolvedScript[0].range),\n        script,\n    };\n};\n//# sourceMappingURL=reduce.js.map", "export * from './authentication-template.js';\n//# sourceMappingURL=schema.js.map", "import { ajvStandaloneJsonParse } from './ajv/ajv-utils.js';\n// eslint-disable-next-line import/no-internal-modules\nimport AuthenticationTemplateValidator from './ajv/validate-authentication-template.js';\n/**\n * Safely parse and validate an authentication template, returning either an\n * error message as a string or a valid {@link AuthenticationTemplate}. The\n * template may be provided either as an untrusted JSON string or as a\n * pre-parsed object.\n *\n * This method validates both the structure and the contents of a template:\n * - All properties and sub-properties are verified to be of the expected type.\n * - The template contains no unknown properties.\n * - The ID of each entity, script, and scenario is confirmed to be unique.\n * - Script IDs referenced by entities and other scripts (via `unlocks`) are\n * confirmed to exist.\n * - The derivation paths of each HdKey are validated against each other.\n *\n * This method does not validate the CashAssembly contents of scripts (by\n * attempting compilation, evaluating {@link AuthenticationTemplateScriptTest}s,\n * or testing scenario generation).\n *\n * @param untrustedJsonOrObject - the JSON string or object to validate as an\n * authentication template\n */\nexport const importAuthenticationTemplate = (untrustedJsonOrObject) => {\n    const errorPrefix = `Authentication template import failed:`;\n    const template = ajvStandaloneJsonParse(untrustedJsonOrObject, AuthenticationTemplateValidator);\n    if (typeof template === 'string') {\n        return `${errorPrefix}${template}`;\n    }\n    // TODO: add back other validation\n    return template;\n};\n//# sourceMappingURL=authentication-template.js.map", "import AuthenticationTemplateValidator from './validate-authentication-template.js';\nconst avjErrorsToDescription = (errors) => \n// TODO: translate instancePath\nerrors.map((error) => `${error.instancePath}: ${error.message}`).join(',');\nexport const ajvStandaloneJsonParse = (untrustedJsonOrObject, validator) => {\n    // eslint-disable-next-line functional/no-try-statement\n    try {\n        const parsed = typeof untrustedJsonOrObject === 'string'\n            ? JSON.parse(untrustedJsonOrObject)\n            : untrustedJsonOrObject;\n        if (validator(parsed)) {\n            return parsed;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return avjErrorsToDescription(AuthenticationTemplateValidator.errors);\n    }\n    catch (e) {\n        return `Invalid JSON. ${String(e)}`;\n    }\n};\n//# sourceMappingURL=ajv-utils.js.map", "export default validate20;\nconst schema22 = {\n    $ref: '#/definitions/AuthenticationTemplate',\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    definitions: {\n        AuthenticationTemplate: {\n            additionalProperties: false,\n            description: 'An `AuthenticationTemplate` (A.K.A. `CashAssembly Template`) specifies a set of locking scripts, unlocking scripts, and other information required to use a certain authentication scheme. Templates fully describe wallets and protocols in a way that can be shared between software clients.',\n            properties: {\n                $schema: {\n                    description: 'The URI that identifies the JSON Schema used by this template. Try: `https://libauth.org/schemas/authentication-template-v0.schema.json` to enable documentation, autocompletion, and validation in JSON documents.',\n                    type: 'string',\n                },\n                description: {\n                    description: 'An optionally multi-line, free-form, human-readable description for this authentication template (for use in user interfaces). If displayed, this description should use a monospace font to properly render ASCII diagrams.',\n                    type: 'string',\n                },\n                entities: {\n                    additionalProperties: {\n                        $ref: '#/definitions/AuthenticationTemplateEntity',\n                    },\n                    description: 'A map of entities defined in this authentication template.\\n\\nObject keys are used as entity identifiers, and by convention, should use `snake_case`.',\n                    type: 'object',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this authentication template (for use in user interfaces).',\n                    type: 'string',\n                },\n                scenarios: {\n                    additionalProperties: {\n                        $ref: '#/definitions/AuthenticationTemplateScenario',\n                    },\n                    description: 'A scenario describes a context in which one or more scripts might be used. Scenarios are used for transaction estimation and as an integrated testing system for authentication templates.\\n\\nObject keys are used as scenario identifiers, and by convention, should use `snake_case`.',\n                    type: 'object',\n                },\n                scripts: {\n                    additionalProperties: {\n                        anyOf: [\n                            { $ref: '#/definitions/AuthenticationTemplateScript' },\n                            { $ref: '#/definitions/AuthenticationTemplateScriptLocking' },\n                            { $ref: '#/definitions/AuthenticationTemplateScriptTested' },\n                            { $ref: '#/definitions/AuthenticationTemplateScriptUnlocking' },\n                        ],\n                    },\n                    description: 'A map of scripts used in this authentication template.\\n\\nObject keys are used as script identifiers, and by convention, should use `snake_case`.',\n                    type: 'object',\n                },\n                supported: {\n                    description: 'A list of authentication virtual machine versions supported by this template.\\n\\nVirtual machine identifiers use the format `CODE_YYYY_MM`, where `CODE` is the currency code used to identify the network, and `YYYY_MM` is the year and month in which the specified VM version became active on the indicated network.\\n\\nIdentifiers with the `_SPEC` suffix indicate that this template is intended for compatibility with a future virtual machine version, but at the time the template was created, that virtual machine had not yet become active on the specified chain.',\n                    items: {\n                        $ref: '#/definitions/AuthenticationVirtualMachineIdentifier',\n                    },\n                    type: 'array',\n                },\n                version: {\n                    const: 0,\n                    description: 'A number identifying the format of this AuthenticationTemplate. Currently, this implementation requires `version` be set to `0`.',\n                    type: 'number',\n                },\n            },\n            required: ['entities', 'scripts', 'supported', 'version'],\n            type: 'object',\n        },\n        AuthenticationTemplateAddressData: {\n            additionalProperties: false,\n            properties: {\n                description: {\n                    description: 'A single-line, human readable description for this address data.',\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this address data.',\n                    type: 'string',\n                },\n                type: {\n                    const: 'AddressData',\n                    description: '`AddressData` is the most low-level variable type. It must be collected and stored each time a script is generated (usually, a locking script). `AddressData` can include any type of data, and can be used in any way.\\n\\nFor more persistent data, use `WalletData`.',\n                    type: 'string',\n                },\n            },\n            required: ['type'],\n            type: 'object',\n        },\n        AuthenticationTemplateEntity: {\n            additionalProperties: false,\n            description: 'An object describing the configuration for a particular entity within an authentication template.',\n            properties: {\n                description: {\n                    description: 'An optionally multi-line, free-form, human-readable description for this entity (for use in user interfaces). If displayed, this description should use a monospace font to properly render ASCII diagrams.',\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this entity for use in user interfaces and error messages, e.g.: `Trusted Third-Party`.',\n                    type: 'string',\n                },\n                scripts: {\n                    description: 'An array of the identifiers of each script the entity must be capable of generating, e.g. each of the unlocking scripts this entity might use.\\n\\nProvided the necessary variables, any entity can construct any script, but this option allows us to hint to more advanced wallets which scripts to recommend to users. (Especially when many scripts require inter-entity communication initiated by a user.)\\n\\nIf not provided, this property is assumed to include all scripts in the template.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                variables: {\n                    additionalProperties: {\n                        $ref: '#/definitions/AuthenticationTemplateVariable',\n                    },\n                    description: \"A map of variables that must be provided by this entity for use in the template's scripts. Some variables are required before locking script generation, while some variables can or must be resolved only before unlocking script generation.\\n\\nObject keys are used as variable identifiers, and by convention, should use `snake_case`.\",\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n        AuthenticationTemplateHdKey: {\n            additionalProperties: false,\n            properties: {\n                addressOffset: {\n                    description: 'The offset by which to increment the `addressIndex` provided in the compilation data when deriving this `HdKey`. (Default: 0)\\n\\nThis is useful for deriving the \"next\" (`1`) or \"previous\" (`-1`) address to be used in the current compiler configuration.',\n                    type: 'number',\n                },\n                description: {\n                    description: 'A single-line, human readable description for this HD key.',\n                    type: 'string',\n                },\n                hdPublicKeyDerivationPath: {\n                    description: \"The path to derive the entity's HD public key from the entity's master HD private key. By default, `m` (i.e. the entity's HD public key represents the same node in the HD tree as its HD private key).\\n\\nThis can be used to specify another derivation path from which the `publicDerivationPath` begins, e.g. `m/0'/1'/2'`. See `publicDerivationPath` for details.\\n\\nThis path must begin with an `m` (private derivation) and be fixed – it cannot contain an `i` character to represent the address index, as a dynamic hardened path would require a new HD public key for each address.\",\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this HD key.',\n                    type: 'string',\n                },\n                privateDerivationPath: {\n                    description: \"The derivation path used to derive this `HdKey` from the owning entity's HD private key. By default, `m/i`.\\n\\nThis path uses the notation specified in BIP32 and the `i` character to represent the location of the `addressIndex`:\\n\\nThe first character must be `m` (private derivation), followed by sets of `/` and a number representing the child index used in the derivation at that depth. Hardened derivation is represented by a trailing `'`, and hardened child indexes are represented with the hardened index offset (`2147483648`) subtracted. The `i` character is replaced with the value of `addressIndex` plus this `HdKey`'s `addressOffset`. If the `i` character is followed by `'`, the hardened index offset is added (`2147483648`) and hardened derivation is used.\\n\\nFor example, `m/0/1'/i'` uses 3 levels of derivation, with child indexes in the following order:\\n\\n`derive(derive(derive(node, 0), 2147483648 + 1), 2147483648 + addressIndex + addressOffset)`\\n\\nBecause hardened derivation requires knowledge of the private key, `HdKey` variables with `derivationPath`s that include hardened derivation cannot use HD public derivation (the `hdPublicKeys` property in `CompilationData`). Instead, compilation requires the respective HD private key (`CompilationData.hdKeys.hdPrivateKeys`) or the fully-derived public key (`CompilationData.hdKeys.derivedPublicKeys`).\",\n                    type: 'string',\n                },\n                publicDerivationPath: {\n                    description: \"The derivation path used to derive this `HdKey`'s public key from the owning entity's HD public key. If not set, the public equivalent of `privateDerivationPath` is used. For the `privateDerivationPath` default of `m/i`, this is `M/i`.\\n\\nIf `privateDerivationPath` uses hardened derivation for some levels, but later derivation levels use non-hardened derivation, `publicDerivationPath` can be used to specify a public derivation path beginning from `hdPublicKeyDerivationPath` (i.e. `publicDerivationPath` should always be a non-hardened segment of `privateDerivationPath` that follows `hdPublicKeyDerivationPath`).\\n\\nThe first character must be `M` (public derivation), followed by sets of `/` and a number representing the child index used in the non-hardened derivation at that depth.\\n\\nFor example, if `privateDerivationPath` is `m/0'/i`, it is not possible to derive the equivalent public key with only the HD public key `M`. (The path \\\"`M/0'/i`\\\" is impossible.) However, given the HD public key for `m/0'`, it is possible to derive the public key of `m/0'/i` for any `i`. In this case, `hdPublicKeyDerivationPath` would be `m/0'` and `publicDerivationPath` would be the remaining `M/i`.\",\n                    type: 'string',\n                },\n                type: {\n                    const: 'HdKey',\n                    description: 'The `HdKey` (Hierarchical-Deterministic Key) type automatically manages key generation and mapping in a standard way. For greater control, use `Key`.',\n                    type: 'string',\n                },\n            },\n            required: ['type'],\n            type: 'object',\n        },\n        AuthenticationTemplateKey: {\n            additionalProperties: false,\n            properties: {\n                description: {\n                    description: 'A single-line, human readable description for this key.',\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this key.',\n                    type: 'string',\n                },\n                type: {\n                    const: 'Key',\n                    description: 'The `Key` type provides fine-grained control over key generation and mapping. Most templates should instead use `HdKey`.\\n\\nAny HD (Hierarchical-Deterministic) derivation must be completed outside of the templating system and provided at the time of use.',\n                    type: 'string',\n                },\n            },\n            required: ['type'],\n            type: 'object',\n        },\n        AuthenticationTemplateScenario: {\n            additionalProperties: false,\n            description: 'An object describing the configuration for a particular scenario within an authentication template.',\n            properties: {\n                data: {\n                    $ref: '#/definitions/AuthenticationTemplateScenarioData',\n                    description: \"An object defining the data to use while compiling this scenario. The properties specified here are used to extend the existing scenario data based on this scenario's `extends` property.\\n\\nEach property is extended individually – to unset a previously-set property, the property must be individually overridden in this object.\",\n                },\n                description: {\n                    description: 'An optionally multi-line, free-form, human-readable description for this scenario (for use in user interfaces). If displayed, this description should use a monospace font to properly render ASCII diagrams.',\n                    type: 'string',\n                },\n                extends: {\n                    description: \"The identifier of the scenario that this scenario extends. Any `data` or `transaction` properties not defined in this scenario inherit from the extended parent scenario.\\n\\nIf undefined, this scenario is assumed to extend the default scenario:\\n\\n- The default values for `data` are set:   - The identifiers of all `Key` variables and entities in this template are lexicographically sorted, then each is assigned an incrementing positive integer – beginning with `1` – encoded as an unsigned, 256-bit, big-endian integer (i.e. `0x0000...0001` (32 bytes), `0x0000...0002`, `0x0000...0003`, etc.). For `Key`s, this assigned value is used as the private key; For entities, the assigned value is used as the master seed of that entity's `HdPrivateKey`. If `hdKey` is set, the `addressIndex` is set to `0`.   - `currentBlockHeight` is set to `2`. This is the height of the second mined block after the genesis block: `000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd`. This default value was chosen to be low enough to simplify the debugging of block height offsets while remaining differentiated from `0` and `1`, which are used both as boolean return values and for control flow.   - `currentBlockTime` is set to `1231469665`. This is the Median Time-Past block time (BIP113) of block `2`.\\n\\n- Then `transaction` is set based on use:   - if the scenario is being used for transaction estimation, all transaction properties are taken from the transaction being estimated.   - if the scenario is being used for script testing and validation, the default value for each `transaction` property is used.\\n\\nWhen a scenario is extended, each property of `data` and `transaction` is extended individually: if the extending scenario does not provide a new value for `data.bytecode.value` or `transaction.property`, the parent value is used. To avoid inheriting a parent value, each child value must be individually overridden.\",\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this scenario for use in user interfaces, e.g.: `Delayed Recovery`.',\n                    type: 'string',\n                },\n                sourceOutputs: {\n                    description: 'The list of source outputs (a.k.a. UTXOs) to use when generating the compilation context for this scenario.\\n\\nThe `sourceOutputs` property must have the same length as `transaction.inputs`, and each source output must be ordered to match the index of the input that spends it.\\n\\nTo be valid the `sourceOutputs` property must have exactly one source output with `lockingBytecode` set to `[\"slot\"]` – the output at the same index as the `[\"slot\"]` input in `transaction.inputs`.\\n\\nIf undefined, defaults to `[{ \"lockingBytecode\": [\"slot\"] }]`.',\n                    items: {\n                        $ref: '#/definitions/AuthenticationTemplateScenarioSourceOutput',\n                    },\n                    type: 'array',\n                },\n                transaction: {\n                    additionalProperties: false,\n                    description: 'The transaction within which this scenario should be evaluated. This is used for script testing and validation.\\n\\nIf undefined, inherits the default value for each property: ```json {   \"inputs\": [{ \"unlockingBytecode\": [\\'slot\\'] }],   \"locktime\": 0,   \"outputs\": [{ \"lockingBytecode\": {} }],   \"version\": 2 } ```\\n\\nAny `transaction` property that is not set will be inherited from the scenario specified by `extends`. when specifying the `inputs` and `outputs` properties, each input and output extends the default values for inputs and outputs, respectively.\\n\\nFor example, an input of `{}` is interpreted as: ```json {   \"outpointIndex\": 0,   \"outpointTransactionHash\":     \"0000000000000000000000000000000000000000000000000000000000000000\",   \"sequenceNumber\": 0,   \"unlockingBytecode\": [\\'slot\\'] } ``` And an output of `{}` is interpreted as: ```json {   \"lockingBytecode\": {     \"script\": [\\'copy\\'],     \"overrides\": { \"hdKeys\": { \"addressIndex\": 1 } }   },   \"valueSatoshis\": 0 } ```',\n                    properties: {\n                        inputs: {\n                            description: 'The list of inputs to use when generating the transaction for this scenario.\\n\\nTo be valid the `inputs` property must have exactly one input with `unlockingBytecode` set to `[\"slot\"]`. This is the input in which the unlocking script under test will be placed.\\n\\nIf undefined, inherits the default scenario `inputs` value: `[{ \"unlockingBytecode\": [\"slot\"] }]`.',\n                            items: {\n                                $ref: '#/definitions/AuthenticationTemplateScenarioInput',\n                            },\n                            type: 'array',\n                        },\n                        locktime: {\n                            description: 'The locktime to use when generating the transaction for this scenario. A positive integer from `0` to a maximum of `4294967295` – if undefined, defaults to `0`.\\n\\nLocktime can be provided as either a timestamp or a block height. Values less than `500000000` are understood to be a block height (the current block number in the chain, beginning from block `0`). Values greater than or equal to `500000000` are understood to be a UNIX timestamp.\\n\\nFor validating timestamp values, the median timestamp of the last 11 blocks (Median Time-Past) is used. The precise behavior is defined in BIP113.\\n\\nIf the `sequenceNumber` of every transaction input is set to `0xffffffff` (`4294967295`), locktime is disabled, and the transaction may be added to a block even if the specified locktime has not yet been reached. When locktime is disabled, if an `OP_CHECKLOCKTIMEVERIFY` operation is encountered during the verification of any input, an error is produced, and the transaction is invalid.',\n                            type: 'number',\n                        },\n                        outputs: {\n                            description: 'The list of outputs to use when generating the transaction for this scenario.\\n\\nIf undefined, defaults to `[{ \"lockingBytecode\": {} }]`.',\n                            items: {\n                                $ref: '#/definitions/AuthenticationTemplateScenarioTransactionOutput',\n                            },\n                            type: 'array',\n                        },\n                        version: {\n                            description: 'The version to use when generating the transaction for this scenario. A positive integer from `0` to a maximum of `4294967295` – if undefined, inherits the default scenario `version` value: `2`.',\n                            type: 'number',\n                        },\n                    },\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n        AuthenticationTemplateScenarioBytecode: {\n            anyOf: [\n                { type: 'string' },\n                {\n                    additionalProperties: false,\n                    properties: {\n                        overrides: {\n                            $ref: '#/definitions/AuthenticationTemplateScenarioData',\n                            description: 'Scenario data that extends the scenario\\'s top-level `data` during script compilation.\\n\\nEach property is extended individually – to modify a property set by the top-level scenario `data`, the new value must be listed here.\\n\\nDefaults to `{}` for `sourceOutputs` and `transaction.inputs`; defaults to `{ \"hdKeys\": { \"addressIndex\": 1 } }` for `transaction.outputs`.',\n                        },\n                        script: {\n                            anyOf: [\n                                { type: 'string' },\n                                {\n                                    items: { const: 'copy', type: 'string' },\n                                    maxItems: 1,\n                                    minItems: 1,\n                                    type: 'array',\n                                },\n                            ],\n                            description: 'The identifier of the script to compile when generating this bytecode. May also be set to `[\"copy\"]`, which is automatically replaced with the identifier of the locking or unlocking script under test, respectively.\\n\\nIf undefined, defaults to `[\"copy\"]`.',\n                        },\n                    },\n                    type: 'object',\n                },\n            ],\n            description: 'A type that describes the configuration for a particular locking or unlocking bytecode within an authentication template scenario.\\n\\nBytecode may be specified as either a hexadecimal-encoded string or an object describing the required compilation.\\n\\nFor `sourceOutputs` and `transaction.inputs`, defaults to `{ script: [\"copy\"], overrides: {} }`. For `transaction.outputs`, defaults to `{ script: [\"copy\"], overrides: { \"hdKeys\": { \"addressIndex\": 1 } } }`.',\n        },\n        AuthenticationTemplateScenarioData: {\n            additionalProperties: false,\n            description: 'An object defining the data to use while compiling a scenario.',\n            properties: {\n                bytecode: {\n                    additionalProperties: { type: 'string' },\n                    description: \"A map of full identifiers to CashAssembly scripts that compile to each identifier's value for this scenario. Allowing `bytecode` to be specified as scripts (rather than e.g. hex) offers greater power and flexibility.\\n\\nBytecode scripts have access to each other and all other template scripts and defined variables, however, cyclical references will produce an error at compile time. Also, because the results of these compilations will be used to generate the compilation context for this scenario, these scripts may not use compiler operations that themselves require access to compilation context (e.g. signatures).\\n\\nThe provided `fullIdentifier` should match the complete identifier for each item, e.g. `some_wallet_data`, `variable_id.public_key`, or `variable_id.signature.all_outputs`.\\n\\nAll `AddressData` and `WalletData` variables must be provided via `bytecode` (though the default scenario automatically includes reasonable values), and pre-computed results for operations of other variable types (e.g. `key.public_key`) may also be provided via this property.\\n\\nBecause each bytecode identifier may precisely match the identifier of the variable it defines for this scenario, references between these scripts must refer to the target script with a `_scenario.` prefix. E.g. to reference a sibling script `my_foo` from `my_bar`, the `my_bar` script must use the identifier `_scenario.my_foo`.\",\n                    type: 'object',\n                },\n                currentBlockHeight: {\n                    description: 'The current block height at the \"address creation time\" implied in this scenario.',\n                    type: 'number',\n                },\n                currentBlockTime: {\n                    description: 'The current MTP block time as a UNIX timestamp at the \"address creation time\" implied in this scenario.\\n\\nNote, this is never a current timestamp, but rather the median timestamp of the last 11 blocks. It is therefore approximately one hour in the past.\\n\\nEvery block has a precise MTP block time, much like a block height. See BIP113 for details.',\n                    type: 'number',\n                },\n                hdKeys: {\n                    additionalProperties: false,\n                    description: 'An object describing the settings used for `HdKey` variables in this scenario.',\n                    properties: {\n                        addressIndex: {\n                            description: 'The current address index to be used for this scenario. The `addressIndex` gets added to each `HdKey`s `addressOffset` to calculate the dynamic index (`i`) used in each `privateDerivationPath` or `publicDerivationPath`.\\n\\nThis is required for any compiler operation that requires derivation. Typically, the value is incremented by one for each address in a wallet.\\n\\nDefaults to `0`.',\n                            type: 'number',\n                        },\n                        hdPrivateKeys: {\n                            additionalProperties: { type: 'string' },\n                            description: 'A map of entity IDs to master HD private keys. These master HD private keys are used to derive each `HdKey` variable assigned to that entity according to its `privateDerivationPath`.\\n\\nHD private keys may be encoded for either mainnet or testnet (the network information is ignored).\\n\\nIf both an HD private key (in `hdPrivateKeys`) and HD public key (in `hdPublicKeys`) are provided for the same entity in the same scenario (not recommended), the HD private key is used.',\n                            type: 'object',\n                        },\n                        hdPublicKeys: {\n                            additionalProperties: { type: 'string' },\n                            description: 'A map of entity IDs to HD public keys. These HD public keys are used to derive public keys for each `HdKey` variable assigned to that entity according to its `publicDerivationPath`.\\n\\nHD public keys may be encoded for either mainnet or testnet (the network information is ignored).\\n\\nIf both an HD private key (in `hdPrivateKeys`) and HD public key (in `hdPublicKeys`) are provided for the same entity in the same scenario (not recommended), the HD private key is used.',\n                            type: 'object',\n                        },\n                    },\n                    type: 'object',\n                },\n                keys: {\n                    additionalProperties: false,\n                    description: 'An object describing the settings used for `Key` variables in this scenario.',\n                    properties: {\n                        privateKeys: {\n                            additionalProperties: { type: 'string' },\n                            description: 'A map of `Key` variable IDs to their 32-byte, hexadecimal-encoded private key values.',\n                            type: 'object',\n                        },\n                    },\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n        AuthenticationTemplateScenarioInput: {\n            additionalProperties: false,\n            description: 'An example input used to define a scenario for an authentication template.',\n            properties: {\n                outpointIndex: {\n                    description: 'The index of the output in the transaction from which this input is spent.\\n\\nIf undefined, this defaults to the same index as the input itself (so that by default, every outpoint in the produced transaction is different, even if an empty `outpointTransactionHash` is used for each transaction).',\n                    type: 'number',\n                },\n                outpointTransactionHash: {\n                    description: 'A 32-byte, hexadecimal-encoded hash of the transaction from which this input is spent in big-endian byte order. This is the byte order typically seen in block explorers and user interfaces (as opposed to little-endian byte order, which is used in standard P2P network messages).\\n\\nIf undefined, this defaults to the value: `0000000000000000000000000000000000000000000000000000000000000001`\\n\\nA.K.A. Outpoint `Transaction ID`',\n                    type: 'string',\n                },\n                sequenceNumber: {\n                    description: 'The positive, 32-bit unsigned integer used as the \"sequence number\" for this input.\\n\\nIf undefined, this defaults to `0`.',\n                    type: 'number',\n                },\n                unlockingBytecode: {\n                    anyOf: [\n                        { $ref: '#/definitions/AuthenticationTemplateScenarioBytecode' },\n                        {\n                            items: { const: 'slot', type: 'string' },\n                            maxItems: 1,\n                            minItems: 1,\n                            type: 'array',\n                        },\n                    ],\n                    description: 'The `unlockingBytecode` value of this input for this scenario. This must be either `[\"slot\"]`, indicating that this input contains the `unlockingBytecode` under test by the scenario, or an `AuthenticationTemplateScenarioBytecode`.\\n\\nFor a scenario to be valid, `unlockingBytecode` must be `[\"slot\"]` for exactly one input in the scenario.\\n\\nDefaults to `[\"slot\"]`.',\n                },\n            },\n            type: 'object',\n        },\n        'AuthenticationTemplateScenarioOutput<false>': {\n            additionalProperties: false,\n            description: 'An example output used to define a scenario for an authentication template.',\n            properties: {\n                lockingBytecode: {\n                    $ref: '#/definitions/AuthenticationTemplateScenarioBytecode',\n                    description: 'The locking bytecode used to encumber this output.\\n\\n`lockingBytecode` values may be provided as a hexadecimal-encoded string or as an object describing the required compilation. If undefined, defaults to  `{}`, which uses the default values for `script` and `overrides`, respectively.\\n\\nOnly source outputs may specify a `lockingBytecode` of `[\"slot\"]`; this identifies the source output in which the locking script under test will be placed. (To be valid, every scenario\\'s `sourceOutputs` property must have exactly one source output slot and one input slot at the same index.)',\n                },\n                token: {\n                    additionalProperties: false,\n                    description: 'The CashToken contents of this output. This property is only defined if the output contains one or more tokens. For details, see `CHIP-2022-02-CashTokens`.',\n                    properties: {\n                        amount: {\n                            description: 'The number of fungible tokens (of `category`) held in this output.\\n\\nBecause `Number.MAX_SAFE_INTEGER` (`9007199254740991`) is less than the maximum token amount (`9223372036854775807`), this value may also be provided as a string, e.g. `\"9223372036854775807\"`.\\n\\nIf undefined, this defaults to: `0`.',\n                            type: ['number', 'string'],\n                        },\n                        category: {\n                            description: 'The 32-byte, hexadecimal-encoded token category ID to which the token(s) in this output belong in big-endian byte order. This is the byte order typically seen in block explorers and user interfaces (as opposed to little-endian byte order, which is used in standard P2P network messages).\\n\\nIf undefined, this defaults to the value: `0000000000000000000000000000000000000000000000000000000000000002`',\n                            type: 'string',\n                        },\n                        nft: {\n                            additionalProperties: false,\n                            description: 'If present, the non-fungible token (NFT) held by this output. If the output does not include a non-fungible token, `undefined`.',\n                            properties: {\n                                capability: {\n                                    description: 'The capability of this non-fungible token, must be either `minting`, `mutable`, or `none`.\\n\\nIf undefined, this defaults to: `none`.',\n                                    enum: ['minting', 'mutable', 'none'],\n                                    type: 'string',\n                                },\n                                commitment: {\n                                    description: 'The hex-encoded commitment contents included in the non-fungible token held in this output.\\n\\nIf undefined, this defaults to: `\"\"` (a zero-length commitment).',\n                                    type: 'string',\n                                },\n                            },\n                            type: 'object',\n                        },\n                    },\n                    type: 'object',\n                },\n                valueSatoshis: {\n                    description: 'The value of the output in satoshis, the smallest unit of bitcoin.\\n\\nIn a valid transaction, this is a positive integer, from `0` to the maximum number of satoshis available to the transaction.\\n\\nThe maximum number of satoshis in existence is about 1/4 of `Number.MAX_SAFE_INTEGER` (`9007199254740991`), so typically, this value is defined using a `number`. However, this value may also be defined using a 16-character, hexadecimal-encoded `string`, to allow for the full range of the 64-bit unsigned, little-endian integer used to encode `valueSatoshis` in the encoded output format, e.g. `\"ffffffffffffffff\"`. This is useful for representing scenarios where intentionally excessive values are provided (to ensure an otherwise properly-signed transaction can never be included in the blockchain), e.g. transaction size estimations or off-chain Bitauth signatures.\\n\\nIf undefined, this defaults to: `0`.',\n                    type: ['number', 'string'],\n                },\n            },\n            type: 'object',\n        },\n        'AuthenticationTemplateScenarioOutput<true>': {\n            additionalProperties: false,\n            description: 'An example output used to define a scenario for an authentication template.',\n            properties: {\n                lockingBytecode: {\n                    anyOf: [\n                        { $ref: '#/definitions/AuthenticationTemplateScenarioBytecode' },\n                        {\n                            items: { const: 'slot', type: 'string' },\n                            maxItems: 1,\n                            minItems: 1,\n                            type: 'array',\n                        },\n                    ],\n                    description: 'The locking bytecode used to encumber this output.\\n\\n`lockingBytecode` values may be provided as a hexadecimal-encoded string or as an object describing the required compilation. If undefined, defaults to  `{}`, which uses the default values for `script` and `overrides`, respectively.\\n\\nOnly source outputs may specify a `lockingBytecode` of `[\"slot\"]`; this identifies the source output in which the locking script under test will be placed. (To be valid, every scenario\\'s `sourceOutputs` property must have exactly one source output slot and one input slot at the same index.)',\n                },\n                token: {\n                    additionalProperties: false,\n                    description: 'The CashToken contents of this output. This property is only defined if the output contains one or more tokens. For details, see `CHIP-2022-02-CashTokens`.',\n                    properties: {\n                        amount: {\n                            description: 'The number of fungible tokens (of `category`) held in this output.\\n\\nBecause `Number.MAX_SAFE_INTEGER` (`9007199254740991`) is less than the maximum token amount (`9223372036854775807`), this value may also be provided as a string, e.g. `\"9223372036854775807\"`.\\n\\nIf undefined, this defaults to: `0`.',\n                            type: ['number', 'string'],\n                        },\n                        category: {\n                            description: 'The 32-byte, hexadecimal-encoded token category ID to which the token(s) in this output belong in big-endian byte order. This is the byte order typically seen in block explorers and user interfaces (as opposed to little-endian byte order, which is used in standard P2P network messages).\\n\\nIf undefined, this defaults to the value: `0000000000000000000000000000000000000000000000000000000000000002`',\n                            type: 'string',\n                        },\n                        nft: {\n                            additionalProperties: false,\n                            description: 'If present, the non-fungible token (NFT) held by this output. If the output does not include a non-fungible token, `undefined`.',\n                            properties: {\n                                capability: {\n                                    description: 'The capability of this non-fungible token, must be either `minting`, `mutable`, or `none`.\\n\\nIf undefined, this defaults to: `none`.',\n                                    enum: ['minting', 'mutable', 'none'],\n                                    type: 'string',\n                                },\n                                commitment: {\n                                    description: 'The hex-encoded commitment contents included in the non-fungible token held in this output.\\n\\nIf undefined, this defaults to: `\"\"` (a zero-length commitment).',\n                                    type: 'string',\n                                },\n                            },\n                            type: 'object',\n                        },\n                    },\n                    type: 'object',\n                },\n                valueSatoshis: {\n                    description: 'The value of the output in satoshis, the smallest unit of bitcoin.\\n\\nIn a valid transaction, this is a positive integer, from `0` to the maximum number of satoshis available to the transaction.\\n\\nThe maximum number of satoshis in existence is about 1/4 of `Number.MAX_SAFE_INTEGER` (`9007199254740991`), so typically, this value is defined using a `number`. However, this value may also be defined using a 16-character, hexadecimal-encoded `string`, to allow for the full range of the 64-bit unsigned, little-endian integer used to encode `valueSatoshis` in the encoded output format, e.g. `\"ffffffffffffffff\"`. This is useful for representing scenarios where intentionally excessive values are provided (to ensure an otherwise properly-signed transaction can never be included in the blockchain), e.g. transaction size estimations or off-chain Bitauth signatures.\\n\\nIf undefined, this defaults to: `0`.',\n                    type: ['number', 'string'],\n                },\n            },\n            type: 'object',\n        },\n        AuthenticationTemplateScenarioSourceOutput: {\n            $ref: '#/definitions/AuthenticationTemplateScenarioOutput<true>',\n            description: 'A source output used by an authentication template scenario.',\n        },\n        AuthenticationTemplateScenarioTransactionOutput: {\n            $ref: '#/definitions/AuthenticationTemplateScenarioOutput<false>',\n            description: 'A transaction output used to define an authentication template scenario transaction.',\n        },\n        AuthenticationTemplateScript: {\n            additionalProperties: false,\n            description: 'An object describing the configuration for a particular script within an authentication template.',\n            properties: {\n                name: {\n                    description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n                    type: 'string',\n                },\n                script: {\n                    description: 'The script definition in CashAssembly.',\n                    type: 'string',\n                },\n            },\n            required: ['script'],\n            type: 'object',\n        },\n        AuthenticationTemplateScriptLocking: {\n            additionalProperties: false,\n            properties: {\n                lockingType: {\n                    description: 'Indicates if P2SH20 infrastructure should be used when producing bytecode related to this script. For more information on P2SH20, see BIP16.\\n\\nWhen compiling locking scripts of type `p2sh20`, the result will be placed in a P2SH20 \"redeem script\" format: `OP_HASH160 <$(<lockingBytecode> OP_HASH160)> OP_EQUAL`\\n\\nWhen compiling unlocking scripts that unlock locking scripts of type `p2sh20`, the result will be transformed into the P2SH20 unlocking format: `unlockingBytecode <lockingBytecode>` (where `lockingBytecode` is the compiled bytecode of the locking script, without the \"redeem script\" transformation.)\\n\\nThe presence of the `lockingType` property indicates that this script is a locking script. It must be present on any script referenced by the `unlocks` property of another script.',\n                    enum: ['p2sh20', 'p2sh32', 'standard'],\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n                    type: 'string',\n                },\n                script: {\n                    description: 'The script definition in CashAssembly.',\n                    type: 'string',\n                },\n            },\n            required: ['lockingType', 'script'],\n            type: 'object',\n        },\n        AuthenticationTemplateScriptTest: {\n            additionalProperties: false,\n            properties: {\n                check: {\n                    description: 'The script to evaluate after the script being tested. This can be used to check that the tested script leaves the expected results on the stack. For example, if the tested script is expected to leave 3 items of a specific size on the stack, the `check` script could pop each resulting item from the stack and examine it for correctness.\\n\\nIn scenario testing, this script is appended to the script under test, and together they are treated as the locking script. Program evaluation is considered successful if the resulting program state can be verified by the virtual machine (e.g. the resulting stack contains a single `1`, no errors are produced, etc.).',\n                    type: 'string',\n                },\n                fails: {\n                    description: 'A list of the scenario identifiers that – when used to compile this test and the script it tests – result in bytecode that fails program verification. The `setup` script is used in place of an unlocking script, and the concatenation of the script under test and the `check` script are used in place of a locking script.\\n\\nThese scenarios can be used to test this script in development and review.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                invalid: {\n                    description: 'A list of the scenario identifiers that – when used to compile this test and the script it tests – result in a compilation error. The `setup` script is used in place of an unlocking script, and the concatenation of the script under test and the `check` script are used in place of a locking script.\\n\\nThese scenarios can be used to test this script in development and review.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this test (for use in user interfaces).',\n                    type: 'string',\n                },\n                passes: {\n                    description: 'A list of the scenario identifiers that – when used to compile this test and the script it tests – result in bytecode that passes program verification. The `setup` script is used in place of an unlocking script, and the concatenation of the script under test and the `check` script are used in place of a locking script.\\n\\nThese scenarios can be used to test this script in development and review.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                setup: {\n                    description: 'A script to evaluate before the script being tested. This can be used to push values to the stack that are operated on by the tested script.\\n\\nIn scenario testing, this script is treated as the unlocking script.',\n                    type: 'string',\n                },\n            },\n            required: ['check'],\n            type: 'object',\n        },\n        AuthenticationTemplateScriptTested: {\n            additionalProperties: false,\n            properties: {\n                name: {\n                    description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n                    type: 'string',\n                },\n                pushed: {\n                    description: 'If set to `true`, indicates that this script should be wrapped in a push statement for testing.\\n\\nThis is useful for scripts that serve as \"bytecode templates\" – e.g. formatted messages or signature preimages. These scripts are typically not evaluated as bytecode but appear within push statements elsewhere in the template.\\n\\nDefaults to `false`.',\n                    type: 'boolean',\n                },\n                script: {\n                    description: 'The script definition in CashAssembly.',\n                    type: 'string',\n                },\n                tests: {\n                    additionalProperties: {\n                        $ref: '#/definitions/AuthenticationTemplateScriptTest',\n                    },\n                    description: 'One or more tests that can be used during development and during template validation to confirm the correctness of this tested script.',\n                    type: 'object',\n                },\n            },\n            required: ['script', 'tests'],\n            type: 'object',\n        },\n        AuthenticationTemplateScriptUnlocking: {\n            additionalProperties: false,\n            properties: {\n                ageLock: {\n                    description: 'TODO: not yet implemented\\n\\nThe minimum input age required for this unlocking script to become valid.\\n\\nThis value is provided as a CashAssembly script that must compile to the least significant 3 bytes of the minimum sequence number required for this unlocking script to be valid (the \"type bit\" and the 2-byte \"value\" – see BIP68 for details). This script has access to all other template scripts and variables, but cyclical references will produce an error at compile time.\\n\\nIn supporting wallets, this value can be computed at address creation time, and the remaining time for which any UTXO remains \"age-locked\" can be displayed in user interfaces (by parsing the \"type bit\" and \"value\" as described in BIP68).\\n\\nNote, because the precise value used by `OP_CHECKSEQUENCEVERIFY` can be provided in the unlocking script, it is trivial to create an unlocking script for which a proper value for `ageLock` is not possible to determine until the spending transaction is prepared. These cases are intentionally out-of-scope for this property. Instead, `ageLock` should only be used for unlocking scripts where the expected value can be compiled at address creation time.',\n                    type: 'string',\n                },\n                estimate: {\n                    description: 'The identifier of the scenario to use for this unlocking script when compiling an estimated transaction.\\n\\nUsing estimate scenarios, it\\'s possible for wallet software to compute an \"estimated transaction\", an invalid transaction that is guaranteed to be the same byte length as the final transaction. This length can be used to calculate the required transaction fee and assign values to the transaction\\'s change output(s). Because estimate scenarios provide \"estimated\" values for all variables, this estimation can be done by a single entity without input from other entities.\\n\\nIf not provided, the default scenario will be used for estimation. The default scenario only provides values for each `Key` and `HdKey` variable, so compilations requiring other variables will produce errors. See `AuthenticationTemplateScenario.extends` for details.',\n                    type: 'string',\n                },\n                fails: {\n                    description: 'A list of the scenario identifiers that – when used to compile this unlocking script and the script it unlocks – result in bytecode that fails program verification.\\n\\nThese scenarios can be used to test this script in development and review.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                invalid: {\n                    description: 'A list of the scenario identifiers that – when used to compile this unlocking script and the script it unlocks – result in a compilation error.\\n\\nThese scenarios can be used to test this script in development and review.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                name: {\n                    description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n                    type: 'string',\n                },\n                passes: {\n                    description: 'A list of the scenario identifiers that – when used to compile this unlocking script and the script it unlocks – result in bytecode that passes program verification.\\n\\nThese scenarios can be used to test this script in development and review.',\n                    items: { type: 'string' },\n                    type: 'array',\n                },\n                script: {\n                    description: 'The script definition in CashAssembly.',\n                    type: 'string',\n                },\n                timeLockType: {\n                    description: \"The expected type of time locks in this script.\\n\\nBecause `OP_CHECKLOCKTIMEVERIFY` reads from a transaction's `locktime` property, every input to a given transaction must share the same time lock type. This differs from `OP_CHECKSEQUENCEVERIFY` in that each input has its own `sequenceNumber`, so compatibility is not required.\\n\\nIf a transaction includes multiple inputs using scripts with `timeLockType` defined, and the types are not compatible, generation should fail.\\n\\nThe `timestamp` type indicates that the transaction's locktime is provided as a UNIX timestamp (the `locktime` value is greater than or equal to `500000000`).\\n\\nThe `height` type indicates that the transaction's locktime is provided as a block height (the `locktime` value is less than `500000000`).\\n\\nIf `timeLockType` is undefined, the script is assumed to have no reliance on absolute time locks.\",\n                    enum: ['height', 'timestamp'],\n                    type: 'string',\n                },\n                unlocks: {\n                    description: 'The identifier of the script that can be unlocked by this script.\\n\\nThe presence of the `unlocks` property indicates that this script is an unlocking script, and the script it unlocks must be a locking script.',\n                    type: 'string',\n                },\n            },\n            required: ['script', 'unlocks'],\n            type: 'object',\n        },\n        AuthenticationTemplateVariable: {\n            anyOf: [\n                { $ref: '#/definitions/AuthenticationTemplateAddressData' },\n                { $ref: '#/definitions/AuthenticationTemplateHdKey' },\n                { $ref: '#/definitions/AuthenticationTemplateKey' },\n                { $ref: '#/definitions/AuthenticationTemplateWalletData' },\n            ],\n        },\n        AuthenticationTemplateWalletData: {\n            additionalProperties: false,\n            properties: {\n                description: {\n                    description: 'A single-line, human readable description for this wallet data.',\n                    type: 'string',\n                },\n                name: {\n                    description: 'A single-line, Title Case, human-readable name for this wallet data.',\n                    type: 'string',\n                },\n                type: {\n                    const: 'WalletData',\n                    description: 'The `WalletData` type provides a static piece of data that should be collected once and stored at the time of wallet creation. `WalletData` should be persistent for the life of the wallet, rather than changing from locking script to locking script.\\n\\nFor address-specific data, use `AddressData`.',\n                    type: 'string',\n                },\n            },\n            required: ['type'],\n            type: 'object',\n        },\n        AuthenticationVirtualMachineIdentifier: {\n            description: \"Allowable identifiers for authentication virtual machine versions. The `BCH` prefix identifies the Bitcoin Cash network, the `XEC` prefix identifies the eCash network, the `BSV` prefix identifies the Bitcoin SV network, and the `BTC` prefix identifies the Bitcoin Core network. VM versions are named according to the date they were deployed on the indicated network.\\n\\nFor each network prefix, a `_SPEC` VM version is reserved to indicate that the template requires a custom, not-yet-deployed VM version (e.g. one or more CHIPs). By convention, templates marked for `_SPEC` VMs should indicate their requirements in the template description. After deployment of the `_SPEC` VM, when template compatibility is verified, the template's `supported` array should be updated to indicate compatibility with the live VM version.\",\n            enum: [\n                'BCH_2020_05',\n                'BCH_2021_05',\n                'BCH_2022_05',\n                'BCH_2023_05',\n                'BCH_SPEC',\n                'BSV_2020_02',\n                'BSV_SPEC',\n                'BTC_2017_08',\n                'BTC_SPEC',\n                'XEC_2020_05',\n                'XEC_SPEC',\n            ],\n            type: 'string',\n        },\n    },\n};\nconst schema23 = {\n    additionalProperties: false,\n    description: 'An `AuthenticationTemplate` (A.K.A. `CashAssembly Template`) specifies a set of locking scripts, unlocking scripts, and other information required to use a certain authentication scheme. Templates fully describe wallets and protocols in a way that can be shared between software clients.',\n    properties: {\n        $schema: {\n            description: 'The URI that identifies the JSON Schema used by this template. Try: `https://libauth.org/schemas/authentication-template-v0.schema.json` to enable documentation, autocompletion, and validation in JSON documents.',\n            type: 'string',\n        },\n        description: {\n            description: 'An optionally multi-line, free-form, human-readable description for this authentication template (for use in user interfaces). If displayed, this description should use a monospace font to properly render ASCII diagrams.',\n            type: 'string',\n        },\n        entities: {\n            additionalProperties: {\n                $ref: '#/definitions/AuthenticationTemplateEntity',\n            },\n            description: 'A map of entities defined in this authentication template.\\n\\nObject keys are used as entity identifiers, and by convention, should use `snake_case`.',\n            type: 'object',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this authentication template (for use in user interfaces).',\n            type: 'string',\n        },\n        scenarios: {\n            additionalProperties: {\n                $ref: '#/definitions/AuthenticationTemplateScenario',\n            },\n            description: 'A scenario describes a context in which one or more scripts might be used. Scenarios are used for transaction estimation and as an integrated testing system for authentication templates.\\n\\nObject keys are used as scenario identifiers, and by convention, should use `snake_case`.',\n            type: 'object',\n        },\n        scripts: {\n            additionalProperties: {\n                anyOf: [\n                    { $ref: '#/definitions/AuthenticationTemplateScript' },\n                    { $ref: '#/definitions/AuthenticationTemplateScriptLocking' },\n                    { $ref: '#/definitions/AuthenticationTemplateScriptTested' },\n                    { $ref: '#/definitions/AuthenticationTemplateScriptUnlocking' },\n                ],\n            },\n            description: 'A map of scripts used in this authentication template.\\n\\nObject keys are used as script identifiers, and by convention, should use `snake_case`.',\n            type: 'object',\n        },\n        supported: {\n            description: 'A list of authentication virtual machine versions supported by this template.\\n\\nVirtual machine identifiers use the format `CODE_YYYY_MM`, where `CODE` is the currency code used to identify the network, and `YYYY_MM` is the year and month in which the specified VM version became active on the indicated network.\\n\\nIdentifiers with the `_SPEC` suffix indicate that this template is intended for compatibility with a future virtual machine version, but at the time the template was created, that virtual machine had not yet become active on the specified chain.',\n            items: { $ref: '#/definitions/AuthenticationVirtualMachineIdentifier' },\n            type: 'array',\n        },\n        version: {\n            const: 0,\n            description: 'A number identifying the format of this AuthenticationTemplate. Currently, this implementation requires `version` be set to `0`.',\n            type: 'number',\n        },\n    },\n    required: ['entities', 'scripts', 'supported', 'version'],\n    type: 'object',\n};\nconst schema37 = {\n    additionalProperties: false,\n    description: 'An object describing the configuration for a particular script within an authentication template.',\n    properties: {\n        name: {\n            description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n            type: 'string',\n        },\n        script: {\n            description: 'The script definition in CashAssembly.',\n            type: 'string',\n        },\n    },\n    required: ['script'],\n    type: 'object',\n};\nconst schema38 = {\n    additionalProperties: false,\n    properties: {\n        lockingType: {\n            description: 'Indicates if P2SH20 infrastructure should be used when producing bytecode related to this script. For more information on P2SH20, see BIP16.\\n\\nWhen compiling locking scripts of type `p2sh20`, the result will be placed in a P2SH20 \"redeem script\" format: `OP_HASH160 <$(<lockingBytecode> OP_HASH160)> OP_EQUAL`\\n\\nWhen compiling unlocking scripts that unlock locking scripts of type `p2sh20`, the result will be transformed into the P2SH20 unlocking format: `unlockingBytecode <lockingBytecode>` (where `lockingBytecode` is the compiled bytecode of the locking script, without the \"redeem script\" transformation.)\\n\\nThe presence of the `lockingType` property indicates that this script is a locking script. It must be present on any script referenced by the `unlocks` property of another script.',\n            enum: ['p2sh20', 'p2sh32', 'standard'],\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n            type: 'string',\n        },\n        script: {\n            description: 'The script definition in CashAssembly.',\n            type: 'string',\n        },\n    },\n    required: ['lockingType', 'script'],\n    type: 'object',\n};\nconst schema41 = {\n    additionalProperties: false,\n    properties: {\n        ageLock: {\n            description: 'TODO: not yet implemented\\n\\nThe minimum input age required for this unlocking script to become valid.\\n\\nThis value is provided as a CashAssembly script that must compile to the least significant 3 bytes of the minimum sequence number required for this unlocking script to be valid (the \"type bit\" and the 2-byte \"value\" – see BIP68 for details). This script has access to all other template scripts and variables, but cyclical references will produce an error at compile time.\\n\\nIn supporting wallets, this value can be computed at address creation time, and the remaining time for which any UTXO remains \"age-locked\" can be displayed in user interfaces (by parsing the \"type bit\" and \"value\" as described in BIP68).\\n\\nNote, because the precise value used by `OP_CHECKSEQUENCEVERIFY` can be provided in the unlocking script, it is trivial to create an unlocking script for which a proper value for `ageLock` is not possible to determine until the spending transaction is prepared. These cases are intentionally out-of-scope for this property. Instead, `ageLock` should only be used for unlocking scripts where the expected value can be compiled at address creation time.',\n            type: 'string',\n        },\n        estimate: {\n            description: 'The identifier of the scenario to use for this unlocking script when compiling an estimated transaction.\\n\\nUsing estimate scenarios, it\\'s possible for wallet software to compute an \"estimated transaction\", an invalid transaction that is guaranteed to be the same byte length as the final transaction. This length can be used to calculate the required transaction fee and assign values to the transaction\\'s change output(s). Because estimate scenarios provide \"estimated\" values for all variables, this estimation can be done by a single entity without input from other entities.\\n\\nIf not provided, the default scenario will be used for estimation. The default scenario only provides values for each `Key` and `HdKey` variable, so compilations requiring other variables will produce errors. See `AuthenticationTemplateScenario.extends` for details.',\n            type: 'string',\n        },\n        fails: {\n            description: 'A list of the scenario identifiers that – when used to compile this unlocking script and the script it unlocks – result in bytecode that fails program verification.\\n\\nThese scenarios can be used to test this script in development and review.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        invalid: {\n            description: 'A list of the scenario identifiers that – when used to compile this unlocking script and the script it unlocks – result in a compilation error.\\n\\nThese scenarios can be used to test this script in development and review.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        name: {\n            description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n            type: 'string',\n        },\n        passes: {\n            description: 'A list of the scenario identifiers that – when used to compile this unlocking script and the script it unlocks – result in bytecode that passes program verification.\\n\\nThese scenarios can be used to test this script in development and review.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        script: {\n            description: 'The script definition in CashAssembly.',\n            type: 'string',\n        },\n        timeLockType: {\n            description: \"The expected type of time locks in this script.\\n\\nBecause `OP_CHECKLOCKTIMEVERIFY` reads from a transaction's `locktime` property, every input to a given transaction must share the same time lock type. This differs from `OP_CHECKSEQUENCEVERIFY` in that each input has its own `sequenceNumber`, so compatibility is not required.\\n\\nIf a transaction includes multiple inputs using scripts with `timeLockType` defined, and the types are not compatible, generation should fail.\\n\\nThe `timestamp` type indicates that the transaction's locktime is provided as a UNIX timestamp (the `locktime` value is greater than or equal to `500000000`).\\n\\nThe `height` type indicates that the transaction's locktime is provided as a block height (the `locktime` value is less than `500000000`).\\n\\nIf `timeLockType` is undefined, the script is assumed to have no reliance on absolute time locks.\",\n            enum: ['height', 'timestamp'],\n            type: 'string',\n        },\n        unlocks: {\n            description: 'The identifier of the script that can be unlocked by this script.\\n\\nThe presence of the `unlocks` property indicates that this script is an unlocking script, and the script it unlocks must be a locking script.',\n            type: 'string',\n        },\n    },\n    required: ['script', 'unlocks'],\n    type: 'object',\n};\nconst schema42 = {\n    description: \"Allowable identifiers for authentication virtual machine versions. The `BCH` prefix identifies the Bitcoin Cash network, the `XEC` prefix identifies the eCash network, the `BSV` prefix identifies the Bitcoin SV network, and the `BTC` prefix identifies the Bitcoin Core network. VM versions are named according to the date they were deployed on the indicated network.\\n\\nFor each network prefix, a `_SPEC` VM version is reserved to indicate that the template requires a custom, not-yet-deployed VM version (e.g. one or more CHIPs). By convention, templates marked for `_SPEC` VMs should indicate their requirements in the template description. After deployment of the `_SPEC` VM, when template compatibility is verified, the template's `supported` array should be updated to indicate compatibility with the live VM version.\",\n    enum: [\n        'BCH_2020_05',\n        'BCH_2021_05',\n        'BCH_2022_05',\n        'BCH_2023_05',\n        'BCH_SPEC',\n        'BSV_2020_02',\n        'BSV_SPEC',\n        'BTC_2017_08',\n        'BTC_SPEC',\n        'XEC_2020_05',\n        'XEC_SPEC',\n    ],\n    type: 'string',\n};\nconst schema24 = {\n    additionalProperties: false,\n    description: 'An object describing the configuration for a particular entity within an authentication template.',\n    properties: {\n        description: {\n            description: 'An optionally multi-line, free-form, human-readable description for this entity (for use in user interfaces). If displayed, this description should use a monospace font to properly render ASCII diagrams.',\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this entity for use in user interfaces and error messages, e.g.: `Trusted Third-Party`.',\n            type: 'string',\n        },\n        scripts: {\n            description: 'An array of the identifiers of each script the entity must be capable of generating, e.g. each of the unlocking scripts this entity might use.\\n\\nProvided the necessary variables, any entity can construct any script, but this option allows us to hint to more advanced wallets which scripts to recommend to users. (Especially when many scripts require inter-entity communication initiated by a user.)\\n\\nIf not provided, this property is assumed to include all scripts in the template.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        variables: {\n            additionalProperties: {\n                $ref: '#/definitions/AuthenticationTemplateVariable',\n            },\n            description: \"A map of variables that must be provided by this entity for use in the template's scripts. Some variables are required before locking script generation, while some variables can or must be resolved only before unlocking script generation.\\n\\nObject keys are used as variable identifiers, and by convention, should use `snake_case`.\",\n            type: 'object',\n        },\n    },\n    type: 'object',\n};\nconst schema25 = {\n    anyOf: [\n        { $ref: '#/definitions/AuthenticationTemplateAddressData' },\n        { $ref: '#/definitions/AuthenticationTemplateHdKey' },\n        { $ref: '#/definitions/AuthenticationTemplateKey' },\n        { $ref: '#/definitions/AuthenticationTemplateWalletData' },\n    ],\n};\nconst schema26 = {\n    additionalProperties: false,\n    properties: {\n        description: {\n            description: 'A single-line, human readable description for this address data.',\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this address data.',\n            type: 'string',\n        },\n        type: {\n            const: 'AddressData',\n            description: '`AddressData` is the most low-level variable type. It must be collected and stored each time a script is generated (usually, a locking script). `AddressData` can include any type of data, and can be used in any way.\\n\\nFor more persistent data, use `WalletData`.',\n            type: 'string',\n        },\n    },\n    required: ['type'],\n    type: 'object',\n};\nconst schema27 = {\n    additionalProperties: false,\n    properties: {\n        addressOffset: {\n            description: 'The offset by which to increment the `addressIndex` provided in the compilation data when deriving this `HdKey`. (Default: 0)\\n\\nThis is useful for deriving the \"next\" (`1`) or \"previous\" (`-1`) address to be used in the current compiler configuration.',\n            type: 'number',\n        },\n        description: {\n            description: 'A single-line, human readable description for this HD key.',\n            type: 'string',\n        },\n        hdPublicKeyDerivationPath: {\n            description: \"The path to derive the entity's HD public key from the entity's master HD private key. By default, `m` (i.e. the entity's HD public key represents the same node in the HD tree as its HD private key).\\n\\nThis can be used to specify another derivation path from which the `publicDerivationPath` begins, e.g. `m/0'/1'/2'`. See `publicDerivationPath` for details.\\n\\nThis path must begin with an `m` (private derivation) and be fixed – it cannot contain an `i` character to represent the address index, as a dynamic hardened path would require a new HD public key for each address.\",\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this HD key.',\n            type: 'string',\n        },\n        privateDerivationPath: {\n            description: \"The derivation path used to derive this `HdKey` from the owning entity's HD private key. By default, `m/i`.\\n\\nThis path uses the notation specified in BIP32 and the `i` character to represent the location of the `addressIndex`:\\n\\nThe first character must be `m` (private derivation), followed by sets of `/` and a number representing the child index used in the derivation at that depth. Hardened derivation is represented by a trailing `'`, and hardened child indexes are represented with the hardened index offset (`2147483648`) subtracted. The `i` character is replaced with the value of `addressIndex` plus this `HdKey`'s `addressOffset`. If the `i` character is followed by `'`, the hardened index offset is added (`2147483648`) and hardened derivation is used.\\n\\nFor example, `m/0/1'/i'` uses 3 levels of derivation, with child indexes in the following order:\\n\\n`derive(derive(derive(node, 0), 2147483648 + 1), 2147483648 + addressIndex + addressOffset)`\\n\\nBecause hardened derivation requires knowledge of the private key, `HdKey` variables with `derivationPath`s that include hardened derivation cannot use HD public derivation (the `hdPublicKeys` property in `CompilationData`). Instead, compilation requires the respective HD private key (`CompilationData.hdKeys.hdPrivateKeys`) or the fully-derived public key (`CompilationData.hdKeys.derivedPublicKeys`).\",\n            type: 'string',\n        },\n        publicDerivationPath: {\n            description: \"The derivation path used to derive this `HdKey`'s public key from the owning entity's HD public key. If not set, the public equivalent of `privateDerivationPath` is used. For the `privateDerivationPath` default of `m/i`, this is `M/i`.\\n\\nIf `privateDerivationPath` uses hardened derivation for some levels, but later derivation levels use non-hardened derivation, `publicDerivationPath` can be used to specify a public derivation path beginning from `hdPublicKeyDerivationPath` (i.e. `publicDerivationPath` should always be a non-hardened segment of `privateDerivationPath` that follows `hdPublicKeyDerivationPath`).\\n\\nThe first character must be `M` (public derivation), followed by sets of `/` and a number representing the child index used in the non-hardened derivation at that depth.\\n\\nFor example, if `privateDerivationPath` is `m/0'/i`, it is not possible to derive the equivalent public key with only the HD public key `M`. (The path \\\"`M/0'/i`\\\" is impossible.) However, given the HD public key for `m/0'`, it is possible to derive the public key of `m/0'/i` for any `i`. In this case, `hdPublicKeyDerivationPath` would be `m/0'` and `publicDerivationPath` would be the remaining `M/i`.\",\n            type: 'string',\n        },\n        type: {\n            const: 'HdKey',\n            description: 'The `HdKey` (Hierarchical-Deterministic Key) type automatically manages key generation and mapping in a standard way. For greater control, use `Key`.',\n            type: 'string',\n        },\n    },\n    required: ['type'],\n    type: 'object',\n};\nconst schema28 = {\n    additionalProperties: false,\n    properties: {\n        description: {\n            description: 'A single-line, human readable description for this key.',\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this key.',\n            type: 'string',\n        },\n        type: {\n            const: 'Key',\n            description: 'The `Key` type provides fine-grained control over key generation and mapping. Most templates should instead use `HdKey`.\\n\\nAny HD (Hierarchical-Deterministic) derivation must be completed outside of the templating system and provided at the time of use.',\n            type: 'string',\n        },\n    },\n    required: ['type'],\n    type: 'object',\n};\nconst schema29 = {\n    additionalProperties: false,\n    properties: {\n        description: {\n            description: 'A single-line, human readable description for this wallet data.',\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this wallet data.',\n            type: 'string',\n        },\n        type: {\n            const: 'WalletData',\n            description: 'The `WalletData` type provides a static piece of data that should be collected once and stored at the time of wallet creation. `WalletData` should be persistent for the life of the wallet, rather than changing from locking script to locking script.\\n\\nFor address-specific data, use `AddressData`.',\n            type: 'string',\n        },\n    },\n    required: ['type'],\n    type: 'object',\n};\nfunction validate23(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    const _errs0 = errors;\n    let valid0 = false;\n    const _errs1 = errors;\n    const _errs2 = errors;\n    if (errors === _errs2) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            let missing0;\n            if (data.type === undefined && (missing0 = 'type')) {\n                const err0 = {\n                    instancePath,\n                    schemaPath: '#/definitions/AuthenticationTemplateAddressData/required',\n                    keyword: 'required',\n                    params: { missingProperty: missing0 },\n                    message: \"must have required property '\" + missing0 + \"'\",\n                };\n                if (vErrors === null) {\n                    vErrors = [err0];\n                }\n                else {\n                    vErrors.push(err0);\n                }\n                errors++;\n            }\n            else {\n                const _errs4 = errors;\n                for (const key0 in data) {\n                    if (!(key0 === 'description' || key0 === 'name' || key0 === 'type')) {\n                        const err1 = {\n                            instancePath,\n                            schemaPath: '#/definitions/AuthenticationTemplateAddressData/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        };\n                        if (vErrors === null) {\n                            vErrors = [err1];\n                        }\n                        else {\n                            vErrors.push(err1);\n                        }\n                        errors++;\n                        break;\n                    }\n                }\n                if (_errs4 === errors) {\n                    if (data.description !== undefined) {\n                        const _errs5 = errors;\n                        if (typeof data.description !== 'string') {\n                            const err2 = {\n                                instancePath: instancePath + '/description',\n                                schemaPath: '#/definitions/AuthenticationTemplateAddressData/properties/description/type',\n                                keyword: 'type',\n                                params: { type: 'string' },\n                                message: 'must be string',\n                            };\n                            if (vErrors === null) {\n                                vErrors = [err2];\n                            }\n                            else {\n                                vErrors.push(err2);\n                            }\n                            errors++;\n                        }\n                        var valid2 = _errs5 === errors;\n                    }\n                    else {\n                        var valid2 = true;\n                    }\n                    if (valid2) {\n                        if (data.name !== undefined) {\n                            const _errs7 = errors;\n                            if (typeof data.name !== 'string') {\n                                const err3 = {\n                                    instancePath: instancePath + '/name',\n                                    schemaPath: '#/definitions/AuthenticationTemplateAddressData/properties/name/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err3];\n                                }\n                                else {\n                                    vErrors.push(err3);\n                                }\n                                errors++;\n                            }\n                            var valid2 = _errs7 === errors;\n                        }\n                        else {\n                            var valid2 = true;\n                        }\n                        if (valid2) {\n                            if (data.type !== undefined) {\n                                let data2 = data.type;\n                                const _errs9 = errors;\n                                if (typeof data2 !== 'string') {\n                                    const err4 = {\n                                        instancePath: instancePath + '/type',\n                                        schemaPath: '#/definitions/AuthenticationTemplateAddressData/properties/type/type',\n                                        keyword: 'type',\n                                        params: { type: 'string' },\n                                        message: 'must be string',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err4];\n                                    }\n                                    else {\n                                        vErrors.push(err4);\n                                    }\n                                    errors++;\n                                }\n                                if ('AddressData' !== data2) {\n                                    const err5 = {\n                                        instancePath: instancePath + '/type',\n                                        schemaPath: '#/definitions/AuthenticationTemplateAddressData/properties/type/const',\n                                        keyword: 'const',\n                                        params: { allowedValue: 'AddressData' },\n                                        message: 'must be equal to constant',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err5];\n                                    }\n                                    else {\n                                        vErrors.push(err5);\n                                    }\n                                    errors++;\n                                }\n                                var valid2 = _errs9 === errors;\n                            }\n                            else {\n                                var valid2 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const err6 = {\n                instancePath,\n                schemaPath: '#/definitions/AuthenticationTemplateAddressData/type',\n                keyword: 'type',\n                params: { type: 'object' },\n                message: 'must be object',\n            };\n            if (vErrors === null) {\n                vErrors = [err6];\n            }\n            else {\n                vErrors.push(err6);\n            }\n            errors++;\n        }\n    }\n    var _valid0 = _errs1 === errors;\n    valid0 = valid0 || _valid0;\n    if (!valid0) {\n        const _errs11 = errors;\n        const _errs12 = errors;\n        if (errors === _errs12) {\n            if (data && typeof data == 'object' && !Array.isArray(data)) {\n                let missing1;\n                if (data.type === undefined && (missing1 = 'type')) {\n                    const err7 = {\n                        instancePath,\n                        schemaPath: '#/definitions/AuthenticationTemplateHdKey/required',\n                        keyword: 'required',\n                        params: { missingProperty: missing1 },\n                        message: \"must have required property '\" + missing1 + \"'\",\n                    };\n                    if (vErrors === null) {\n                        vErrors = [err7];\n                    }\n                    else {\n                        vErrors.push(err7);\n                    }\n                    errors++;\n                }\n                else {\n                    const _errs14 = errors;\n                    for (const key1 in data) {\n                        if (!(key1 === 'addressOffset' ||\n                            key1 === 'description' ||\n                            key1 === 'hdPublicKeyDerivationPath' ||\n                            key1 === 'name' ||\n                            key1 === 'privateDerivationPath' ||\n                            key1 === 'publicDerivationPath' ||\n                            key1 === 'type')) {\n                            const err8 = {\n                                instancePath,\n                                schemaPath: '#/definitions/AuthenticationTemplateHdKey/additionalProperties',\n                                keyword: 'additionalProperties',\n                                params: { additionalProperty: key1 },\n                                message: 'must NOT have additional properties',\n                            };\n                            if (vErrors === null) {\n                                vErrors = [err8];\n                            }\n                            else {\n                                vErrors.push(err8);\n                            }\n                            errors++;\n                            break;\n                        }\n                    }\n                    if (_errs14 === errors) {\n                        if (data.addressOffset !== undefined) {\n                            let data3 = data.addressOffset;\n                            const _errs15 = errors;\n                            if (!(typeof data3 == 'number' && isFinite(data3))) {\n                                const err9 = {\n                                    instancePath: instancePath + '/addressOffset',\n                                    schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/addressOffset/type',\n                                    keyword: 'type',\n                                    params: { type: 'number' },\n                                    message: 'must be number',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err9];\n                                }\n                                else {\n                                    vErrors.push(err9);\n                                }\n                                errors++;\n                            }\n                            var valid4 = _errs15 === errors;\n                        }\n                        else {\n                            var valid4 = true;\n                        }\n                        if (valid4) {\n                            if (data.description !== undefined) {\n                                const _errs17 = errors;\n                                if (typeof data.description !== 'string') {\n                                    const err10 = {\n                                        instancePath: instancePath + '/description',\n                                        schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/description/type',\n                                        keyword: 'type',\n                                        params: { type: 'string' },\n                                        message: 'must be string',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err10];\n                                    }\n                                    else {\n                                        vErrors.push(err10);\n                                    }\n                                    errors++;\n                                }\n                                var valid4 = _errs17 === errors;\n                            }\n                            else {\n                                var valid4 = true;\n                            }\n                            if (valid4) {\n                                if (data.hdPublicKeyDerivationPath !== undefined) {\n                                    const _errs19 = errors;\n                                    if (typeof data.hdPublicKeyDerivationPath !== 'string') {\n                                        const err11 = {\n                                            instancePath: instancePath + '/hdPublicKeyDerivationPath',\n                                            schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/hdPublicKeyDerivationPath/type',\n                                            keyword: 'type',\n                                            params: { type: 'string' },\n                                            message: 'must be string',\n                                        };\n                                        if (vErrors === null) {\n                                            vErrors = [err11];\n                                        }\n                                        else {\n                                            vErrors.push(err11);\n                                        }\n                                        errors++;\n                                    }\n                                    var valid4 = _errs19 === errors;\n                                }\n                                else {\n                                    var valid4 = true;\n                                }\n                                if (valid4) {\n                                    if (data.name !== undefined) {\n                                        const _errs21 = errors;\n                                        if (typeof data.name !== 'string') {\n                                            const err12 = {\n                                                instancePath: instancePath + '/name',\n                                                schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/name/type',\n                                                keyword: 'type',\n                                                params: { type: 'string' },\n                                                message: 'must be string',\n                                            };\n                                            if (vErrors === null) {\n                                                vErrors = [err12];\n                                            }\n                                            else {\n                                                vErrors.push(err12);\n                                            }\n                                            errors++;\n                                        }\n                                        var valid4 = _errs21 === errors;\n                                    }\n                                    else {\n                                        var valid4 = true;\n                                    }\n                                    if (valid4) {\n                                        if (data.privateDerivationPath !== undefined) {\n                                            const _errs23 = errors;\n                                            if (typeof data.privateDerivationPath !== 'string') {\n                                                const err13 = {\n                                                    instancePath: instancePath + '/privateDerivationPath',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/privateDerivationPath/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'string' },\n                                                    message: 'must be string',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err13];\n                                                }\n                                                else {\n                                                    vErrors.push(err13);\n                                                }\n                                                errors++;\n                                            }\n                                            var valid4 = _errs23 === errors;\n                                        }\n                                        else {\n                                            var valid4 = true;\n                                        }\n                                        if (valid4) {\n                                            if (data.publicDerivationPath !== undefined) {\n                                                const _errs25 = errors;\n                                                if (typeof data.publicDerivationPath !== 'string') {\n                                                    const err14 = {\n                                                        instancePath: instancePath + '/publicDerivationPath',\n                                                        schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/publicDerivationPath/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'string' },\n                                                        message: 'must be string',\n                                                    };\n                                                    if (vErrors === null) {\n                                                        vErrors = [err14];\n                                                    }\n                                                    else {\n                                                        vErrors.push(err14);\n                                                    }\n                                                    errors++;\n                                                }\n                                                var valid4 = _errs25 === errors;\n                                            }\n                                            else {\n                                                var valid4 = true;\n                                            }\n                                            if (valid4) {\n                                                if (data.type !== undefined) {\n                                                    let data9 = data.type;\n                                                    const _errs27 = errors;\n                                                    if (typeof data9 !== 'string') {\n                                                        const err15 = {\n                                                            instancePath: instancePath + '/type',\n                                                            schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/type/type',\n                                                            keyword: 'type',\n                                                            params: { type: 'string' },\n                                                            message: 'must be string',\n                                                        };\n                                                        if (vErrors === null) {\n                                                            vErrors = [err15];\n                                                        }\n                                                        else {\n                                                            vErrors.push(err15);\n                                                        }\n                                                        errors++;\n                                                    }\n                                                    if ('HdKey' !== data9) {\n                                                        const err16 = {\n                                                            instancePath: instancePath + '/type',\n                                                            schemaPath: '#/definitions/AuthenticationTemplateHdKey/properties/type/const',\n                                                            keyword: 'const',\n                                                            params: { allowedValue: 'HdKey' },\n                                                            message: 'must be equal to constant',\n                                                        };\n                                                        if (vErrors === null) {\n                                                            vErrors = [err16];\n                                                        }\n                                                        else {\n                                                            vErrors.push(err16);\n                                                        }\n                                                        errors++;\n                                                    }\n                                                    var valid4 = _errs27 === errors;\n                                                }\n                                                else {\n                                                    var valid4 = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const err17 = {\n                    instancePath,\n                    schemaPath: '#/definitions/AuthenticationTemplateHdKey/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                };\n                if (vErrors === null) {\n                    vErrors = [err17];\n                }\n                else {\n                    vErrors.push(err17);\n                }\n                errors++;\n            }\n        }\n        var _valid0 = _errs11 === errors;\n        valid0 = valid0 || _valid0;\n        if (!valid0) {\n            const _errs29 = errors;\n            const _errs30 = errors;\n            if (errors === _errs30) {\n                if (data && typeof data == 'object' && !Array.isArray(data)) {\n                    let missing2;\n                    if (data.type === undefined && (missing2 = 'type')) {\n                        const err18 = {\n                            instancePath,\n                            schemaPath: '#/definitions/AuthenticationTemplateKey/required',\n                            keyword: 'required',\n                            params: { missingProperty: missing2 },\n                            message: \"must have required property '\" + missing2 + \"'\",\n                        };\n                        if (vErrors === null) {\n                            vErrors = [err18];\n                        }\n                        else {\n                            vErrors.push(err18);\n                        }\n                        errors++;\n                    }\n                    else {\n                        const _errs32 = errors;\n                        for (const key2 in data) {\n                            if (!(key2 === 'description' || key2 === 'name' || key2 === 'type')) {\n                                const err19 = {\n                                    instancePath,\n                                    schemaPath: '#/definitions/AuthenticationTemplateKey/additionalProperties',\n                                    keyword: 'additionalProperties',\n                                    params: { additionalProperty: key2 },\n                                    message: 'must NOT have additional properties',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err19];\n                                }\n                                else {\n                                    vErrors.push(err19);\n                                }\n                                errors++;\n                                break;\n                            }\n                        }\n                        if (_errs32 === errors) {\n                            if (data.description !== undefined) {\n                                const _errs33 = errors;\n                                if (typeof data.description !== 'string') {\n                                    const err20 = {\n                                        instancePath: instancePath + '/description',\n                                        schemaPath: '#/definitions/AuthenticationTemplateKey/properties/description/type',\n                                        keyword: 'type',\n                                        params: { type: 'string' },\n                                        message: 'must be string',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err20];\n                                    }\n                                    else {\n                                        vErrors.push(err20);\n                                    }\n                                    errors++;\n                                }\n                                var valid6 = _errs33 === errors;\n                            }\n                            else {\n                                var valid6 = true;\n                            }\n                            if (valid6) {\n                                if (data.name !== undefined) {\n                                    const _errs35 = errors;\n                                    if (typeof data.name !== 'string') {\n                                        const err21 = {\n                                            instancePath: instancePath + '/name',\n                                            schemaPath: '#/definitions/AuthenticationTemplateKey/properties/name/type',\n                                            keyword: 'type',\n                                            params: { type: 'string' },\n                                            message: 'must be string',\n                                        };\n                                        if (vErrors === null) {\n                                            vErrors = [err21];\n                                        }\n                                        else {\n                                            vErrors.push(err21);\n                                        }\n                                        errors++;\n                                    }\n                                    var valid6 = _errs35 === errors;\n                                }\n                                else {\n                                    var valid6 = true;\n                                }\n                                if (valid6) {\n                                    if (data.type !== undefined) {\n                                        let data12 = data.type;\n                                        const _errs37 = errors;\n                                        if (typeof data12 !== 'string') {\n                                            const err22 = {\n                                                instancePath: instancePath + '/type',\n                                                schemaPath: '#/definitions/AuthenticationTemplateKey/properties/type/type',\n                                                keyword: 'type',\n                                                params: { type: 'string' },\n                                                message: 'must be string',\n                                            };\n                                            if (vErrors === null) {\n                                                vErrors = [err22];\n                                            }\n                                            else {\n                                                vErrors.push(err22);\n                                            }\n                                            errors++;\n                                        }\n                                        if ('Key' !== data12) {\n                                            const err23 = {\n                                                instancePath: instancePath + '/type',\n                                                schemaPath: '#/definitions/AuthenticationTemplateKey/properties/type/const',\n                                                keyword: 'const',\n                                                params: { allowedValue: 'Key' },\n                                                message: 'must be equal to constant',\n                                            };\n                                            if (vErrors === null) {\n                                                vErrors = [err23];\n                                            }\n                                            else {\n                                                vErrors.push(err23);\n                                            }\n                                            errors++;\n                                        }\n                                        var valid6 = _errs37 === errors;\n                                    }\n                                    else {\n                                        var valid6 = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    const err24 = {\n                        instancePath,\n                        schemaPath: '#/definitions/AuthenticationTemplateKey/type',\n                        keyword: 'type',\n                        params: { type: 'object' },\n                        message: 'must be object',\n                    };\n                    if (vErrors === null) {\n                        vErrors = [err24];\n                    }\n                    else {\n                        vErrors.push(err24);\n                    }\n                    errors++;\n                }\n            }\n            var _valid0 = _errs29 === errors;\n            valid0 = valid0 || _valid0;\n            if (!valid0) {\n                const _errs39 = errors;\n                const _errs40 = errors;\n                if (errors === _errs40) {\n                    if (data && typeof data == 'object' && !Array.isArray(data)) {\n                        let missing3;\n                        if (data.type === undefined && (missing3 = 'type')) {\n                            const err25 = {\n                                instancePath,\n                                schemaPath: '#/definitions/AuthenticationTemplateWalletData/required',\n                                keyword: 'required',\n                                params: { missingProperty: missing3 },\n                                message: \"must have required property '\" + missing3 + \"'\",\n                            };\n                            if (vErrors === null) {\n                                vErrors = [err25];\n                            }\n                            else {\n                                vErrors.push(err25);\n                            }\n                            errors++;\n                        }\n                        else {\n                            const _errs42 = errors;\n                            for (const key3 in data) {\n                                if (!(key3 === 'description' ||\n                                    key3 === 'name' ||\n                                    key3 === 'type')) {\n                                    const err26 = {\n                                        instancePath,\n                                        schemaPath: '#/definitions/AuthenticationTemplateWalletData/additionalProperties',\n                                        keyword: 'additionalProperties',\n                                        params: { additionalProperty: key3 },\n                                        message: 'must NOT have additional properties',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err26];\n                                    }\n                                    else {\n                                        vErrors.push(err26);\n                                    }\n                                    errors++;\n                                    break;\n                                }\n                            }\n                            if (_errs42 === errors) {\n                                if (data.description !== undefined) {\n                                    const _errs43 = errors;\n                                    if (typeof data.description !== 'string') {\n                                        const err27 = {\n                                            instancePath: instancePath + '/description',\n                                            schemaPath: '#/definitions/AuthenticationTemplateWalletData/properties/description/type',\n                                            keyword: 'type',\n                                            params: { type: 'string' },\n                                            message: 'must be string',\n                                        };\n                                        if (vErrors === null) {\n                                            vErrors = [err27];\n                                        }\n                                        else {\n                                            vErrors.push(err27);\n                                        }\n                                        errors++;\n                                    }\n                                    var valid8 = _errs43 === errors;\n                                }\n                                else {\n                                    var valid8 = true;\n                                }\n                                if (valid8) {\n                                    if (data.name !== undefined) {\n                                        const _errs45 = errors;\n                                        if (typeof data.name !== 'string') {\n                                            const err28 = {\n                                                instancePath: instancePath + '/name',\n                                                schemaPath: '#/definitions/AuthenticationTemplateWalletData/properties/name/type',\n                                                keyword: 'type',\n                                                params: { type: 'string' },\n                                                message: 'must be string',\n                                            };\n                                            if (vErrors === null) {\n                                                vErrors = [err28];\n                                            }\n                                            else {\n                                                vErrors.push(err28);\n                                            }\n                                            errors++;\n                                        }\n                                        var valid8 = _errs45 === errors;\n                                    }\n                                    else {\n                                        var valid8 = true;\n                                    }\n                                    if (valid8) {\n                                        if (data.type !== undefined) {\n                                            let data15 = data.type;\n                                            const _errs47 = errors;\n                                            if (typeof data15 !== 'string') {\n                                                const err29 = {\n                                                    instancePath: instancePath + '/type',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateWalletData/properties/type/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'string' },\n                                                    message: 'must be string',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err29];\n                                                }\n                                                else {\n                                                    vErrors.push(err29);\n                                                }\n                                                errors++;\n                                            }\n                                            if ('WalletData' !== data15) {\n                                                const err30 = {\n                                                    instancePath: instancePath + '/type',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateWalletData/properties/type/const',\n                                                    keyword: 'const',\n                                                    params: { allowedValue: 'WalletData' },\n                                                    message: 'must be equal to constant',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err30];\n                                                }\n                                                else {\n                                                    vErrors.push(err30);\n                                                }\n                                                errors++;\n                                            }\n                                            var valid8 = _errs47 === errors;\n                                        }\n                                        else {\n                                            var valid8 = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        const err31 = {\n                            instancePath,\n                            schemaPath: '#/definitions/AuthenticationTemplateWalletData/type',\n                            keyword: 'type',\n                            params: { type: 'object' },\n                            message: 'must be object',\n                        };\n                        if (vErrors === null) {\n                            vErrors = [err31];\n                        }\n                        else {\n                            vErrors.push(err31);\n                        }\n                        errors++;\n                    }\n                }\n                var _valid0 = _errs39 === errors;\n                valid0 = valid0 || _valid0;\n            }\n        }\n    }\n    if (!valid0) {\n        const err32 = {\n            instancePath,\n            schemaPath: '#/anyOf',\n            keyword: 'anyOf',\n            params: {},\n            message: 'must match a schema in anyOf',\n        };\n        if (vErrors === null) {\n            vErrors = [err32];\n        }\n        else {\n            vErrors.push(err32);\n        }\n        errors++;\n        validate23.errors = vErrors;\n        return false;\n    }\n    else {\n        errors = _errs0;\n        if (vErrors !== null) {\n            if (_errs0) {\n                vErrors.length = _errs0;\n            }\n            else {\n                vErrors = null;\n            }\n        }\n    }\n    validate23.errors = vErrors;\n    return errors === 0;\n}\nfunction validate22(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(key0 === 'description' ||\n                    key0 === 'name' ||\n                    key0 === 'scripts' ||\n                    key0 === 'variables')) {\n                    validate22.errors = [\n                        {\n                            instancePath,\n                            schemaPath: '#/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        },\n                    ];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.description !== undefined) {\n                    const _errs2 = errors;\n                    if (typeof data.description !== 'string') {\n                        validate22.errors = [\n                            {\n                                instancePath: instancePath + '/description',\n                                schemaPath: '#/properties/description/type',\n                                keyword: 'type',\n                                params: { type: 'string' },\n                                message: 'must be string',\n                            },\n                        ];\n                        return false;\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.name !== undefined) {\n                        const _errs4 = errors;\n                        if (typeof data.name !== 'string') {\n                            validate22.errors = [\n                                {\n                                    instancePath: instancePath + '/name',\n                                    schemaPath: '#/properties/name/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                },\n                            ];\n                            return false;\n                        }\n                        var valid0 = _errs4 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.scripts !== undefined) {\n                            let data2 = data.scripts;\n                            const _errs6 = errors;\n                            if (errors === _errs6) {\n                                if (Array.isArray(data2)) {\n                                    var valid1 = true;\n                                    const len0 = data2.length;\n                                    for (let i0 = 0; i0 < len0; i0++) {\n                                        const _errs8 = errors;\n                                        if (typeof data2[i0] !== 'string') {\n                                            validate22.errors = [\n                                                {\n                                                    instancePath: instancePath + '/scripts/' + i0,\n                                                    schemaPath: '#/properties/scripts/items/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'string' },\n                                                    message: 'must be string',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                        var valid1 = _errs8 === errors;\n                                        if (!valid1) {\n                                            break;\n                                        }\n                                    }\n                                }\n                                else {\n                                    validate22.errors = [\n                                        {\n                                            instancePath: instancePath + '/scripts',\n                                            schemaPath: '#/properties/scripts/type',\n                                            keyword: 'type',\n                                            params: { type: 'array' },\n                                            message: 'must be array',\n                                        },\n                                    ];\n                                    return false;\n                                }\n                            }\n                            var valid0 = _errs6 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.variables !== undefined) {\n                                let data4 = data.variables;\n                                const _errs10 = errors;\n                                if (errors === _errs10) {\n                                    if (data4 &&\n                                        typeof data4 == 'object' &&\n                                        !Array.isArray(data4)) {\n                                        for (const key1 in data4) {\n                                            const _errs13 = errors;\n                                            if (!validate23(data4[key1], {\n                                                instancePath: instancePath +\n                                                    '/variables/' +\n                                                    key1.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                parentData: data4,\n                                                parentDataProperty: key1,\n                                                rootData,\n                                            })) {\n                                                vErrors =\n                                                    vErrors === null\n                                                        ? validate23.errors\n                                                        : vErrors.concat(validate23.errors);\n                                                errors = vErrors.length;\n                                            }\n                                            var valid2 = _errs13 === errors;\n                                            if (!valid2) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        validate22.errors = [\n                                            {\n                                                instancePath: instancePath + '/variables',\n                                                schemaPath: '#/properties/variables/type',\n                                                keyword: 'type',\n                                                params: { type: 'object' },\n                                                message: 'must be object',\n                                            },\n                                        ];\n                                        return false;\n                                    }\n                                }\n                                var valid0 = _errs10 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate22.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate22.errors = vErrors;\n    return errors === 0;\n}\nconst schema30 = {\n    additionalProperties: false,\n    description: 'An object describing the configuration for a particular scenario within an authentication template.',\n    properties: {\n        data: {\n            $ref: '#/definitions/AuthenticationTemplateScenarioData',\n            description: \"An object defining the data to use while compiling this scenario. The properties specified here are used to extend the existing scenario data based on this scenario's `extends` property.\\n\\nEach property is extended individually – to unset a previously-set property, the property must be individually overridden in this object.\",\n        },\n        description: {\n            description: 'An optionally multi-line, free-form, human-readable description for this scenario (for use in user interfaces). If displayed, this description should use a monospace font to properly render ASCII diagrams.',\n            type: 'string',\n        },\n        extends: {\n            description: \"The identifier of the scenario that this scenario extends. Any `data` or `transaction` properties not defined in this scenario inherit from the extended parent scenario.\\n\\nIf undefined, this scenario is assumed to extend the default scenario:\\n\\n- The default values for `data` are set:   - The identifiers of all `Key` variables and entities in this template are lexicographically sorted, then each is assigned an incrementing positive integer – beginning with `1` – encoded as an unsigned, 256-bit, big-endian integer (i.e. `0x0000...0001` (32 bytes), `0x0000...0002`, `0x0000...0003`, etc.). For `Key`s, this assigned value is used as the private key; For entities, the assigned value is used as the master seed of that entity's `HdPrivateKey`. If `hdKey` is set, the `addressIndex` is set to `0`.   - `currentBlockHeight` is set to `2`. This is the height of the second mined block after the genesis block: `000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd`. This default value was chosen to be low enough to simplify the debugging of block height offsets while remaining differentiated from `0` and `1`, which are used both as boolean return values and for control flow.   - `currentBlockTime` is set to `1231469665`. This is the Median Time-Past block time (BIP113) of block `2`.\\n\\n- Then `transaction` is set based on use:   - if the scenario is being used for transaction estimation, all transaction properties are taken from the transaction being estimated.   - if the scenario is being used for script testing and validation, the default value for each `transaction` property is used.\\n\\nWhen a scenario is extended, each property of `data` and `transaction` is extended individually: if the extending scenario does not provide a new value for `data.bytecode.value` or `transaction.property`, the parent value is used. To avoid inheriting a parent value, each child value must be individually overridden.\",\n            type: 'string',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this scenario for use in user interfaces, e.g.: `Delayed Recovery`.',\n            type: 'string',\n        },\n        sourceOutputs: {\n            description: 'The list of source outputs (a.k.a. UTXOs) to use when generating the compilation context for this scenario.\\n\\nThe `sourceOutputs` property must have the same length as `transaction.inputs`, and each source output must be ordered to match the index of the input that spends it.\\n\\nTo be valid the `sourceOutputs` property must have exactly one source output with `lockingBytecode` set to `[\"slot\"]` – the output at the same index as the `[\"slot\"]` input in `transaction.inputs`.\\n\\nIf undefined, defaults to `[{ \"lockingBytecode\": [\"slot\"] }]`.',\n            items: {\n                $ref: '#/definitions/AuthenticationTemplateScenarioSourceOutput',\n            },\n            type: 'array',\n        },\n        transaction: {\n            additionalProperties: false,\n            description: 'The transaction within which this scenario should be evaluated. This is used for script testing and validation.\\n\\nIf undefined, inherits the default value for each property: ```json {   \"inputs\": [{ \"unlockingBytecode\": [\\'slot\\'] }],   \"locktime\": 0,   \"outputs\": [{ \"lockingBytecode\": {} }],   \"version\": 2 } ```\\n\\nAny `transaction` property that is not set will be inherited from the scenario specified by `extends`. when specifying the `inputs` and `outputs` properties, each input and output extends the default values for inputs and outputs, respectively.\\n\\nFor example, an input of `{}` is interpreted as: ```json {   \"outpointIndex\": 0,   \"outpointTransactionHash\":     \"0000000000000000000000000000000000000000000000000000000000000000\",   \"sequenceNumber\": 0,   \"unlockingBytecode\": [\\'slot\\'] } ``` And an output of `{}` is interpreted as: ```json {   \"lockingBytecode\": {     \"script\": [\\'copy\\'],     \"overrides\": { \"hdKeys\": { \"addressIndex\": 1 } }   },   \"valueSatoshis\": 0 } ```',\n            properties: {\n                inputs: {\n                    description: 'The list of inputs to use when generating the transaction for this scenario.\\n\\nTo be valid the `inputs` property must have exactly one input with `unlockingBytecode` set to `[\"slot\"]`. This is the input in which the unlocking script under test will be placed.\\n\\nIf undefined, inherits the default scenario `inputs` value: `[{ \"unlockingBytecode\": [\"slot\"] }]`.',\n                    items: { $ref: '#/definitions/AuthenticationTemplateScenarioInput' },\n                    type: 'array',\n                },\n                locktime: {\n                    description: 'The locktime to use when generating the transaction for this scenario. A positive integer from `0` to a maximum of `4294967295` – if undefined, defaults to `0`.\\n\\nLocktime can be provided as either a timestamp or a block height. Values less than `500000000` are understood to be a block height (the current block number in the chain, beginning from block `0`). Values greater than or equal to `500000000` are understood to be a UNIX timestamp.\\n\\nFor validating timestamp values, the median timestamp of the last 11 blocks (Median Time-Past) is used. The precise behavior is defined in BIP113.\\n\\nIf the `sequenceNumber` of every transaction input is set to `0xffffffff` (`4294967295`), locktime is disabled, and the transaction may be added to a block even if the specified locktime has not yet been reached. When locktime is disabled, if an `OP_CHECKLOCKTIMEVERIFY` operation is encountered during the verification of any input, an error is produced, and the transaction is invalid.',\n                    type: 'number',\n                },\n                outputs: {\n                    description: 'The list of outputs to use when generating the transaction for this scenario.\\n\\nIf undefined, defaults to `[{ \"lockingBytecode\": {} }]`.',\n                    items: {\n                        $ref: '#/definitions/AuthenticationTemplateScenarioTransactionOutput',\n                    },\n                    type: 'array',\n                },\n                version: {\n                    description: 'The version to use when generating the transaction for this scenario. A positive integer from `0` to a maximum of `4294967295` – if undefined, inherits the default scenario `version` value: `2`.',\n                    type: 'number',\n                },\n            },\n            type: 'object',\n        },\n    },\n    type: 'object',\n};\nconst schema31 = {\n    additionalProperties: false,\n    description: 'An object defining the data to use while compiling a scenario.',\n    properties: {\n        bytecode: {\n            additionalProperties: { type: 'string' },\n            description: \"A map of full identifiers to CashAssembly scripts that compile to each identifier's value for this scenario. Allowing `bytecode` to be specified as scripts (rather than e.g. hex) offers greater power and flexibility.\\n\\nBytecode scripts have access to each other and all other template scripts and defined variables, however, cyclical references will produce an error at compile time. Also, because the results of these compilations will be used to generate the compilation context for this scenario, these scripts may not use compiler operations that themselves require access to compilation context (e.g. signatures).\\n\\nThe provided `fullIdentifier` should match the complete identifier for each item, e.g. `some_wallet_data`, `variable_id.public_key`, or `variable_id.signature.all_outputs`.\\n\\nAll `AddressData` and `WalletData` variables must be provided via `bytecode` (though the default scenario automatically includes reasonable values), and pre-computed results for operations of other variable types (e.g. `key.public_key`) may also be provided via this property.\\n\\nBecause each bytecode identifier may precisely match the identifier of the variable it defines for this scenario, references between these scripts must refer to the target script with a `_scenario.` prefix. E.g. to reference a sibling script `my_foo` from `my_bar`, the `my_bar` script must use the identifier `_scenario.my_foo`.\",\n            type: 'object',\n        },\n        currentBlockHeight: {\n            description: 'The current block height at the \"address creation time\" implied in this scenario.',\n            type: 'number',\n        },\n        currentBlockTime: {\n            description: 'The current MTP block time as a UNIX timestamp at the \"address creation time\" implied in this scenario.\\n\\nNote, this is never a current timestamp, but rather the median timestamp of the last 11 blocks. It is therefore approximately one hour in the past.\\n\\nEvery block has a precise MTP block time, much like a block height. See BIP113 for details.',\n            type: 'number',\n        },\n        hdKeys: {\n            additionalProperties: false,\n            description: 'An object describing the settings used for `HdKey` variables in this scenario.',\n            properties: {\n                addressIndex: {\n                    description: 'The current address index to be used for this scenario. The `addressIndex` gets added to each `HdKey`s `addressOffset` to calculate the dynamic index (`i`) used in each `privateDerivationPath` or `publicDerivationPath`.\\n\\nThis is required for any compiler operation that requires derivation. Typically, the value is incremented by one for each address in a wallet.\\n\\nDefaults to `0`.',\n                    type: 'number',\n                },\n                hdPrivateKeys: {\n                    additionalProperties: { type: 'string' },\n                    description: 'A map of entity IDs to master HD private keys. These master HD private keys are used to derive each `HdKey` variable assigned to that entity according to its `privateDerivationPath`.\\n\\nHD private keys may be encoded for either mainnet or testnet (the network information is ignored).\\n\\nIf both an HD private key (in `hdPrivateKeys`) and HD public key (in `hdPublicKeys`) are provided for the same entity in the same scenario (not recommended), the HD private key is used.',\n                    type: 'object',\n                },\n                hdPublicKeys: {\n                    additionalProperties: { type: 'string' },\n                    description: 'A map of entity IDs to HD public keys. These HD public keys are used to derive public keys for each `HdKey` variable assigned to that entity according to its `publicDerivationPath`.\\n\\nHD public keys may be encoded for either mainnet or testnet (the network information is ignored).\\n\\nIf both an HD private key (in `hdPrivateKeys`) and HD public key (in `hdPublicKeys`) are provided for the same entity in the same scenario (not recommended), the HD private key is used.',\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n        keys: {\n            additionalProperties: false,\n            description: 'An object describing the settings used for `Key` variables in this scenario.',\n            properties: {\n                privateKeys: {\n                    additionalProperties: { type: 'string' },\n                    description: 'A map of `Key` variable IDs to their 32-byte, hexadecimal-encoded private key values.',\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n    },\n    type: 'object',\n};\nconst schema32 = {\n    additionalProperties: false,\n    description: 'An example output used to define a scenario for an authentication template.',\n    properties: {\n        lockingBytecode: {\n            anyOf: [\n                { $ref: '#/definitions/AuthenticationTemplateScenarioBytecode' },\n                {\n                    items: { const: 'slot', type: 'string' },\n                    maxItems: 1,\n                    minItems: 1,\n                    type: 'array',\n                },\n            ],\n            description: 'The locking bytecode used to encumber this output.\\n\\n`lockingBytecode` values may be provided as a hexadecimal-encoded string or as an object describing the required compilation. If undefined, defaults to  `{}`, which uses the default values for `script` and `overrides`, respectively.\\n\\nOnly source outputs may specify a `lockingBytecode` of `[\"slot\"]`; this identifies the source output in which the locking script under test will be placed. (To be valid, every scenario\\'s `sourceOutputs` property must have exactly one source output slot and one input slot at the same index.)',\n        },\n        token: {\n            additionalProperties: false,\n            description: 'The CashToken contents of this output. This property is only defined if the output contains one or more tokens. For details, see `CHIP-2022-02-CashTokens`.',\n            properties: {\n                amount: {\n                    description: 'The number of fungible tokens (of `category`) held in this output.\\n\\nBecause `Number.MAX_SAFE_INTEGER` (`9007199254740991`) is less than the maximum token amount (`9223372036854775807`), this value may also be provided as a string, e.g. `\"9223372036854775807\"`.\\n\\nIf undefined, this defaults to: `0`.',\n                    type: ['number', 'string'],\n                },\n                category: {\n                    description: 'The 32-byte, hexadecimal-encoded token category ID to which the token(s) in this output belong in big-endian byte order. This is the byte order typically seen in block explorers and user interfaces (as opposed to little-endian byte order, which is used in standard P2P network messages).\\n\\nIf undefined, this defaults to the value: `0000000000000000000000000000000000000000000000000000000000000002`',\n                    type: 'string',\n                },\n                nft: {\n                    additionalProperties: false,\n                    description: 'If present, the non-fungible token (NFT) held by this output. If the output does not include a non-fungible token, `undefined`.',\n                    properties: {\n                        capability: {\n                            description: 'The capability of this non-fungible token, must be either `minting`, `mutable`, or `none`.\\n\\nIf undefined, this defaults to: `none`.',\n                            enum: ['minting', 'mutable', 'none'],\n                            type: 'string',\n                        },\n                        commitment: {\n                            description: 'The hex-encoded commitment contents included in the non-fungible token held in this output.\\n\\nIf undefined, this defaults to: `\"\"` (a zero-length commitment).',\n                            type: 'string',\n                        },\n                    },\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n        valueSatoshis: {\n            description: 'The value of the output in satoshis, the smallest unit of bitcoin.\\n\\nIn a valid transaction, this is a positive integer, from `0` to the maximum number of satoshis available to the transaction.\\n\\nThe maximum number of satoshis in existence is about 1/4 of `Number.MAX_SAFE_INTEGER` (`9007199254740991`), so typically, this value is defined using a `number`. However, this value may also be defined using a 16-character, hexadecimal-encoded `string`, to allow for the full range of the 64-bit unsigned, little-endian integer used to encode `valueSatoshis` in the encoded output format, e.g. `\"ffffffffffffffff\"`. This is useful for representing scenarios where intentionally excessive values are provided (to ensure an otherwise properly-signed transaction can never be included in the blockchain), e.g. transaction size estimations or off-chain Bitauth signatures.\\n\\nIf undefined, this defaults to: `0`.',\n            type: ['number', 'string'],\n        },\n    },\n    type: 'object',\n};\nconst schema33 = {\n    anyOf: [\n        { type: 'string' },\n        {\n            additionalProperties: false,\n            properties: {\n                overrides: {\n                    $ref: '#/definitions/AuthenticationTemplateScenarioData',\n                    description: 'Scenario data that extends the scenario\\'s top-level `data` during script compilation.\\n\\nEach property is extended individually – to modify a property set by the top-level scenario `data`, the new value must be listed here.\\n\\nDefaults to `{}` for `sourceOutputs` and `transaction.inputs`; defaults to `{ \"hdKeys\": { \"addressIndex\": 1 } }` for `transaction.outputs`.',\n                },\n                script: {\n                    anyOf: [\n                        { type: 'string' },\n                        {\n                            items: { const: 'copy', type: 'string' },\n                            maxItems: 1,\n                            minItems: 1,\n                            type: 'array',\n                        },\n                    ],\n                    description: 'The identifier of the script to compile when generating this bytecode. May also be set to `[\"copy\"]`, which is automatically replaced with the identifier of the locking or unlocking script under test, respectively.\\n\\nIf undefined, defaults to `[\"copy\"]`.',\n                },\n            },\n            type: 'object',\n        },\n    ],\n    description: 'A type that describes the configuration for a particular locking or unlocking bytecode within an authentication template scenario.\\n\\nBytecode may be specified as either a hexadecimal-encoded string or an object describing the required compilation.\\n\\nFor `sourceOutputs` and `transaction.inputs`, defaults to `{ script: [\"copy\"], overrides: {} }`. For `transaction.outputs`, defaults to `{ script: [\"copy\"], overrides: { \"hdKeys\": { \"addressIndex\": 1 } } }`.',\n};\nfunction validate28(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    const _errs0 = errors;\n    let valid0 = false;\n    const _errs1 = errors;\n    if (typeof data !== 'string') {\n        const err0 = {\n            instancePath,\n            schemaPath: '#/anyOf/0/type',\n            keyword: 'type',\n            params: { type: 'string' },\n            message: 'must be string',\n        };\n        if (vErrors === null) {\n            vErrors = [err0];\n        }\n        else {\n            vErrors.push(err0);\n        }\n        errors++;\n    }\n    var _valid0 = _errs1 === errors;\n    valid0 = valid0 || _valid0;\n    if (!valid0) {\n        const _errs3 = errors;\n        if (errors === _errs3) {\n            if (data && typeof data == 'object' && !Array.isArray(data)) {\n                const _errs5 = errors;\n                for (const key0 in data) {\n                    if (!(key0 === 'overrides' || key0 === 'script')) {\n                        const err1 = {\n                            instancePath,\n                            schemaPath: '#/anyOf/1/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        };\n                        if (vErrors === null) {\n                            vErrors = [err1];\n                        }\n                        else {\n                            vErrors.push(err1);\n                        }\n                        errors++;\n                        break;\n                    }\n                }\n                if (_errs5 === errors) {\n                    if (data.overrides !== undefined) {\n                        let data0 = data.overrides;\n                        const _errs6 = errors;\n                        const _errs7 = errors;\n                        if (errors === _errs7) {\n                            if (data0 && typeof data0 == 'object' && !Array.isArray(data0)) {\n                                const _errs9 = errors;\n                                for (const key1 in data0) {\n                                    if (!(key1 === 'bytecode' ||\n                                        key1 === 'currentBlockHeight' ||\n                                        key1 === 'currentBlockTime' ||\n                                        key1 === 'hdKeys' ||\n                                        key1 === 'keys')) {\n                                        const err2 = {\n                                            instancePath: instancePath + '/overrides',\n                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/additionalProperties',\n                                            keyword: 'additionalProperties',\n                                            params: { additionalProperty: key1 },\n                                            message: 'must NOT have additional properties',\n                                        };\n                                        if (vErrors === null) {\n                                            vErrors = [err2];\n                                        }\n                                        else {\n                                            vErrors.push(err2);\n                                        }\n                                        errors++;\n                                        break;\n                                    }\n                                }\n                                if (_errs9 === errors) {\n                                    if (data0.bytecode !== undefined) {\n                                        let data1 = data0.bytecode;\n                                        const _errs10 = errors;\n                                        if (errors === _errs10) {\n                                            if (data1 &&\n                                                typeof data1 == 'object' &&\n                                                !Array.isArray(data1)) {\n                                                for (const key2 in data1) {\n                                                    const _errs13 = errors;\n                                                    if (typeof data1[key2] !== 'string') {\n                                                        const err3 = {\n                                                            instancePath: instancePath +\n                                                                '/overrides/bytecode/' +\n                                                                key2.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/bytecode/additionalProperties/type',\n                                                            keyword: 'type',\n                                                            params: { type: 'string' },\n                                                            message: 'must be string',\n                                                        };\n                                                        if (vErrors === null) {\n                                                            vErrors = [err3];\n                                                        }\n                                                        else {\n                                                            vErrors.push(err3);\n                                                        }\n                                                        errors++;\n                                                    }\n                                                    var valid4 = _errs13 === errors;\n                                                    if (!valid4) {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            else {\n                                                const err4 = {\n                                                    instancePath: instancePath + '/overrides/bytecode',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/bytecode/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'object' },\n                                                    message: 'must be object',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err4];\n                                                }\n                                                else {\n                                                    vErrors.push(err4);\n                                                }\n                                                errors++;\n                                            }\n                                        }\n                                        var valid3 = _errs10 === errors;\n                                    }\n                                    else {\n                                        var valid3 = true;\n                                    }\n                                    if (valid3) {\n                                        if (data0.currentBlockHeight !== undefined) {\n                                            let data3 = data0.currentBlockHeight;\n                                            const _errs15 = errors;\n                                            if (!(typeof data3 == 'number' && isFinite(data3))) {\n                                                const err5 = {\n                                                    instancePath: instancePath + '/overrides/currentBlockHeight',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/currentBlockHeight/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'number' },\n                                                    message: 'must be number',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err5];\n                                                }\n                                                else {\n                                                    vErrors.push(err5);\n                                                }\n                                                errors++;\n                                            }\n                                            var valid3 = _errs15 === errors;\n                                        }\n                                        else {\n                                            var valid3 = true;\n                                        }\n                                        if (valid3) {\n                                            if (data0.currentBlockTime !== undefined) {\n                                                let data4 = data0.currentBlockTime;\n                                                const _errs17 = errors;\n                                                if (!(typeof data4 == 'number' && isFinite(data4))) {\n                                                    const err6 = {\n                                                        instancePath: instancePath + '/overrides/currentBlockTime',\n                                                        schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/currentBlockTime/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'number' },\n                                                        message: 'must be number',\n                                                    };\n                                                    if (vErrors === null) {\n                                                        vErrors = [err6];\n                                                    }\n                                                    else {\n                                                        vErrors.push(err6);\n                                                    }\n                                                    errors++;\n                                                }\n                                                var valid3 = _errs17 === errors;\n                                            }\n                                            else {\n                                                var valid3 = true;\n                                            }\n                                            if (valid3) {\n                                                if (data0.hdKeys !== undefined) {\n                                                    let data5 = data0.hdKeys;\n                                                    const _errs19 = errors;\n                                                    if (errors === _errs19) {\n                                                        if (data5 &&\n                                                            typeof data5 == 'object' &&\n                                                            !Array.isArray(data5)) {\n                                                            const _errs21 = errors;\n                                                            for (const key3 in data5) {\n                                                                if (!(key3 === 'addressIndex' ||\n                                                                    key3 === 'hdPrivateKeys' ||\n                                                                    key3 === 'hdPublicKeys')) {\n                                                                    const err7 = {\n                                                                        instancePath: instancePath + '/overrides/hdKeys',\n                                                                        schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/additionalProperties',\n                                                                        keyword: 'additionalProperties',\n                                                                        params: { additionalProperty: key3 },\n                                                                        message: 'must NOT have additional properties',\n                                                                    };\n                                                                    if (vErrors === null) {\n                                                                        vErrors = [err7];\n                                                                    }\n                                                                    else {\n                                                                        vErrors.push(err7);\n                                                                    }\n                                                                    errors++;\n                                                                    break;\n                                                                }\n                                                            }\n                                                            if (_errs21 === errors) {\n                                                                if (data5.addressIndex !== undefined) {\n                                                                    let data6 = data5.addressIndex;\n                                                                    const _errs22 = errors;\n                                                                    if (!(typeof data6 == 'number' &&\n                                                                        isFinite(data6))) {\n                                                                        const err8 = {\n                                                                            instancePath: instancePath +\n                                                                                '/overrides/hdKeys/addressIndex',\n                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/addressIndex/type',\n                                                                            keyword: 'type',\n                                                                            params: { type: 'number' },\n                                                                            message: 'must be number',\n                                                                        };\n                                                                        if (vErrors === null) {\n                                                                            vErrors = [err8];\n                                                                        }\n                                                                        else {\n                                                                            vErrors.push(err8);\n                                                                        }\n                                                                        errors++;\n                                                                    }\n                                                                    var valid5 = _errs22 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid5 = true;\n                                                                }\n                                                                if (valid5) {\n                                                                    if (data5.hdPrivateKeys !== undefined) {\n                                                                        let data7 = data5.hdPrivateKeys;\n                                                                        const _errs24 = errors;\n                                                                        if (errors === _errs24) {\n                                                                            if (data7 &&\n                                                                                typeof data7 == 'object' &&\n                                                                                !Array.isArray(data7)) {\n                                                                                for (const key4 in data7) {\n                                                                                    const _errs27 = errors;\n                                                                                    if (typeof data7[key4] !== 'string') {\n                                                                                        const err9 = {\n                                                                                            instancePath: instancePath +\n                                                                                                '/overrides/hdKeys/hdPrivateKeys/' +\n                                                                                                key4\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1'),\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPrivateKeys/additionalProperties/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'string' },\n                                                                                            message: 'must be string',\n                                                                                        };\n                                                                                        if (vErrors === null) {\n                                                                                            vErrors = [err9];\n                                                                                        }\n                                                                                        else {\n                                                                                            vErrors.push(err9);\n                                                                                        }\n                                                                                        errors++;\n                                                                                    }\n                                                                                    var valid6 = _errs27 === errors;\n                                                                                    if (!valid6) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                            else {\n                                                                                const err10 = {\n                                                                                    instancePath: instancePath +\n                                                                                        '/overrides/hdKeys/hdPrivateKeys',\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPrivateKeys/type',\n                                                                                    keyword: 'type',\n                                                                                    params: { type: 'object' },\n                                                                                    message: 'must be object',\n                                                                                };\n                                                                                if (vErrors === null) {\n                                                                                    vErrors = [err10];\n                                                                                }\n                                                                                else {\n                                                                                    vErrors.push(err10);\n                                                                                }\n                                                                                errors++;\n                                                                            }\n                                                                        }\n                                                                        var valid5 = _errs24 === errors;\n                                                                    }\n                                                                    else {\n                                                                        var valid5 = true;\n                                                                    }\n                                                                    if (valid5) {\n                                                                        if (data5.hdPublicKeys !== undefined) {\n                                                                            let data9 = data5.hdPublicKeys;\n                                                                            const _errs29 = errors;\n                                                                            if (errors === _errs29) {\n                                                                                if (data9 &&\n                                                                                    typeof data9 == 'object' &&\n                                                                                    !Array.isArray(data9)) {\n                                                                                    for (const key5 in data9) {\n                                                                                        const _errs32 = errors;\n                                                                                        if (typeof data9[key5] !== 'string') {\n                                                                                            const err11 = {\n                                                                                                instancePath: instancePath +\n                                                                                                    '/overrides/hdKeys/hdPublicKeys/' +\n                                                                                                    key5\n                                                                                                        .replace(/~/g, '~0')\n                                                                                                        .replace(/\\//g, '~1'),\n                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPublicKeys/additionalProperties/type',\n                                                                                                keyword: 'type',\n                                                                                                params: { type: 'string' },\n                                                                                                message: 'must be string',\n                                                                                            };\n                                                                                            if (vErrors === null) {\n                                                                                                vErrors = [err11];\n                                                                                            }\n                                                                                            else {\n                                                                                                vErrors.push(err11);\n                                                                                            }\n                                                                                            errors++;\n                                                                                        }\n                                                                                        var valid7 = _errs32 === errors;\n                                                                                        if (!valid7) {\n                                                                                            break;\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                                else {\n                                                                                    const err12 = {\n                                                                                        instancePath: instancePath +\n                                                                                            '/overrides/hdKeys/hdPublicKeys',\n                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPublicKeys/type',\n                                                                                        keyword: 'type',\n                                                                                        params: { type: 'object' },\n                                                                                        message: 'must be object',\n                                                                                    };\n                                                                                    if (vErrors === null) {\n                                                                                        vErrors = [err12];\n                                                                                    }\n                                                                                    else {\n                                                                                        vErrors.push(err12);\n                                                                                    }\n                                                                                    errors++;\n                                                                                }\n                                                                            }\n                                                                            var valid5 = _errs29 === errors;\n                                                                        }\n                                                                        else {\n                                                                            var valid5 = true;\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                        else {\n                                                            const err13 = {\n                                                                instancePath: instancePath + '/overrides/hdKeys',\n                                                                schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'object' },\n                                                                message: 'must be object',\n                                                            };\n                                                            if (vErrors === null) {\n                                                                vErrors = [err13];\n                                                            }\n                                                            else {\n                                                                vErrors.push(err13);\n                                                            }\n                                                            errors++;\n                                                        }\n                                                    }\n                                                    var valid3 = _errs19 === errors;\n                                                }\n                                                else {\n                                                    var valid3 = true;\n                                                }\n                                                if (valid3) {\n                                                    if (data0.keys !== undefined) {\n                                                        let data11 = data0.keys;\n                                                        const _errs34 = errors;\n                                                        if (errors === _errs34) {\n                                                            if (data11 &&\n                                                                typeof data11 == 'object' &&\n                                                                !Array.isArray(data11)) {\n                                                                const _errs36 = errors;\n                                                                for (const key6 in data11) {\n                                                                    if (!(key6 === 'privateKeys')) {\n                                                                        const err14 = {\n                                                                            instancePath: instancePath + '/overrides/keys',\n                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/additionalProperties',\n                                                                            keyword: 'additionalProperties',\n                                                                            params: { additionalProperty: key6 },\n                                                                            message: 'must NOT have additional properties',\n                                                                        };\n                                                                        if (vErrors === null) {\n                                                                            vErrors = [err14];\n                                                                        }\n                                                                        else {\n                                                                            vErrors.push(err14);\n                                                                        }\n                                                                        errors++;\n                                                                        break;\n                                                                    }\n                                                                }\n                                                                if (_errs36 === errors) {\n                                                                    if (data11.privateKeys !== undefined) {\n                                                                        let data12 = data11.privateKeys;\n                                                                        const _errs37 = errors;\n                                                                        if (errors === _errs37) {\n                                                                            if (data12 &&\n                                                                                typeof data12 == 'object' &&\n                                                                                !Array.isArray(data12)) {\n                                                                                for (const key7 in data12) {\n                                                                                    const _errs40 = errors;\n                                                                                    if (typeof data12[key7] !== 'string') {\n                                                                                        const err15 = {\n                                                                                            instancePath: instancePath +\n                                                                                                '/overrides/keys/privateKeys/' +\n                                                                                                key7\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1'),\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/properties/privateKeys/additionalProperties/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'string' },\n                                                                                            message: 'must be string',\n                                                                                        };\n                                                                                        if (vErrors === null) {\n                                                                                            vErrors = [err15];\n                                                                                        }\n                                                                                        else {\n                                                                                            vErrors.push(err15);\n                                                                                        }\n                                                                                        errors++;\n                                                                                    }\n                                                                                    var valid9 = _errs40 === errors;\n                                                                                    if (!valid9) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                            else {\n                                                                                const err16 = {\n                                                                                    instancePath: instancePath +\n                                                                                        '/overrides/keys/privateKeys',\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/properties/privateKeys/type',\n                                                                                    keyword: 'type',\n                                                                                    params: { type: 'object' },\n                                                                                    message: 'must be object',\n                                                                                };\n                                                                                if (vErrors === null) {\n                                                                                    vErrors = [err16];\n                                                                                }\n                                                                                else {\n                                                                                    vErrors.push(err16);\n                                                                                }\n                                                                                errors++;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                            else {\n                                                                const err17 = {\n                                                                    instancePath: instancePath + '/overrides/keys',\n                                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/type',\n                                                                    keyword: 'type',\n                                                                    params: { type: 'object' },\n                                                                    message: 'must be object',\n                                                                };\n                                                                if (vErrors === null) {\n                                                                    vErrors = [err17];\n                                                                }\n                                                                else {\n                                                                    vErrors.push(err17);\n                                                                }\n                                                                errors++;\n                                                            }\n                                                        }\n                                                        var valid3 = _errs34 === errors;\n                                                    }\n                                                    else {\n                                                        var valid3 = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                const err18 = {\n                                    instancePath: instancePath + '/overrides',\n                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/type',\n                                    keyword: 'type',\n                                    params: { type: 'object' },\n                                    message: 'must be object',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err18];\n                                }\n                                else {\n                                    vErrors.push(err18);\n                                }\n                                errors++;\n                            }\n                        }\n                        var valid1 = _errs6 === errors;\n                    }\n                    else {\n                        var valid1 = true;\n                    }\n                    if (valid1) {\n                        if (data.script !== undefined) {\n                            let data14 = data.script;\n                            const _errs42 = errors;\n                            const _errs43 = errors;\n                            let valid10 = false;\n                            const _errs44 = errors;\n                            if (typeof data14 !== 'string') {\n                                const err19 = {\n                                    instancePath: instancePath + '/script',\n                                    schemaPath: '#/anyOf/1/properties/script/anyOf/0/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err19];\n                                }\n                                else {\n                                    vErrors.push(err19);\n                                }\n                                errors++;\n                            }\n                            var _valid1 = _errs44 === errors;\n                            valid10 = valid10 || _valid1;\n                            if (!valid10) {\n                                const _errs46 = errors;\n                                if (errors === _errs46) {\n                                    if (Array.isArray(data14)) {\n                                        if (data14.length > 1) {\n                                            const err20 = {\n                                                instancePath: instancePath + '/script',\n                                                schemaPath: '#/anyOf/1/properties/script/anyOf/1/maxItems',\n                                                keyword: 'maxItems',\n                                                params: { limit: 1 },\n                                                message: 'must NOT have more than 1 items',\n                                            };\n                                            if (vErrors === null) {\n                                                vErrors = [err20];\n                                            }\n                                            else {\n                                                vErrors.push(err20);\n                                            }\n                                            errors++;\n                                        }\n                                        else {\n                                            if (data14.length < 1) {\n                                                const err21 = {\n                                                    instancePath: instancePath + '/script',\n                                                    schemaPath: '#/anyOf/1/properties/script/anyOf/1/minItems',\n                                                    keyword: 'minItems',\n                                                    params: { limit: 1 },\n                                                    message: 'must NOT have fewer than 1 items',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err21];\n                                                }\n                                                else {\n                                                    vErrors.push(err21);\n                                                }\n                                                errors++;\n                                            }\n                                            else {\n                                                var valid11 = true;\n                                                const len0 = data14.length;\n                                                for (let i0 = 0; i0 < len0; i0++) {\n                                                    let data15 = data14[i0];\n                                                    const _errs48 = errors;\n                                                    if (typeof data15 !== 'string') {\n                                                        const err22 = {\n                                                            instancePath: instancePath + '/script/' + i0,\n                                                            schemaPath: '#/anyOf/1/properties/script/anyOf/1/items/type',\n                                                            keyword: 'type',\n                                                            params: { type: 'string' },\n                                                            message: 'must be string',\n                                                        };\n                                                        if (vErrors === null) {\n                                                            vErrors = [err22];\n                                                        }\n                                                        else {\n                                                            vErrors.push(err22);\n                                                        }\n                                                        errors++;\n                                                    }\n                                                    if ('copy' !== data15) {\n                                                        const err23 = {\n                                                            instancePath: instancePath + '/script/' + i0,\n                                                            schemaPath: '#/anyOf/1/properties/script/anyOf/1/items/const',\n                                                            keyword: 'const',\n                                                            params: { allowedValue: 'copy' },\n                                                            message: 'must be equal to constant',\n                                                        };\n                                                        if (vErrors === null) {\n                                                            vErrors = [err23];\n                                                        }\n                                                        else {\n                                                            vErrors.push(err23);\n                                                        }\n                                                        errors++;\n                                                    }\n                                                    var valid11 = _errs48 === errors;\n                                                    if (!valid11) {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        const err24 = {\n                                            instancePath: instancePath + '/script',\n                                            schemaPath: '#/anyOf/1/properties/script/anyOf/1/type',\n                                            keyword: 'type',\n                                            params: { type: 'array' },\n                                            message: 'must be array',\n                                        };\n                                        if (vErrors === null) {\n                                            vErrors = [err24];\n                                        }\n                                        else {\n                                            vErrors.push(err24);\n                                        }\n                                        errors++;\n                                    }\n                                }\n                                var _valid1 = _errs46 === errors;\n                                valid10 = valid10 || _valid1;\n                            }\n                            if (!valid10) {\n                                const err25 = {\n                                    instancePath: instancePath + '/script',\n                                    schemaPath: '#/anyOf/1/properties/script/anyOf',\n                                    keyword: 'anyOf',\n                                    params: {},\n                                    message: 'must match a schema in anyOf',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err25];\n                                }\n                                else {\n                                    vErrors.push(err25);\n                                }\n                                errors++;\n                            }\n                            else {\n                                errors = _errs43;\n                                if (vErrors !== null) {\n                                    if (_errs43) {\n                                        vErrors.length = _errs43;\n                                    }\n                                    else {\n                                        vErrors = null;\n                                    }\n                                }\n                            }\n                            var valid1 = _errs42 === errors;\n                        }\n                        else {\n                            var valid1 = true;\n                        }\n                    }\n                }\n            }\n            else {\n                const err26 = {\n                    instancePath,\n                    schemaPath: '#/anyOf/1/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                };\n                if (vErrors === null) {\n                    vErrors = [err26];\n                }\n                else {\n                    vErrors.push(err26);\n                }\n                errors++;\n            }\n        }\n        var _valid0 = _errs3 === errors;\n        valid0 = valid0 || _valid0;\n    }\n    if (!valid0) {\n        const err27 = {\n            instancePath,\n            schemaPath: '#/anyOf',\n            keyword: 'anyOf',\n            params: {},\n            message: 'must match a schema in anyOf',\n        };\n        if (vErrors === null) {\n            vErrors = [err27];\n        }\n        else {\n            vErrors.push(err27);\n        }\n        errors++;\n        validate28.errors = vErrors;\n        return false;\n    }\n    else {\n        errors = _errs0;\n        if (vErrors !== null) {\n            if (_errs0) {\n                vErrors.length = _errs0;\n            }\n            else {\n                vErrors = null;\n            }\n        }\n    }\n    validate28.errors = vErrors;\n    return errors === 0;\n}\nfunction validate27(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(key0 === 'lockingBytecode' ||\n                    key0 === 'token' ||\n                    key0 === 'valueSatoshis')) {\n                    validate27.errors = [\n                        {\n                            instancePath,\n                            schemaPath: '#/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        },\n                    ];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.lockingBytecode !== undefined) {\n                    let data0 = data.lockingBytecode;\n                    const _errs2 = errors;\n                    const _errs3 = errors;\n                    let valid1 = false;\n                    const _errs4 = errors;\n                    if (!validate28(data0, {\n                        instancePath: instancePath + '/lockingBytecode',\n                        parentData: data,\n                        parentDataProperty: 'lockingBytecode',\n                        rootData,\n                    })) {\n                        vErrors =\n                            vErrors === null\n                                ? validate28.errors\n                                : vErrors.concat(validate28.errors);\n                        errors = vErrors.length;\n                    }\n                    var _valid0 = _errs4 === errors;\n                    valid1 = valid1 || _valid0;\n                    if (!valid1) {\n                        const _errs5 = errors;\n                        if (errors === _errs5) {\n                            if (Array.isArray(data0)) {\n                                if (data0.length > 1) {\n                                    const err0 = {\n                                        instancePath: instancePath + '/lockingBytecode',\n                                        schemaPath: '#/properties/lockingBytecode/anyOf/1/maxItems',\n                                        keyword: 'maxItems',\n                                        params: { limit: 1 },\n                                        message: 'must NOT have more than 1 items',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err0];\n                                    }\n                                    else {\n                                        vErrors.push(err0);\n                                    }\n                                    errors++;\n                                }\n                                else {\n                                    if (data0.length < 1) {\n                                        const err1 = {\n                                            instancePath: instancePath + '/lockingBytecode',\n                                            schemaPath: '#/properties/lockingBytecode/anyOf/1/minItems',\n                                            keyword: 'minItems',\n                                            params: { limit: 1 },\n                                            message: 'must NOT have fewer than 1 items',\n                                        };\n                                        if (vErrors === null) {\n                                            vErrors = [err1];\n                                        }\n                                        else {\n                                            vErrors.push(err1);\n                                        }\n                                        errors++;\n                                    }\n                                    else {\n                                        var valid2 = true;\n                                        const len0 = data0.length;\n                                        for (let i0 = 0; i0 < len0; i0++) {\n                                            let data1 = data0[i0];\n                                            const _errs7 = errors;\n                                            if (typeof data1 !== 'string') {\n                                                const err2 = {\n                                                    instancePath: instancePath + '/lockingBytecode/' + i0,\n                                                    schemaPath: '#/properties/lockingBytecode/anyOf/1/items/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'string' },\n                                                    message: 'must be string',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err2];\n                                                }\n                                                else {\n                                                    vErrors.push(err2);\n                                                }\n                                                errors++;\n                                            }\n                                            if ('slot' !== data1) {\n                                                const err3 = {\n                                                    instancePath: instancePath + '/lockingBytecode/' + i0,\n                                                    schemaPath: '#/properties/lockingBytecode/anyOf/1/items/const',\n                                                    keyword: 'const',\n                                                    params: { allowedValue: 'slot' },\n                                                    message: 'must be equal to constant',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err3];\n                                                }\n                                                else {\n                                                    vErrors.push(err3);\n                                                }\n                                                errors++;\n                                            }\n                                            var valid2 = _errs7 === errors;\n                                            if (!valid2) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                const err4 = {\n                                    instancePath: instancePath + '/lockingBytecode',\n                                    schemaPath: '#/properties/lockingBytecode/anyOf/1/type',\n                                    keyword: 'type',\n                                    params: { type: 'array' },\n                                    message: 'must be array',\n                                };\n                                if (vErrors === null) {\n                                    vErrors = [err4];\n                                }\n                                else {\n                                    vErrors.push(err4);\n                                }\n                                errors++;\n                            }\n                        }\n                        var _valid0 = _errs5 === errors;\n                        valid1 = valid1 || _valid0;\n                    }\n                    if (!valid1) {\n                        const err5 = {\n                            instancePath: instancePath + '/lockingBytecode',\n                            schemaPath: '#/properties/lockingBytecode/anyOf',\n                            keyword: 'anyOf',\n                            params: {},\n                            message: 'must match a schema in anyOf',\n                        };\n                        if (vErrors === null) {\n                            vErrors = [err5];\n                        }\n                        else {\n                            vErrors.push(err5);\n                        }\n                        errors++;\n                        validate27.errors = vErrors;\n                        return false;\n                    }\n                    else {\n                        errors = _errs3;\n                        if (vErrors !== null) {\n                            if (_errs3) {\n                                vErrors.length = _errs3;\n                            }\n                            else {\n                                vErrors = null;\n                            }\n                        }\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.token !== undefined) {\n                        let data2 = data.token;\n                        const _errs9 = errors;\n                        if (errors === _errs9) {\n                            if (data2 && typeof data2 == 'object' && !Array.isArray(data2)) {\n                                const _errs11 = errors;\n                                for (const key1 in data2) {\n                                    if (!(key1 === 'amount' ||\n                                        key1 === 'category' ||\n                                        key1 === 'nft')) {\n                                        validate27.errors = [\n                                            {\n                                                instancePath: instancePath + '/token',\n                                                schemaPath: '#/properties/token/additionalProperties',\n                                                keyword: 'additionalProperties',\n                                                params: { additionalProperty: key1 },\n                                                message: 'must NOT have additional properties',\n                                            },\n                                        ];\n                                        return false;\n                                        break;\n                                    }\n                                }\n                                if (_errs11 === errors) {\n                                    if (data2.amount !== undefined) {\n                                        let data3 = data2.amount;\n                                        const _errs12 = errors;\n                                        if (!(typeof data3 == 'number' && isFinite(data3)) &&\n                                            typeof data3 !== 'string') {\n                                            validate27.errors = [\n                                                {\n                                                    instancePath: instancePath + '/token/amount',\n                                                    schemaPath: '#/properties/token/properties/amount/type',\n                                                    keyword: 'type',\n                                                    params: {\n                                                        type: schema32.properties.token.properties.amount\n                                                            .type,\n                                                    },\n                                                    message: 'must be number,string',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                        var valid3 = _errs12 === errors;\n                                    }\n                                    else {\n                                        var valid3 = true;\n                                    }\n                                    if (valid3) {\n                                        if (data2.category !== undefined) {\n                                            const _errs14 = errors;\n                                            if (typeof data2.category !== 'string') {\n                                                validate27.errors = [\n                                                    {\n                                                        instancePath: instancePath + '/token/category',\n                                                        schemaPath: '#/properties/token/properties/category/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'string' },\n                                                        message: 'must be string',\n                                                    },\n                                                ];\n                                                return false;\n                                            }\n                                            var valid3 = _errs14 === errors;\n                                        }\n                                        else {\n                                            var valid3 = true;\n                                        }\n                                        if (valid3) {\n                                            if (data2.nft !== undefined) {\n                                                let data5 = data2.nft;\n                                                const _errs16 = errors;\n                                                if (errors === _errs16) {\n                                                    if (data5 &&\n                                                        typeof data5 == 'object' &&\n                                                        !Array.isArray(data5)) {\n                                                        const _errs18 = errors;\n                                                        for (const key2 in data5) {\n                                                            if (!(key2 === 'capability' || key2 === 'commitment')) {\n                                                                validate27.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/token/nft',\n                                                                        schemaPath: '#/properties/token/properties/nft/additionalProperties',\n                                                                        keyword: 'additionalProperties',\n                                                                        params: { additionalProperty: key2 },\n                                                                        message: 'must NOT have additional properties',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                                break;\n                                                            }\n                                                        }\n                                                        if (_errs18 === errors) {\n                                                            if (data5.capability !== undefined) {\n                                                                let data6 = data5.capability;\n                                                                const _errs19 = errors;\n                                                                if (typeof data6 !== 'string') {\n                                                                    validate27.errors = [\n                                                                        {\n                                                                            instancePath: instancePath + '/token/nft/capability',\n                                                                            schemaPath: '#/properties/token/properties/nft/properties/capability/type',\n                                                                            keyword: 'type',\n                                                                            params: { type: 'string' },\n                                                                            message: 'must be string',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                }\n                                                                if (!(data6 === 'minting' ||\n                                                                    data6 === 'mutable' ||\n                                                                    data6 === 'none')) {\n                                                                    validate27.errors = [\n                                                                        {\n                                                                            instancePath: instancePath + '/token/nft/capability',\n                                                                            schemaPath: '#/properties/token/properties/nft/properties/capability/enum',\n                                                                            keyword: 'enum',\n                                                                            params: {\n                                                                                allowedValues: schema32.properties.token.properties\n                                                                                    .nft.properties.capability.enum,\n                                                                            },\n                                                                            message: 'must be equal to one of the allowed values',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                }\n                                                                var valid4 = _errs19 === errors;\n                                                            }\n                                                            else {\n                                                                var valid4 = true;\n                                                            }\n                                                            if (valid4) {\n                                                                if (data5.commitment !== undefined) {\n                                                                    const _errs21 = errors;\n                                                                    if (typeof data5.commitment !== 'string') {\n                                                                        validate27.errors = [\n                                                                            {\n                                                                                instancePath: instancePath +\n                                                                                    '/token/nft/commitment',\n                                                                                schemaPath: '#/properties/token/properties/nft/properties/commitment/type',\n                                                                                keyword: 'type',\n                                                                                params: { type: 'string' },\n                                                                                message: 'must be string',\n                                                                            },\n                                                                        ];\n                                                                        return false;\n                                                                    }\n                                                                    var valid4 = _errs21 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid4 = true;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        validate27.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/token/nft',\n                                                                schemaPath: '#/properties/token/properties/nft/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'object' },\n                                                                message: 'must be object',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                }\n                                                var valid3 = _errs16 === errors;\n                                            }\n                                            else {\n                                                var valid3 = true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                validate27.errors = [\n                                    {\n                                        instancePath: instancePath + '/token',\n                                        schemaPath: '#/properties/token/type',\n                                        keyword: 'type',\n                                        params: { type: 'object' },\n                                        message: 'must be object',\n                                    },\n                                ];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs9 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.valueSatoshis !== undefined) {\n                            let data8 = data.valueSatoshis;\n                            const _errs23 = errors;\n                            if (!(typeof data8 == 'number' && isFinite(data8)) &&\n                                typeof data8 !== 'string') {\n                                validate27.errors = [\n                                    {\n                                        instancePath: instancePath + '/valueSatoshis',\n                                        schemaPath: '#/properties/valueSatoshis/type',\n                                        keyword: 'type',\n                                        params: { type: schema32.properties.valueSatoshis.type },\n                                        message: 'must be number,string',\n                                    },\n                                ];\n                                return false;\n                            }\n                            var valid0 = _errs23 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate27.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate27.errors = vErrors;\n    return errors === 0;\n}\nconst schema35 = {\n    additionalProperties: false,\n    description: 'An example input used to define a scenario for an authentication template.',\n    properties: {\n        outpointIndex: {\n            description: 'The index of the output in the transaction from which this input is spent.\\n\\nIf undefined, this defaults to the same index as the input itself (so that by default, every outpoint in the produced transaction is different, even if an empty `outpointTransactionHash` is used for each transaction).',\n            type: 'number',\n        },\n        outpointTransactionHash: {\n            description: 'A 32-byte, hexadecimal-encoded hash of the transaction from which this input is spent in big-endian byte order. This is the byte order typically seen in block explorers and user interfaces (as opposed to little-endian byte order, which is used in standard P2P network messages).\\n\\nIf undefined, this defaults to the value: `0000000000000000000000000000000000000000000000000000000000000001`\\n\\nA.K.A. Outpoint `Transaction ID`',\n            type: 'string',\n        },\n        sequenceNumber: {\n            description: 'The positive, 32-bit unsigned integer used as the \"sequence number\" for this input.\\n\\nIf undefined, this defaults to `0`.',\n            type: 'number',\n        },\n        unlockingBytecode: {\n            anyOf: [\n                { $ref: '#/definitions/AuthenticationTemplateScenarioBytecode' },\n                {\n                    items: { const: 'slot', type: 'string' },\n                    maxItems: 1,\n                    minItems: 1,\n                    type: 'array',\n                },\n            ],\n            description: 'The `unlockingBytecode` value of this input for this scenario. This must be either `[\"slot\"]`, indicating that this input contains the `unlockingBytecode` under test by the scenario, or an `AuthenticationTemplateScenarioBytecode`.\\n\\nFor a scenario to be valid, `unlockingBytecode` must be `[\"slot\"]` for exactly one input in the scenario.\\n\\nDefaults to `[\"slot\"]`.',\n        },\n    },\n    type: 'object',\n};\nfunction validate31(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(key0 === 'outpointIndex' ||\n                    key0 === 'outpointTransactionHash' ||\n                    key0 === 'sequenceNumber' ||\n                    key0 === 'unlockingBytecode')) {\n                    validate31.errors = [\n                        {\n                            instancePath,\n                            schemaPath: '#/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        },\n                    ];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.outpointIndex !== undefined) {\n                    let data0 = data.outpointIndex;\n                    const _errs2 = errors;\n                    if (!(typeof data0 == 'number' && isFinite(data0))) {\n                        validate31.errors = [\n                            {\n                                instancePath: instancePath + '/outpointIndex',\n                                schemaPath: '#/properties/outpointIndex/type',\n                                keyword: 'type',\n                                params: { type: 'number' },\n                                message: 'must be number',\n                            },\n                        ];\n                        return false;\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.outpointTransactionHash !== undefined) {\n                        const _errs4 = errors;\n                        if (typeof data.outpointTransactionHash !== 'string') {\n                            validate31.errors = [\n                                {\n                                    instancePath: instancePath + '/outpointTransactionHash',\n                                    schemaPath: '#/properties/outpointTransactionHash/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                },\n                            ];\n                            return false;\n                        }\n                        var valid0 = _errs4 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.sequenceNumber !== undefined) {\n                            let data2 = data.sequenceNumber;\n                            const _errs6 = errors;\n                            if (!(typeof data2 == 'number' && isFinite(data2))) {\n                                validate31.errors = [\n                                    {\n                                        instancePath: instancePath + '/sequenceNumber',\n                                        schemaPath: '#/properties/sequenceNumber/type',\n                                        keyword: 'type',\n                                        params: { type: 'number' },\n                                        message: 'must be number',\n                                    },\n                                ];\n                                return false;\n                            }\n                            var valid0 = _errs6 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.unlockingBytecode !== undefined) {\n                                let data3 = data.unlockingBytecode;\n                                const _errs8 = errors;\n                                const _errs9 = errors;\n                                let valid1 = false;\n                                const _errs10 = errors;\n                                if (!validate28(data3, {\n                                    instancePath: instancePath + '/unlockingBytecode',\n                                    parentData: data,\n                                    parentDataProperty: 'unlockingBytecode',\n                                    rootData,\n                                })) {\n                                    vErrors =\n                                        vErrors === null\n                                            ? validate28.errors\n                                            : vErrors.concat(validate28.errors);\n                                    errors = vErrors.length;\n                                }\n                                var _valid0 = _errs10 === errors;\n                                valid1 = valid1 || _valid0;\n                                if (!valid1) {\n                                    const _errs11 = errors;\n                                    if (errors === _errs11) {\n                                        if (Array.isArray(data3)) {\n                                            if (data3.length > 1) {\n                                                const err0 = {\n                                                    instancePath: instancePath + '/unlockingBytecode',\n                                                    schemaPath: '#/properties/unlockingBytecode/anyOf/1/maxItems',\n                                                    keyword: 'maxItems',\n                                                    params: { limit: 1 },\n                                                    message: 'must NOT have more than 1 items',\n                                                };\n                                                if (vErrors === null) {\n                                                    vErrors = [err0];\n                                                }\n                                                else {\n                                                    vErrors.push(err0);\n                                                }\n                                                errors++;\n                                            }\n                                            else {\n                                                if (data3.length < 1) {\n                                                    const err1 = {\n                                                        instancePath: instancePath + '/unlockingBytecode',\n                                                        schemaPath: '#/properties/unlockingBytecode/anyOf/1/minItems',\n                                                        keyword: 'minItems',\n                                                        params: { limit: 1 },\n                                                        message: 'must NOT have fewer than 1 items',\n                                                    };\n                                                    if (vErrors === null) {\n                                                        vErrors = [err1];\n                                                    }\n                                                    else {\n                                                        vErrors.push(err1);\n                                                    }\n                                                    errors++;\n                                                }\n                                                else {\n                                                    var valid2 = true;\n                                                    const len0 = data3.length;\n                                                    for (let i0 = 0; i0 < len0; i0++) {\n                                                        let data4 = data3[i0];\n                                                        const _errs13 = errors;\n                                                        if (typeof data4 !== 'string') {\n                                                            const err2 = {\n                                                                instancePath: instancePath + '/unlockingBytecode/' + i0,\n                                                                schemaPath: '#/properties/unlockingBytecode/anyOf/1/items/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'string' },\n                                                                message: 'must be string',\n                                                            };\n                                                            if (vErrors === null) {\n                                                                vErrors = [err2];\n                                                            }\n                                                            else {\n                                                                vErrors.push(err2);\n                                                            }\n                                                            errors++;\n                                                        }\n                                                        if ('slot' !== data4) {\n                                                            const err3 = {\n                                                                instancePath: instancePath + '/unlockingBytecode/' + i0,\n                                                                schemaPath: '#/properties/unlockingBytecode/anyOf/1/items/const',\n                                                                keyword: 'const',\n                                                                params: { allowedValue: 'slot' },\n                                                                message: 'must be equal to constant',\n                                                            };\n                                                            if (vErrors === null) {\n                                                                vErrors = [err3];\n                                                            }\n                                                            else {\n                                                                vErrors.push(err3);\n                                                            }\n                                                            errors++;\n                                                        }\n                                                        var valid2 = _errs13 === errors;\n                                                        if (!valid2) {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            const err4 = {\n                                                instancePath: instancePath + '/unlockingBytecode',\n                                                schemaPath: '#/properties/unlockingBytecode/anyOf/1/type',\n                                                keyword: 'type',\n                                                params: { type: 'array' },\n                                                message: 'must be array',\n                                            };\n                                            if (vErrors === null) {\n                                                vErrors = [err4];\n                                            }\n                                            else {\n                                                vErrors.push(err4);\n                                            }\n                                            errors++;\n                                        }\n                                    }\n                                    var _valid0 = _errs11 === errors;\n                                    valid1 = valid1 || _valid0;\n                                }\n                                if (!valid1) {\n                                    const err5 = {\n                                        instancePath: instancePath + '/unlockingBytecode',\n                                        schemaPath: '#/properties/unlockingBytecode/anyOf',\n                                        keyword: 'anyOf',\n                                        params: {},\n                                        message: 'must match a schema in anyOf',\n                                    };\n                                    if (vErrors === null) {\n                                        vErrors = [err5];\n                                    }\n                                    else {\n                                        vErrors.push(err5);\n                                    }\n                                    errors++;\n                                    validate31.errors = vErrors;\n                                    return false;\n                                }\n                                else {\n                                    errors = _errs9;\n                                    if (vErrors !== null) {\n                                        if (_errs9) {\n                                            vErrors.length = _errs9;\n                                        }\n                                        else {\n                                            vErrors = null;\n                                        }\n                                    }\n                                }\n                                var valid0 = _errs8 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate31.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate31.errors = vErrors;\n    return errors === 0;\n}\nconst schema36 = {\n    additionalProperties: false,\n    description: 'An example output used to define a scenario for an authentication template.',\n    properties: {\n        lockingBytecode: {\n            $ref: '#/definitions/AuthenticationTemplateScenarioBytecode',\n            description: 'The locking bytecode used to encumber this output.\\n\\n`lockingBytecode` values may be provided as a hexadecimal-encoded string or as an object describing the required compilation. If undefined, defaults to  `{}`, which uses the default values for `script` and `overrides`, respectively.\\n\\nOnly source outputs may specify a `lockingBytecode` of `[\"slot\"]`; this identifies the source output in which the locking script under test will be placed. (To be valid, every scenario\\'s `sourceOutputs` property must have exactly one source output slot and one input slot at the same index.)',\n        },\n        token: {\n            additionalProperties: false,\n            description: 'The CashToken contents of this output. This property is only defined if the output contains one or more tokens. For details, see `CHIP-2022-02-CashTokens`.',\n            properties: {\n                amount: {\n                    description: 'The number of fungible tokens (of `category`) held in this output.\\n\\nBecause `Number.MAX_SAFE_INTEGER` (`9007199254740991`) is less than the maximum token amount (`9223372036854775807`), this value may also be provided as a string, e.g. `\"9223372036854775807\"`.\\n\\nIf undefined, this defaults to: `0`.',\n                    type: ['number', 'string'],\n                },\n                category: {\n                    description: 'The 32-byte, hexadecimal-encoded token category ID to which the token(s) in this output belong in big-endian byte order. This is the byte order typically seen in block explorers and user interfaces (as opposed to little-endian byte order, which is used in standard P2P network messages).\\n\\nIf undefined, this defaults to the value: `0000000000000000000000000000000000000000000000000000000000000002`',\n                    type: 'string',\n                },\n                nft: {\n                    additionalProperties: false,\n                    description: 'If present, the non-fungible token (NFT) held by this output. If the output does not include a non-fungible token, `undefined`.',\n                    properties: {\n                        capability: {\n                            description: 'The capability of this non-fungible token, must be either `minting`, `mutable`, or `none`.\\n\\nIf undefined, this defaults to: `none`.',\n                            enum: ['minting', 'mutable', 'none'],\n                            type: 'string',\n                        },\n                        commitment: {\n                            description: 'The hex-encoded commitment contents included in the non-fungible token held in this output.\\n\\nIf undefined, this defaults to: `\"\"` (a zero-length commitment).',\n                            type: 'string',\n                        },\n                    },\n                    type: 'object',\n                },\n            },\n            type: 'object',\n        },\n        valueSatoshis: {\n            description: 'The value of the output in satoshis, the smallest unit of bitcoin.\\n\\nIn a valid transaction, this is a positive integer, from `0` to the maximum number of satoshis available to the transaction.\\n\\nThe maximum number of satoshis in existence is about 1/4 of `Number.MAX_SAFE_INTEGER` (`9007199254740991`), so typically, this value is defined using a `number`. However, this value may also be defined using a 16-character, hexadecimal-encoded `string`, to allow for the full range of the 64-bit unsigned, little-endian integer used to encode `valueSatoshis` in the encoded output format, e.g. `\"ffffffffffffffff\"`. This is useful for representing scenarios where intentionally excessive values are provided (to ensure an otherwise properly-signed transaction can never be included in the blockchain), e.g. transaction size estimations or off-chain Bitauth signatures.\\n\\nIf undefined, this defaults to: `0`.',\n            type: ['number', 'string'],\n        },\n    },\n    type: 'object',\n};\nfunction validate34(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(key0 === 'lockingBytecode' ||\n                    key0 === 'token' ||\n                    key0 === 'valueSatoshis')) {\n                    validate34.errors = [\n                        {\n                            instancePath,\n                            schemaPath: '#/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        },\n                    ];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.lockingBytecode !== undefined) {\n                    const _errs2 = errors;\n                    if (!validate28(data.lockingBytecode, {\n                        instancePath: instancePath + '/lockingBytecode',\n                        parentData: data,\n                        parentDataProperty: 'lockingBytecode',\n                        rootData,\n                    })) {\n                        vErrors =\n                            vErrors === null\n                                ? validate28.errors\n                                : vErrors.concat(validate28.errors);\n                        errors = vErrors.length;\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.token !== undefined) {\n                        let data1 = data.token;\n                        const _errs3 = errors;\n                        if (errors === _errs3) {\n                            if (data1 && typeof data1 == 'object' && !Array.isArray(data1)) {\n                                const _errs5 = errors;\n                                for (const key1 in data1) {\n                                    if (!(key1 === 'amount' ||\n                                        key1 === 'category' ||\n                                        key1 === 'nft')) {\n                                        validate34.errors = [\n                                            {\n                                                instancePath: instancePath + '/token',\n                                                schemaPath: '#/properties/token/additionalProperties',\n                                                keyword: 'additionalProperties',\n                                                params: { additionalProperty: key1 },\n                                                message: 'must NOT have additional properties',\n                                            },\n                                        ];\n                                        return false;\n                                        break;\n                                    }\n                                }\n                                if (_errs5 === errors) {\n                                    if (data1.amount !== undefined) {\n                                        let data2 = data1.amount;\n                                        const _errs6 = errors;\n                                        if (!(typeof data2 == 'number' && isFinite(data2)) &&\n                                            typeof data2 !== 'string') {\n                                            validate34.errors = [\n                                                {\n                                                    instancePath: instancePath + '/token/amount',\n                                                    schemaPath: '#/properties/token/properties/amount/type',\n                                                    keyword: 'type',\n                                                    params: {\n                                                        type: schema36.properties.token.properties.amount\n                                                            .type,\n                                                    },\n                                                    message: 'must be number,string',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                        var valid1 = _errs6 === errors;\n                                    }\n                                    else {\n                                        var valid1 = true;\n                                    }\n                                    if (valid1) {\n                                        if (data1.category !== undefined) {\n                                            const _errs8 = errors;\n                                            if (typeof data1.category !== 'string') {\n                                                validate34.errors = [\n                                                    {\n                                                        instancePath: instancePath + '/token/category',\n                                                        schemaPath: '#/properties/token/properties/category/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'string' },\n                                                        message: 'must be string',\n                                                    },\n                                                ];\n                                                return false;\n                                            }\n                                            var valid1 = _errs8 === errors;\n                                        }\n                                        else {\n                                            var valid1 = true;\n                                        }\n                                        if (valid1) {\n                                            if (data1.nft !== undefined) {\n                                                let data4 = data1.nft;\n                                                const _errs10 = errors;\n                                                if (errors === _errs10) {\n                                                    if (data4 &&\n                                                        typeof data4 == 'object' &&\n                                                        !Array.isArray(data4)) {\n                                                        const _errs12 = errors;\n                                                        for (const key2 in data4) {\n                                                            if (!(key2 === 'capability' || key2 === 'commitment')) {\n                                                                validate34.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/token/nft',\n                                                                        schemaPath: '#/properties/token/properties/nft/additionalProperties',\n                                                                        keyword: 'additionalProperties',\n                                                                        params: { additionalProperty: key2 },\n                                                                        message: 'must NOT have additional properties',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                                break;\n                                                            }\n                                                        }\n                                                        if (_errs12 === errors) {\n                                                            if (data4.capability !== undefined) {\n                                                                let data5 = data4.capability;\n                                                                const _errs13 = errors;\n                                                                if (typeof data5 !== 'string') {\n                                                                    validate34.errors = [\n                                                                        {\n                                                                            instancePath: instancePath + '/token/nft/capability',\n                                                                            schemaPath: '#/properties/token/properties/nft/properties/capability/type',\n                                                                            keyword: 'type',\n                                                                            params: { type: 'string' },\n                                                                            message: 'must be string',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                }\n                                                                if (!(data5 === 'minting' ||\n                                                                    data5 === 'mutable' ||\n                                                                    data5 === 'none')) {\n                                                                    validate34.errors = [\n                                                                        {\n                                                                            instancePath: instancePath + '/token/nft/capability',\n                                                                            schemaPath: '#/properties/token/properties/nft/properties/capability/enum',\n                                                                            keyword: 'enum',\n                                                                            params: {\n                                                                                allowedValues: schema36.properties.token.properties\n                                                                                    .nft.properties.capability.enum,\n                                                                            },\n                                                                            message: 'must be equal to one of the allowed values',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                }\n                                                                var valid2 = _errs13 === errors;\n                                                            }\n                                                            else {\n                                                                var valid2 = true;\n                                                            }\n                                                            if (valid2) {\n                                                                if (data4.commitment !== undefined) {\n                                                                    const _errs15 = errors;\n                                                                    if (typeof data4.commitment !== 'string') {\n                                                                        validate34.errors = [\n                                                                            {\n                                                                                instancePath: instancePath +\n                                                                                    '/token/nft/commitment',\n                                                                                schemaPath: '#/properties/token/properties/nft/properties/commitment/type',\n                                                                                keyword: 'type',\n                                                                                params: { type: 'string' },\n                                                                                message: 'must be string',\n                                                                            },\n                                                                        ];\n                                                                        return false;\n                                                                    }\n                                                                    var valid2 = _errs15 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid2 = true;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        validate34.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/token/nft',\n                                                                schemaPath: '#/properties/token/properties/nft/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'object' },\n                                                                message: 'must be object',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                }\n                                                var valid1 = _errs10 === errors;\n                                            }\n                                            else {\n                                                var valid1 = true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                validate34.errors = [\n                                    {\n                                        instancePath: instancePath + '/token',\n                                        schemaPath: '#/properties/token/type',\n                                        keyword: 'type',\n                                        params: { type: 'object' },\n                                        message: 'must be object',\n                                    },\n                                ];\n                                return false;\n                            }\n                        }\n                        var valid0 = _errs3 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.valueSatoshis !== undefined) {\n                            let data7 = data.valueSatoshis;\n                            const _errs17 = errors;\n                            if (!(typeof data7 == 'number' && isFinite(data7)) &&\n                                typeof data7 !== 'string') {\n                                validate34.errors = [\n                                    {\n                                        instancePath: instancePath + '/valueSatoshis',\n                                        schemaPath: '#/properties/valueSatoshis/type',\n                                        keyword: 'type',\n                                        params: { type: schema36.properties.valueSatoshis.type },\n                                        message: 'must be number,string',\n                                    },\n                                ];\n                                return false;\n                            }\n                            var valid0 = _errs17 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate34.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate34.errors = vErrors;\n    return errors === 0;\n}\nfunction validate26(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            const _errs1 = errors;\n            for (const key0 in data) {\n                if (!(key0 === 'data' ||\n                    key0 === 'description' ||\n                    key0 === 'extends' ||\n                    key0 === 'name' ||\n                    key0 === 'sourceOutputs' ||\n                    key0 === 'transaction')) {\n                    validate26.errors = [\n                        {\n                            instancePath,\n                            schemaPath: '#/additionalProperties',\n                            keyword: 'additionalProperties',\n                            params: { additionalProperty: key0 },\n                            message: 'must NOT have additional properties',\n                        },\n                    ];\n                    return false;\n                    break;\n                }\n            }\n            if (_errs1 === errors) {\n                if (data.data !== undefined) {\n                    let data0 = data.data;\n                    const _errs2 = errors;\n                    const _errs3 = errors;\n                    if (errors === _errs3) {\n                        if (data0 && typeof data0 == 'object' && !Array.isArray(data0)) {\n                            const _errs5 = errors;\n                            for (const key1 in data0) {\n                                if (!(key1 === 'bytecode' ||\n                                    key1 === 'currentBlockHeight' ||\n                                    key1 === 'currentBlockTime' ||\n                                    key1 === 'hdKeys' ||\n                                    key1 === 'keys')) {\n                                    validate26.errors = [\n                                        {\n                                            instancePath: instancePath + '/data',\n                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/additionalProperties',\n                                            keyword: 'additionalProperties',\n                                            params: { additionalProperty: key1 },\n                                            message: 'must NOT have additional properties',\n                                        },\n                                    ];\n                                    return false;\n                                    break;\n                                }\n                            }\n                            if (_errs5 === errors) {\n                                if (data0.bytecode !== undefined) {\n                                    let data1 = data0.bytecode;\n                                    const _errs6 = errors;\n                                    if (errors === _errs6) {\n                                        if (data1 &&\n                                            typeof data1 == 'object' &&\n                                            !Array.isArray(data1)) {\n                                            for (const key2 in data1) {\n                                                const _errs9 = errors;\n                                                if (typeof data1[key2] !== 'string') {\n                                                    validate26.errors = [\n                                                        {\n                                                            instancePath: instancePath +\n                                                                '/data/bytecode/' +\n                                                                key2.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/bytecode/additionalProperties/type',\n                                                            keyword: 'type',\n                                                            params: { type: 'string' },\n                                                            message: 'must be string',\n                                                        },\n                                                    ];\n                                                    return false;\n                                                }\n                                                var valid3 = _errs9 === errors;\n                                                if (!valid3) {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            validate26.errors = [\n                                                {\n                                                    instancePath: instancePath + '/data/bytecode',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/bytecode/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'object' },\n                                                    message: 'must be object',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                    }\n                                    var valid2 = _errs6 === errors;\n                                }\n                                else {\n                                    var valid2 = true;\n                                }\n                                if (valid2) {\n                                    if (data0.currentBlockHeight !== undefined) {\n                                        let data3 = data0.currentBlockHeight;\n                                        const _errs11 = errors;\n                                        if (!(typeof data3 == 'number' && isFinite(data3))) {\n                                            validate26.errors = [\n                                                {\n                                                    instancePath: instancePath + '/data/currentBlockHeight',\n                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/currentBlockHeight/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'number' },\n                                                    message: 'must be number',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                        var valid2 = _errs11 === errors;\n                                    }\n                                    else {\n                                        var valid2 = true;\n                                    }\n                                    if (valid2) {\n                                        if (data0.currentBlockTime !== undefined) {\n                                            let data4 = data0.currentBlockTime;\n                                            const _errs13 = errors;\n                                            if (!(typeof data4 == 'number' && isFinite(data4))) {\n                                                validate26.errors = [\n                                                    {\n                                                        instancePath: instancePath + '/data/currentBlockTime',\n                                                        schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/currentBlockTime/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'number' },\n                                                        message: 'must be number',\n                                                    },\n                                                ];\n                                                return false;\n                                            }\n                                            var valid2 = _errs13 === errors;\n                                        }\n                                        else {\n                                            var valid2 = true;\n                                        }\n                                        if (valid2) {\n                                            if (data0.hdKeys !== undefined) {\n                                                let data5 = data0.hdKeys;\n                                                const _errs15 = errors;\n                                                if (errors === _errs15) {\n                                                    if (data5 &&\n                                                        typeof data5 == 'object' &&\n                                                        !Array.isArray(data5)) {\n                                                        const _errs17 = errors;\n                                                        for (const key3 in data5) {\n                                                            if (!(key3 === 'addressIndex' ||\n                                                                key3 === 'hdPrivateKeys' ||\n                                                                key3 === 'hdPublicKeys')) {\n                                                                validate26.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/data/hdKeys',\n                                                                        schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/additionalProperties',\n                                                                        keyword: 'additionalProperties',\n                                                                        params: { additionalProperty: key3 },\n                                                                        message: 'must NOT have additional properties',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                                break;\n                                                            }\n                                                        }\n                                                        if (_errs17 === errors) {\n                                                            if (data5.addressIndex !== undefined) {\n                                                                let data6 = data5.addressIndex;\n                                                                const _errs18 = errors;\n                                                                if (!(typeof data6 == 'number' && isFinite(data6))) {\n                                                                    validate26.errors = [\n                                                                        {\n                                                                            instancePath: instancePath +\n                                                                                '/data/hdKeys/addressIndex',\n                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/addressIndex/type',\n                                                                            keyword: 'type',\n                                                                            params: { type: 'number' },\n                                                                            message: 'must be number',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                }\n                                                                var valid4 = _errs18 === errors;\n                                                            }\n                                                            else {\n                                                                var valid4 = true;\n                                                            }\n                                                            if (valid4) {\n                                                                if (data5.hdPrivateKeys !== undefined) {\n                                                                    let data7 = data5.hdPrivateKeys;\n                                                                    const _errs20 = errors;\n                                                                    if (errors === _errs20) {\n                                                                        if (data7 &&\n                                                                            typeof data7 == 'object' &&\n                                                                            !Array.isArray(data7)) {\n                                                                            for (const key4 in data7) {\n                                                                                const _errs23 = errors;\n                                                                                if (typeof data7[key4] !== 'string') {\n                                                                                    validate26.errors = [\n                                                                                        {\n                                                                                            instancePath: instancePath +\n                                                                                                '/data/hdKeys/hdPrivateKeys/' +\n                                                                                                key4\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1'),\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPrivateKeys/additionalProperties/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'string' },\n                                                                                            message: 'must be string',\n                                                                                        },\n                                                                                    ];\n                                                                                    return false;\n                                                                                }\n                                                                                var valid5 = _errs23 === errors;\n                                                                                if (!valid5) {\n                                                                                    break;\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                        else {\n                                                                            validate26.errors = [\n                                                                                {\n                                                                                    instancePath: instancePath +\n                                                                                        '/data/hdKeys/hdPrivateKeys',\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPrivateKeys/type',\n                                                                                    keyword: 'type',\n                                                                                    params: { type: 'object' },\n                                                                                    message: 'must be object',\n                                                                                },\n                                                                            ];\n                                                                            return false;\n                                                                        }\n                                                                    }\n                                                                    var valid4 = _errs20 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid4 = true;\n                                                                }\n                                                                if (valid4) {\n                                                                    if (data5.hdPublicKeys !== undefined) {\n                                                                        let data9 = data5.hdPublicKeys;\n                                                                        const _errs25 = errors;\n                                                                        if (errors === _errs25) {\n                                                                            if (data9 &&\n                                                                                typeof data9 == 'object' &&\n                                                                                !Array.isArray(data9)) {\n                                                                                for (const key5 in data9) {\n                                                                                    const _errs28 = errors;\n                                                                                    if (typeof data9[key5] !== 'string') {\n                                                                                        validate26.errors = [\n                                                                                            {\n                                                                                                instancePath: instancePath +\n                                                                                                    '/data/hdKeys/hdPublicKeys/' +\n                                                                                                    key5\n                                                                                                        .replace(/~/g, '~0')\n                                                                                                        .replace(/\\//g, '~1'),\n                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPublicKeys/additionalProperties/type',\n                                                                                                keyword: 'type',\n                                                                                                params: { type: 'string' },\n                                                                                                message: 'must be string',\n                                                                                            },\n                                                                                        ];\n                                                                                        return false;\n                                                                                    }\n                                                                                    var valid6 = _errs28 === errors;\n                                                                                    if (!valid6) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                            else {\n                                                                                validate26.errors = [\n                                                                                    {\n                                                                                        instancePath: instancePath +\n                                                                                            '/data/hdKeys/hdPublicKeys',\n                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/properties/hdPublicKeys/type',\n                                                                                        keyword: 'type',\n                                                                                        params: { type: 'object' },\n                                                                                        message: 'must be object',\n                                                                                    },\n                                                                                ];\n                                                                                return false;\n                                                                            }\n                                                                        }\n                                                                        var valid4 = _errs25 === errors;\n                                                                    }\n                                                                    else {\n                                                                        var valid4 = true;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        validate26.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/data/hdKeys',\n                                                                schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/hdKeys/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'object' },\n                                                                message: 'must be object',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                }\n                                                var valid2 = _errs15 === errors;\n                                            }\n                                            else {\n                                                var valid2 = true;\n                                            }\n                                            if (valid2) {\n                                                if (data0.keys !== undefined) {\n                                                    let data11 = data0.keys;\n                                                    const _errs30 = errors;\n                                                    if (errors === _errs30) {\n                                                        if (data11 &&\n                                                            typeof data11 == 'object' &&\n                                                            !Array.isArray(data11)) {\n                                                            const _errs32 = errors;\n                                                            for (const key6 in data11) {\n                                                                if (!(key6 === 'privateKeys')) {\n                                                                    validate26.errors = [\n                                                                        {\n                                                                            instancePath: instancePath + '/data/keys',\n                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/additionalProperties',\n                                                                            keyword: 'additionalProperties',\n                                                                            params: { additionalProperty: key6 },\n                                                                            message: 'must NOT have additional properties',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                    break;\n                                                                }\n                                                            }\n                                                            if (_errs32 === errors) {\n                                                                if (data11.privateKeys !== undefined) {\n                                                                    let data12 = data11.privateKeys;\n                                                                    const _errs33 = errors;\n                                                                    if (errors === _errs33) {\n                                                                        if (data12 &&\n                                                                            typeof data12 == 'object' &&\n                                                                            !Array.isArray(data12)) {\n                                                                            for (const key7 in data12) {\n                                                                                const _errs36 = errors;\n                                                                                if (typeof data12[key7] !== 'string') {\n                                                                                    validate26.errors = [\n                                                                                        {\n                                                                                            instancePath: instancePath +\n                                                                                                '/data/keys/privateKeys/' +\n                                                                                                key7\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1'),\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/properties/privateKeys/additionalProperties/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'string' },\n                                                                                            message: 'must be string',\n                                                                                        },\n                                                                                    ];\n                                                                                    return false;\n                                                                                }\n                                                                                var valid8 = _errs36 === errors;\n                                                                                if (!valid8) {\n                                                                                    break;\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                        else {\n                                                                            validate26.errors = [\n                                                                                {\n                                                                                    instancePath: instancePath +\n                                                                                        '/data/keys/privateKeys',\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/properties/privateKeys/type',\n                                                                                    keyword: 'type',\n                                                                                    params: { type: 'object' },\n                                                                                    message: 'must be object',\n                                                                                },\n                                                                            ];\n                                                                            return false;\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                        else {\n                                                            validate26.errors = [\n                                                                {\n                                                                    instancePath: instancePath + '/data/keys',\n                                                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/properties/keys/type',\n                                                                    keyword: 'type',\n                                                                    params: { type: 'object' },\n                                                                    message: 'must be object',\n                                                                },\n                                                            ];\n                                                            return false;\n                                                        }\n                                                    }\n                                                    var valid2 = _errs30 === errors;\n                                                }\n                                                else {\n                                                    var valid2 = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            validate26.errors = [\n                                {\n                                    instancePath: instancePath + '/data',\n                                    schemaPath: '#/definitions/AuthenticationTemplateScenarioData/type',\n                                    keyword: 'type',\n                                    params: { type: 'object' },\n                                    message: 'must be object',\n                                },\n                            ];\n                            return false;\n                        }\n                    }\n                    var valid0 = _errs2 === errors;\n                }\n                else {\n                    var valid0 = true;\n                }\n                if (valid0) {\n                    if (data.description !== undefined) {\n                        const _errs38 = errors;\n                        if (typeof data.description !== 'string') {\n                            validate26.errors = [\n                                {\n                                    instancePath: instancePath + '/description',\n                                    schemaPath: '#/properties/description/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                },\n                            ];\n                            return false;\n                        }\n                        var valid0 = _errs38 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.extends !== undefined) {\n                            const _errs40 = errors;\n                            if (typeof data.extends !== 'string') {\n                                validate26.errors = [\n                                    {\n                                        instancePath: instancePath + '/extends',\n                                        schemaPath: '#/properties/extends/type',\n                                        keyword: 'type',\n                                        params: { type: 'string' },\n                                        message: 'must be string',\n                                    },\n                                ];\n                                return false;\n                            }\n                            var valid0 = _errs40 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.name !== undefined) {\n                                const _errs42 = errors;\n                                if (typeof data.name !== 'string') {\n                                    validate26.errors = [\n                                        {\n                                            instancePath: instancePath + '/name',\n                                            schemaPath: '#/properties/name/type',\n                                            keyword: 'type',\n                                            params: { type: 'string' },\n                                            message: 'must be string',\n                                        },\n                                    ];\n                                    return false;\n                                }\n                                var valid0 = _errs42 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                            if (valid0) {\n                                if (data.sourceOutputs !== undefined) {\n                                    let data17 = data.sourceOutputs;\n                                    const _errs44 = errors;\n                                    if (errors === _errs44) {\n                                        if (Array.isArray(data17)) {\n                                            var valid9 = true;\n                                            const len0 = data17.length;\n                                            for (let i0 = 0; i0 < len0; i0++) {\n                                                const _errs46 = errors;\n                                                if (!validate27(data17[i0], {\n                                                    instancePath: instancePath + '/sourceOutputs/' + i0,\n                                                    parentData: data17,\n                                                    parentDataProperty: i0,\n                                                    rootData,\n                                                })) {\n                                                    vErrors =\n                                                        vErrors === null\n                                                            ? validate27.errors\n                                                            : vErrors.concat(validate27.errors);\n                                                    errors = vErrors.length;\n                                                }\n                                                var valid9 = _errs46 === errors;\n                                                if (!valid9) {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            validate26.errors = [\n                                                {\n                                                    instancePath: instancePath + '/sourceOutputs',\n                                                    schemaPath: '#/properties/sourceOutputs/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'array' },\n                                                    message: 'must be array',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                    }\n                                    var valid0 = _errs44 === errors;\n                                }\n                                else {\n                                    var valid0 = true;\n                                }\n                                if (valid0) {\n                                    if (data.transaction !== undefined) {\n                                        let data19 = data.transaction;\n                                        const _errs47 = errors;\n                                        if (errors === _errs47) {\n                                            if (data19 &&\n                                                typeof data19 == 'object' &&\n                                                !Array.isArray(data19)) {\n                                                const _errs49 = errors;\n                                                for (const key8 in data19) {\n                                                    if (!(key8 === 'inputs' ||\n                                                        key8 === 'locktime' ||\n                                                        key8 === 'outputs' ||\n                                                        key8 === 'version')) {\n                                                        validate26.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/transaction',\n                                                                schemaPath: '#/properties/transaction/additionalProperties',\n                                                                keyword: 'additionalProperties',\n                                                                params: { additionalProperty: key8 },\n                                                                message: 'must NOT have additional properties',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                        break;\n                                                    }\n                                                }\n                                                if (_errs49 === errors) {\n                                                    if (data19.inputs !== undefined) {\n                                                        let data20 = data19.inputs;\n                                                        const _errs50 = errors;\n                                                        if (errors === _errs50) {\n                                                            if (Array.isArray(data20)) {\n                                                                var valid11 = true;\n                                                                const len1 = data20.length;\n                                                                for (let i1 = 0; i1 < len1; i1++) {\n                                                                    const _errs52 = errors;\n                                                                    if (!validate31(data20[i1], {\n                                                                        instancePath: instancePath +\n                                                                            '/transaction/inputs/' +\n                                                                            i1,\n                                                                        parentData: data20,\n                                                                        parentDataProperty: i1,\n                                                                        rootData,\n                                                                    })) {\n                                                                        vErrors =\n                                                                            vErrors === null\n                                                                                ? validate31.errors\n                                                                                : vErrors.concat(validate31.errors);\n                                                                        errors = vErrors.length;\n                                                                    }\n                                                                    var valid11 = _errs52 === errors;\n                                                                    if (!valid11) {\n                                                                        break;\n                                                                    }\n                                                                }\n                                                            }\n                                                            else {\n                                                                validate26.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/transaction/inputs',\n                                                                        schemaPath: '#/properties/transaction/properties/inputs/type',\n                                                                        keyword: 'type',\n                                                                        params: { type: 'array' },\n                                                                        message: 'must be array',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                            }\n                                                        }\n                                                        var valid10 = _errs50 === errors;\n                                                    }\n                                                    else {\n                                                        var valid10 = true;\n                                                    }\n                                                    if (valid10) {\n                                                        if (data19.locktime !== undefined) {\n                                                            let data22 = data19.locktime;\n                                                            const _errs53 = errors;\n                                                            if (!(typeof data22 == 'number' && isFinite(data22))) {\n                                                                validate26.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/transaction/locktime',\n                                                                        schemaPath: '#/properties/transaction/properties/locktime/type',\n                                                                        keyword: 'type',\n                                                                        params: { type: 'number' },\n                                                                        message: 'must be number',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                            }\n                                                            var valid10 = _errs53 === errors;\n                                                        }\n                                                        else {\n                                                            var valid10 = true;\n                                                        }\n                                                        if (valid10) {\n                                                            if (data19.outputs !== undefined) {\n                                                                let data23 = data19.outputs;\n                                                                const _errs55 = errors;\n                                                                if (errors === _errs55) {\n                                                                    if (Array.isArray(data23)) {\n                                                                        var valid12 = true;\n                                                                        const len2 = data23.length;\n                                                                        for (let i2 = 0; i2 < len2; i2++) {\n                                                                            const _errs57 = errors;\n                                                                            if (!validate34(data23[i2], {\n                                                                                instancePath: instancePath +\n                                                                                    '/transaction/outputs/' +\n                                                                                    i2,\n                                                                                parentData: data23,\n                                                                                parentDataProperty: i2,\n                                                                                rootData,\n                                                                            })) {\n                                                                                vErrors =\n                                                                                    vErrors === null\n                                                                                        ? validate34.errors\n                                                                                        : vErrors.concat(validate34.errors);\n                                                                                errors = vErrors.length;\n                                                                            }\n                                                                            var valid12 = _errs57 === errors;\n                                                                            if (!valid12) {\n                                                                                break;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                    else {\n                                                                        validate26.errors = [\n                                                                            {\n                                                                                instancePath: instancePath + '/transaction/outputs',\n                                                                                schemaPath: '#/properties/transaction/properties/outputs/type',\n                                                                                keyword: 'type',\n                                                                                params: { type: 'array' },\n                                                                                message: 'must be array',\n                                                                            },\n                                                                        ];\n                                                                        return false;\n                                                                    }\n                                                                }\n                                                                var valid10 = _errs55 === errors;\n                                                            }\n                                                            else {\n                                                                var valid10 = true;\n                                                            }\n                                                            if (valid10) {\n                                                                if (data19.version !== undefined) {\n                                                                    let data25 = data19.version;\n                                                                    const _errs58 = errors;\n                                                                    if (!(typeof data25 == 'number' &&\n                                                                        isFinite(data25))) {\n                                                                        validate26.errors = [\n                                                                            {\n                                                                                instancePath: instancePath + '/transaction/version',\n                                                                                schemaPath: '#/properties/transaction/properties/version/type',\n                                                                                keyword: 'type',\n                                                                                params: { type: 'number' },\n                                                                                message: 'must be number',\n                                                                            },\n                                                                        ];\n                                                                        return false;\n                                                                    }\n                                                                    var valid10 = _errs58 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid10 = true;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            else {\n                                                validate26.errors = [\n                                                    {\n                                                        instancePath: instancePath + '/transaction',\n                                                        schemaPath: '#/properties/transaction/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'object' },\n                                                        message: 'must be object',\n                                                    },\n                                                ];\n                                                return false;\n                                            }\n                                        }\n                                        var valid0 = _errs47 === errors;\n                                    }\n                                    else {\n                                        var valid0 = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate26.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate26.errors = vErrors;\n    return errors === 0;\n}\nconst schema39 = {\n    additionalProperties: false,\n    properties: {\n        name: {\n            description: 'A single-line, human-readable name for this script (for use in user interfaces).',\n            type: 'string',\n        },\n        pushed: {\n            description: 'If set to `true`, indicates that this script should be wrapped in a push statement for testing.\\n\\nThis is useful for scripts that serve as \"bytecode templates\" – e.g. formatted messages or signature preimages. These scripts are typically not evaluated as bytecode but appear within push statements elsewhere in the template.\\n\\nDefaults to `false`.',\n            type: 'boolean',\n        },\n        script: {\n            description: 'The script definition in CashAssembly.',\n            type: 'string',\n        },\n        tests: {\n            additionalProperties: {\n                $ref: '#/definitions/AuthenticationTemplateScriptTest',\n            },\n            description: 'One or more tests that can be used during development and during template validation to confirm the correctness of this tested script.',\n            type: 'object',\n        },\n    },\n    required: ['script', 'tests'],\n    type: 'object',\n};\nconst schema40 = {\n    additionalProperties: false,\n    properties: {\n        check: {\n            description: 'The script to evaluate after the script being tested. This can be used to check that the tested script leaves the expected results on the stack. For example, if the tested script is expected to leave 3 items of a specific size on the stack, the `check` script could pop each resulting item from the stack and examine it for correctness.\\n\\nIn scenario testing, this script is appended to the script under test, and together they are treated as the locking script. Program evaluation is considered successful if the resulting program state can be verified by the virtual machine (e.g. the resulting stack contains a single `1`, no errors are produced, etc.).',\n            type: 'string',\n        },\n        fails: {\n            description: 'A list of the scenario identifiers that – when used to compile this test and the script it tests – result in bytecode that fails program verification. The `setup` script is used in place of an unlocking script, and the concatenation of the script under test and the `check` script are used in place of a locking script.\\n\\nThese scenarios can be used to test this script in development and review.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        invalid: {\n            description: 'A list of the scenario identifiers that – when used to compile this test and the script it tests – result in a compilation error. The `setup` script is used in place of an unlocking script, and the concatenation of the script under test and the `check` script are used in place of a locking script.\\n\\nThese scenarios can be used to test this script in development and review.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        name: {\n            description: 'A single-line, Title Case, human-readable name for this test (for use in user interfaces).',\n            type: 'string',\n        },\n        passes: {\n            description: 'A list of the scenario identifiers that – when used to compile this test and the script it tests – result in bytecode that passes program verification. The `setup` script is used in place of an unlocking script, and the concatenation of the script under test and the `check` script are used in place of a locking script.\\n\\nThese scenarios can be used to test this script in development and review.',\n            items: { type: 'string' },\n            type: 'array',\n        },\n        setup: {\n            description: 'A script to evaluate before the script being tested. This can be used to push values to the stack that are operated on by the tested script.\\n\\nIn scenario testing, this script is treated as the unlocking script.',\n            type: 'string',\n        },\n    },\n    required: ['check'],\n    type: 'object',\n};\nfunction validate38(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            let missing0;\n            if ((data.script === undefined && (missing0 = 'script')) ||\n                (data.tests === undefined && (missing0 = 'tests'))) {\n                validate38.errors = [\n                    {\n                        instancePath,\n                        schemaPath: '#/required',\n                        keyword: 'required',\n                        params: { missingProperty: missing0 },\n                        message: \"must have required property '\" + missing0 + \"'\",\n                    },\n                ];\n                return false;\n            }\n            else {\n                const _errs1 = errors;\n                for (const key0 in data) {\n                    if (!(key0 === 'name' ||\n                        key0 === 'pushed' ||\n                        key0 === 'script' ||\n                        key0 === 'tests')) {\n                        validate38.errors = [\n                            {\n                                instancePath,\n                                schemaPath: '#/additionalProperties',\n                                keyword: 'additionalProperties',\n                                params: { additionalProperty: key0 },\n                                message: 'must NOT have additional properties',\n                            },\n                        ];\n                        return false;\n                        break;\n                    }\n                }\n                if (_errs1 === errors) {\n                    if (data.name !== undefined) {\n                        const _errs2 = errors;\n                        if (typeof data.name !== 'string') {\n                            validate38.errors = [\n                                {\n                                    instancePath: instancePath + '/name',\n                                    schemaPath: '#/properties/name/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                },\n                            ];\n                            return false;\n                        }\n                        var valid0 = _errs2 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.pushed !== undefined) {\n                            const _errs4 = errors;\n                            if (typeof data.pushed !== 'boolean') {\n                                validate38.errors = [\n                                    {\n                                        instancePath: instancePath + '/pushed',\n                                        schemaPath: '#/properties/pushed/type',\n                                        keyword: 'type',\n                                        params: { type: 'boolean' },\n                                        message: 'must be boolean',\n                                    },\n                                ];\n                                return false;\n                            }\n                            var valid0 = _errs4 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.script !== undefined) {\n                                const _errs6 = errors;\n                                if (typeof data.script !== 'string') {\n                                    validate38.errors = [\n                                        {\n                                            instancePath: instancePath + '/script',\n                                            schemaPath: '#/properties/script/type',\n                                            keyword: 'type',\n                                            params: { type: 'string' },\n                                            message: 'must be string',\n                                        },\n                                    ];\n                                    return false;\n                                }\n                                var valid0 = _errs6 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                            if (valid0) {\n                                if (data.tests !== undefined) {\n                                    let data3 = data.tests;\n                                    const _errs8 = errors;\n                                    if (errors === _errs8) {\n                                        if (data3 &&\n                                            typeof data3 == 'object' &&\n                                            !Array.isArray(data3)) {\n                                            for (const key1 in data3) {\n                                                let data4 = data3[key1];\n                                                const _errs11 = errors;\n                                                const _errs12 = errors;\n                                                if (errors === _errs12) {\n                                                    if (data4 &&\n                                                        typeof data4 == 'object' &&\n                                                        !Array.isArray(data4)) {\n                                                        let missing1;\n                                                        if (data4.check === undefined &&\n                                                            (missing1 = 'check')) {\n                                                            validate38.errors = [\n                                                                {\n                                                                    instancePath: instancePath +\n                                                                        '/tests/' +\n                                                                        key1\n                                                                            .replace(/~/g, '~0')\n                                                                            .replace(/\\//g, '~1'),\n                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptTest/required',\n                                                                    keyword: 'required',\n                                                                    params: { missingProperty: missing1 },\n                                                                    message: \"must have required property '\" +\n                                                                        missing1 +\n                                                                        \"'\",\n                                                                },\n                                                            ];\n                                                            return false;\n                                                        }\n                                                        else {\n                                                            const _errs14 = errors;\n                                                            for (const key2 in data4) {\n                                                                if (!(key2 === 'check' ||\n                                                                    key2 === 'fails' ||\n                                                                    key2 === 'invalid' ||\n                                                                    key2 === 'name' ||\n                                                                    key2 === 'passes' ||\n                                                                    key2 === 'setup')) {\n                                                                    validate38.errors = [\n                                                                        {\n                                                                            instancePath: instancePath +\n                                                                                '/tests/' +\n                                                                                key1\n                                                                                    .replace(/~/g, '~0')\n                                                                                    .replace(/\\//g, '~1'),\n                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptTest/additionalProperties',\n                                                                            keyword: 'additionalProperties',\n                                                                            params: { additionalProperty: key2 },\n                                                                            message: 'must NOT have additional properties',\n                                                                        },\n                                                                    ];\n                                                                    return false;\n                                                                    break;\n                                                                }\n                                                            }\n                                                            if (_errs14 === errors) {\n                                                                if (data4.check !== undefined) {\n                                                                    const _errs15 = errors;\n                                                                    if (typeof data4.check !== 'string') {\n                                                                        validate38.errors = [\n                                                                            {\n                                                                                instancePath: instancePath +\n                                                                                    '/tests/' +\n                                                                                    key1\n                                                                                        .replace(/~/g, '~0')\n                                                                                        .replace(/\\//g, '~1') +\n                                                                                    '/check',\n                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/check/type',\n                                                                                keyword: 'type',\n                                                                                params: { type: 'string' },\n                                                                                message: 'must be string',\n                                                                            },\n                                                                        ];\n                                                                        return false;\n                                                                    }\n                                                                    var valid3 = _errs15 === errors;\n                                                                }\n                                                                else {\n                                                                    var valid3 = true;\n                                                                }\n                                                                if (valid3) {\n                                                                    if (data4.fails !== undefined) {\n                                                                        let data6 = data4.fails;\n                                                                        const _errs17 = errors;\n                                                                        if (errors === _errs17) {\n                                                                            if (Array.isArray(data6)) {\n                                                                                var valid4 = true;\n                                                                                const len0 = data6.length;\n                                                                                for (let i0 = 0; i0 < len0; i0++) {\n                                                                                    const _errs19 = errors;\n                                                                                    if (typeof data6[i0] !== 'string') {\n                                                                                        validate38.errors = [\n                                                                                            {\n                                                                                                instancePath: instancePath +\n                                                                                                    '/tests/' +\n                                                                                                    key1\n                                                                                                        .replace(/~/g, '~0')\n                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                    '/fails/' +\n                                                                                                    i0,\n                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/fails/items/type',\n                                                                                                keyword: 'type',\n                                                                                                params: { type: 'string' },\n                                                                                                message: 'must be string',\n                                                                                            },\n                                                                                        ];\n                                                                                        return false;\n                                                                                    }\n                                                                                    var valid4 = _errs19 === errors;\n                                                                                    if (!valid4) {\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                            else {\n                                                                                validate38.errors = [\n                                                                                    {\n                                                                                        instancePath: instancePath +\n                                                                                            '/tests/' +\n                                                                                            key1\n                                                                                                .replace(/~/g, '~0')\n                                                                                                .replace(/\\//g, '~1') +\n                                                                                            '/fails',\n                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/fails/type',\n                                                                                        keyword: 'type',\n                                                                                        params: { type: 'array' },\n                                                                                        message: 'must be array',\n                                                                                    },\n                                                                                ];\n                                                                                return false;\n                                                                            }\n                                                                        }\n                                                                        var valid3 = _errs17 === errors;\n                                                                    }\n                                                                    else {\n                                                                        var valid3 = true;\n                                                                    }\n                                                                    if (valid3) {\n                                                                        if (data4.invalid !== undefined) {\n                                                                            let data8 = data4.invalid;\n                                                                            const _errs21 = errors;\n                                                                            if (errors === _errs21) {\n                                                                                if (Array.isArray(data8)) {\n                                                                                    var valid5 = true;\n                                                                                    const len1 = data8.length;\n                                                                                    for (let i1 = 0; i1 < len1; i1++) {\n                                                                                        const _errs23 = errors;\n                                                                                        if (typeof data8[i1] !== 'string') {\n                                                                                            validate38.errors = [\n                                                                                                {\n                                                                                                    instancePath: instancePath +\n                                                                                                        '/tests/' +\n                                                                                                        key1\n                                                                                                            .replace(/~/g, '~0')\n                                                                                                            .replace(/\\//g, '~1') +\n                                                                                                        '/invalid/' +\n                                                                                                        i1,\n                                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/invalid/items/type',\n                                                                                                    keyword: 'type',\n                                                                                                    params: { type: 'string' },\n                                                                                                    message: 'must be string',\n                                                                                                },\n                                                                                            ];\n                                                                                            return false;\n                                                                                        }\n                                                                                        var valid5 = _errs23 === errors;\n                                                                                        if (!valid5) {\n                                                                                            break;\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                                else {\n                                                                                    validate38.errors = [\n                                                                                        {\n                                                                                            instancePath: instancePath +\n                                                                                                '/tests/' +\n                                                                                                key1\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                '/invalid',\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/invalid/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'array' },\n                                                                                            message: 'must be array',\n                                                                                        },\n                                                                                    ];\n                                                                                    return false;\n                                                                                }\n                                                                            }\n                                                                            var valid3 = _errs21 === errors;\n                                                                        }\n                                                                        else {\n                                                                            var valid3 = true;\n                                                                        }\n                                                                        if (valid3) {\n                                                                            if (data4.name !== undefined) {\n                                                                                const _errs25 = errors;\n                                                                                if (typeof data4.name !== 'string') {\n                                                                                    validate38.errors = [\n                                                                                        {\n                                                                                            instancePath: instancePath +\n                                                                                                '/tests/' +\n                                                                                                key1\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                '/name',\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/name/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'string' },\n                                                                                            message: 'must be string',\n                                                                                        },\n                                                                                    ];\n                                                                                    return false;\n                                                                                }\n                                                                                var valid3 = _errs25 === errors;\n                                                                            }\n                                                                            else {\n                                                                                var valid3 = true;\n                                                                            }\n                                                                            if (valid3) {\n                                                                                if (data4.passes !== undefined) {\n                                                                                    let data11 = data4.passes;\n                                                                                    const _errs27 = errors;\n                                                                                    if (errors === _errs27) {\n                                                                                        if (Array.isArray(data11)) {\n                                                                                            var valid6 = true;\n                                                                                            const len2 = data11.length;\n                                                                                            for (let i2 = 0; i2 < len2; i2++) {\n                                                                                                const _errs29 = errors;\n                                                                                                if (typeof data11[i2] !== 'string') {\n                                                                                                    validate38.errors = [\n                                                                                                        {\n                                                                                                            instancePath: instancePath +\n                                                                                                                '/tests/' +\n                                                                                                                key1\n                                                                                                                    .replace(/~/g, '~0')\n                                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                                '/passes/' +\n                                                                                                                i2,\n                                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/passes/items/type',\n                                                                                                            keyword: 'type',\n                                                                                                            params: {\n                                                                                                                type: 'string',\n                                                                                                            },\n                                                                                                            message: 'must be string',\n                                                                                                        },\n                                                                                                    ];\n                                                                                                    return false;\n                                                                                                }\n                                                                                                var valid6 = _errs29 === errors;\n                                                                                                if (!valid6) {\n                                                                                                    break;\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                        else {\n                                                                                            validate38.errors = [\n                                                                                                {\n                                                                                                    instancePath: instancePath +\n                                                                                                        '/tests/' +\n                                                                                                        key1\n                                                                                                            .replace(/~/g, '~0')\n                                                                                                            .replace(/\\//g, '~1') +\n                                                                                                        '/passes',\n                                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/passes/type',\n                                                                                                    keyword: 'type',\n                                                                                                    params: { type: 'array' },\n                                                                                                    message: 'must be array',\n                                                                                                },\n                                                                                            ];\n                                                                                            return false;\n                                                                                        }\n                                                                                    }\n                                                                                    var valid3 = _errs27 === errors;\n                                                                                }\n                                                                                else {\n                                                                                    var valid3 = true;\n                                                                                }\n                                                                                if (valid3) {\n                                                                                    if (data4.setup !== undefined) {\n                                                                                        const _errs31 = errors;\n                                                                                        if (typeof data4.setup !== 'string') {\n                                                                                            validate38.errors = [\n                                                                                                {\n                                                                                                    instancePath: instancePath +\n                                                                                                        '/tests/' +\n                                                                                                        key1\n                                                                                                            .replace(/~/g, '~0')\n                                                                                                            .replace(/\\//g, '~1') +\n                                                                                                        '/setup',\n                                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptTest/properties/setup/type',\n                                                                                                    keyword: 'type',\n                                                                                                    params: { type: 'string' },\n                                                                                                    message: 'must be string',\n                                                                                                },\n                                                                                            ];\n                                                                                            return false;\n                                                                                        }\n                                                                                        var valid3 = _errs31 === errors;\n                                                                                    }\n                                                                                    else {\n                                                                                        var valid3 = true;\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        validate38.errors = [\n                                                            {\n                                                                instancePath: instancePath +\n                                                                    '/tests/' +\n                                                                    key1.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptTest/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'object' },\n                                                                message: 'must be object',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                }\n                                                var valid1 = _errs11 === errors;\n                                                if (!valid1) {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            validate38.errors = [\n                                                {\n                                                    instancePath: instancePath + '/tests',\n                                                    schemaPath: '#/properties/tests/type',\n                                                    keyword: 'type',\n                                                    params: { type: 'object' },\n                                                    message: 'must be object',\n                                                },\n                                            ];\n                                            return false;\n                                        }\n                                    }\n                                    var valid0 = _errs8 === errors;\n                                }\n                                else {\n                                    var valid0 = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate38.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate38.errors = vErrors;\n    return errors === 0;\n}\nconst func4 = Object.prototype.hasOwnProperty;\nfunction validate21(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (errors === 0) {\n        if (data && typeof data == 'object' && !Array.isArray(data)) {\n            let missing0;\n            if ((data.entities === undefined && (missing0 = 'entities')) ||\n                (data.scripts === undefined && (missing0 = 'scripts')) ||\n                (data.supported === undefined && (missing0 = 'supported')) ||\n                (data.version === undefined && (missing0 = 'version'))) {\n                validate21.errors = [\n                    {\n                        instancePath,\n                        schemaPath: '#/required',\n                        keyword: 'required',\n                        params: { missingProperty: missing0 },\n                        message: \"must have required property '\" + missing0 + \"'\",\n                    },\n                ];\n                return false;\n            }\n            else {\n                const _errs1 = errors;\n                for (const key0 in data) {\n                    if (!(key0 === '$schema' ||\n                        key0 === 'description' ||\n                        key0 === 'entities' ||\n                        key0 === 'name' ||\n                        key0 === 'scenarios' ||\n                        key0 === 'scripts' ||\n                        key0 === 'supported' ||\n                        key0 === 'version')) {\n                        validate21.errors = [\n                            {\n                                instancePath,\n                                schemaPath: '#/additionalProperties',\n                                keyword: 'additionalProperties',\n                                params: { additionalProperty: key0 },\n                                message: 'must NOT have additional properties',\n                            },\n                        ];\n                        return false;\n                        break;\n                    }\n                }\n                if (_errs1 === errors) {\n                    if (data.$schema !== undefined) {\n                        const _errs2 = errors;\n                        if (typeof data.$schema !== 'string') {\n                            validate21.errors = [\n                                {\n                                    instancePath: instancePath + '/$schema',\n                                    schemaPath: '#/properties/%24schema/type',\n                                    keyword: 'type',\n                                    params: { type: 'string' },\n                                    message: 'must be string',\n                                },\n                            ];\n                            return false;\n                        }\n                        var valid0 = _errs2 === errors;\n                    }\n                    else {\n                        var valid0 = true;\n                    }\n                    if (valid0) {\n                        if (data.description !== undefined) {\n                            const _errs4 = errors;\n                            if (typeof data.description !== 'string') {\n                                validate21.errors = [\n                                    {\n                                        instancePath: instancePath + '/description',\n                                        schemaPath: '#/properties/description/type',\n                                        keyword: 'type',\n                                        params: { type: 'string' },\n                                        message: 'must be string',\n                                    },\n                                ];\n                                return false;\n                            }\n                            var valid0 = _errs4 === errors;\n                        }\n                        else {\n                            var valid0 = true;\n                        }\n                        if (valid0) {\n                            if (data.entities !== undefined) {\n                                let data2 = data.entities;\n                                const _errs6 = errors;\n                                if (errors === _errs6) {\n                                    if (data2 &&\n                                        typeof data2 == 'object' &&\n                                        !Array.isArray(data2)) {\n                                        for (const key1 in data2) {\n                                            const _errs9 = errors;\n                                            if (!validate22(data2[key1], {\n                                                instancePath: instancePath +\n                                                    '/entities/' +\n                                                    key1.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                parentData: data2,\n                                                parentDataProperty: key1,\n                                                rootData,\n                                            })) {\n                                                vErrors =\n                                                    vErrors === null\n                                                        ? validate22.errors\n                                                        : vErrors.concat(validate22.errors);\n                                                errors = vErrors.length;\n                                            }\n                                            var valid1 = _errs9 === errors;\n                                            if (!valid1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        validate21.errors = [\n                                            {\n                                                instancePath: instancePath + '/entities',\n                                                schemaPath: '#/properties/entities/type',\n                                                keyword: 'type',\n                                                params: { type: 'object' },\n                                                message: 'must be object',\n                                            },\n                                        ];\n                                        return false;\n                                    }\n                                }\n                                var valid0 = _errs6 === errors;\n                            }\n                            else {\n                                var valid0 = true;\n                            }\n                            if (valid0) {\n                                if (data.name !== undefined) {\n                                    const _errs10 = errors;\n                                    if (typeof data.name !== 'string') {\n                                        validate21.errors = [\n                                            {\n                                                instancePath: instancePath + '/name',\n                                                schemaPath: '#/properties/name/type',\n                                                keyword: 'type',\n                                                params: { type: 'string' },\n                                                message: 'must be string',\n                                            },\n                                        ];\n                                        return false;\n                                    }\n                                    var valid0 = _errs10 === errors;\n                                }\n                                else {\n                                    var valid0 = true;\n                                }\n                                if (valid0) {\n                                    if (data.scenarios !== undefined) {\n                                        let data5 = data.scenarios;\n                                        const _errs12 = errors;\n                                        if (errors === _errs12) {\n                                            if (data5 &&\n                                                typeof data5 == 'object' &&\n                                                !Array.isArray(data5)) {\n                                                for (const key2 in data5) {\n                                                    const _errs15 = errors;\n                                                    if (!validate26(data5[key2], {\n                                                        instancePath: instancePath +\n                                                            '/scenarios/' +\n                                                            key2.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                        parentData: data5,\n                                                        parentDataProperty: key2,\n                                                        rootData,\n                                                    })) {\n                                                        vErrors =\n                                                            vErrors === null\n                                                                ? validate26.errors\n                                                                : vErrors.concat(validate26.errors);\n                                                        errors = vErrors.length;\n                                                    }\n                                                    var valid2 = _errs15 === errors;\n                                                    if (!valid2) {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            else {\n                                                validate21.errors = [\n                                                    {\n                                                        instancePath: instancePath + '/scenarios',\n                                                        schemaPath: '#/properties/scenarios/type',\n                                                        keyword: 'type',\n                                                        params: { type: 'object' },\n                                                        message: 'must be object',\n                                                    },\n                                                ];\n                                                return false;\n                                            }\n                                        }\n                                        var valid0 = _errs12 === errors;\n                                    }\n                                    else {\n                                        var valid0 = true;\n                                    }\n                                    if (valid0) {\n                                        if (data.scripts !== undefined) {\n                                            let data7 = data.scripts;\n                                            const _errs16 = errors;\n                                            if (errors === _errs16) {\n                                                if (data7 &&\n                                                    typeof data7 == 'object' &&\n                                                    !Array.isArray(data7)) {\n                                                    for (const key3 in data7) {\n                                                        let data8 = data7[key3];\n                                                        const _errs19 = errors;\n                                                        const _errs20 = errors;\n                                                        let valid4 = false;\n                                                        const _errs21 = errors;\n                                                        const _errs22 = errors;\n                                                        if (errors === _errs22) {\n                                                            if (data8 &&\n                                                                typeof data8 == 'object' &&\n                                                                !Array.isArray(data8)) {\n                                                                let missing1;\n                                                                if (data8.script === undefined &&\n                                                                    (missing1 = 'script')) {\n                                                                    const err0 = {\n                                                                        instancePath: instancePath +\n                                                                            '/scripts/' +\n                                                                            key3\n                                                                                .replace(/~/g, '~0')\n                                                                                .replace(/\\//g, '~1'),\n                                                                        schemaPath: '#/definitions/AuthenticationTemplateScript/required',\n                                                                        keyword: 'required',\n                                                                        params: { missingProperty: missing1 },\n                                                                        message: \"must have required property '\" +\n                                                                            missing1 +\n                                                                            \"'\",\n                                                                    };\n                                                                    if (vErrors === null) {\n                                                                        vErrors = [err0];\n                                                                    }\n                                                                    else {\n                                                                        vErrors.push(err0);\n                                                                    }\n                                                                    errors++;\n                                                                }\n                                                                else {\n                                                                    const _errs24 = errors;\n                                                                    for (const key4 in data8) {\n                                                                        if (!(key4 === 'name' || key4 === 'script')) {\n                                                                            const err1 = {\n                                                                                instancePath: instancePath +\n                                                                                    '/scripts/' +\n                                                                                    key3\n                                                                                        .replace(/~/g, '~0')\n                                                                                        .replace(/\\//g, '~1'),\n                                                                                schemaPath: '#/definitions/AuthenticationTemplateScript/additionalProperties',\n                                                                                keyword: 'additionalProperties',\n                                                                                params: { additionalProperty: key4 },\n                                                                                message: 'must NOT have additional properties',\n                                                                            };\n                                                                            if (vErrors === null) {\n                                                                                vErrors = [err1];\n                                                                            }\n                                                                            else {\n                                                                                vErrors.push(err1);\n                                                                            }\n                                                                            errors++;\n                                                                            break;\n                                                                        }\n                                                                    }\n                                                                    if (_errs24 === errors) {\n                                                                        if (data8.name !== undefined) {\n                                                                            const _errs25 = errors;\n                                                                            if (typeof data8.name !== 'string') {\n                                                                                const err2 = {\n                                                                                    instancePath: instancePath +\n                                                                                        '/scripts/' +\n                                                                                        key3\n                                                                                            .replace(/~/g, '~0')\n                                                                                            .replace(/\\//g, '~1') +\n                                                                                        '/name',\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScript/properties/name/type',\n                                                                                    keyword: 'type',\n                                                                                    params: { type: 'string' },\n                                                                                    message: 'must be string',\n                                                                                };\n                                                                                if (vErrors === null) {\n                                                                                    vErrors = [err2];\n                                                                                }\n                                                                                else {\n                                                                                    vErrors.push(err2);\n                                                                                }\n                                                                                errors++;\n                                                                            }\n                                                                            var valid6 = _errs25 === errors;\n                                                                        }\n                                                                        else {\n                                                                            var valid6 = true;\n                                                                        }\n                                                                        if (valid6) {\n                                                                            if (data8.script !== undefined) {\n                                                                                const _errs27 = errors;\n                                                                                if (typeof data8.script !== 'string') {\n                                                                                    const err3 = {\n                                                                                        instancePath: instancePath +\n                                                                                            '/scripts/' +\n                                                                                            key3\n                                                                                                .replace(/~/g, '~0')\n                                                                                                .replace(/\\//g, '~1') +\n                                                                                            '/script',\n                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScript/properties/script/type',\n                                                                                        keyword: 'type',\n                                                                                        params: { type: 'string' },\n                                                                                        message: 'must be string',\n                                                                                    };\n                                                                                    if (vErrors === null) {\n                                                                                        vErrors = [err3];\n                                                                                    }\n                                                                                    else {\n                                                                                        vErrors.push(err3);\n                                                                                    }\n                                                                                    errors++;\n                                                                                }\n                                                                                var valid6 = _errs27 === errors;\n                                                                            }\n                                                                            else {\n                                                                                var valid6 = true;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                            else {\n                                                                const err4 = {\n                                                                    instancePath: instancePath +\n                                                                        '/scripts/' +\n                                                                        key3\n                                                                            .replace(/~/g, '~0')\n                                                                            .replace(/\\//g, '~1'),\n                                                                    schemaPath: '#/definitions/AuthenticationTemplateScript/type',\n                                                                    keyword: 'type',\n                                                                    params: { type: 'object' },\n                                                                    message: 'must be object',\n                                                                };\n                                                                if (vErrors === null) {\n                                                                    vErrors = [err4];\n                                                                }\n                                                                else {\n                                                                    vErrors.push(err4);\n                                                                }\n                                                                errors++;\n                                                            }\n                                                        }\n                                                        var _valid0 = _errs21 === errors;\n                                                        valid4 = valid4 || _valid0;\n                                                        if (!valid4) {\n                                                            const _errs29 = errors;\n                                                            const _errs30 = errors;\n                                                            if (errors === _errs30) {\n                                                                if (data8 &&\n                                                                    typeof data8 == 'object' &&\n                                                                    !Array.isArray(data8)) {\n                                                                    let missing2;\n                                                                    if ((data8.lockingType === undefined &&\n                                                                        (missing2 = 'lockingType')) ||\n                                                                        (data8.script === undefined &&\n                                                                            (missing2 = 'script'))) {\n                                                                        const err5 = {\n                                                                            instancePath: instancePath +\n                                                                                '/scripts/' +\n                                                                                key3\n                                                                                    .replace(/~/g, '~0')\n                                                                                    .replace(/\\//g, '~1'),\n                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/required',\n                                                                            keyword: 'required',\n                                                                            params: { missingProperty: missing2 },\n                                                                            message: \"must have required property '\" +\n                                                                                missing2 +\n                                                                                \"'\",\n                                                                        };\n                                                                        if (vErrors === null) {\n                                                                            vErrors = [err5];\n                                                                        }\n                                                                        else {\n                                                                            vErrors.push(err5);\n                                                                        }\n                                                                        errors++;\n                                                                    }\n                                                                    else {\n                                                                        const _errs32 = errors;\n                                                                        for (const key5 in data8) {\n                                                                            if (!(key5 === 'lockingType' ||\n                                                                                key5 === 'name' ||\n                                                                                key5 === 'script')) {\n                                                                                const err6 = {\n                                                                                    instancePath: instancePath +\n                                                                                        '/scripts/' +\n                                                                                        key3\n                                                                                            .replace(/~/g, '~0')\n                                                                                            .replace(/\\//g, '~1'),\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/additionalProperties',\n                                                                                    keyword: 'additionalProperties',\n                                                                                    params: { additionalProperty: key5 },\n                                                                                    message: 'must NOT have additional properties',\n                                                                                };\n                                                                                if (vErrors === null) {\n                                                                                    vErrors = [err6];\n                                                                                }\n                                                                                else {\n                                                                                    vErrors.push(err6);\n                                                                                }\n                                                                                errors++;\n                                                                                break;\n                                                                            }\n                                                                        }\n                                                                        if (_errs32 === errors) {\n                                                                            if (data8.lockingType !== undefined) {\n                                                                                let data11 = data8.lockingType;\n                                                                                const _errs33 = errors;\n                                                                                if (typeof data11 !== 'string') {\n                                                                                    const err7 = {\n                                                                                        instancePath: instancePath +\n                                                                                            '/scripts/' +\n                                                                                            key3\n                                                                                                .replace(/~/g, '~0')\n                                                                                                .replace(/\\//g, '~1') +\n                                                                                            '/lockingType',\n                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/properties/lockingType/type',\n                                                                                        keyword: 'type',\n                                                                                        params: { type: 'string' },\n                                                                                        message: 'must be string',\n                                                                                    };\n                                                                                    if (vErrors === null) {\n                                                                                        vErrors = [err7];\n                                                                                    }\n                                                                                    else {\n                                                                                        vErrors.push(err7);\n                                                                                    }\n                                                                                    errors++;\n                                                                                }\n                                                                                if (!(data11 === 'p2sh20' ||\n                                                                                    data11 === 'p2sh32' ||\n                                                                                    data11 === 'standard')) {\n                                                                                    const err8 = {\n                                                                                        instancePath: instancePath +\n                                                                                            '/scripts/' +\n                                                                                            key3\n                                                                                                .replace(/~/g, '~0')\n                                                                                                .replace(/\\//g, '~1') +\n                                                                                            '/lockingType',\n                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/properties/lockingType/enum',\n                                                                                        keyword: 'enum',\n                                                                                        params: {\n                                                                                            allowedValues: schema38.properties.lockingType\n                                                                                                .enum,\n                                                                                        },\n                                                                                        message: 'must be equal to one of the allowed values',\n                                                                                    };\n                                                                                    if (vErrors === null) {\n                                                                                        vErrors = [err8];\n                                                                                    }\n                                                                                    else {\n                                                                                        vErrors.push(err8);\n                                                                                    }\n                                                                                    errors++;\n                                                                                }\n                                                                                var valid8 = _errs33 === errors;\n                                                                            }\n                                                                            else {\n                                                                                var valid8 = true;\n                                                                            }\n                                                                            if (valid8) {\n                                                                                if (data8.name !== undefined) {\n                                                                                    const _errs35 = errors;\n                                                                                    if (typeof data8.name !== 'string') {\n                                                                                        const err9 = {\n                                                                                            instancePath: instancePath +\n                                                                                                '/scripts/' +\n                                                                                                key3\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                '/name',\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/properties/name/type',\n                                                                                            keyword: 'type',\n                                                                                            params: { type: 'string' },\n                                                                                            message: 'must be string',\n                                                                                        };\n                                                                                        if (vErrors === null) {\n                                                                                            vErrors = [err9];\n                                                                                        }\n                                                                                        else {\n                                                                                            vErrors.push(err9);\n                                                                                        }\n                                                                                        errors++;\n                                                                                    }\n                                                                                    var valid8 = _errs35 === errors;\n                                                                                }\n                                                                                else {\n                                                                                    var valid8 = true;\n                                                                                }\n                                                                                if (valid8) {\n                                                                                    if (data8.script !== undefined) {\n                                                                                        const _errs37 = errors;\n                                                                                        if (typeof data8.script !== 'string') {\n                                                                                            const err10 = {\n                                                                                                instancePath: instancePath +\n                                                                                                    '/scripts/' +\n                                                                                                    key3\n                                                                                                        .replace(/~/g, '~0')\n                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                    '/script',\n                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/properties/script/type',\n                                                                                                keyword: 'type',\n                                                                                                params: { type: 'string' },\n                                                                                                message: 'must be string',\n                                                                                            };\n                                                                                            if (vErrors === null) {\n                                                                                                vErrors = [err10];\n                                                                                            }\n                                                                                            else {\n                                                                                                vErrors.push(err10);\n                                                                                            }\n                                                                                            errors++;\n                                                                                        }\n                                                                                        var valid8 = _errs37 === errors;\n                                                                                    }\n                                                                                    else {\n                                                                                        var valid8 = true;\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                                else {\n                                                                    const err11 = {\n                                                                        instancePath: instancePath +\n                                                                            '/scripts/' +\n                                                                            key3\n                                                                                .replace(/~/g, '~0')\n                                                                                .replace(/\\//g, '~1'),\n                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptLocking/type',\n                                                                        keyword: 'type',\n                                                                        params: { type: 'object' },\n                                                                        message: 'must be object',\n                                                                    };\n                                                                    if (vErrors === null) {\n                                                                        vErrors = [err11];\n                                                                    }\n                                                                    else {\n                                                                        vErrors.push(err11);\n                                                                    }\n                                                                    errors++;\n                                                                }\n                                                            }\n                                                            var _valid0 = _errs29 === errors;\n                                                            valid4 = valid4 || _valid0;\n                                                            if (!valid4) {\n                                                                const _errs39 = errors;\n                                                                if (!validate38(data8, {\n                                                                    instancePath: instancePath +\n                                                                        '/scripts/' +\n                                                                        key3\n                                                                            .replace(/~/g, '~0')\n                                                                            .replace(/\\//g, '~1'),\n                                                                    parentData: data7,\n                                                                    parentDataProperty: key3,\n                                                                    rootData,\n                                                                })) {\n                                                                    vErrors =\n                                                                        vErrors === null\n                                                                            ? validate38.errors\n                                                                            : vErrors.concat(validate38.errors);\n                                                                    errors = vErrors.length;\n                                                                }\n                                                                var _valid0 = _errs39 === errors;\n                                                                valid4 = valid4 || _valid0;\n                                                                if (!valid4) {\n                                                                    const _errs40 = errors;\n                                                                    const _errs41 = errors;\n                                                                    if (errors === _errs41) {\n                                                                        if (data8 &&\n                                                                            typeof data8 == 'object' &&\n                                                                            !Array.isArray(data8)) {\n                                                                            let missing3;\n                                                                            if ((data8.script === undefined &&\n                                                                                (missing3 = 'script')) ||\n                                                                                (data8.unlocks === undefined &&\n                                                                                    (missing3 = 'unlocks'))) {\n                                                                                const err12 = {\n                                                                                    instancePath: instancePath +\n                                                                                        '/scripts/' +\n                                                                                        key3\n                                                                                            .replace(/~/g, '~0')\n                                                                                            .replace(/\\//g, '~1'),\n                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/required',\n                                                                                    keyword: 'required',\n                                                                                    params: { missingProperty: missing3 },\n                                                                                    message: \"must have required property '\" +\n                                                                                        missing3 +\n                                                                                        \"'\",\n                                                                                };\n                                                                                if (vErrors === null) {\n                                                                                    vErrors = [err12];\n                                                                                }\n                                                                                else {\n                                                                                    vErrors.push(err12);\n                                                                                }\n                                                                                errors++;\n                                                                            }\n                                                                            else {\n                                                                                const _errs43 = errors;\n                                                                                for (const key6 in data8) {\n                                                                                    if (!func4.call(schema41.properties, key6)) {\n                                                                                        const err13 = {\n                                                                                            instancePath: instancePath +\n                                                                                                '/scripts/' +\n                                                                                                key3\n                                                                                                    .replace(/~/g, '~0')\n                                                                                                    .replace(/\\//g, '~1'),\n                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/additionalProperties',\n                                                                                            keyword: 'additionalProperties',\n                                                                                            params: {\n                                                                                                additionalProperty: key6,\n                                                                                            },\n                                                                                            message: 'must NOT have additional properties',\n                                                                                        };\n                                                                                        if (vErrors === null) {\n                                                                                            vErrors = [err13];\n                                                                                        }\n                                                                                        else {\n                                                                                            vErrors.push(err13);\n                                                                                        }\n                                                                                        errors++;\n                                                                                        break;\n                                                                                    }\n                                                                                }\n                                                                                if (_errs43 === errors) {\n                                                                                    if (data8.ageLock !== undefined) {\n                                                                                        const _errs44 = errors;\n                                                                                        if (typeof data8.ageLock !== 'string') {\n                                                                                            const err14 = {\n                                                                                                instancePath: instancePath +\n                                                                                                    '/scripts/' +\n                                                                                                    key3\n                                                                                                        .replace(/~/g, '~0')\n                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                    '/ageLock',\n                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/ageLock/type',\n                                                                                                keyword: 'type',\n                                                                                                params: { type: 'string' },\n                                                                                                message: 'must be string',\n                                                                                            };\n                                                                                            if (vErrors === null) {\n                                                                                                vErrors = [err14];\n                                                                                            }\n                                                                                            else {\n                                                                                                vErrors.push(err14);\n                                                                                            }\n                                                                                            errors++;\n                                                                                        }\n                                                                                        var valid10 = _errs44 === errors;\n                                                                                    }\n                                                                                    else {\n                                                                                        var valid10 = true;\n                                                                                    }\n                                                                                    if (valid10) {\n                                                                                        if (data8.estimate !== undefined) {\n                                                                                            const _errs46 = errors;\n                                                                                            if (typeof data8.estimate !==\n                                                                                                'string') {\n                                                                                                const err15 = {\n                                                                                                    instancePath: instancePath +\n                                                                                                        '/scripts/' +\n                                                                                                        key3\n                                                                                                            .replace(/~/g, '~0')\n                                                                                                            .replace(/\\//g, '~1') +\n                                                                                                        '/estimate',\n                                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/estimate/type',\n                                                                                                    keyword: 'type',\n                                                                                                    params: { type: 'string' },\n                                                                                                    message: 'must be string',\n                                                                                                };\n                                                                                                if (vErrors === null) {\n                                                                                                    vErrors = [err15];\n                                                                                                }\n                                                                                                else {\n                                                                                                    vErrors.push(err15);\n                                                                                                }\n                                                                                                errors++;\n                                                                                            }\n                                                                                            var valid10 = _errs46 === errors;\n                                                                                        }\n                                                                                        else {\n                                                                                            var valid10 = true;\n                                                                                        }\n                                                                                        if (valid10) {\n                                                                                            if (data8.fails !== undefined) {\n                                                                                                let data16 = data8.fails;\n                                                                                                const _errs48 = errors;\n                                                                                                if (errors === _errs48) {\n                                                                                                    if (Array.isArray(data16)) {\n                                                                                                        var valid11 = true;\n                                                                                                        const len0 = data16.length;\n                                                                                                        for (let i0 = 0; i0 < len0; i0++) {\n                                                                                                            const _errs50 = errors;\n                                                                                                            if (typeof data16[i0] !==\n                                                                                                                'string') {\n                                                                                                                const err16 = {\n                                                                                                                    instancePath: instancePath +\n                                                                                                                        '/scripts/' +\n                                                                                                                        key3\n                                                                                                                            .replace(/~/g, '~0')\n                                                                                                                            .replace(/\\//g, '~1') +\n                                                                                                                        '/fails/' +\n                                                                                                                        i0,\n                                                                                                                    schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/fails/items/type',\n                                                                                                                    keyword: 'type',\n                                                                                                                    params: {\n                                                                                                                        type: 'string',\n                                                                                                                    },\n                                                                                                                    message: 'must be string',\n                                                                                                                };\n                                                                                                                if (vErrors === null) {\n                                                                                                                    vErrors = [err16];\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    vErrors.push(err16);\n                                                                                                                }\n                                                                                                                errors++;\n                                                                                                            }\n                                                                                                            var valid11 = _errs50 === errors;\n                                                                                                            if (!valid11) {\n                                                                                                                break;\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        const err17 = {\n                                                                                                            instancePath: instancePath +\n                                                                                                                '/scripts/' +\n                                                                                                                key3\n                                                                                                                    .replace(/~/g, '~0')\n                                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                                '/fails',\n                                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/fails/type',\n                                                                                                            keyword: 'type',\n                                                                                                            params: { type: 'array' },\n                                                                                                            message: 'must be array',\n                                                                                                        };\n                                                                                                        if (vErrors === null) {\n                                                                                                            vErrors = [err17];\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            vErrors.push(err17);\n                                                                                                        }\n                                                                                                        errors++;\n                                                                                                    }\n                                                                                                }\n                                                                                                var valid10 = _errs48 === errors;\n                                                                                            }\n                                                                                            else {\n                                                                                                var valid10 = true;\n                                                                                            }\n                                                                                            if (valid10) {\n                                                                                                if (data8.invalid !== undefined) {\n                                                                                                    let data18 = data8.invalid;\n                                                                                                    const _errs52 = errors;\n                                                                                                    if (errors === _errs52) {\n                                                                                                        if (Array.isArray(data18)) {\n                                                                                                            var valid12 = true;\n                                                                                                            const len1 = data18.length;\n                                                                                                            for (let i1 = 0; i1 < len1; i1++) {\n                                                                                                                const _errs54 = errors;\n                                                                                                                if (typeof data18[i1] !==\n                                                                                                                    'string') {\n                                                                                                                    const err18 = {\n                                                                                                                        instancePath: instancePath +\n                                                                                                                            '/scripts/' +\n                                                                                                                            key3\n                                                                                                                                .replace(/~/g, '~0')\n                                                                                                                                .replace(/\\//g, '~1') +\n                                                                                                                            '/invalid/' +\n                                                                                                                            i1,\n                                                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/invalid/items/type',\n                                                                                                                        keyword: 'type',\n                                                                                                                        params: {\n                                                                                                                            type: 'string',\n                                                                                                                        },\n                                                                                                                        message: 'must be string',\n                                                                                                                    };\n                                                                                                                    if (vErrors === null) {\n                                                                                                                        vErrors = [err18];\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        vErrors.push(err18);\n                                                                                                                    }\n                                                                                                                    errors++;\n                                                                                                                }\n                                                                                                                var valid12 = _errs54 === errors;\n                                                                                                                if (!valid12) {\n                                                                                                                    break;\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            const err19 = {\n                                                                                                                instancePath: instancePath +\n                                                                                                                    '/scripts/' +\n                                                                                                                    key3\n                                                                                                                        .replace(/~/g, '~0')\n                                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                                    '/invalid',\n                                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/invalid/type',\n                                                                                                                keyword: 'type',\n                                                                                                                params: {\n                                                                                                                    type: 'array',\n                                                                                                                },\n                                                                                                                message: 'must be array',\n                                                                                                            };\n                                                                                                            if (vErrors === null) {\n                                                                                                                vErrors = [err19];\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                vErrors.push(err19);\n                                                                                                            }\n                                                                                                            errors++;\n                                                                                                        }\n                                                                                                    }\n                                                                                                    var valid10 = _errs52 === errors;\n                                                                                                }\n                                                                                                else {\n                                                                                                    var valid10 = true;\n                                                                                                }\n                                                                                                if (valid10) {\n                                                                                                    if (data8.name !== undefined) {\n                                                                                                        const _errs56 = errors;\n                                                                                                        if (typeof data8.name !==\n                                                                                                            'string') {\n                                                                                                            const err20 = {\n                                                                                                                instancePath: instancePath +\n                                                                                                                    '/scripts/' +\n                                                                                                                    key3\n                                                                                                                        .replace(/~/g, '~0')\n                                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                                    '/name',\n                                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/name/type',\n                                                                                                                keyword: 'type',\n                                                                                                                params: {\n                                                                                                                    type: 'string',\n                                                                                                                },\n                                                                                                                message: 'must be string',\n                                                                                                            };\n                                                                                                            if (vErrors === null) {\n                                                                                                                vErrors = [err20];\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                vErrors.push(err20);\n                                                                                                            }\n                                                                                                            errors++;\n                                                                                                        }\n                                                                                                        var valid10 = _errs56 === errors;\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        var valid10 = true;\n                                                                                                    }\n                                                                                                    if (valid10) {\n                                                                                                        if (data8.passes !== undefined) {\n                                                                                                            let data21 = data8.passes;\n                                                                                                            const _errs58 = errors;\n                                                                                                            if (errors === _errs58) {\n                                                                                                                if (Array.isArray(data21)) {\n                                                                                                                    var valid13 = true;\n                                                                                                                    const len2 = data21.length;\n                                                                                                                    for (let i2 = 0; i2 < len2; i2++) {\n                                                                                                                        const _errs60 = errors;\n                                                                                                                        if (typeof data21[i2] !== 'string') {\n                                                                                                                            const err21 = {\n                                                                                                                                instancePath: instancePath +\n                                                                                                                                    '/scripts/' +\n                                                                                                                                    key3\n                                                                                                                                        .replace(/~/g, '~0')\n                                                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                                                    '/passes/' +\n                                                                                                                                    i2,\n                                                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/passes/items/type',\n                                                                                                                                keyword: 'type',\n                                                                                                                                params: {\n                                                                                                                                    type: 'string',\n                                                                                                                                },\n                                                                                                                                message: 'must be string',\n                                                                                                                            };\n                                                                                                                            if (vErrors === null) {\n                                                                                                                                vErrors = [\n                                                                                                                                    err21,\n                                                                                                                                ];\n                                                                                                                            }\n                                                                                                                            else {\n                                                                                                                                vErrors.push(err21);\n                                                                                                                            }\n                                                                                                                            errors++;\n                                                                                                                        }\n                                                                                                                        var valid13 = _errs60 ===\n                                                                                                                            errors;\n                                                                                                                        if (!valid13) {\n                                                                                                                            break;\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    const err22 = {\n                                                                                                                        instancePath: instancePath +\n                                                                                                                            '/scripts/' +\n                                                                                                                            key3\n                                                                                                                                .replace(/~/g, '~0')\n                                                                                                                                .replace(/\\//g, '~1') +\n                                                                                                                            '/passes',\n                                                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/passes/type',\n                                                                                                                        keyword: 'type',\n                                                                                                                        params: {\n                                                                                                                            type: 'array',\n                                                                                                                        },\n                                                                                                                        message: 'must be array',\n                                                                                                                    };\n                                                                                                                    if (vErrors === null) {\n                                                                                                                        vErrors = [err22];\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        vErrors.push(err22);\n                                                                                                                    }\n                                                                                                                    errors++;\n                                                                                                                }\n                                                                                                            }\n                                                                                                            var valid10 = _errs58 === errors;\n                                                                                                        }\n                                                                                                        else {\n                                                                                                            var valid10 = true;\n                                                                                                        }\n                                                                                                        if (valid10) {\n                                                                                                            if (data8.script !==\n                                                                                                                undefined) {\n                                                                                                                const _errs62 = errors;\n                                                                                                                if (typeof data8.script !==\n                                                                                                                    'string') {\n                                                                                                                    const err23 = {\n                                                                                                                        instancePath: instancePath +\n                                                                                                                            '/scripts/' +\n                                                                                                                            key3\n                                                                                                                                .replace(/~/g, '~0')\n                                                                                                                                .replace(/\\//g, '~1') +\n                                                                                                                            '/script',\n                                                                                                                        schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/script/type',\n                                                                                                                        keyword: 'type',\n                                                                                                                        params: {\n                                                                                                                            type: 'string',\n                                                                                                                        },\n                                                                                                                        message: 'must be string',\n                                                                                                                    };\n                                                                                                                    if (vErrors === null) {\n                                                                                                                        vErrors = [err23];\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        vErrors.push(err23);\n                                                                                                                    }\n                                                                                                                    errors++;\n                                                                                                                }\n                                                                                                                var valid10 = _errs62 === errors;\n                                                                                                            }\n                                                                                                            else {\n                                                                                                                var valid10 = true;\n                                                                                                            }\n                                                                                                            if (valid10) {\n                                                                                                                if (data8.timeLockType !==\n                                                                                                                    undefined) {\n                                                                                                                    let data24 = data8.timeLockType;\n                                                                                                                    const _errs64 = errors;\n                                                                                                                    if (typeof data24 !==\n                                                                                                                        'string') {\n                                                                                                                        const err24 = {\n                                                                                                                            instancePath: instancePath +\n                                                                                                                                '/scripts/' +\n                                                                                                                                key3\n                                                                                                                                    .replace(/~/g, '~0')\n                                                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                                                '/timeLockType',\n                                                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/timeLockType/type',\n                                                                                                                            keyword: 'type',\n                                                                                                                            params: {\n                                                                                                                                type: 'string',\n                                                                                                                            },\n                                                                                                                            message: 'must be string',\n                                                                                                                        };\n                                                                                                                        if (vErrors === null) {\n                                                                                                                            vErrors = [err24];\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            vErrors.push(err24);\n                                                                                                                        }\n                                                                                                                        errors++;\n                                                                                                                    }\n                                                                                                                    if (!(data24 ===\n                                                                                                                        'height' ||\n                                                                                                                        data24 ===\n                                                                                                                            'timestamp')) {\n                                                                                                                        const err25 = {\n                                                                                                                            instancePath: instancePath +\n                                                                                                                                '/scripts/' +\n                                                                                                                                key3\n                                                                                                                                    .replace(/~/g, '~0')\n                                                                                                                                    .replace(/\\//g, '~1') +\n                                                                                                                                '/timeLockType',\n                                                                                                                            schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/timeLockType/enum',\n                                                                                                                            keyword: 'enum',\n                                                                                                                            params: {\n                                                                                                                                allowedValues: schema41\n                                                                                                                                    .properties\n                                                                                                                                    .timeLockType\n                                                                                                                                    .enum,\n                                                                                                                            },\n                                                                                                                            message: 'must be equal to one of the allowed values',\n                                                                                                                        };\n                                                                                                                        if (vErrors === null) {\n                                                                                                                            vErrors = [err25];\n                                                                                                                        }\n                                                                                                                        else {\n                                                                                                                            vErrors.push(err25);\n                                                                                                                        }\n                                                                                                                        errors++;\n                                                                                                                    }\n                                                                                                                    var valid10 = _errs64 === errors;\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                    var valid10 = true;\n                                                                                                                }\n                                                                                                                if (valid10) {\n                                                                                                                    if (data8.unlocks !==\n                                                                                                                        undefined) {\n                                                                                                                        const _errs66 = errors;\n                                                                                                                        if (typeof data8.unlocks !==\n                                                                                                                            'string') {\n                                                                                                                            const err26 = {\n                                                                                                                                instancePath: instancePath +\n                                                                                                                                    '/scripts/' +\n                                                                                                                                    key3\n                                                                                                                                        .replace(/~/g, '~0')\n                                                                                                                                        .replace(/\\//g, '~1') +\n                                                                                                                                    '/unlocks',\n                                                                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/properties/unlocks/type',\n                                                                                                                                keyword: 'type',\n                                                                                                                                params: {\n                                                                                                                                    type: 'string',\n                                                                                                                                },\n                                                                                                                                message: 'must be string',\n                                                                                                                            };\n                                                                                                                            if (vErrors === null) {\n                                                                                                                                vErrors = [\n                                                                                                                                    err26,\n                                                                                                                                ];\n                                                                                                                            }\n                                                                                                                            else {\n                                                                                                                                vErrors.push(err26);\n                                                                                                                            }\n                                                                                                                            errors++;\n                                                                                                                        }\n                                                                                                                        var valid10 = _errs66 ===\n                                                                                                                            errors;\n                                                                                                                    }\n                                                                                                                    else {\n                                                                                                                        var valid10 = true;\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                        else {\n                                                                            const err27 = {\n                                                                                instancePath: instancePath +\n                                                                                    '/scripts/' +\n                                                                                    key3\n                                                                                        .replace(/~/g, '~0')\n                                                                                        .replace(/\\//g, '~1'),\n                                                                                schemaPath: '#/definitions/AuthenticationTemplateScriptUnlocking/type',\n                                                                                keyword: 'type',\n                                                                                params: { type: 'object' },\n                                                                                message: 'must be object',\n                                                                            };\n                                                                            if (vErrors === null) {\n                                                                                vErrors = [err27];\n                                                                            }\n                                                                            else {\n                                                                                vErrors.push(err27);\n                                                                            }\n                                                                            errors++;\n                                                                        }\n                                                                    }\n                                                                    var _valid0 = _errs40 === errors;\n                                                                    valid4 = valid4 || _valid0;\n                                                                }\n                                                            }\n                                                        }\n                                                        if (!valid4) {\n                                                            const err28 = {\n                                                                instancePath: instancePath +\n                                                                    '/scripts/' +\n                                                                    key3.replace(/~/g, '~0').replace(/\\//g, '~1'),\n                                                                schemaPath: '#/properties/scripts/additionalProperties/anyOf',\n                                                                keyword: 'anyOf',\n                                                                params: {},\n                                                                message: 'must match a schema in anyOf',\n                                                            };\n                                                            if (vErrors === null) {\n                                                                vErrors = [err28];\n                                                            }\n                                                            else {\n                                                                vErrors.push(err28);\n                                                            }\n                                                            errors++;\n                                                            validate21.errors = vErrors;\n                                                            return false;\n                                                        }\n                                                        else {\n                                                            errors = _errs20;\n                                                            if (vErrors !== null) {\n                                                                if (_errs20) {\n                                                                    vErrors.length = _errs20;\n                                                                }\n                                                                else {\n                                                                    vErrors = null;\n                                                                }\n                                                            }\n                                                        }\n                                                        var valid3 = _errs19 === errors;\n                                                        if (!valid3) {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                                else {\n                                                    validate21.errors = [\n                                                        {\n                                                            instancePath: instancePath + '/scripts',\n                                                            schemaPath: '#/properties/scripts/type',\n                                                            keyword: 'type',\n                                                            params: { type: 'object' },\n                                                            message: 'must be object',\n                                                        },\n                                                    ];\n                                                    return false;\n                                                }\n                                            }\n                                            var valid0 = _errs16 === errors;\n                                        }\n                                        else {\n                                            var valid0 = true;\n                                        }\n                                        if (valid0) {\n                                            if (data.supported !== undefined) {\n                                                let data26 = data.supported;\n                                                const _errs68 = errors;\n                                                if (errors === _errs68) {\n                                                    if (Array.isArray(data26)) {\n                                                        var valid14 = true;\n                                                        const len3 = data26.length;\n                                                        for (let i3 = 0; i3 < len3; i3++) {\n                                                            let data27 = data26[i3];\n                                                            const _errs70 = errors;\n                                                            if (typeof data27 !== 'string') {\n                                                                validate21.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/supported/' + i3,\n                                                                        schemaPath: '#/definitions/AuthenticationVirtualMachineIdentifier/type',\n                                                                        keyword: 'type',\n                                                                        params: { type: 'string' },\n                                                                        message: 'must be string',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                            }\n                                                            if (!(data27 === 'BCH_2020_05' ||\n                                                                data27 === 'BCH_2021_05' ||\n                                                                data27 === 'BCH_2022_05' ||\n                                                                data27 === 'BCH_2023_05' ||\n                                                                data27 === 'BCH_SPEC' ||\n                                                                data27 === 'BSV_2020_02' ||\n                                                                data27 === 'BSV_SPEC' ||\n                                                                data27 === 'BTC_2017_08' ||\n                                                                data27 === 'BTC_SPEC' ||\n                                                                data27 === 'XEC_2020_05' ||\n                                                                data27 === 'XEC_SPEC')) {\n                                                                validate21.errors = [\n                                                                    {\n                                                                        instancePath: instancePath + '/supported/' + i3,\n                                                                        schemaPath: '#/definitions/AuthenticationVirtualMachineIdentifier/enum',\n                                                                        keyword: 'enum',\n                                                                        params: { allowedValues: schema42.enum },\n                                                                        message: 'must be equal to one of the allowed values',\n                                                                    },\n                                                                ];\n                                                                return false;\n                                                            }\n                                                            var valid14 = _errs70 === errors;\n                                                            if (!valid14) {\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                    else {\n                                                        validate21.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/supported',\n                                                                schemaPath: '#/properties/supported/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'array' },\n                                                                message: 'must be array',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                }\n                                                var valid0 = _errs68 === errors;\n                                            }\n                                            else {\n                                                var valid0 = true;\n                                            }\n                                            if (valid0) {\n                                                if (data.version !== undefined) {\n                                                    let data28 = data.version;\n                                                    const _errs73 = errors;\n                                                    if (!(typeof data28 == 'number' && isFinite(data28))) {\n                                                        validate21.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/version',\n                                                                schemaPath: '#/properties/version/type',\n                                                                keyword: 'type',\n                                                                params: { type: 'number' },\n                                                                message: 'must be number',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                    if (0 !== data28) {\n                                                        validate21.errors = [\n                                                            {\n                                                                instancePath: instancePath + '/version',\n                                                                schemaPath: '#/properties/version/const',\n                                                                keyword: 'const',\n                                                                params: { allowedValue: 0 },\n                                                                message: 'must be equal to constant',\n                                                            },\n                                                        ];\n                                                        return false;\n                                                    }\n                                                    var valid0 = _errs73 === errors;\n                                                }\n                                                else {\n                                                    var valid0 = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            validate21.errors = [\n                {\n                    instancePath,\n                    schemaPath: '#/type',\n                    keyword: 'type',\n                    params: { type: 'object' },\n                    message: 'must be object',\n                },\n            ];\n            return false;\n        }\n    }\n    validate21.errors = vErrors;\n    return errors === 0;\n}\nfunction validate20(data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) {\n    let vErrors = null;\n    let errors = 0;\n    if (!validate21(data, {\n        instancePath,\n        parentData,\n        parentDataProperty,\n        rootData,\n    })) {\n        vErrors =\n            vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);\n        errors = vErrors.length;\n    }\n    validate20.errors = vErrors;\n    return errors === 0;\n}\n//# sourceMappingURL=validate-authentication-template.js.map", "export * from './compiler-bch/compiler-bch.js';\nexport * from './compiler-defaults.js';\nexport * from './compiler-operation-helpers.js';\nexport * from './compiler-operations.js';\nexport * from './compiler-types.js';\nexport * from './compiler-utils.js';\nexport * from './scenarios.js';\nexport * from './p2pkh-utils.js';\nexport * from './standard/standard.js';\nexport * from './template-types.js';\n//# sourceMappingURL=compiler.js.map", "import { hash256, ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha256 as internalSha256, sha512 as internalSha512, } from '../../crypto/crypto.js';\nimport { createVirtualMachineBCH, generateBytecodeMap, generateSigningSerializationBCH, OpcodesBCHCHIPs, SigningSerializationFlag, SigningSerializationTypeBCH, } from '../../vm/vm.js';\nimport { attemptCompilerOperations, compilerOperationAttemptBytecodeResolution, compilerOperationHelperCompileScript, compilerOperationHelperDeriveHdKeyPrivate, compilerOperationHelperGenerateCoveredBytecode, compilerOperationRequires, } from '../compiler-operation-helpers.js';\nimport { compilerOperationsCommon } from '../compiler-operations.js';\nimport { authenticationTemplateToCompilerConfiguration, compilerConfigurationToCompilerBCH, createAuthenticationProgramEvaluationCommon, } from '../compiler-utils.js';\nexport var SigningSerializationAlgorithmIdentifier;\n(function (SigningSerializationAlgorithmIdentifier) {\n    /**\n     * A.K.A. `SIGHASH_ALL|SIGHASH_FORKID`\n     */\n    SigningSerializationAlgorithmIdentifier[\"allOutputs\"] = \"all_outputs\";\n    /**\n     * A.K.A. `SIGHASH_ALL|SIGHASH_UTXOS|SIGHASH_FORKID`\n     */\n    SigningSerializationAlgorithmIdentifier[\"allOutputsAllUtxos\"] = \"all_outputs_all_utxos\";\n    /**\n     * A.K.A. `SIGHASH_ALL|SIGHASH_FORKID|ANYONECANPAY`\n     */\n    SigningSerializationAlgorithmIdentifier[\"allOutputsSingleInput\"] = \"all_outputs_single_input\";\n    /**\n     * A.K.A. `SIGHASH_ALL|SIGHASH_UTXOS|SIGHASH_FORKID|ANYONECANPAY`\n     */\n    SigningSerializationAlgorithmIdentifier[\"allOutputsSingleInputInvalidAllUtxos\"] = \"all_outputs_single_input_INVALID_all_utxos\";\n    /**\n     * A.K.A. `SIGHASH_SINGLE|SIGHASH_FORKID`\n     */\n    SigningSerializationAlgorithmIdentifier[\"correspondingOutput\"] = \"corresponding_output\";\n    /**\n     * A.K.A. `SIGHASH_SINGLE|SIGHASH_UTXOS|SIGHASH_FORKID`\n     */\n    SigningSerializationAlgorithmIdentifier[\"correspondingOutputAllUtxos\"] = \"corresponding_output_all_utxos\";\n    /**\n     * A.K.A. `SIGHASH_SINGLE|SIGHASH_FORKID|ANYONECANPAY`\n     */\n    SigningSerializationAlgorithmIdentifier[\"correspondingOutputSingleInput\"] = \"corresponding_output_single_input\";\n    /**\n     * A.K.A. `SIGHASH_SINGLE|SIGHASH_UTXOS|SIGHASH_FORKID|ANYONECANPAY`\n     */\n    SigningSerializationAlgorithmIdentifier[\"correspondingOutputSingleInputInvalidAllUtxos\"] = \"corresponding_output_single_input_INVALID_all_utxos\";\n    /**\n     * An alias for `all_outputs_all_utxos`\n     * (A.K.A. `SIGHASH_ALL|SIGHASH_UTXOS|SIGHASH_FORKID`),\n     * the most secure signing serialization algorithm.\n     *\n     * Note that as of 2022, `all_outputs` (A.K.A. `SIGHASH_ALL|SIGHASH_FORKID`)\n     * is more commonly used and is therefore a better choice for privacy in\n     * common, existing contract types.\n     */\n    SigningSerializationAlgorithmIdentifier[\"default\"] = \"default\";\n    /**\n     * A.K.A `SIGHASH_NONE|SIGHASH_FORKID`\n     */\n    SigningSerializationAlgorithmIdentifier[\"noOutputs\"] = \"no_outputs\";\n    /**\n     * A.K.A `SIGHASH_NONE|SIGHASH_UTXOS|SIGHASH_FORKID`\n     */\n    SigningSerializationAlgorithmIdentifier[\"noOutputsAllUtxos\"] = \"no_outputs_all_utxos\";\n    /**\n     * A.K.A `SIGHASH_NONE|SIGHASH_FORKID|ANYONECANPAY`\n     */\n    SigningSerializationAlgorithmIdentifier[\"noOutputsSingleInput\"] = \"no_outputs_single_input\";\n    /**\n     * A.K.A. `SIGHASH_NONE|SIGHASH_UTXOS|SIGHASH_FORKID|ANYONECANPAY`\n     */\n    SigningSerializationAlgorithmIdentifier[\"noOutputsSingleInputInvalidAllUtxos\"] = \"no_outputs_single_input_INVALID_all_utxos\";\n})(SigningSerializationAlgorithmIdentifier || (SigningSerializationAlgorithmIdentifier = {}));\n// eslint-disable-next-line complexity\nconst getSigningSerializationType = (algorithmIdentifier, prefix = '') => {\n    switch (algorithmIdentifier) {\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.allOutputs}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.allOutputs);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.allOutputsAllUtxos}`:\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.default}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.allOutputsAllUtxos);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.allOutputsSingleInput}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.allOutputsSingleInput);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.allOutputsSingleInputInvalidAllUtxos}`:\n            return Uint8Array.of(\n            // eslint-disable-next-line no-bitwise\n            SigningSerializationFlag.allOutputs |\n                SigningSerializationFlag.singleInput |\n                SigningSerializationFlag.utxos |\n                SigningSerializationFlag.forkId);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.correspondingOutput}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.correspondingOutput);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.correspondingOutputAllUtxos}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.correspondingOutputAllUtxos);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.correspondingOutputSingleInput}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.correspondingOutputSingleInput);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.correspondingOutputSingleInputInvalidAllUtxos}`:\n            return Uint8Array.of(\n            // eslint-disable-next-line no-bitwise\n            SigningSerializationFlag.correspondingOutput |\n                SigningSerializationFlag.singleInput |\n                SigningSerializationFlag.utxos |\n                SigningSerializationFlag.forkId);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.noOutputs}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.noOutputs);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.noOutputsAllUtxos}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.noOutputsAllUtxos);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.noOutputsSingleInput}`:\n            return Uint8Array.of(SigningSerializationTypeBCH.noOutputsSingleInput);\n        case `${prefix}${SigningSerializationAlgorithmIdentifier.noOutputsSingleInputInvalidAllUtxos}`:\n            return Uint8Array.of(\n            // eslint-disable-next-line no-bitwise\n            SigningSerializationFlag.noOutputs |\n                SigningSerializationFlag.singleInput |\n                SigningSerializationFlag.utxos |\n                SigningSerializationFlag.forkId);\n        default:\n            return undefined;\n    }\n};\nexport const compilerOperationHelperComputeSignatureBCH = ({ coveredBytecode, identifier, compilationContext, operationName, privateKey, sha256, sign, }) => {\n    const [, , algorithm, unknown] = identifier.split('.');\n    if (unknown !== undefined) {\n        return {\n            error: `Unknown component in \"${identifier}\" - the fragment \"${unknown}\" is not recognized.`,\n            status: 'error',\n        };\n    }\n    if (algorithm === undefined) {\n        return {\n            error: `Invalid signature identifier. Signatures must be of the form: \"[variable_id].${operationName}.[signing_serialization_type]\".`,\n            status: 'error',\n        };\n    }\n    const signingSerializationType = getSigningSerializationType(algorithm);\n    if (signingSerializationType === undefined) {\n        return {\n            error: `Unknown signing serialization algorithm, \"${algorithm}\".`,\n            status: 'error',\n        };\n    }\n    const serialization = generateSigningSerializationBCH(compilationContext, { coveredBytecode, signingSerializationType }, sha256);\n    const digest = hash256(serialization, sha256);\n    const bitcoinEncodedSignature = Uint8Array.from([\n        ...sign(privateKey, digest),\n        ...signingSerializationType,\n    ]);\n    return {\n        bytecode: bitcoinEncodedSignature,\n        signature: { serialization },\n        status: 'success',\n    };\n};\nexport const compilerOperationHelperHdKeySignatureBCH = ({ operationName, secp256k1Method, }) => attemptCompilerOperations([compilerOperationAttemptBytecodeResolution], compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [\n        'entityOwnership',\n        'ripemd160',\n        'secp256k1',\n        'sha256',\n        'sha512',\n        'variables',\n        'sourceScriptIds',\n        'unlockingScripts',\n    ],\n    dataProperties: ['hdKeys', 'compilationContext'],\n    operation: (identifier, data, configuration) => {\n        const { hdKeys, compilationContext } = data;\n        const { secp256k1, sha256, sourceScriptIds, unlockingScripts } = configuration;\n        const derivationResult = compilerOperationHelperDeriveHdKeyPrivate({\n            configuration,\n            hdKeys,\n            identifier,\n        });\n        if (derivationResult.status === 'error')\n            return derivationResult;\n        const result = compilerOperationHelperGenerateCoveredBytecode({\n            configuration,\n            data,\n            identifier,\n            sourceScriptIds,\n            unlockingScripts,\n        });\n        if ('error' in result) {\n            return result;\n        }\n        return compilerOperationHelperComputeSignatureBCH({\n            compilationContext,\n            coveredBytecode: result,\n            identifier,\n            operationName,\n            privateKey: derivationResult.bytecode,\n            sha256,\n            sign: secp256k1[secp256k1Method],\n        });\n    },\n}));\nexport const compilerOperationHdKeyEcdsaSignatureBCH = compilerOperationHelperHdKeySignatureBCH({\n    operationName: 'signature',\n    secp256k1Method: 'signMessageHashDER',\n});\nexport const compilerOperationHdKeySchnorrSignatureBCH = compilerOperationHelperHdKeySignatureBCH({\n    operationName: 'schnorr_signature',\n    secp256k1Method: 'signMessageHashSchnorr',\n});\nexport const compilerOperationHelperKeySignatureBCH = ({ operationName, secp256k1Method, }) => attemptCompilerOperations([compilerOperationAttemptBytecodeResolution], compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [\n        'sha256',\n        'secp256k1',\n        'unlockingScripts',\n        'sourceScriptIds',\n    ],\n    dataProperties: ['keys', 'compilationContext'],\n    operation: (identifier, data, configuration) => {\n        const { keys, compilationContext } = data;\n        const { secp256k1, sha256, unlockingScripts, sourceScriptIds } = configuration;\n        const { privateKeys } = keys;\n        const [variableId] = identifier.split('.');\n        const privateKey = privateKeys === undefined ? undefined : privateKeys[variableId];\n        if (privateKey === undefined) {\n            return {\n                error: `Identifier \"${identifier}\" refers to a Key, but a private key for \"${variableId}\" (or an existing signature) was not provided in the compilation data.`,\n                recoverable: true,\n                status: 'error',\n            };\n        }\n        const result = compilerOperationHelperGenerateCoveredBytecode({\n            configuration,\n            data,\n            identifier,\n            sourceScriptIds,\n            unlockingScripts,\n        });\n        if ('error' in result) {\n            return result;\n        }\n        return compilerOperationHelperComputeSignatureBCH({\n            compilationContext,\n            coveredBytecode: result,\n            identifier,\n            operationName,\n            privateKey,\n            sha256,\n            sign: secp256k1[secp256k1Method],\n        });\n    },\n}));\nexport const compilerOperationKeyEcdsaSignatureBCH = compilerOperationHelperKeySignatureBCH({\n    operationName: 'signature',\n    secp256k1Method: 'signMessageHashDER',\n});\nexport const compilerOperationKeySchnorrSignatureBCH = compilerOperationHelperKeySignatureBCH({\n    operationName: 'schnorr_signature',\n    secp256k1Method: 'signMessageHashSchnorr',\n});\nexport const compilerOperationHelperComputeDataSignatureBCH = ({ data, configuration, identifier, operationName, privateKey, sha256, sign, }) => {\n    const [, , scriptId, unknown] = identifier.split('.');\n    if (unknown !== undefined) {\n        return {\n            error: `Unknown component in \"${identifier}\" - the fragment \"${unknown}\" is not recognized.`,\n            status: 'error',\n        };\n    }\n    if (scriptId === undefined) {\n        return {\n            error: `Invalid data signature identifier. Data signatures must be of the form: \"[variable_id].${operationName}.[target_script_id]\".`,\n            status: 'error',\n        };\n    }\n    const result = compilerOperationHelperCompileScript({\n        configuration,\n        data,\n        targetScriptId: scriptId,\n    });\n    if (result === false) {\n        return {\n            error: `Data signature tried to sign an unknown target script, \"${scriptId}\".`,\n            status: 'error',\n        };\n    }\n    if ('error' in result) {\n        return result;\n    }\n    const digest = sha256.hash(result);\n    return {\n        bytecode: sign(privateKey, digest),\n        signature: { digest, message: result },\n        status: 'success',\n    };\n};\nexport const compilerOperationHelperKeyDataSignatureBCH = ({ operationName, secp256k1Method, }) => attemptCompilerOperations([compilerOperationAttemptBytecodeResolution], compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sha256', 'secp256k1'],\n    dataProperties: ['keys'],\n    operation: (identifier, data, configuration) => {\n        const { keys } = data;\n        const { secp256k1, sha256 } = configuration;\n        const { privateKeys } = keys;\n        const [variableId] = identifier.split('.');\n        const privateKey = privateKeys === undefined ? undefined : privateKeys[variableId];\n        if (privateKey === undefined) {\n            return {\n                error: `Identifier \"${identifier}\" refers to a Key, but a private key for \"${variableId}\" (or an existing signature) was not provided in the compilation data.`,\n                recoverable: true,\n                status: 'error',\n            };\n        }\n        return compilerOperationHelperComputeDataSignatureBCH({\n            configuration,\n            data,\n            identifier,\n            operationName,\n            privateKey,\n            sha256,\n            sign: secp256k1[secp256k1Method],\n        });\n    },\n}));\nexport const compilerOperationKeyEcdsaDataSignatureBCH = compilerOperationHelperKeyDataSignatureBCH({\n    operationName: 'data_signature',\n    secp256k1Method: 'signMessageHashDER',\n});\nexport const compilerOperationKeySchnorrDataSignatureBCH = compilerOperationHelperKeyDataSignatureBCH({\n    operationName: 'schnorr_data_signature',\n    secp256k1Method: 'signMessageHashSchnorr',\n});\nexport const compilerOperationHelperHdKeyDataSignatureBCH = ({ operationName, secp256k1Method, }) => attemptCompilerOperations([compilerOperationAttemptBytecodeResolution], compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [\n        'entityOwnership',\n        'ripemd160',\n        'secp256k1',\n        'sha256',\n        'sha512',\n        'variables',\n    ],\n    dataProperties: ['hdKeys'],\n    operation: (identifier, data, configuration) => {\n        const { hdKeys } = data;\n        const { secp256k1, sha256 } = configuration;\n        const derivationResult = compilerOperationHelperDeriveHdKeyPrivate({\n            configuration,\n            hdKeys,\n            identifier,\n        });\n        if (derivationResult.status === 'error')\n            return derivationResult;\n        return compilerOperationHelperComputeDataSignatureBCH({\n            configuration,\n            data,\n            identifier,\n            operationName,\n            privateKey: derivationResult.bytecode,\n            sha256,\n            sign: secp256k1[secp256k1Method],\n        });\n    },\n}));\nexport const compilerOperationHdKeyEcdsaDataSignatureBCH = compilerOperationHelperHdKeyDataSignatureBCH({\n    operationName: 'data_signature',\n    secp256k1Method: 'signMessageHashDER',\n});\nexport const compilerOperationHdKeySchnorrDataSignatureBCH = compilerOperationHelperHdKeyDataSignatureBCH({\n    operationName: 'schnorr_data_signature',\n    secp256k1Method: 'signMessageHashSchnorr',\n});\nexport const compilerOperationSigningSerializationFullBCH = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sha256', 'sourceScriptIds', 'unlockingScripts'],\n    dataProperties: ['compilationContext'],\n    operation: (identifier, data, configuration) => {\n        const [, algorithmOrComponent, unknownPart] = identifier.split('.');\n        if (algorithmOrComponent === undefined) {\n            return {\n                error: `Invalid signing serialization operation. Include the desired component or algorithm, e.g. \"signing_serialization.version\".`,\n                status: 'error',\n            };\n        }\n        if (unknownPart !== undefined) {\n            return {\n                error: `Unknown component in \"${identifier}\" - the fragment \"${unknownPart}\" is not recognized.`,\n                status: 'error',\n            };\n        }\n        const signingSerializationType = getSigningSerializationType(algorithmOrComponent, 'full_');\n        if (signingSerializationType === undefined) {\n            return {\n                error: `Unknown signing serialization algorithm, \"${algorithmOrComponent}\".`,\n                status: 'error',\n            };\n        }\n        const { sha256, sourceScriptIds, unlockingScripts } = configuration;\n        const result = compilerOperationHelperGenerateCoveredBytecode({\n            configuration,\n            data,\n            identifier,\n            sourceScriptIds,\n            unlockingScripts,\n        });\n        if ('error' in result) {\n            return result;\n        }\n        const { compilationContext } = data;\n        return {\n            bytecode: generateSigningSerializationBCH(compilationContext, {\n                coveredBytecode: result,\n                signingSerializationType,\n            }, sha256),\n            status: 'success',\n        };\n    },\n});\n/* eslint-disable camelcase, @typescript-eslint/naming-convention */\nexport const compilerOperationsBCH = {\n    ...compilerOperationsCommon,\n    hdKey: {\n        data_signature: compilerOperationHdKeyEcdsaDataSignatureBCH,\n        public_key: compilerOperationsCommon.hdKey.public_key,\n        schnorr_data_signature: compilerOperationHdKeySchnorrDataSignatureBCH,\n        schnorr_signature: compilerOperationHdKeySchnorrSignatureBCH,\n        signature: compilerOperationHdKeyEcdsaSignatureBCH,\n    },\n    key: {\n        data_signature: compilerOperationKeyEcdsaDataSignatureBCH,\n        public_key: compilerOperationsCommon.key.public_key,\n        schnorr_data_signature: compilerOperationKeySchnorrDataSignatureBCH,\n        schnorr_signature: compilerOperationKeySchnorrSignatureBCH,\n        signature: compilerOperationKeyEcdsaSignatureBCH,\n    },\n    signingSerialization: {\n        ...compilerOperationsCommon.signingSerialization,\n        full_all_outputs: compilerOperationSigningSerializationFullBCH,\n        full_all_outputs_all_utxos: compilerOperationSigningSerializationFullBCH,\n        full_all_outputs_single_input: compilerOperationSigningSerializationFullBCH,\n        full_all_outputs_single_input_INVALID_all_utxos: compilerOperationSigningSerializationFullBCH,\n        full_corresponding_output: compilerOperationSigningSerializationFullBCH,\n        full_corresponding_output_all_utxos: compilerOperationSigningSerializationFullBCH,\n        full_corresponding_output_single_input: compilerOperationSigningSerializationFullBCH,\n        full_corresponding_output_single_input_INVALID_all_utxos: compilerOperationSigningSerializationFullBCH,\n        full_default: compilerOperationSigningSerializationFullBCH,\n        full_no_outputs: compilerOperationSigningSerializationFullBCH,\n        full_no_outputs_all_utxos: compilerOperationSigningSerializationFullBCH,\n        full_no_outputs_single_input: compilerOperationSigningSerializationFullBCH,\n        full_no_outputs_single_input_INVALID_all_utxos: compilerOperationSigningSerializationFullBCH,\n    },\n};\n/**\n * Create a compiler using the default BCH compiler configuration.\n *\n * Internally instantiates the necessary crypto and VM implementations – use\n * {@link compilerConfigurationToCompilerBCH} for more control.\n *\n * @param configuration - a compiler configuration from which properties\n * will be used to override properties of the default BCH configuration – must\n * include the `scripts` property\n */\nexport const createCompilerBCH = (configuration) => compilerConfigurationToCompilerBCH({\n    ...{\n        createAuthenticationProgram: createAuthenticationProgramEvaluationCommon,\n        opcodes: generateBytecodeMap(OpcodesBCHCHIPs),\n        operations: compilerOperationsBCH,\n        ripemd160: internalRipemd160,\n        secp256k1: internalSecp256k1,\n        sha256: internalSha256,\n        sha512: internalSha512,\n        vm: configuration.vm === undefined\n            ? createVirtualMachineBCH()\n            : configuration.vm,\n    },\n    ...configuration,\n});\nexport const createCompiler = createCompilerBCH;\n/**\n * Create a BCH `Compiler` from an `AuthenticationTemplate` and an optional set\n * of overrides.\n * @param template - the `AuthenticationTemplate` from which to create the BCH\n * compiler\n * @param overrides - a compiler configuration from which properties will be\n * used to override properties of the default BCH configuration\n */\nexport const authenticationTemplateToCompilerBCH = (template, overrides) => createCompilerBCH({\n    ...overrides,\n    ...authenticationTemplateToCompilerConfiguration(template),\n});\n//# sourceMappingURL=compiler-bch.js.map", "import { decodeHdPrivateKey, deriveHdPath } from '../key/key.js';\nimport { resolveScriptIdentifier } from '../language/language.js';\nimport { CompilerDefaults } from './compiler-defaults.js';\n/**\n * Attempt a series of compiler operations, skipping to the next operation if\n * the current operation returns a {@link CompilerOperationSkip} (indicating it\n * failed and can be skipped). The `finalOperation` may not be skipped, and must\n * either return {@link CompilerOperationSuccess} or\n * {@link CompilerOperationError}.\n *\n * @param operations - an array of skippable operations to try\n * @param finalOperation - a final, un-skippable operation\n */\nexport const attemptCompilerOperations = (operations, finalOperation) => (identifier, data, configuration) => {\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const operation of operations) {\n        const result = operation(identifier, data, configuration);\n        if (result.status !== 'skip')\n            return result;\n    }\n    return finalOperation(identifier, data, configuration);\n};\n/**\n * Modify a compiler operation to verify that certain properties exist in the\n * {@link CompilationData} and {@link CompilerConfiguration} before executing\n * the provided operation. If the properties don't exist, an error message\n * is returned.\n *\n * This is useful for eliminating repetitive existence checks.\n */\nexport const compilerOperationRequires = ({ \n/**\n * If `true`, the accepted operation may return `false`, and any missing\n * properties will cause the returned operation to return `false` (meaning\n * the operation should be skipped)\n */\ncanBeSkipped, \n/**\n * An array of the top-level properties required in the\n * {@link CompilationData}.\n */\ndataProperties, \n/**\n * An array of the top-level properties required in the\n * {@link CompilerConfiguration}\n */\nconfigurationProperties, \n/**\n * The operation to run if all required properties exist\n */\noperation, }) => \n// eslint-disable-next-line complexity\n(identifier, data, configuration) => {\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const property of configurationProperties) {\n        if (configuration[property] === undefined)\n            return (canBeSkipped\n                ? { status: 'skip' }\n                : {\n                    error: `Cannot resolve \"${identifier}\" - the \"${property}\" property was not provided in the compiler configuration.`,\n                    status: 'error',\n                });\n    }\n    // eslint-disable-next-line functional/no-loop-statement\n    for (const property of dataProperties) {\n        if (data[property] ===\n            undefined)\n            return (canBeSkipped\n                ? { status: 'skip' }\n                : {\n                    error: `Cannot resolve \"${identifier}\" - the \"${property}\" property was not provided in the compilation data.`,\n                    status: 'error',\n                });\n    }\n    return operation(identifier, data, configuration);\n};\nexport const compilerOperationAttemptBytecodeResolution = compilerOperationRequires({\n    canBeSkipped: true,\n    configurationProperties: [],\n    dataProperties: ['bytecode'],\n    operation: (identifier, data) => {\n        const bytecode = data.bytecode[identifier];\n        if (bytecode !== undefined) {\n            return { bytecode, status: 'success' };\n        }\n        return { status: 'skip' };\n    },\n});\n// eslint-disable-next-line complexity\nexport const compilerOperationHelperDeriveHdPrivateNode = ({ addressIndex, entityId, entityHdPrivateKey, configuration, hdKey, identifier, }) => {\n    const addressOffset = hdKey.addressOffset ?? CompilerDefaults.hdKeyAddressOffset;\n    const privateDerivationPath = hdKey.privateDerivationPath ?? CompilerDefaults.hdKeyPrivateDerivationPath;\n    const i = addressIndex + addressOffset;\n    const validPrivatePathWithIndex = /^m(?:\\/(?:[0-9]+|i)'?)*$/u;\n    if (!validPrivatePathWithIndex.test(privateDerivationPath)) {\n        return {\n            error: `Could not generate ${identifier} - the path \"${privateDerivationPath}\" is not a valid \"privateDerivationPath\".`,\n            status: 'error',\n        };\n    }\n    const instancePath = privateDerivationPath.replace('i', i.toString());\n    const masterContents = decodeHdPrivateKey(entityHdPrivateKey, configuration);\n    if (typeof masterContents === 'string') {\n        return {\n            error: `Could not generate ${identifier} - the HD private key provided for ${entityId} could not be decoded: ${masterContents}`,\n            status: 'error',\n        };\n    }\n    const instanceNode = deriveHdPath(masterContents.node, instancePath, configuration);\n    if (typeof instanceNode === 'string') {\n        return {\n            error: `Could not generate ${identifier} - the path \"${instancePath}\" could not be derived for entity \"${entityId}\": ${instanceNode}`,\n            status: 'error',\n        };\n    }\n    return {\n        bytecode: instanceNode.privateKey,\n        status: 'success',\n    };\n};\nexport const compilerOperationHelperUnknownEntity = (identifier, variableId) => ({\n    error: `Identifier \"${identifier}\" refers to an HdKey, but the \"entityOwnership\" for \"${variableId}\" is not available in this compiler configuration.`,\n    status: 'error',\n});\nexport const compilerOperationHelperAddressIndex = (identifier) => ({\n    error: `Identifier \"${identifier}\" refers to an HdKey, but \"hdKeys.addressIndex\" was not provided in the compilation data.`,\n    status: 'error',\n});\nexport const compilerOperationHelperDeriveHdKeyPrivate = ({ configuration, hdKeys, identifier, }) => {\n    const { addressIndex, hdPrivateKeys } = hdKeys;\n    const [variableId] = identifier.split('.');\n    const entityId = configuration.entityOwnership[variableId];\n    if (entityId === undefined) {\n        return compilerOperationHelperUnknownEntity(identifier, variableId);\n    }\n    if (addressIndex === undefined) {\n        return compilerOperationHelperAddressIndex(identifier);\n    }\n    const entityHdPrivateKey = hdPrivateKeys === undefined ? undefined : hdPrivateKeys[entityId];\n    if (entityHdPrivateKey === undefined) {\n        return {\n            error: `Identifier \"${identifier}\" refers to an HdKey owned by \"${entityId}\", but an HD private key for this entity (or an existing signature) was not provided in the compilation data.`,\n            recoverable: true,\n            status: 'error',\n        };\n    }\n    /**\n     * Guaranteed to be an `HdKey` if this method is reached in the compiler.\n     */\n    const hdKey = configuration.variables[variableId];\n    return compilerOperationHelperDeriveHdPrivateNode({\n        addressIndex,\n        configuration,\n        entityHdPrivateKey,\n        entityId,\n        hdKey,\n        identifier,\n    });\n};\n/**\n * Returns `false` if the target script ID doesn't exist in the compiler\n * configuration (allows for the caller to generate the error message).\n *\n * If the compilation produced errors, returns a\n * {@link CompilerOperationErrorFatal}.\n *\n * If the compilation was successful, returns the compiled bytecode as a\n * `Uint8Array`.\n */\nexport const compilerOperationHelperCompileScript = ({ targetScriptId, data, configuration, }) => {\n    const signingTarget = configuration.scripts[targetScriptId];\n    const compiledTarget = resolveScriptIdentifier({\n        configuration,\n        data,\n        identifier: targetScriptId,\n    });\n    if (signingTarget === undefined || compiledTarget === false) {\n        return false;\n    }\n    if (typeof compiledTarget === 'string') {\n        return {\n            error: compiledTarget,\n            status: 'error',\n        };\n    }\n    return compiledTarget.bytecode;\n};\n/**\n * Returns either the properly generated `coveredBytecode` or a\n * {@link CompilerOperationErrorFatal}.\n */\nexport const compilerOperationHelperGenerateCoveredBytecode = ({ data, configuration, identifier, sourceScriptIds, unlockingScripts, }) => {\n    const currentScriptId = sourceScriptIds[sourceScriptIds.length - 1];\n    if (currentScriptId === undefined) {\n        return {\n            error: `Identifier \"${identifier}\" requires a signing serialization, but \"coveredBytecode\" cannot be determined because the compiler configuration's \"sourceScriptIds\" is empty.`,\n            status: 'error',\n        };\n    }\n    const targetLockingScriptId = unlockingScripts[currentScriptId];\n    if (targetLockingScriptId === undefined) {\n        return {\n            error: `Identifier \"${identifier}\" requires a signing serialization, but \"coveredBytecode\" cannot be determined because \"${currentScriptId}\" is not present in the compiler configuration's \"unlockingScripts\".`,\n            status: 'error',\n        };\n    }\n    const result = compilerOperationHelperCompileScript({\n        configuration,\n        data,\n        targetScriptId: targetLockingScriptId,\n    });\n    if (result === false) {\n        return {\n            error: `Identifier \"${identifier}\" requires a signing serialization that covers an unknown locking script, \"${targetLockingScriptId}\".`,\n            status: 'error',\n        };\n    }\n    return result;\n};\n//# sourceMappingURL=compiler-operation-helpers.js.map", "/* eslint-disable @typescript-eslint/no-duplicate-enum-values */\nexport var CompilerDefaults;\n(function (CompilerDefaults) {\n    /**\n     * The `addressIndex` used by the default scenario `data`.\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioAddressIndex\"] = 0] = \"defaultScenarioAddressIndex\";\n    /**\n     * The value used for `[\"slot\"]` and `[\"copy\"]` locking or unlocking bytecode\n     * when generating a scenario and no `unlockingScriptId` is provided.\n     */\n    CompilerDefaults[\"defaultScenarioBytecode\"] = \"\";\n    /**\n     *\n     * The value of `currentBlockHeight` in the default authentication template\n     * scenario. This is the height of the second mined block after the genesis\n     * block: `000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd`.\n     *\n     * This default value was chosen to be low enough to simplify the debugging of\n     * block height offsets while remaining differentiated from `0` and `1`, which\n     * are used both as boolean return values and for control flow.\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioCurrentBlockHeight\"] = 2] = \"defaultScenarioCurrentBlockHeight\";\n    /**\n     * The value of `currentBlockTime` in the default authentication template\n     * scenario. This is the Median Time-Past block time (BIP113) of block `2`\n     * (the block used in\n     * {@link CompilerDefaults.defaultScenarioCurrentBlockHeight}).\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioCurrentBlockTime\"] = 1231469665] = \"defaultScenarioCurrentBlockTime\";\n    /**\n     * The default `outpointTransactionHash` of inputs in scenarios.\n     */\n    CompilerDefaults[\"defaultScenarioInputOutpointTransactionHash\"] = \"0000000000000000000000000000000000000000000000000000000000000001\";\n    /**\n     * The default `category` of tokens in scenarios.\n     */\n    CompilerDefaults[\"defaultScenarioOutputTokenCategory\"] = \"0000000000000000000000000000000000000000000000000000000000000002\";\n    /**\n     * The default `sequenceNumber` of inputs in scenarios.\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioInputSequenceNumber\"] = 0] = \"defaultScenarioInputSequenceNumber\";\n    /**\n     * The default `valueSatoshis` of outputs in scenarios.\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioOutputValueSatoshis\"] = 0] = \"defaultScenarioOutputValueSatoshis\";\n    /**\n     * The value of `transaction.locktime` in the default authentication template\n     * scenario.\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioTransactionLocktime\"] = 0] = \"defaultScenarioTransactionLocktime\";\n    /**\n     * The value of `transaction.version` in the default authentication template\n     * scenario. Transaction version `2` enables `OP_CHECKSEQUENCEVERIFY` as\n     * described in BIP68, BIP112, and BIP113.\n     */\n    CompilerDefaults[CompilerDefaults[\"defaultScenarioTransactionVersion\"] = 2] = \"defaultScenarioTransactionVersion\";\n    /**\n     *s\n     * If unset, each `HdKey` uses this `addressOffset`.\n     */\n    CompilerDefaults[CompilerDefaults[\"hdKeyAddressOffset\"] = 0] = \"hdKeyAddressOffset\";\n    /**\n     * If unset, each `HdKey` uses this `hdPublicKeyDerivationPath`.\n     */\n    CompilerDefaults[\"hdKeyHdPublicKeyDerivationPath\"] = \"m\";\n    /**\n     * If unset, each `HdKey` uses this `privateDerivationPath`.\n     */\n    CompilerDefaults[\"hdKeyPrivateDerivationPath\"] = \"m/i\";\n    /**\n     * The prefix used to refer to other scenario bytecode scripts from within a\n     * bytecode script. See {@link AuthenticationTemplateScenarioData.bytecode}\n     * for details.\n     */\n    CompilerDefaults[\"scenarioBytecodeScriptPrefix\"] = \"_scenario.\";\n})(CompilerDefaults || (CompilerDefaults = {}));\n//# sourceMappingURL=compiler-defaults.js.map", "import { bigIntToCompactSize, numberToBinUint32LE, valueSatoshisToBin, } from '../format/format.js';\nimport { decodeHdPublicKey, deriveHdPath } from '../key/key.js';\nimport { encodeTransactionInputSequenceNumbersForSigning, encodeTransactionOutpoints, encodeTransactionOutputsForSigning, } from '../message/message.js';\nimport { bigIntToVmNumber, generateSigningSerializationComponentsBCH, } from '../vm/vm.js';\nimport { CompilerDefaults } from './compiler-defaults.js';\nimport { attemptCompilerOperations, compilerOperationAttemptBytecodeResolution, compilerOperationHelperAddressIndex, compilerOperationHelperDeriveHdPrivateNode, compilerOperationHelperGenerateCoveredBytecode, compilerOperationHelperUnknownEntity, compilerOperationRequires, } from './compiler-operation-helpers.js';\nexport const compilerOperationAddressData = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['bytecode'],\n    operation: (identifier, data) => {\n        const bytecode = data.bytecode[identifier];\n        if (bytecode !== undefined) {\n            return { bytecode, status: 'success' };\n        }\n        return {\n            error: `Identifier \"${identifier}\" refers to an AddressData, but \"${identifier}\" was not provided in the CompilationData \"bytecode\".`,\n            recoverable: true,\n            status: 'error',\n        };\n    },\n});\nexport const compilerOperationWalletData = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['bytecode'],\n    operation: (identifier, data) => {\n        const bytecode = data.bytecode[identifier];\n        if (bytecode !== undefined) {\n            return { bytecode, status: 'success' };\n        }\n        return {\n            error: `Identifier \"${identifier}\" refers to a WalletData, but \"${identifier}\" was not provided in the CompilationData \"bytecode\".`,\n            recoverable: true,\n            status: 'error',\n        };\n    },\n});\nexport const compilerOperationCurrentBlockTime = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['currentBlockTime'],\n    operation: (_, data) => ({\n        bytecode: numberToBinUint32LE(data.currentBlockTime),\n        status: 'success',\n    }),\n});\nexport const compilerOperationCurrentBlockHeight = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['currentBlockHeight'],\n    operation: (_, data) => ({\n        bytecode: bigIntToVmNumber(BigInt(data.currentBlockHeight)),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationCorrespondingOutput = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => {\n        const { correspondingOutput } = generateSigningSerializationComponentsBCH(data.compilationContext);\n        return correspondingOutput === undefined\n            ? { bytecode: Uint8Array.of(), status: 'success' }\n            : {\n                bytecode: correspondingOutput,\n                status: 'success',\n            };\n    },\n});\nexport const compilerOperationSigningSerializationCorrespondingOutputHash = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sha256'],\n    dataProperties: ['compilationContext'],\n    operation: (_, data, configuration) => {\n        const { correspondingOutput } = generateSigningSerializationComponentsBCH(data.compilationContext);\n        return correspondingOutput === undefined\n            ? { bytecode: Uint8Array.of(), status: 'success' }\n            : {\n                bytecode: configuration.sha256.hash(configuration.sha256.hash(correspondingOutput)),\n                status: 'success',\n            };\n    },\n});\nconst compilerOperationHelperSigningSerializationCoveredBytecode = (returnLength) => compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sourceScriptIds', 'unlockingScripts'],\n    dataProperties: ['compilationContext'],\n    operation: (identifier, data, configuration) => {\n        const { unlockingScripts, sourceScriptIds } = configuration;\n        const result = compilerOperationHelperGenerateCoveredBytecode({\n            configuration,\n            data,\n            identifier,\n            sourceScriptIds,\n            unlockingScripts,\n        });\n        if ('error' in result) {\n            return result;\n        }\n        return {\n            bytecode: returnLength\n                ? bigIntToCompactSize(BigInt(result.length))\n                : result,\n            status: 'success',\n        };\n    },\n});\nexport const compilerOperationSigningSerializationCoveredBytecode = compilerOperationHelperSigningSerializationCoveredBytecode(false);\nexport const compilerOperationSigningSerializationCoveredBytecodeLength = compilerOperationHelperSigningSerializationCoveredBytecode(true);\nexport const compilerOperationSigningSerializationLocktime = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: numberToBinUint32LE(data.compilationContext.transaction.locktime),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationOutpointIndex = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: numberToBinUint32LE(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        data.compilationContext.transaction.inputs[data.compilationContext.inputIndex].outpointIndex),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationOutpointTransactionHash = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        data.compilationContext.transaction.inputs[data.compilationContext.inputIndex].outpointTransactionHash,\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationOutputValue = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: valueSatoshisToBin(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        data.compilationContext.sourceOutputs[data.compilationContext.inputIndex].valueSatoshis),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationSequenceNumber = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: numberToBinUint32LE(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        data.compilationContext.transaction.inputs[data.compilationContext.inputIndex].sequenceNumber),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationTransactionOutpoints = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: encodeTransactionOutpoints(data.compilationContext.transaction.inputs),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationTransactionOutpointsHash = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sha256'],\n    dataProperties: ['compilationContext'],\n    operation: (_, data, configuration) => ({\n        bytecode: configuration.sha256.hash(configuration.sha256.hash(encodeTransactionOutpoints(data.compilationContext.transaction.inputs))),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationTransactionOutputs = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: encodeTransactionOutputsForSigning(data.compilationContext.transaction.outputs),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationTransactionOutputsHash = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sha256'],\n    dataProperties: ['compilationContext'],\n    operation: (_, data, configuration) => ({\n        bytecode: configuration.sha256.hash(configuration.sha256.hash(encodeTransactionOutputsForSigning(data.compilationContext.transaction.outputs))),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationTransactionSequenceNumbers = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: encodeTransactionInputSequenceNumbersForSigning(data.compilationContext.transaction.inputs),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationTransactionSequenceNumbersHash = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['sha256'],\n    dataProperties: ['compilationContext'],\n    operation: (_, data, configuration) => ({\n        bytecode: configuration.sha256.hash(configuration.sha256.hash(encodeTransactionInputSequenceNumbersForSigning(data.compilationContext.transaction.inputs))),\n        status: 'success',\n    }),\n});\nexport const compilerOperationSigningSerializationVersion = compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [],\n    dataProperties: ['compilationContext'],\n    operation: (_, data) => ({\n        bytecode: numberToBinUint32LE(data.compilationContext.transaction.version),\n        status: 'success',\n    }),\n});\nexport const compilerOperationKeyPublicKeyCommon = attemptCompilerOperations([compilerOperationAttemptBytecodeResolution], compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: ['secp256k1'],\n    dataProperties: ['keys'],\n    operation: (identifier, data, configuration) => {\n        const { keys } = data;\n        const { secp256k1 } = configuration;\n        const { privateKeys } = keys;\n        const [variableId] = identifier.split('.');\n        if (privateKeys?.[variableId] !== undefined) {\n            return {\n                bytecode: secp256k1.derivePublicKeyCompressed(\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                privateKeys[variableId]),\n                status: 'success',\n            };\n        }\n        return {\n            error: `Identifier \"${identifier}\" refers to a public key, but no public or private keys for \"${variableId}\" were provided in the compilation data.`,\n            recoverable: true,\n            status: 'error',\n        };\n    },\n}));\nexport const compilerOperationHdKeyPublicKeyCommon = attemptCompilerOperations([compilerOperationAttemptBytecodeResolution], compilerOperationRequires({\n    canBeSkipped: false,\n    configurationProperties: [\n        'entityOwnership',\n        'ripemd160',\n        'secp256k1',\n        'sha256',\n        'sha512',\n        'variables',\n    ],\n    dataProperties: ['hdKeys'],\n    operation: \n    // eslint-disable-next-line complexity\n    (identifier, data, configuration) => {\n        const { hdKeys } = data;\n        const { hdPrivateKeys, addressIndex, hdPublicKeys } = hdKeys;\n        const [variableId] = identifier.split('.');\n        const entityId = configuration.entityOwnership[variableId];\n        if (entityId === undefined) {\n            return compilerOperationHelperUnknownEntity(identifier, variableId);\n        }\n        if (addressIndex === undefined) {\n            return compilerOperationHelperAddressIndex(identifier);\n        }\n        const entityHdPrivateKey = hdPrivateKeys === undefined ? undefined : hdPrivateKeys[entityId];\n        /**\n         * Guaranteed to be an `HdKey` if this method is reached in the compiler.\n         */\n        const hdKey = configuration.variables[variableId];\n        if (entityHdPrivateKey !== undefined) {\n            const privateResult = compilerOperationHelperDeriveHdPrivateNode({\n                addressIndex,\n                configuration,\n                entityHdPrivateKey,\n                entityId,\n                hdKey,\n                identifier,\n            });\n            if (privateResult.status === 'error')\n                return privateResult;\n            return {\n                bytecode: configuration.secp256k1.derivePublicKeyCompressed(privateResult.bytecode),\n                status: 'success',\n            };\n        }\n        const entityHdPublicKey = hdPublicKeys === undefined ? undefined : hdPublicKeys[entityId];\n        if (entityHdPublicKey === undefined) {\n            return {\n                error: `Identifier \"${identifier}\" refers to an HdKey owned by \"${entityId}\", but an HD private key or HD public key for this entity was not provided in the compilation data.`,\n                recoverable: true,\n                status: 'error',\n            };\n        }\n        const addressOffset = hdKey.addressOffset ?? CompilerDefaults.hdKeyAddressOffset;\n        const privateDerivationPath = hdKey.privateDerivationPath ??\n            CompilerDefaults.hdKeyPrivateDerivationPath;\n        const publicDerivationPath = hdKey.publicDerivationPath ?? privateDerivationPath.replace('m', 'M');\n        const validPublicPathWithIndex = /^M(?:\\/(?:[0-9]+|i))*$/u;\n        if (!validPublicPathWithIndex.test(publicDerivationPath)) {\n            return {\n                error: `Could not generate ${identifier} - the path \"${publicDerivationPath}\" is not a valid \"publicDerivationPath\".`,\n                status: 'error',\n            };\n        }\n        const i = addressIndex + addressOffset;\n        const instancePath = publicDerivationPath.replace('i', i.toString());\n        const masterContents = decodeHdPublicKey(entityHdPublicKey, configuration);\n        if (typeof masterContents === 'string') {\n            return {\n                error: `Could not generate \"${identifier}\" - the HD public key provided for \"${entityId}\" could not be decoded: ${masterContents}`,\n                status: 'error',\n            };\n        }\n        const instanceNode = deriveHdPath(masterContents.node, instancePath, configuration);\n        if (typeof instanceNode === 'string') {\n            return {\n                error: `Could not generate \"${identifier}\" - the path \"${instancePath}\" could not be derived for entity \"${entityId}\": ${instanceNode}`,\n                status: 'error',\n            };\n        }\n        return { bytecode: instanceNode.publicKey, status: 'success' };\n    },\n}));\n/* eslint-disable camelcase, @typescript-eslint/naming-convention */\nexport const compilerOperationsCommon = {\n    addressData: compilerOperationAddressData,\n    currentBlockHeight: compilerOperationCurrentBlockHeight,\n    currentBlockTime: compilerOperationCurrentBlockTime,\n    hdKey: {\n        public_key: compilerOperationHdKeyPublicKeyCommon,\n    },\n    key: {\n        public_key: compilerOperationKeyPublicKeyCommon,\n    },\n    signingSerialization: {\n        corresponding_output: compilerOperationSigningSerializationCorrespondingOutput,\n        corresponding_output_hash: compilerOperationSigningSerializationCorrespondingOutputHash,\n        covered_bytecode: compilerOperationSigningSerializationCoveredBytecode,\n        covered_bytecode_length: compilerOperationSigningSerializationCoveredBytecodeLength,\n        locktime: compilerOperationSigningSerializationLocktime,\n        outpoint_index: compilerOperationSigningSerializationOutpointIndex,\n        outpoint_transaction_hash: compilerOperationSigningSerializationOutpointTransactionHash,\n        output_value: compilerOperationSigningSerializationOutputValue,\n        sequence_number: compilerOperationSigningSerializationSequenceNumber,\n        transaction_outpoints: compilerOperationSigningSerializationTransactionOutpoints,\n        transaction_outpoints_hash: compilerOperationSigningSerializationTransactionOutpointsHash,\n        transaction_outputs: compilerOperationSigningSerializationTransactionOutputs,\n        transaction_outputs_hash: compilerOperationSigningSerializationTransactionOutputsHash,\n        transaction_sequence_numbers: compilerOperationSigningSerializationTransactionSequenceNumbers,\n        transaction_sequence_numbers_hash: compilerOperationSigningSerializationTransactionSequenceNumbersHash,\n        version: compilerOperationSigningSerializationVersion,\n    },\n    walletData: compilerOperationWalletData,\n};\n/* eslint-enable camelcase, @typescript-eslint/naming-convention */\n//# sourceMappingURL=compiler-operations.js.map", "import { ripemd160 as internalRipemd160, secp256k1 as internalSecp256k1, sha256 as internalSha256, sha512 as internalSha512, } from '../crypto/crypto.js';\nimport { compileScript } from '../language/language.js';\nimport { generateBytecodeMap, Opcodes, OpcodesBCH, OpcodesBTC, } from '../vm/vm.js';\nimport { compilerOperationsCommon } from './compiler-operations.js';\nimport { generateScenarioBCH } from './scenarios.js';\n/**\n * Create a {@link Compiler.generateBytecode} method given a compiler\n * configuration.\n */\nexport const createCompilerGenerateBytecodeFunction = (compilerConfiguration) => ({ data, debug, scriptId, }) => {\n    const result = compileScript(scriptId, data, compilerConfiguration);\n    return (debug === true\n        ? result\n        : result.success\n            ? { bytecode: result.bytecode, success: true }\n            : {\n                errorType: result.errorType,\n                errors: result.errors,\n                success: false,\n            });\n};\n/**\n * Create a {@link Compiler} from the provided compiler configuration. This\n * method requires a full {@link CompilerConfiguration} and does not provide any\n * crypto or VM implementations.\n *\n * @param configuration - the configuration from which to create the compiler\n */\nexport const compilerConfigurationToCompilerBCH = (configuration) => {\n    const generateBytecode = createCompilerGenerateBytecodeFunction(configuration);\n    return {\n        configuration,\n        generateBytecode,\n        generateScenario: ({ lockingScriptId, unlockingScriptId, scenarioId, debug, }) => generateScenarioBCH({\n            configuration,\n            generateBytecode,\n            lockingScriptId,\n            scenarioId,\n            unlockingScriptId,\n        }, debug),\n    };\n};\nexport const compilerConfigurationToCompiler = compilerConfigurationToCompilerBCH;\nconst nullHashLength = 32;\n/**\n * A common {@link createAuthenticationProgram} implementation for\n * most compilers.\n *\n * Accepts the compiled contents of an evaluation and produces a\n * {@link AuthenticationProgramCommon} that can be evaluated to produce the\n * resulting program state.\n *\n * The precise shape of the authentication program produced by this method is\n * critical to the determinism of CashAssembly evaluations for the compiler in\n * which it is used, it therefore must be standardized between compiler\n * implementations.\n *\n * @param evaluationBytecode - the compiled bytecode to incorporate in the\n * created authentication program\n */\nexport const createAuthenticationProgramEvaluationCommon = (evaluationBytecode) => ({\n    inputIndex: 0,\n    sourceOutputs: [\n        {\n            lockingBytecode: evaluationBytecode,\n            valueSatoshis: 0n,\n        },\n    ],\n    transaction: {\n        inputs: [\n            {\n                outpointIndex: 0,\n                outpointTransactionHash: new Uint8Array(nullHashLength),\n                sequenceNumber: 0,\n                unlockingBytecode: Uint8Array.of(),\n            },\n        ],\n        locktime: 0,\n        outputs: [\n            {\n                lockingBytecode: Uint8Array.of(),\n                valueSatoshis: 0n,\n            },\n        ],\n        version: 0,\n    },\n});\n/**\n * Create a compiler using the default common compiler configuration. Because\n * this compiler has no access to a VM, it cannot compile evaluations.\n *\n * @param scriptsAndOverrides - a compiler configuration from which properties\n * will be used to override properties of the default common compiler\n * configuration – must include the `scripts` property\n */\nexport const createCompilerCommon = (scriptsAndOverrides) => compilerConfigurationToCompilerBCH({\n    ...{\n        createAuthenticationProgram: createAuthenticationProgramEvaluationCommon,\n        opcodes: generateBytecodeMap(Opcodes),\n        operations: compilerOperationsCommon,\n        ripemd160: internalRipemd160,\n        secp256k1: internalSecp256k1,\n        sha256: internalSha256,\n        sha512: internalSha512,\n    },\n    ...scriptsAndOverrides,\n});\n/**\n * Perform a simplified compilation on a CashAssembly script containing only hex\n * literals, bigint literals, UTF8 literals, and push statements. Scripts may\n * not contain variables/operations, evaluations, or opcode identifiers (use hex\n * literals instead).\n *\n * This is useful for accepting complex user input in advanced interfaces,\n * especially for `AddressData` and `WalletData`.\n *\n * Returns the compiled bytecode as a `Uint8Array`, or throws an error message.\n *\n * @param script - a simple CashAssembly script containing no variables or\n * evaluations\n */\nexport const compileCashAssembly = (script) => {\n    const result = createCompilerCommon({\n        opcodes: {},\n        operations: {},\n        scripts: { script },\n    }).generateBytecode({ data: {}, scriptId: 'script' });\n    if (result.success) {\n        return result.bytecode;\n    }\n    return `CashAssembly compilation error:${result.errors.reduce((all, { error, range }) => `${all} [${range.startLineNumber}, ${range.startColumn}]: ${error}`, '')}`;\n};\n/**\n * Re-assemble a string of disassembled bytecode\n * (see {@link disassembleBytecode}).\n *\n * @param opcodes - a mapping of opcodes to their respective Uint8Array\n * representation\n * @param disassembledBytecode - the disassembled bytecode to re-assemble\n */\nexport const assembleBytecode = (opcodes, disassembledBytecode) => {\n    const configuration = {\n        opcodes,\n        scripts: { asm: disassembledBytecode },\n    };\n    return createCompilerCommon(configuration).generateBytecode({ data: {}, scriptId: 'asm' });\n};\n/**\n * Re-assemble a string of disassembled BCH bytecode; see\n * {@link disassembleBytecodeBCH}.\n *\n * Note, this method performs automatic minimization of push instructions.\n *\n * @param disassembledBytecode - the disassembled BCH bytecode to re-assemble\n */\nexport const assembleBytecodeBCH = (disassembledBytecode) => assembleBytecode(generateBytecodeMap(OpcodesBCH), disassembledBytecode);\n/**\n * A convenience method to compile CashAssembly (using\n * {@link assembleBytecodeBCH}) to bytecode. If compilation fails, errors are\n * returned as a string.\n */\nexport const cashAssemblyToBin = (cashAssemblyScript) => {\n    const result = assembleBytecodeBCH(cashAssemblyScript);\n    return result.success\n        ? result.bytecode\n        : `CashAssembly compilation ${result.errorType} error: ${result.errors\n            .map((err) => err.error)\n            .join(' ')}`;\n};\n/**\n * Re-assemble a string of disassembled BCH bytecode; see\n * {@link disassembleBytecodeBTC}.\n *\n * Note, this method performs automatic minimization of push instructions.\n *\n * @param disassembledBytecode - the disassembled BTC bytecode to re-assemble\n */\nexport const assembleBytecodeBTC = (disassembledBytecode) => assembleBytecode(generateBytecodeMap(OpcodesBTC), disassembledBytecode);\n/**\n * Create a partial {@link CompilerConfiguration} from an\n * {@link AuthenticationTemplate} by extracting and formatting the `scripts` and\n * `variables` properties.\n *\n * Note, if this {@link AuthenticationTemplate} might be malformed, first\n * validate it with {@link importAuthenticationTemplate}.\n *\n * @param template - the {@link AuthenticationTemplate} from which to extract\n * the compiler configuration\n */\nexport const authenticationTemplateToCompilerConfiguration = (template) => {\n    /**\n     * Template scripts including virtualized test scripts.\n     */\n    const virtualizedScripts = Object.entries(template.scripts).reduce((all, [scriptId, script]) => {\n        if ('tests' in script) {\n            return {\n                ...all,\n                ...Object.entries(script.tests).reduce((tests, [testId, test]) => {\n                    const pushTestedScript = script.pushed === true;\n                    const checkScriptId = `${scriptId}.${testId}.check`;\n                    const virtualizedLockingScriptId = `${scriptId}.${testId}.lock`;\n                    const virtualizedUnlockingScriptId = `${scriptId}.${testId}.unlock`;\n                    return {\n                        ...tests,\n                        [checkScriptId]: { script: test.check },\n                        [virtualizedLockingScriptId]: {\n                            script: pushTestedScript\n                                ? `<${scriptId}> ${checkScriptId}`\n                                : `${scriptId} ${checkScriptId}`,\n                        },\n                        [virtualizedUnlockingScriptId]: {\n                            script: test.setup ?? '',\n                            unlocks: virtualizedLockingScriptId,\n                        },\n                    };\n                }, {}),\n            };\n        }\n        return all;\n    }, {});\n    const allScripts = {\n        ...template.scripts,\n        ...virtualizedScripts,\n    };\n    const scripts = Object.entries(allScripts).reduce((all, [id, def]) => ({ ...all, [id]: def.script }), {});\n    const variables = Object.values(template.entities).reduce((all, entity) => ({ ...all, ...entity.variables }), {});\n    const entityOwnership = Object.entries(template.entities).reduce((all, [entityId, entity]) => ({\n        ...all,\n        ...Object.keys(entity.variables ?? {}).reduce((entityVariables, variableId) => ({\n            ...entityVariables,\n            [variableId]: entityId,\n        }), {}),\n    }), {});\n    const unlockingScripts = Object.entries(allScripts).reduce((all, [id, def]) => 'unlocks' in def && def.unlocks !== undefined\n        ? { ...all, [id]: def.unlocks }\n        : all, {});\n    const unlockingScriptTimeLockTypes = Object.entries(allScripts).reduce((all, [id, def]) => 'timeLockType' in def && def.timeLockType !== undefined\n        ? { ...all, [id]: def.timeLockType }\n        : all, {});\n    const lockingScriptTypes = Object.entries(allScripts).reduce((all, [id, def]) => 'lockingType' in def &&\n        def.lockingType !== undefined\n        ? { ...all, [id]: def.lockingType }\n        : all, {});\n    const scenarios = template.scenarios === undefined\n        ? undefined\n        : Object.entries(template.scenarios).reduce((all, [id, def]) => ({ ...all, [id]: def }), {});\n    return {\n        entityOwnership,\n        lockingScriptTypes,\n        ...(scenarios === undefined ? {} : { scenarios }),\n        scripts,\n        unlockingScriptTimeLockTypes,\n        unlockingScripts,\n        variables,\n    };\n};\n//# sourceMappingURL=compiler-utils.js.map", "/* eslint-disable max-lines */\nimport { bigIntToBinUint256BEClamped, binToHex, binToValueSatoshis, hexToBin, } from '../format/format.js';\nimport { deriveHdPrivateNodeFromSeed, encodeHdPrivateKey } from '../key/key.js';\nimport { compileScriptRaw, stringifyErrors } from '../language/language.js';\nimport { CompilerDefaults } from './compiler-defaults.js';\n/**\n * The default `lockingBytecode` value for scenario outputs is a new empty\n * object (`{}`).\n */\nconst defaultScenarioOutputLockingBytecode = () => ({});\n/**\n * Given a compiler configuration, generate the default scenario that is\n * extended by all the configuration's scenarios.\n *\n * For details on default scenario generation, see\n * {@link AuthenticationTemplateScenario.extends}.\n *\n * @param configuration - the compiler configuration from which to generate the\n * default scenario\n */\n// eslint-disable-next-line complexity\nexport const generateDefaultScenarioDefinition = (configuration) => {\n    const { variables, entityOwnership } = configuration;\n    const keyVariableIds = variables === undefined\n        ? []\n        : Object.entries(variables)\n            .filter((entry) => entry[1].type === 'Key')\n            .map(([id]) => id);\n    const entityIds = entityOwnership === undefined\n        ? []\n        : Object.keys(Object.values(entityOwnership).reduce((all, entityId) => ({ ...all, [entityId]: true }), {}));\n    const valueMap = [...keyVariableIds, ...entityIds]\n        .sort((idA, idB) => idA.localeCompare(idB, 'en'))\n        .reduce((all, id, index) => ({\n        ...all,\n        [id]: bigIntToBinUint256BEClamped(BigInt(index + 1)),\n    }), {});\n    const privateKeys = variables === undefined\n        ? undefined\n        : Object.entries(variables).reduce((all, [variableId, variable]) => variable.type === 'Key'\n            ? {\n                ...all,\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                [variableId]: binToHex(valueMap[variableId]),\n            }\n            : all, {});\n    const defaultScenario = {\n        data: {\n            currentBlockHeight: CompilerDefaults.defaultScenarioCurrentBlockHeight,\n            currentBlockTime: CompilerDefaults.defaultScenarioCurrentBlockTime,\n            ...(privateKeys === undefined || Object.keys(privateKeys).length === 0\n                ? {}\n                : { keys: { privateKeys } }),\n        },\n        sourceOutputs: [{ lockingBytecode: ['slot'] }],\n        transaction: {\n            inputs: [{ unlockingBytecode: ['slot'] }],\n            locktime: CompilerDefaults.defaultScenarioTransactionLocktime,\n            outputs: [{ lockingBytecode: defaultScenarioOutputLockingBytecode() }],\n            version: CompilerDefaults.defaultScenarioTransactionVersion,\n        },\n    };\n    const hasHdKeys = variables === undefined\n        ? false\n        : Object.values(variables).findIndex((variable) => variable.type === 'HdKey') !== -1;\n    if (!hasHdKeys) {\n        return defaultScenario;\n    }\n    const { sha256, sha512 } = configuration;\n    if (sha256 === undefined) {\n        return 'An implementations of \"sha256\" is required to generate defaults for HD keys, but the \"sha256\" property is not included in this compiler configuration.';\n    }\n    if (sha512 === undefined) {\n        return 'An implementations of \"sha512\" is required to generate defaults for HD keys, but the \"sha512\" property is not included in this compiler configuration.';\n    }\n    const crypto = { sha256, sha512 };\n    const hdPrivateKeys = entityIds.reduce((all, entityId) => {\n        /**\n         * The first 5,000,000,000 seeds have been tested, scenarios are\n         * unlikely to exceed this number of entities.\n         */\n        const assumeValid = true;\n        const masterNode = deriveHdPrivateNodeFromSeed(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        valueMap[entityId], assumeValid, crypto);\n        const hdPrivateKey = encodeHdPrivateKey({\n            network: 'mainnet',\n            node: masterNode,\n        }, crypto);\n        return { ...all, [entityId]: hdPrivateKey };\n    }, {});\n    return {\n        ...defaultScenario,\n        data: {\n            ...defaultScenario.data,\n            hdKeys: {\n                addressIndex: CompilerDefaults.defaultScenarioAddressIndex,\n                hdPrivateKeys,\n            },\n        },\n    };\n};\n/**\n * Extend the `data` property of a scenario definition with values from a parent\n * scenario definition. Returns the extended value for `data`.\n *\n * @param parentData - the scenario `data` that is extended by the child\n * scenario\n * @param childData - the scenario `data` that may override values from the\n * parent scenario\n */\n// eslint-disable-next-line complexity\nexport const extendScenarioDefinitionData = (parentData, childData) => ({\n    ...parentData,\n    ...childData,\n    ...(parentData.bytecode === undefined && childData.bytecode === undefined\n        ? {}\n        : {\n            bytecode: {\n                ...parentData.bytecode,\n                ...childData.bytecode,\n            },\n        }),\n    ...(parentData.hdKeys === undefined && childData.hdKeys === undefined\n        ? {}\n        : {\n            hdKeys: {\n                ...parentData.hdKeys,\n                ...childData.hdKeys,\n                ...(parentData.hdKeys?.hdPrivateKeys === undefined &&\n                    childData.hdKeys?.hdPrivateKeys === undefined\n                    ? {}\n                    : {\n                        hdPrivateKeys: {\n                            ...parentData.hdKeys?.hdPrivateKeys,\n                            ...childData.hdKeys?.hdPrivateKeys,\n                        },\n                    }),\n                ...(parentData.hdKeys?.hdPublicKeys === undefined &&\n                    childData.hdKeys?.hdPublicKeys === undefined\n                    ? {}\n                    : {\n                        hdPublicKeys: {\n                            ...parentData.hdKeys?.hdPublicKeys,\n                            ...childData.hdKeys?.hdPublicKeys,\n                        },\n                    }),\n            },\n        }),\n    ...(parentData.keys === undefined && childData.keys === undefined\n        ? {}\n        : {\n            keys: {\n                privateKeys: {\n                    ...parentData.keys?.privateKeys,\n                    ...childData.keys?.privateKeys,\n                },\n            },\n        }),\n});\n/**\n * Extend a child scenario definition with values from a parent scenario\n * definition. Returns the extended values for `data`, `transaction`, and\n * `value`.\n *\n * @param parentScenario - the scenario that is extended by the child scenario\n * @param childScenario - the scenario that may override values from the parent\n * scenario\n */\n// eslint-disable-next-line complexity\nexport const extendScenarioDefinition = (parentScenario, childScenario) => ({\n    ...(parentScenario.data === undefined && childScenario.data === undefined\n        ? {}\n        : {\n            data: extendScenarioDefinitionData(parentScenario.data ?? {}, childScenario.data ?? {}),\n        }),\n    ...(parentScenario.transaction === undefined &&\n        childScenario.transaction === undefined\n        ? {}\n        : {\n            transaction: {\n                ...parentScenario.transaction,\n                ...childScenario.transaction,\n            },\n        }),\n    ...(parentScenario.sourceOutputs === undefined &&\n        childScenario.sourceOutputs === undefined\n        ? {}\n        : {\n            sourceOutputs: childScenario.sourceOutputs ?? parentScenario.sourceOutputs,\n        }),\n});\n/**\n * Generate the full scenario that is extended by the provided scenario\n * identifier. Scenarios for which `extends` is `undefined` extend the default\n * scenario for the provided compiler configuration.\n */\n// eslint-disable-next-line complexity\nexport const generateExtendedScenario = ({ configuration, scenarioId, sourceScenarioIds = [], }) => {\n    if (scenarioId === undefined) {\n        return generateDefaultScenarioDefinition(configuration);\n    }\n    if (sourceScenarioIds.includes(scenarioId)) {\n        return `Cannot extend scenario \"${scenarioId}\": scenario \"${scenarioId}\" extends itself. Scenario inheritance path: ${sourceScenarioIds.join(' → ')}`;\n    }\n    const scenario = configuration.scenarios?.[scenarioId];\n    if (scenario === undefined) {\n        return `Cannot extend scenario \"${scenarioId}\": a scenario with the identifier ${scenarioId} is not included in this compiler configuration.`;\n    }\n    const parentScenario = scenario.extends === undefined\n        ? generateDefaultScenarioDefinition(configuration)\n        : generateExtendedScenario({\n            configuration,\n            scenarioId: scenario.extends,\n            sourceScenarioIds: [...sourceScenarioIds, scenarioId],\n        });\n    if (typeof parentScenario === 'string') {\n        return parentScenario;\n    }\n    return extendScenarioDefinition(parentScenario, scenario);\n};\n/**\n * Derive standard {@link CompilationData} properties from an extended scenario\n * definition.\n *\n * @param definition - a scenario definition that has been extended by the\n * default scenario definition\n */\n// eslint-disable-next-line complexity\nexport const extendedScenarioDefinitionToCompilationData = (definition) => ({\n    ...(definition.data.currentBlockHeight === undefined\n        ? {}\n        : {\n            currentBlockHeight: definition.data.currentBlockHeight,\n        }),\n    ...(definition.data.currentBlockTime === undefined\n        ? {}\n        : {\n            currentBlockTime: definition.data.currentBlockTime,\n        }),\n    ...(definition.data.hdKeys === undefined\n        ? {}\n        : {\n            hdKeys: {\n                ...(definition.data.hdKeys.addressIndex === undefined\n                    ? {}\n                    : {\n                        addressIndex: definition.data.hdKeys.addressIndex,\n                    }),\n                ...(definition.data.hdKeys.hdPrivateKeys !== undefined &&\n                    Object.keys(definition.data.hdKeys.hdPrivateKeys).length > 0\n                    ? {\n                        hdPrivateKeys: definition.data.hdKeys.hdPrivateKeys,\n                    }\n                    : {}),\n                ...(definition.data.hdKeys.hdPublicKeys === undefined\n                    ? {}\n                    : {\n                        hdPublicKeys: definition.data.hdKeys.hdPublicKeys,\n                    }),\n            },\n        }),\n    ...(definition.data.keys?.privateKeys !== undefined &&\n        Object.keys(definition.data.keys.privateKeys).length > 0\n        ? {\n            keys: {\n                privateKeys: Object.entries(definition.data.keys.privateKeys).reduce((all, [id, hex]) => ({ ...all, [id]: hexToBin(hex) }), {}),\n            },\n        }\n        : {}),\n});\n/**\n * Extend a {@link CompilationData} object with the compiled result of the\n * bytecode scripts provided by an {@link AuthenticationTemplateScenarioData}.\n */\nexport const extendCompilationDataWithScenarioBytecode = ({ compilationData, configuration, scenarioDataBytecodeScripts, }) => {\n    const prefixBytecodeScriptId = (id) => `${CompilerDefaults.scenarioBytecodeScriptPrefix}${id}`;\n    const bytecodeScripts = Object.entries(scenarioDataBytecodeScripts).reduce((all, [id, script]) => ({\n        ...all,\n        [prefixBytecodeScriptId(id)]: script,\n    }), {});\n    const bytecodeScriptExtendedConfiguration = {\n        ...configuration,\n        scripts: {\n            ...configuration.scripts,\n            ...bytecodeScripts,\n        },\n    };\n    const bytecodeCompilations = Object.keys(scenarioDataBytecodeScripts).map((id) => {\n        const result = compileScriptRaw({\n            configuration: bytecodeScriptExtendedConfiguration,\n            data: compilationData,\n            scriptId: prefixBytecodeScriptId(id),\n        });\n        if (result.success) {\n            return {\n                bytecode: result.bytecode,\n                id,\n            };\n        }\n        return {\n            errors: result.errors,\n            id,\n        };\n    });\n    const failedResults = bytecodeCompilations.filter((result) => 'errors' in result);\n    if (failedResults.length > 0) {\n        return `${failedResults\n            .map((result) => `Compilation error while generating bytecode for \"${result.id}\": ${stringifyErrors(result.errors)}`)\n            .join('; ')}`;\n    }\n    const compiledBytecode = bytecodeCompilations.reduce((all, result) => ({ ...all, [result.id]: result.bytecode }), {});\n    return {\n        ...(Object.keys(compiledBytecode).length > 0\n            ? { bytecode: compiledBytecode }\n            : {}),\n        ...compilationData,\n    };\n};\n/**\n * Compile a {@link AuthenticationTemplateScenarioOutput.valueSatoshis},\n * returning the `Uint8Array` result.\n */\nexport const compileAuthenticationTemplateScenarioValueSatoshis = (valueSatoshisDefinition = CompilerDefaults.defaultScenarioOutputValueSatoshis) => typeof valueSatoshisDefinition === 'string'\n    ? binToValueSatoshis(hexToBin(valueSatoshisDefinition))\n    : BigInt(valueSatoshisDefinition);\n/**\n * Compile an {@link AuthenticationTemplateScenarioBytecode} definition for an\n * {@link AuthenticationTemplateScenario}, returning either a\n * simple `Uint8Array` result or a full CashAssembly {@link CompilationResult}.\n */\n// eslint-disable-next-line complexity\nexport const compileAuthenticationTemplateScenarioBytecode = ({ bytecodeDefinition, compilationContext, configuration, defaultOverride, extendedScenario, generateBytecode, lockingOrUnlockingScriptIdUnderTest, }) => {\n    if (typeof bytecodeDefinition === 'string') {\n        return hexToBin(bytecodeDefinition);\n    }\n    const scriptId = bytecodeDefinition.script === undefined ||\n        Array.isArray(bytecodeDefinition.script)\n        ? lockingOrUnlockingScriptIdUnderTest\n        : bytecodeDefinition.script;\n    /**\n     * The script ID to compile. If `undefined`, we are attempting to \"copy\" the\n     * script ID in a scenario generation that does not define a locking or\n     * unlocking script under test (e.g. the scenario is only used for debugging\n     * values in an editor) - in these cases, simply return an empty `Uint8Array`.\n     */\n    if (scriptId === undefined) {\n        return hexToBin('');\n    }\n    const overrides = bytecodeDefinition.overrides ?? defaultOverride;\n    const overriddenDataDefinition = extendScenarioDefinitionData(extendedScenario.data, overrides);\n    const data = extendCompilationDataWithScenarioBytecode({\n        compilationData: extendedScenarioDefinitionToCompilationData({\n            data: overriddenDataDefinition,\n        }),\n        configuration,\n        scenarioDataBytecodeScripts: overriddenDataDefinition.bytecode ?? {},\n    });\n    if (typeof data === 'string') {\n        const error = `Could not compile scenario \"data.bytecode\": ${data}`;\n        return { errors: [{ error }], success: false };\n    }\n    return generateBytecode({\n        data: { ...data, compilationContext },\n        debug: true,\n        scriptId,\n    });\n};\n/**\n * Compile a {@link AuthenticationTemplateScenarioOutput.token},\n * returning the {@link Output.token} result.\n */\n// eslint-disable-next-line complexity\nexport const compileScenarioOutputTokenData = (output) => output.token === undefined\n    ? {}\n    : {\n        token: {\n            amount: BigInt(output.token.amount ?? 0),\n            // TODO: doesn't verify length\n            category: hexToBin(output.token.category ??\n                CompilerDefaults.defaultScenarioOutputTokenCategory),\n            ...(output.token.nft === undefined\n                ? {}\n                : {\n                    nft: {\n                        capability: output.token.nft.capability ?? 'none',\n                        commitment: hexToBin(output.token.nft.commitment ?? ''),\n                    },\n                }),\n        },\n    };\n/**\n * Generate a scenario given a compiler configuration. If neither `scenarioId`\n * or `unlockingScriptId` are provided, the default scenario for the compiler\n * configuration will be generated.\n *\n * Returns either the full `CompilationData` for the selected scenario or an\n * error message (as a `string`).\n *\n * Note, this method should typically not be used directly, use\n * {@link Compiler.generateScenario} instead.\n */\n// eslint-disable-next-line complexity\nexport const generateScenarioBCH = ({ configuration, generateBytecode, scenarioId, unlockingScriptId, lockingScriptId: providedLockingScriptId, }, debug) => {\n    const { scenarioDefinition, scenarioName } = scenarioId === undefined\n        ? { scenarioDefinition: {}, scenarioName: `the default scenario` }\n        : {\n            scenarioDefinition: configuration.scenarios?.[scenarioId],\n            scenarioName: `scenario \"${scenarioId}\"`,\n        };\n    if (scenarioDefinition === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return `Cannot generate ${scenarioName}: a scenario definition with the identifier ${scenarioId} is not included in this compiler configuration.`;\n    }\n    const parentScenario = generateExtendedScenario({ configuration, scenarioId });\n    if (typeof parentScenario === 'string') {\n        return `Cannot generate ${scenarioName}: ${parentScenario}`;\n    }\n    const extendedScenario = extendScenarioDefinition(parentScenario, scenarioDefinition);\n    const partialCompilationData = extendedScenarioDefinitionToCompilationData(extendedScenario);\n    const fullCompilationData = extendCompilationDataWithScenarioBytecode({\n        compilationData: partialCompilationData,\n        configuration,\n        scenarioDataBytecodeScripts: extendedScenario.data.bytecode ?? {},\n    });\n    if (typeof fullCompilationData === 'string') {\n        return `Cannot generate ${scenarioName}. ${fullCompilationData}`;\n    }\n    if (extendedScenario.transaction.inputs.length !==\n        extendedScenario.sourceOutputs.length) {\n        return `Cannot generate ${scenarioName}: could not match source outputs with inputs - \"sourceOutputs\" must be the same length as \"transaction.inputs\".`;\n    }\n    const testedInputs = extendedScenario.transaction.inputs.filter((input) => Array.isArray(input.unlockingBytecode));\n    if (testedInputs.length !== 1) {\n        return `Cannot generate ${scenarioName}: the specific input under test in this scenario is ambiguous - \"transaction.inputs\" must include exactly one input that has \"unlockingBytecode\" set to [\"slot\"].`;\n    }\n    const testedInputIndex = extendedScenario.transaction.inputs.findIndex((input) => Array.isArray(input.unlockingBytecode));\n    const testedSourceOutputs = extendedScenario.sourceOutputs.filter((output) => Array.isArray(output.lockingBytecode));\n    if (testedSourceOutputs.length !== 1) {\n        return `Cannot generate ${scenarioName}: the source output unlocked by the input under test in this scenario is ambiguous - \"sourceOutputs\" must include exactly one output that has \"lockingBytecode\" set to [\"slot\"].`;\n    }\n    if (!Array.isArray(extendedScenario.sourceOutputs[testedInputIndex]?.lockingBytecode)) {\n        return `Cannot generate ${scenarioName}: the source output unlocked by the input under test in this scenario is ambiguous - the [\"slot\"] in \"transaction.inputs\" and \"sourceOutputs\" must be at the same index.`;\n    }\n    if (unlockingScriptId !== undefined &&\n        providedLockingScriptId !== undefined) {\n        return `Cannot generate ${scenarioName}: a scenario cannot be generated with both unlocking and locking script IDs defined. If an unlocking script is provided, the associated locking script ID must be read from the template.`;\n    }\n    const lockingScriptId = providedLockingScriptId === undefined\n        ? unlockingScriptId === undefined\n            ? undefined\n            : configuration.unlockingScripts?.[unlockingScriptId]\n        : providedLockingScriptId;\n    if (unlockingScriptId !== undefined && lockingScriptId === undefined) {\n        return `Cannot generate ${scenarioName} using unlocking script \"${unlockingScriptId}\": the locking script unlocked by \"${unlockingScriptId}\" is not provided in this compiler configuration.`;\n    }\n    const sourceOutputCompilations = extendedScenario.sourceOutputs.map((sourceOutput, index) => {\n        const slot = Array.isArray(sourceOutput.lockingBytecode);\n        const bytecodeDefinition = slot\n            ? lockingScriptId === undefined\n                ? CompilerDefaults.defaultScenarioBytecode\n                : { script: lockingScriptId }\n            : sourceOutput.lockingBytecode ?? {};\n        const defaultOverride = {};\n        return {\n            compiled: {\n                lockingBytecode: compileAuthenticationTemplateScenarioBytecode({\n                    bytecodeDefinition,\n                    configuration,\n                    defaultOverride,\n                    extendedScenario,\n                    generateBytecode,\n                    lockingOrUnlockingScriptIdUnderTest: lockingScriptId,\n                }),\n                valueSatoshis: compileAuthenticationTemplateScenarioValueSatoshis(sourceOutput.valueSatoshis),\n                ...compileScenarioOutputTokenData(sourceOutput),\n            },\n            index,\n            slot,\n            type: 'source output',\n        };\n    });\n    const lockingCompilation = sourceOutputCompilations.find((compilation) => compilation.slot)?.compiled.lockingBytecode;\n    const transactionOutputCompilations = extendedScenario.transaction.outputs.map((transactionOutput, index) => {\n        const defaultOverride = { hdKeys: { addressIndex: 1 } };\n        return {\n            compiled: {\n                lockingBytecode: compileAuthenticationTemplateScenarioBytecode({\n                    bytecodeDefinition: transactionOutput.lockingBytecode ?? {},\n                    configuration,\n                    defaultOverride,\n                    extendedScenario,\n                    generateBytecode,\n                    lockingOrUnlockingScriptIdUnderTest: lockingScriptId,\n                }),\n                valueSatoshis: compileAuthenticationTemplateScenarioValueSatoshis(transactionOutput.valueSatoshis),\n                ...compileScenarioOutputTokenData(transactionOutput),\n            },\n            index,\n            type: 'transaction output',\n        };\n    });\n    const outputCompilationErrors = [\n        ...sourceOutputCompilations,\n        ...transactionOutputCompilations,\n    ].reduce((accumulated, result) => {\n        if ('errors' in result.compiled.lockingBytecode) {\n            return [\n                ...accumulated,\n                ...result.compiled.lockingBytecode.errors.map((errorObject) => `Failed compilation of ${result.type} at index ${result.index}: ${errorObject.error}`),\n            ];\n        }\n        return accumulated;\n    }, []);\n    if (outputCompilationErrors.length > 0) {\n        const error = `Cannot generate ${scenarioName}: ${outputCompilationErrors.join(' ')}`;\n        if (debug === true) {\n            return {\n                lockingCompilation,\n                scenario: error,\n            };\n        }\n        return error;\n    }\n    const sourceOutputCompilationsSuccess = sourceOutputCompilations;\n    const transactionOutputCompilationsSuccess = transactionOutputCompilations;\n    const extractOutput = (compilation) => {\n        const { lockingBytecode, valueSatoshis, token } = compilation.compiled;\n        return {\n            lockingBytecode: 'bytecode' in lockingBytecode\n                ? lockingBytecode.bytecode\n                : lockingBytecode,\n            valueSatoshis,\n            ...(token === undefined ? {} : { token }),\n        };\n    };\n    const sourceOutputs = sourceOutputCompilationsSuccess.map(extractOutput);\n    const outputs = transactionOutputCompilationsSuccess.map(extractOutput);\n    const inputsContext = extendedScenario.transaction.inputs.map((input, inputIndex) => ({\n        outpointIndex: input.outpointIndex ?? inputIndex,\n        // TODO: doesn't verify length\n        outpointTransactionHash: hexToBin(input.outpointTransactionHash ??\n            CompilerDefaults.defaultScenarioInputOutpointTransactionHash),\n        sequenceNumber: input.sequenceNumber ??\n            CompilerDefaults.defaultScenarioInputSequenceNumber,\n        unlockingBytecode: undefined,\n    }));\n    const transactionInputCompilations = extendedScenario.transaction.inputs.map((input, index) => {\n        const slot = Array.isArray(input.unlockingBytecode);\n        const bytecodeDefinition = Array.isArray(input.unlockingBytecode)\n            ? unlockingScriptId === undefined\n                ? CompilerDefaults.defaultScenarioBytecode\n                : { script: unlockingScriptId }\n            : input.unlockingBytecode ?? {};\n        const defaultOverride = {};\n        return {\n            compiled: {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                outpointIndex: inputsContext[index].outpointIndex,\n                outpointTransactionHash: \n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                inputsContext[index].outpointTransactionHash,\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                sequenceNumber: inputsContext[index].sequenceNumber,\n                unlockingBytecode: compileAuthenticationTemplateScenarioBytecode({\n                    bytecodeDefinition,\n                    compilationContext: {\n                        inputIndex: index,\n                        sourceOutputs,\n                        transaction: {\n                            inputs: inputsContext,\n                            locktime: extendedScenario.transaction.locktime,\n                            outputs,\n                            version: extendedScenario.transaction.version,\n                        },\n                    },\n                    configuration,\n                    defaultOverride,\n                    extendedScenario,\n                    generateBytecode,\n                    lockingOrUnlockingScriptIdUnderTest: unlockingScriptId,\n                }),\n            },\n            index,\n            slot,\n        };\n    });\n    const unlockingCompilation = transactionInputCompilations.find((compilation) => compilation.slot)?.compiled.unlockingBytecode;\n    const inputCompilationErrors = transactionInputCompilations.reduce((accumulated, result) => {\n        if ('errors' in result.compiled.unlockingBytecode) {\n            return [\n                ...accumulated,\n                ...result.compiled.unlockingBytecode.errors.map((errorObject) => `Failed compilation of input at index ${result.index}: ${errorObject.error}`),\n            ];\n        }\n        return accumulated;\n    }, []);\n    if (inputCompilationErrors.length > 0) {\n        const error = `Cannot generate ${scenarioName}: ${inputCompilationErrors.join(' ')}`;\n        if (debug === true) {\n            return {\n                lockingCompilation,\n                scenario: error,\n                unlockingCompilation,\n            };\n        }\n        return error;\n    }\n    const transactionInputCompilationsSuccess = transactionInputCompilations;\n    const inputs = transactionInputCompilationsSuccess.map((compilation) => {\n        const { outpointIndex, outpointTransactionHash, sequenceNumber, unlockingBytecode, } = compilation.compiled;\n        return {\n            outpointIndex,\n            outpointTransactionHash,\n            sequenceNumber,\n            unlockingBytecode: 'bytecode' in unlockingBytecode\n                ? unlockingBytecode.bytecode\n                : unlockingBytecode,\n        };\n    });\n    const scenario = {\n        data: fullCompilationData,\n        program: {\n            inputIndex: testedInputIndex,\n            sourceOutputs,\n            transaction: {\n                inputs,\n                locktime: extendedScenario.transaction.locktime,\n                outputs,\n                version: extendedScenario.transaction.version,\n            },\n        },\n    };\n    return (debug === true\n        ? { lockingCompilation, scenario, unlockingCompilation }\n        : scenario);\n};\n//# sourceMappingURL=scenarios.js.map", "export {};\n//# sourceMappingURL=compiler-types.js.map", "import { lockingBytecodeToCashAddress } from '../address/address.js';\nimport { importAuthenticationTemplate } from '../schema/schema.js';\nimport { authenticationTemplateToCompilerBCH } from './compiler-bch/compiler-bch.js';\nimport { authenticationTemplateP2pkh } from './standard/standard.js';\n/**\n * Derive the P2PKH locking bytecode at the provided index of the provided HD\n * private key.\n */\nexport const hdPrivateKeyToP2pkhLockingBytecode = ({ addressIndex, hdKey, }) => {\n    const compiler = authenticationTemplateToCompilerBCH(importAuthenticationTemplate(authenticationTemplateP2pkh));\n    const lockingBytecode = compiler.generateBytecode({\n        data: { hdKeys: { addressIndex, hdPrivateKeys: { owner: hdKey } } },\n        scriptId: 'lock',\n    });\n    return lockingBytecode.bytecode;\n};\n/**\n * Derive the P2PKH address at the provided index of the provided HD\n * private key.\n */\nexport const hdPrivateKeyToP2pkhAddress = ({ addressIndex, hdKey, prefix = 'bitcoincash', }) => lockingBytecodeToCashAddress(hdPrivateKeyToP2pkhLockingBytecode({ addressIndex, hdKey }), prefix);\n//# sourceMappingURL=p2pkh-utils.js.map", "export * from './p2pkh.js';\n//# sourceMappingURL=standard.js.map", "/**\n * A standard single-factor authentication template that uses\n * Pay-to-Public-Key-Hash (P2PKH), the most common authentication scheme in use\n * on the network.\n *\n * This P2PKH template uses BCH Schnorr signatures, reducing the size of\n * transactions.\n *\n * Note, this authentication template uses only a single `Key`. For HD key\n * support, see {@link authenticationTemplateP2pkhHd}.\n */\nexport const authenticationTemplateP2pkhNonHd = {\n    $schema: 'https://bitauth.com/schemas/authentication-template-v0.schema.json',\n    description: 'A standard single-factor authentication template that uses Pay-to-Public-Key-Hash (P2PKH), the most common authentication scheme in use on the network.\\n\\nThis P2PKH template uses BCH Schnorr signatures, reducing the size of transactions.',\n    entities: {\n        owner: {\n            description: 'The individual who can spend from this wallet.',\n            name: 'Owner',\n            scripts: ['lock', 'unlock'],\n            variables: {\n                key: {\n                    description: 'The private key that controls this wallet.',\n                    name: 'Key',\n                    type: 'Key',\n                },\n            },\n        },\n    },\n    name: 'Single Signature (P2PKH)',\n    scripts: {\n        lock: {\n            lockingType: 'standard',\n            name: 'P2PKH Lock',\n            script: 'OP_DUP\\nOP_HASH160 <$(<key.public_key> OP_HASH160\\n)> OP_EQUALVERIFY\\nOP_CHECKSIG',\n        },\n        unlock: {\n            name: 'Unlock',\n            script: '<key.schnorr_signature.all_outputs>\\n<key.public_key>',\n            unlocks: 'lock',\n        },\n    },\n    supported: ['BCH_2020_05', 'BCH_2021_05', 'BCH_2022_05'],\n    version: 0,\n};\n/**\n * A standard single-factor authentication template that uses\n * Pay-to-Public-Key-Hash (P2PKH), the most common authentication scheme in use\n * on the network.\n *\n * This P2PKH template uses BCH Schnorr signatures, reducing the size of\n * transactions.\n *\n * Because the template uses a Hierarchical Deterministic (HD) key, it also\n * supports watch-only clients.\n */\nexport const authenticationTemplateP2pkh = {\n    $schema: 'https://bitauth.com/schemas/authentication-template-v0.schema.json',\n    description: 'A standard single-factor authentication template that uses Pay-to-Public-Key-Hash (P2PKH), the most common authentication scheme in use on the network.\\n\\nThis P2PKH template uses BCH Schnorr signatures, reducing the size of transactions. Because the template uses a Hierarchical Deterministic (HD) key, it also supports watch-only clients.',\n    entities: {\n        owner: {\n            description: 'The individual who can spend from this wallet.',\n            name: 'Owner',\n            scripts: ['lock', 'unlock'],\n            variables: {\n                key: {\n                    description: 'The private key that controls this wallet.',\n                    name: 'Key',\n                    type: 'HdKey',\n                },\n            },\n        },\n    },\n    name: 'Single Signature (P2PKH)',\n    scripts: {\n        lock: {\n            lockingType: 'standard',\n            name: 'P2PKH Lock',\n            script: 'OP_DUP\\nOP_HASH160 <$(<key.public_key> OP_HASH160\\n)> OP_EQUALVERIFY\\nOP_CHECKSIG',\n        },\n        unlock: {\n            name: 'Unlock',\n            script: '<key.schnorr_signature.all_outputs>\\n<key.public_key>',\n            unlocks: 'lock',\n        },\n    },\n    supported: ['BCH_2020_05', 'BCH_2021_05', 'BCH_2022_05'],\n    version: 0,\n};\n//# sourceMappingURL=p2pkh.js.map", "/* eslint-disable max-lines */\n/**\n * Because this file is consumed by the `doc:generate-json-schema` package\n * script to produce a JSON schema, large sections of the below documentation\n * are copied from this library's `Transaction` and `CompilationData` types.\n *\n * This is preferable to importing those types, as most documentation needs to\n * be slightly modified for this context, and avoiding imports in this file\n * makes it easier to provide a stable API.\n */\nexport {};\n//# sourceMappingURL=template-types.js.map", "export * from './generate-transaction.js';\n//# sourceMappingURL=transaction.js.map", "import { allErrorsAreRecoverable, extractResolvedVariableBytecodeMap, } from '../language/language.js';\nconst returnFailedCompilationDirective = ({ index, result, type, }) => ({\n    errors: result.errors.map((error) => ({\n        ...error,\n        error: `Failed compilation of ${type} directive at index \"${index}\": ${error.error}`,\n    })),\n    index,\n    ...(result.errorType === 'parse' ? {} : { resolved: result.resolve }),\n    type,\n});\n// eslint-disable-next-line complexity\nexport const compileOutputTemplate = ({ outputTemplate, index, }) => {\n    if ('script' in outputTemplate.lockingBytecode) {\n        const directive = outputTemplate.lockingBytecode;\n        const data = directive.data === undefined ? {} : directive.data;\n        const result = directive.compiler.generateBytecode({\n            data,\n            debug: true,\n            scriptId: directive.script,\n        });\n        return result.success\n            ? {\n                lockingBytecode: result.bytecode,\n                ...(outputTemplate.token === undefined\n                    ? {}\n                    : { token: outputTemplate.token }),\n                valueSatoshis: outputTemplate.valueSatoshis,\n            }\n            : returnFailedCompilationDirective({ index, result, type: 'locking' });\n    }\n    return {\n        lockingBytecode: outputTemplate.lockingBytecode.slice(),\n        ...(outputTemplate.token === undefined\n            ? {}\n            : { token: outputTemplate.token }),\n        valueSatoshis: outputTemplate.valueSatoshis,\n    };\n};\nexport const compileInputTemplate = ({ inputTemplate, index, template, outputs, }) => {\n    if ('script' in inputTemplate.unlockingBytecode) {\n        const directive = inputTemplate.unlockingBytecode;\n        // TODO: workaround, replace by migrating to PST format\n        const sourceOutputs = [];\n        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data\n        sourceOutputs[index] = {\n            lockingBytecode: Uint8Array.of(),\n            ...(inputTemplate.unlockingBytecode.token === undefined\n                ? {}\n                : { token: inputTemplate.unlockingBytecode.token }),\n            valueSatoshis: inputTemplate.unlockingBytecode.valueSatoshis,\n        };\n        const result = directive.compiler.generateBytecode({\n            data: {\n                ...directive.data,\n                compilationContext: {\n                    inputIndex: index,\n                    sourceOutputs,\n                    transaction: {\n                        inputs: template.inputs,\n                        locktime: template.locktime,\n                        outputs,\n                        version: template.version,\n                    },\n                },\n            },\n            debug: true,\n            scriptId: directive.script,\n        });\n        return result.success\n            ? {\n                outpointIndex: inputTemplate.outpointIndex,\n                outpointTransactionHash: inputTemplate.outpointTransactionHash.slice(),\n                sequenceNumber: inputTemplate.sequenceNumber,\n                unlockingBytecode: result.bytecode,\n            }\n            : returnFailedCompilationDirective({ index, result, type: 'unlocking' });\n    }\n    return {\n        outpointIndex: inputTemplate.outpointIndex,\n        outpointTransactionHash: inputTemplate.outpointTransactionHash.slice(),\n        sequenceNumber: inputTemplate.sequenceNumber,\n        unlockingBytecode: inputTemplate.unlockingBytecode.slice(),\n    };\n};\n/**\n * Generate a `Transaction` given a `TransactionTemplate` and any applicable\n * compilers and compilation data.\n *\n * Returns either a `Transaction` or an array of compilation errors.\n *\n * For each `CompilationDirective`, the `compilationContext` property will be\n * automatically provided to the compiler. All other necessary `CompilationData`\n * properties must be specified in the `TransactionTemplate`.\n *\n * @param template - the `TransactionTemplate` from which to create the\n * `Transaction`\n */\nexport const generateTransaction = (template) => {\n    const outputResults = template.outputs.map((outputTemplate, index) => compileOutputTemplate({\n        index,\n        outputTemplate,\n    }));\n    const outputCompilationErrors = outputResults.filter((result) => 'errors' in result);\n    if (outputCompilationErrors.length > 0) {\n        const outputCompletions = outputResults\n            .map((result, index) => 'lockingBytecode' in result\n            ? { index, output: result, type: 'output' }\n            : result)\n            .filter((result) => 'output' in result);\n        return {\n            completions: outputCompletions,\n            errors: outputCompilationErrors,\n            stage: 'outputs',\n            success: false,\n        };\n    }\n    const outputs = outputResults;\n    const inputResults = template.inputs.map((inputTemplate, index) => compileInputTemplate({\n        index,\n        inputTemplate,\n        outputs,\n        template,\n    }));\n    const inputCompilationErrors = inputResults.filter((result) => 'errors' in result);\n    if (inputCompilationErrors.length > 0) {\n        const inputCompletions = inputResults\n            .map((result, index) => 'unlockingBytecode' in result\n            ? { index, input: result, type: 'input' }\n            : result)\n            .filter((result) => 'input' in result);\n        return {\n            completions: inputCompletions,\n            errors: inputCompilationErrors,\n            stage: 'inputs',\n            success: false,\n        };\n    }\n    const inputs = inputResults;\n    return {\n        success: true,\n        transaction: {\n            inputs,\n            locktime: template.locktime,\n            outputs,\n            version: template.version,\n        },\n    };\n};\n/**\n * TODO: fundamentally unsound, migrate to PST format\n *\n * Extract a map of successfully resolved variables to their resolved bytecode.\n *\n * @param transactionGenerationError - a transaction generation attempt where\n * `success` is `false`\n */\nexport const extractResolvedVariables = (transactionGenerationError) => transactionGenerationError.errors.reduce((all, error) => error.resolved === undefined\n    ? all\n    : { ...all, ...extractResolvedVariableBytecodeMap(error.resolved) }, {});\n/**\n * TODO: fundamentally unsound, migrate to PST format\n *\n * Given an unsuccessful transaction generation result, extract a map of the\n * identifiers missing from the compilation mapped to the entity that owns each\n * variable.\n *\n * Returns `false` if any errors are fatal (the error either cannot be resolved\n * by providing a variable, or the entity ownership of the required variable was\n * not provided in the compilation data).\n *\n * @param transactionGenerationError - a transaction generation result where\n * `success` is `false`\n */\nexport const extractMissingVariables = (transactionGenerationError) => {\n    const allErrors = transactionGenerationError.errors.reduce((all, error) => [...all, ...error.errors], []);\n    if (!allErrorsAreRecoverable(allErrors)) {\n        return false;\n    }\n    return allErrors.reduce((all, error) => ({\n        ...all,\n        [error.missingIdentifier]: error.owningEntity,\n    }), {});\n};\n/**\n * TODO: fundamentally unsound, migrate to PST format\n *\n * Safely extend a compilation data with resolutions provided by other entities\n * (via `extractResolvedVariables`).\n *\n * It is security-critical that compilation data only be extended with expected\n * identifiers from the proper owning entity of each variable. See\n * `CompilationData.bytecode` for details.\n *\n * Returns `false` if any errors are fatal (the error either cannot be resolved\n * by providing a variable, or the entity ownership of the required variable was\n * not provided in the compilation data).\n *\n * @remarks\n * To determine which identifiers are required by a given compilation, the\n * compilation is first attempted with only trusted variables: variables owned\n * or previously verified (like `WalletData`) by the compiling entity. If this\n * compilation produces a `TransactionGenerationError`, the error can be\n * provided to `safelyExtendCompilationData`, along with the trusted compilation\n * data and a mapping of untrusted resolutions (where the result of\n * `extractResolvedVariables` is assigned to the entity ID of the entity from\n * which they were received).\n *\n * The first compilation must use only trusted compilation data\n */\nexport const safelyExtendCompilationData = (transactionGenerationError, trustedCompilationData, untrustedResolutions) => {\n    const missing = extractMissingVariables(transactionGenerationError);\n    if (missing === false)\n        return false;\n    const selectedResolutions = Object.entries(missing).reduce((all, [identifier, entityId]) => {\n        const entityResolution = untrustedResolutions[entityId];\n        if (entityResolution === undefined) {\n            return all;\n        }\n        const resolution = entityResolution[identifier];\n        if (resolution === undefined) {\n            return all;\n        }\n        return { ...all, [identifier]: resolution };\n    }, {});\n    return {\n        ...trustedCompilationData,\n        bytecode: {\n            ...selectedResolutions,\n            ...trustedCompilationData.bytecode,\n        },\n    };\n};\n//# sourceMappingURL=generate-transaction.js.map", "export * from './bch-vmb-test-utils.js';\n//# sourceMappingURL=vmb-tests.js.map", "/**\n * This script generates all bch_vmb_tests, run it with: `yarn gen:tests`.\n */\nimport { encodeBech32, regroupBits } from '../address/address.js';\nimport { createCompilerBCH } from '../compiler/compiler-bch/compiler-bch.js';\nimport { authenticationTemplateToCompilerConfiguration } from '../compiler/compiler-utils.js';\nimport { sha256 } from '../crypto/crypto.js';\nimport { binToHex, flattenBinArray } from '../format/format.js';\nimport { encodeTransaction, encodeTransactionOutputs, } from '../message/message.js';\nimport { slot1Scenario } from './bch-vmb-test-mixins.js';\n/**\n * These are the VM versions for which tests are currently generated.\n *\n * A new 4-digit year should be added to prepare for each annual upgrade.\n * Libauth can also support testing of draft proposals by specifying a short\n * identifier for each independent proposal.\n */\nconst vmVersionsBCH = [\n    '2022',\n    '2023',\n    'chip_cashtokens',\n    'before_chip_cashtokens',\n    'chip_limits',\n    'chip_loops',\n    'chip_p2sh32',\n    'chip_strict_checkmultisig',\n    'chip_zce',\n];\n/**\n * These are the VM \"modes\" for which tests can be generated.\n */\nconst vmModes = ['nop2sh', 'p2sh', 'p2sh20', 'p2sh32'];\n/**\n * Not used currently, but these are the defaults that inform\n * {@link supportedTestSetOverridesBCH}.\n */\nexport const vmbTestDefinitionDefaultBehaviorBCH = [\n    'nop2sh_nonstandard',\n    'p2sh20_standard',\n    'p2sh32_ignore',\n];\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * The list of test set overrides currently supported. Eventually this should be\n * `TestSetOverride`.\n *\n * For now, this implementation simplifies VMB test generation – we just\n * `join()` the provided overrides and look up resulting modes/test sets here.\n */\nconst testSetOverrideListBCH = [\n    ['chip_cashtokens_invalid'],\n    ['chip_cashtokens_invalid', '2022_p2sh32_nonstandard'],\n    ['default', 'chip_cashtokens'],\n    ['chip_cashtokens'],\n    ['chip_cashtokens', '2022_p2sh32_nonstandard'],\n    ['chip_loops_invalid'],\n    ['chip_loops'],\n    ['invalid', '2022_p2sh32_nonstandard', 'chip_cashtokens'],\n    ['invalid', '2022_p2sh32_nonstandard', 'chip_cashtokens_invalid'],\n    ['invalid', '2022_p2sh32_nonstandard', 'chip_cashtokens_nonstandard'],\n    ['invalid', 'chip_cashtokens_invalid'],\n    ['invalid', 'chip_cashtokens', 'nop2sh_invalid'],\n    ['invalid', 'chip_cashtokens'],\n    [\n        'invalid',\n        'chip_cashtokens',\n        'chip_cashtokens_p2sh20_nonstandard',\n        'chip_cashtokens_p2sh32_nonstandard',\n    ],\n    ['invalid', 'chip_cashtokens', 'chip_cashtokens_p2sh32_nonstandard'],\n    ['invalid', 'chip_cashtokens', 'p2sh_ignore'],\n    ['invalid', 'chip_cashtokens_invalid', 'p2sh_ignore'],\n    ['invalid', 'nop2sh_nonstandard'],\n    ['invalid', 'nop2sh_nonstandard'],\n    ['invalid', 'p2sh_ignore'],\n    ['invalid', 'p2sh_nonstandard', 'chip_cashtokens_invalid'],\n    ['invalid', 'p2sh_nonstandard', 'chip_cashtokens'],\n    ['invalid', 'p2sh_standard'],\n    ['invalid', 'p2sh20_standard'],\n    ['invalid'],\n    ['nop2sh_invalid'],\n    ['nonstandard', 'chip_cashtokens_invalid'],\n    ['nonstandard', 'chip_cashtokens'],\n    [\n        'nonstandard',\n        'chip_cashtokens',\n        'chip_cashtokens_p2sh20_nonstandard',\n        'chip_cashtokens_p2sh32_nonstandard',\n    ],\n    ['nonstandard', 'chip_cashtokens', 'chip_cashtokens_p2sh32_nonstandard'],\n    ['nonstandard', 'p2sh_ignore'],\n    ['nonstandard', 'p2sh_invalid'],\n    ['nonstandard'],\n    ['p2sh_ignore'],\n    ['p2sh_invalid'],\n    [],\n];\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst testList = (_list) => 0;\n// eslint-disable-next-line functional/no-expression-statement\ntestList(testSetOverrideListBCH);\n/**\n * Given one of these values and the\n * {@link vmbTestDefinitionDefaultBehaviorBCH}, return these test plans.\n */\nexport const supportedTestSetOverridesBCH = {\n    /* eslint-disable camelcase */\n    '': [\n        { mode: 'nonP2SH', sets: ['2022_nonstandard'] },\n        { mode: 'P2SH20', sets: ['2022_standard'] },\n    ],\n    /**\n     * `chip_*` values exclude the marked test from\n     * {@link vmbTestDefinitionDefaultBehaviorBCH}.\n     */\n    chip_cashtokens: [\n        {\n            mode: 'nonP2SH',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_nonstandard'],\n        },\n        {\n            mode: 'P2SH20',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_standard'],\n        },\n        {\n            mode: 'P2SH32',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_standard'],\n        },\n    ],\n    'chip_cashtokens,2022_p2sh32_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_nonstandard'],\n        },\n        {\n            mode: 'P2SH20',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_standard'],\n        },\n        {\n            mode: 'P2SH32',\n            sets: ['before_chip_cashtokens_nonstandard', 'chip_cashtokens_standard'],\n        },\n    ],\n    chip_cashtokens_invalid: [\n        {\n            mode: 'nonP2SH',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_invalid'],\n        },\n        {\n            mode: 'P2SH20',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_invalid'],\n        },\n        {\n            mode: 'P2SH32',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_invalid'],\n        },\n    ],\n    'chip_cashtokens_invalid,2022_p2sh32_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_invalid'],\n        },\n        {\n            mode: 'P2SH20',\n            sets: ['before_chip_cashtokens_invalid', 'chip_cashtokens_invalid'],\n        },\n        {\n            mode: 'P2SH32',\n            sets: ['before_chip_cashtokens_nonstandard', 'chip_cashtokens_invalid'],\n        },\n    ],\n    chip_loops: [\n        { mode: 'nonP2SH', sets: ['chip_loops_nonstandard'] },\n        { mode: 'P2SH20', sets: ['chip_loops_standard'] },\n    ],\n    chip_loops_invalid: [\n        { mode: 'nonP2SH', sets: ['chip_loops_invalid'] },\n        { mode: 'P2SH20', sets: ['chip_loops_invalid'] },\n    ],\n    'default,chip_cashtokens': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_standard',\n                'before_chip_cashtokens_standard',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: ['chip_cashtokens_standard'],\n        },\n    ],\n    invalid: [\n        { mode: 'nonP2SH', sets: ['2022_invalid'] },\n        { mode: 'P2SH20', sets: ['2022_invalid'] },\n    ],\n    'invalid,2022_p2sh32_nonstandard,chip_cashtokens': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_standard',\n            ],\n        },\n    ],\n    'invalid,2022_p2sh32_nonstandard,chip_cashtokens_invalid': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_invalid',\n            ],\n        },\n    ],\n    'invalid,2022_p2sh32_nonstandard,chip_cashtokens_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_standard',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens,chip_cashtokens_p2sh20_nonstandard,chip_cashtokens_p2sh32_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens,chip_cashtokens_p2sh32_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens,nop2sh_invalid': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_standard',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens,p2sh_ignore': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens_invalid': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n    ],\n    'invalid,chip_cashtokens_invalid,p2sh_ignore': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n    ],\n    'invalid,nop2sh_nonstandard': [\n        { mode: 'nonP2SH', sets: ['2022_nonstandard'] },\n        { mode: 'P2SH20', sets: ['2022_invalid'] },\n    ],\n    'invalid,p2sh20_standard': [\n        { mode: 'nonP2SH', sets: ['2022_invalid'] },\n        { mode: 'P2SH20', sets: ['2022_standard'] },\n    ],\n    'invalid,p2sh_ignore': [{ mode: 'nonP2SH', sets: ['2022_invalid'] }],\n    'invalid,p2sh_nonstandard,chip_cashtokens': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_standard',\n            ],\n        },\n    ],\n    'invalid,p2sh_nonstandard,chip_cashtokens_invalid': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_invalid',\n                'before_chip_cashtokens_invalid',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_invalid',\n            ],\n        },\n    ],\n    'invalid,p2sh_standard': [\n        { mode: 'nonP2SH', sets: ['2022_invalid'] },\n        { mode: 'P2SH20', sets: ['2022_standard'] },\n    ],\n    nonstandard: [\n        { mode: 'nonP2SH', sets: ['2022_nonstandard'] },\n        { mode: 'P2SH20', sets: ['2022_nonstandard'] },\n    ],\n    'nonstandard,chip_cashtokens': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_standard',\n            ],\n        },\n    ],\n    'nonstandard,chip_cashtokens,chip_cashtokens_p2sh20_nonstandard,chip_cashtokens_p2sh32_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n    ],\n    'nonstandard,chip_cashtokens,chip_cashtokens_p2sh32_nonstandard': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_standard',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_nonstandard',\n            ],\n        },\n    ],\n    'nonstandard,chip_cashtokens_invalid': [\n        {\n            mode: 'nonP2SH',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH20',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_invalid',\n            ],\n        },\n        {\n            mode: 'P2SH32',\n            sets: [\n                '2022_nonstandard',\n                'before_chip_cashtokens_nonstandard',\n                'chip_cashtokens_invalid',\n            ],\n        },\n    ],\n    'nonstandard,p2sh_ignore': [{ mode: 'nonP2SH', sets: ['2022_nonstandard'] }],\n    'nonstandard,p2sh_invalid': [\n        { mode: 'nonP2SH', sets: ['2022_nonstandard'] },\n        { mode: 'P2SH20', sets: ['2022_invalid'] },\n    ],\n    nop2sh_invalid: [\n        { mode: 'nonP2SH', sets: ['2022_invalid'] },\n        { mode: 'P2SH20', sets: ['2022_standard'] },\n    ],\n    p2sh_ignore: [{ mode: 'nonP2SH', sets: ['2022_nonstandard'] }],\n    p2sh_invalid: [\n        { mode: 'nonP2SH', sets: ['2022_nonstandard'] },\n        { mode: 'P2SH20', sets: ['2022_invalid'] },\n    ],\n    /* eslint-enable camelcase */\n};\n/**\n * Short IDs use bech32 encoding, so birthday collisions will happen\n * approximately every `Math.sqrt(2 * (32 ** defaultShortIdLength))` tests.\n */\nconst defaultShortIdLength = 5;\nconst planTestsBCH = (labels\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n) => supportedTestSetOverridesBCH[(labels ?? []).join(',')];\n/**\n * Given a VMB test definition, generate a full VMB test vector. Note, this\n * method throws immediately on the first test vector generation failure.\n */\nexport const vmbTestDefinitionToVmbTests = (testDefinition, groupName = '', shortIdLength = defaultShortIdLength) => {\n    const [unlockingScript, redeemOrLockingScript, testDescription, testSetOverrideLabels, scenarioOverride, additionalScripts,] = testDefinition;\n    const scenarioId = 'test';\n    const testGenerationPlan = planTestsBCH(testSetOverrideLabels);\n    const scenarioDefinition = { extends: 'vmb_default', ...scenarioOverride };\n    const configuration = authenticationTemplateToCompilerConfiguration({\n        entities: { tester: { variables: { key1: { type: 'HdKey' } } } },\n        scenarios: {\n            [scenarioId]: scenarioDefinition,\n            // eslint-disable-next-line @typescript-eslint/naming-convention, camelcase\n            vmb_default: slot1Scenario,\n        },\n        scripts: {\n            ...additionalScripts,\n            lockEmptyP2sh20: { lockingType: 'p2sh20', script: '' },\n            lockP2pkh: {\n                lockingType: 'standard',\n                script: 'OP_DUP OP_HASH160 <$(<key1.public_key> OP_HASH160)> OP_EQUALVERIFY OP_CHECKSIG',\n            },\n            lockP2sh20: { lockingType: 'p2sh20', script: redeemOrLockingScript },\n            lockP2sh32: { lockingType: 'p2sh32', script: redeemOrLockingScript },\n            lockStandard: { lockingType: 'standard', script: redeemOrLockingScript },\n            unlockEmptyP2sh20: { script: '<1>', unlocks: 'lockEmptyP2sh20' },\n            unlockP2pkh: {\n                /**\n                 * Uses `corresponding_output_single_input` to reuse the same signature\n                 * as much as possible (making VMB test files more compressible).\n                 */\n                script: '<key1.schnorr_signature.corresponding_output_single_input> <key1.public_key>',\n                unlocks: 'lockP2pkh',\n            },\n            unlockP2sh20: { script: unlockingScript, unlocks: 'lockP2sh20' },\n            unlockP2sh32: { script: unlockingScript, unlocks: 'lockP2sh32' },\n            unlockStandard: { script: unlockingScript, unlocks: 'lockStandard' },\n            vmbTestNullData: {\n                lockingType: 'standard',\n                script: 'OP_RETURN <\"vmb_test\">',\n            },\n        },\n        supported: ['BCH_2022_05'],\n        version: 0,\n    });\n    const compiler = createCompilerBCH(configuration);\n    const tests = testGenerationPlan.map((planItem) => {\n        const description = `${groupName}: ${testDescription} (${planItem.mode})`;\n        const result = compiler.generateScenario({\n            debug: true,\n            scenarioId,\n            unlockingScriptId: {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                P2SH20: 'unlockP2sh20',\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                P2SH32: 'unlockP2sh32',\n                nonP2SH: 'unlockStandard',\n            }[planItem.mode],\n        });\n        if (typeof result === 'string') {\n            // eslint-disable-next-line functional/no-throw-statement\n            throw new Error(`Error while generating \"${description}\" - ${result}`);\n        }\n        if (typeof result.scenario === 'string') {\n            // eslint-disable-next-line functional/no-throw-statement\n            throw new Error(`Error while generating \"${description}\" - ${result.scenario}`);\n        }\n        const encodedTx = encodeTransaction(result.scenario.program.transaction);\n        const encodedSourceOutputs = encodeTransactionOutputs(result.scenario.program.sourceOutputs);\n        const shortId = encodeBech32(regroupBits({\n            bin: sha256.hash(flattenBinArray([encodedTx, encodedSourceOutputs])),\n            resultWordLength: 5,\n            sourceWordLength: 8,\n        })).slice(0, shortIdLength);\n        const testCase = [\n            shortId,\n            description,\n            unlockingScript,\n            redeemOrLockingScript,\n            binToHex(encodedTx),\n            binToHex(encodedSourceOutputs),\n            planItem.sets,\n        ];\n        return (result.scenario.program.inputIndex === 0\n            ? testCase\n            : [...testCase, result.scenario.program.inputIndex]);\n    });\n    return tests;\n};\nexport const vmbTestGroupToVmbTests = (testGroup) => testGroup[1].map((testDefinition) => vmbTestDefinitionToVmbTests(testDefinition, testGroup[0]));\n/**\n * Partition a master test list (produced by {@link vmbTestGroupToVmbTests} or\n * {@link vmbTestDefinitionToVmbTests}) into sets. E.g.:\n * ```ts\n * const definitions: VmbTestDefinitionGroup[] = [...]\n * const master = [\n *   vmbTestDefinitionToVmbTests(...),\n *   vmbTestDefinitionToVmbTests(...),\n * ];\n * const partitioned = vmbTestPartitionMasterTestList(master);\n * ```\n * Or:\n * ```ts\n * const definitions: VmbTestDefinitionGroup[] = [...]\n * const master = definitions.map(vmbTestGroupToVmbTests).flat(2);\n * const partitioned = vmbTestPartitionMasterTestList(master);\n * ```\n * Tests are aggregated by set into a map of test sets (e.g. to export to\n * separate files).\n */\nexport const vmbTestPartitionMasterTestList = (masterTestList) => masterTestList.reduce((accumulatedTestSets, testCase) => {\n    const [shortId, testDescription, unlockingScriptAsm, redeemOrLockingScriptAsm, testTransactionHex, sourceOutputsHex, testSets, inputIndex,] = testCase;\n    const withoutSets = [\n        shortId,\n        testDescription,\n        unlockingScriptAsm,\n        redeemOrLockingScriptAsm,\n        testTransactionHex,\n        sourceOutputsHex,\n        ...(inputIndex === undefined ? [] : [inputIndex]),\n    ];\n    // eslint-disable-next-line functional/no-return-void, functional/no-expression-statement\n    testSets.forEach((testSet) => {\n        // eslint-disable-next-line functional/immutable-data, functional/no-expression-statement\n        accumulatedTestSets[testSet] = [\n            ...(accumulatedTestSets[testSet] ?? []),\n            withoutSets,\n        ];\n    });\n    return accumulatedTestSets;\n}, {});\n//# sourceMappingURL=bch-vmb-test-utils.js.map", "export const simpleP2pkhOutput = {\n    lockingBytecode: { script: 'lockP2pkh' },\n    valueSatoshis: 10000,\n};\nexport const simpleP2pkhInput = {\n    unlockingBytecode: { script: 'unlockP2pkh' },\n};\nexport const emptyP2sh20Output = {\n    lockingBytecode: { script: 'lockEmptyP2sh20' },\n    valueSatoshis: 10000,\n};\nexport const emptyP2sh20Input = {\n    unlockingBytecode: { script: 'unlockEmptyP2sh20' },\n};\nexport const vmbTestOutput = {\n    lockingBytecode: { script: 'vmbTestNullData' },\n    valueSatoshis: 0,\n};\nexport const slotOutput = {\n    lockingBytecode: ['slot'],\n    valueSatoshis: 10000,\n};\nexport const slotInput = {\n    unlockingBytecode: ['slot'],\n};\nexport const slot0Scenario = {\n    sourceOutputs: [slotOutput, simpleP2pkhOutput],\n    transaction: {\n        inputs: [slotInput, simpleP2pkhInput],\n        outputs: [vmbTestOutput],\n    },\n};\nexport const slot1Scenario = {\n    sourceOutputs: [simpleP2pkhOutput, slotOutput],\n    transaction: {\n        inputs: [simpleP2pkhInput, slotInput],\n        outputs: [vmbTestOutput],\n    },\n};\nexport const slot2Scenario = {\n    sourceOutputs: [simpleP2pkhOutput, simpleP2pkhOutput, slotOutput],\n    transaction: {\n        inputs: [simpleP2pkhInput, simpleP2pkhInput, slotInput],\n        outputs: [vmbTestOutput],\n    },\n};\nexport const slot9Scenario = {\n    sourceOutputs: [\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        simpleP2pkhOutput,\n        slotOutput,\n    ],\n    transaction: {\n        inputs: [\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            simpleP2pkhInput,\n            slotInput,\n        ],\n        outputs: [vmbTestOutput],\n    },\n};\n//# sourceMappingURL=bch-vmb-test-mixins.js.map"],
  "mappings": "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IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAs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AE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,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,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AAIxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AAIxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AAC5D,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAEnC,IAAM,aAAa;AAEnB,IAAM,UAAU;;;AC3RvB,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAGO,IAAI;AAAA,CACV,SAAUC,aAAY;AACnB,EAAAA,YAAWA,YAAW,MAAM,IAAI,CAAC,IAAI;AACrC,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,gBAAgB,IAAI,CAAC,IAAI;AAC/C,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,Y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A,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,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C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,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AAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eAAe,eAAe,GAAG;AAAA,MAClC,CAAC,eA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AC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GAAG;AAAA,MAC9B,CAAC,WAAW,eAAe,GA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,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gBAAe,iBAAiB,IAAI,EAAE,IAAI;AACzD,EAAAA,gBAAeA,gB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I;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AAIxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AAIxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAAe,IAAI,GAAG,IAAI;AACxD,EAAAA,gBAAeA,gBAAe,eAA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AWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB,IAAI,EAAE,IAAI;AACjD,EAAAA,YAAWA,YAAW,iBAAiB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AAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AAChD,EAAAA,YAAWA,YAAW,eAAe,IAAI,GAAG,IAAI;AACpD,GAAG,eAAe,aAAa,CAAC,EAAE;;;ACxQlC,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAUO,IAAM,0BAA0B,CAAC,WAAW,SAAS,mCAAmC,wBAAwB,QAAQ,CAAC;;;ACVhI,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAGO,IAAM,wBAAwB,OAAO,QAAQ,oBAAoB,UAAU,CAAC,EAAE,OAAO,CAAC,KAAK,SAAS,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI;AAAA,EAC1J,WAAW,WAAW,GAAG,WAAW,aAAa;AAAA,EACjD,WAAW,WAAW,GAAG,WAAW,aAAa;AAAA,EACjD,WAAW,WAAW,GAAG,WAAW,aAAa;AAAA;AACrD,CAAC;AAiBM,IAAM,+BAA+B,CAAC,kBAAkB,gBAAgB,cAC1E,MAAM,GAAG,EACT,OAAO,CAAC,UAAU,UAAU,EAAE,EAC9B,IAAI,CAAC,UAAU,MAAM,WAAW,IAAI,IACnC,SAAS,MAAM,MAAM,KAAK,MAAM,CAAC,IACjC,MAAM,WAAW,GAAG,IAChB,eAAe,UAAU,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,CAAC,CAAC,IAC1D,sBAAsB,KAAK,MAAM,SAC7B,eAAe,iBAAiB,OAAO,KAAK,CAAC,CAAC,IAC9C,sBAAsB,KAAK,CAAC,CAAC;;;ACjC3C,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAAO,IAAI;AAAA,CACV,SAAUC,4BAA2B;AAClC,EAAAA,2BAA0B,MAAM,IAAI;AACpC,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,gBAAgB,IAAI;AAC9C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAAI;AAC/C,EAAAA,2BAA0B,iBAAiB,IAA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,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,gBAAgB,IAAI;AAC/C,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,iBAAiB,IAAI;AAChD,EAAAA,4BAA2B,eAAe,IAAI;AAC9C,EAAAA,4BAA2B,eAAe,IAAI;AAC9C,EAAAA,4BAA2B,eAA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D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC3D,EAAAA,iBAAgBA,iBAAgB,iBAAiB,IAAI,EAAE,IAAI;AAC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G,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgBA,iBAAgB,eAAe,IAAI,GAAG,IAAI;AAC1D,EAAAA,iBAAgB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Ac,GAAG;AAAA,MAClC,CAAC,gBAAgB,cAAc,GAAG;AAAA,MAClC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA,MACnC,CAAC,gBAAgB,eAAe,GAAG;AAAA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AAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,eAAe,IAAI;AACzC,EAAAA,uBAAsB,eAAe,IAAI;AACzC,EAAAA,uBAAsB,eAAe,IAAI;AACzC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,MAAM,IAAI;AAChC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,eAAe,IAAI;AACzC,EAAAA,uBAAsB,iBAAiB,IAAI;AAC3C,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,OAAO,IAAI;AACjC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,UAAU,IAAI;AACpC,EAAAA,uBAAsB,gBAAgB,IAAI;AAC1C,EAAAA,uBAAsB,cAAc,IAAI;AACxC,EAAAA,uBAAsB,cAAc,IAAI;AACxC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,cAAc,IAAI;AACxC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,mBAAmB,IAAI;AAC7C,EAAAA,uBAAsB,gBAAgB,IAAI;AAC1C,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,gBAAgB,IAAI;AAC1C,EAAAA,uBAAsB,oBAAoB,IAAI;AAC9C,EAAAA,uBAAsB,uBAAuB,IAAI;AACjD,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,QAAQ,IAAI;AAClC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,cAAc,IAAI;AACxC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,WAAW,IAAI;AACrC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,YAAY,IAAI;AACtC,EAAAA,uBAAsB,kBAAkB,IAAI;AAC5C,EAAAA,uBAAsB,aAAa,IAAI;AACvC,EAAAA,uBAAsB,mBAAmB,IAAI;AAC7C,EAAAA,uBAAsB,kBAAkB,IAAI;AAC5C,EAAAA,uBAAsB,wBAAwB,IAAI;AAClD,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,wBAAwB,IAAI;AAClD,EAAAA,uBAAsB,wBAAwB,IAAI;AAClD,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,SAAS,IAAI;AACnC,EAAAA,uBAAsB,UAAU,IAAI;AACxC,GAAG,0BAA0B,wBAAwB,CAAC,EAAE;;;AC5LxD,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAAO,IAAI;AAAA,CACV,SAAUC,2BAA0B;AACjC,EAAAA,0BAAyB,QAAQ,IAAI;AACrC,EAAAA,0BAAyB,UAAU,IAAI;AACvC,EAAAA,0BAAyB,QAAQ,IAAI;AACzC,GAAG,6BAA6B,2BAA2B,CAAC,EAAE;AACvD,IAAI;AAAA,CACV,SAAUC,gCAA+B;AACtC,EAAAA,+BAA8B,SAAS,IAAI;AAC3C,EAAAA,+BAA8B,UAAU,IAAI;AAC5C,EAAAA,+BAA8B,QAAQ,IAAI;AAC9C,GAAG,kCAAkC,gCAAgC,CAAC,EAAE;;;ACXxE,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAEA,IAAM,qBAAqB,CAACC,YAAW;AAAA,EACnC,aAAaA,OAAM;AAAA,EACnB,iBAAiBA,OAAM;AAC3B;AACA,IAAM,mBAAmB,CAACA,YAAW;AAAA,EACjC,WAAWA,OAAM;AAAA,EACjB,eAAeA,OAAM;AACzB;AAOO,IAAM,cAAc,CAAC,QAAQ,cAAc;AAAA,EAC9C,WAAW;AAAA,EACX,eAAe;AAAA,EACf,aAAa;AAAA,EACb,iBAAiB;AACrB,MAAM;AACF,QAAM,uBAAuB;AAC7B,QAAM,iBAAiB,OAAO,SAAS,uBACjC,OAAO,WAAW;AAAA;AAAA,IAEZ,OAAO,CAAC;AAAA,MACV,cACJ,OAAO;AAAA;AAAA,IAET,CAAC,QAAQA,YAAW;AAAA,MAChB,GAAIA,OAAM,gBAAgB,OAAO,gBAC3B,iBAAiBA,MAAK,IACtBA,OAAM,kBAAkB,OAAO,iBAC7BA,OAAM,YAAY,OAAO,YACvB,iBAAiBA,MAAK,IACtB,iBAAiB,MAAM;AAAA,MACjC,GAAIA,OAAM,kBAAkB,OAAO,kBAC7B,mBAAmBA,MAAK,IACxBA,OAAM,oBAAoB,OAAO,mBAC/BA,OAAM,cAAc,OAAO,cACzB,mBAAmBA,MAAK,IACxB,mBAAmB,MAAM;AAAA,IACvC;AAAA;AAAA,IAEA,OAAO,CAAC;AAAA,EAAC;AACb,SAAO;AAAA,IACH,GAAG,iBAAiB,cAAc;AAAA,IAClC,GAAG,mBAAmB,cAAc;AAAA,EACxC;AACJ;AAYO,IAAM,gBAAgB,CAAC,YAAY,YAAY,YAAY,SAAS;AACvE,QAAM,cAAc,WAAW,kBAAkB,WAAW,kBACtD,OACA,WAAW,oBAAoB,WAAW,kBACtC,YACI,WAAW,cAAc,WAAW,cACpC,WAAW,eAAe,WAAW,cACzC;AACV,QAAM,aAAa,WAAW,gBAAgB,WAAW,gBACnD,OACA,WAAW,kBAAkB,WAAW,gBACpC,YACI,WAAW,YAAY,WAAW,YAClC,WAAW,aAAa,WAAW,YACvC;AACV,SAAO,eAAe;AAC1B;AAOO,IAAM,sBAAsB,CAAC,mBAAmB,eAAe,OAAO,CAAC,QAAQ,YAAY;AAC9F,UAAQ,QAAQ,MAAM;AAAA,IAClB,KAAK;AACD,aAAO;AAAA,QACH,GAAG;AAAA,QACH;AAAA,UACI,OAAO,QAAQ;AAAA,UACf,GAAI,QAAQ,sBAAsB,SAC5B,CAAC,IACD;AAAA,YACE,mBAAmB,QAAQ;AAAA,YAC3B,cAAc,QAAQ;AAAA,UAC1B;AAAA,UACJ,OAAO,QAAQ;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AACD,aAAO,CAAC,GAAG,QAAQ,GAAG,oBAAoB,QAAQ,KAAK,CAAC;AAAA,IAC5D;AACI,aAAO;AAAA,EACf;AACJ,GAAG,CAAC,CAAC;AAWE,IAAM,0BAA0B,CAAC,WAAW,OAAO,MAAM,CAAC,UAAU,uBAAuB,SAAS,kBAAkB,KAAK;AAK3H,IAAM,6BAA6B,CAAC;AAAA;AAAA,EAE3C,eAAe,OAAO,CAAC,KAAK,YAAY;AACpC,YAAQ,QAAQ,MAAM;AAAA,MAClB,KAAK;AAAA,MACL,KAAK;AACD,eAAO,CAAC,GAAG,KAAK,GAAG,2BAA2B,QAAQ,KAAK,CAAC;AAAA,MAChE,KAAK;AACD,YAAI,cAAc,SAAS;AACvB,iBAAO;AAAA,YACH,GAAG;AAAA,YACH;AAAA,cACI,UAAU,QAAQ;AAAA,cAClB,MAAM,QAAQ;AAAA,cACd,MAAM;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,YAAY,SAAS;AACrB,iBAAO;AAAA,YACH,GAAG;AAAA,YACH,GAAG,2BAA2B,QAAQ,MAAM;AAAA,YAC5C;AAAA,cACI,UAAU,QAAQ;AAAA,cAClB,MAAM,QAAQ;AAAA,cACd,MAAM;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,YAAY,SAAS;AACrB,iBAAO;AAAA,YACH,GAAG;AAAA,YACH;AAAA,cACI,UAAU,QAAQ;AAAA,cAClB,MAAM,QAAQ;AAAA,cACd,MAAM;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,UACH,GAAG;AAAA,UACH;AAAA,YACI,UAAU,QAAQ;AAAA,YAClB,MAAM,QAAQ;AAAA,YACd,MAAM,QAAQ;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AACI,eAAO;AAAA,IACf;AAAA,EACJ,GAAG,CAAC,CAAC;AAAA;AAOE,IAAM,qCAAqC,CAAC,mBAAmB,2BAA2B,cAAc,EAAE,OAAO,CAAC,KAAK,eAAe,WAAW,SAAS,aAC3J,EAAE,GAAG,KAAK,CAAC,WAAW,IAAI,GAAG,WAAW,SAAS,IACjD,KAAK,CAAC,CAAC;AAYN,IAAM,kBAAkB,CAAC,QAAQ,YAAY,SAAS,GAAG,OAC3D,IAAI,CAAC,UAAU,IAAI,MAAM,MAAM,eAAe,KAAK,MAAM,MAAM,WAAW,KAAK,MAAM,KAAK,EAAE,EAC5F,KAAK,SAAS,CAAC;AAkHb,IAAM,2BAA2B,CAAC,EAAE,iBAAiB,OAAO,MAAO,MAAM;AAC5E,QAAM,yBAAyB,MAAM,SAAS,IAAI,MAAM,MAAM,GAAG,EAAE,IAAI,MAAM,MAAM;AACnF,MAAI,uBAAuB,WAAW,GAAG;AACrC,WAAO;AAAA,MACH,SAAS,CAAC;AAAA,MACV,iBAAiB,CAAC;AAAA,IACtB;AAAA,EACJ;AACA,QAAM,UAAU;AAAA,IACZ;AAAA,MACI;AAAA,MACA,gBAAgB,CAAC;AAAA,MACjB,OAAO;AAAA,QACH,WAAW,gBAAgB;AAAA,QAC3B,eAAe,gBAAgB;AAAA,QAC/B,aAAa,gBAAgB;AAAA,QAC7B,iBAAiB,gBAAgB;AAAA,MACrC;AAAA;AAAA,MAEA,OAAO,uBAAuB,CAAC;AAAA,IACnC;AAAA,EACJ;AAEA,MAAI,YAAY;AAEhB,MAAI,WAAW;AAEf,MAAI;AAEJ,SAAO,YAAY,uBAAuB,UAAU,WAAW,MAAM,QAAQ;AAEzE,UAAM,cAAc,MAAM,QAAQ;AAClC,UAAM,EAAE,gBAAgB,YAAY,IAAI,eAAe,SACjD;AAAA,MACE,gBAAgB,YAAY;AAAA,MAC5B,aAAa,YAAY;AAAA,IAC7B,IACE;AAAA,MACE,gBAAgB,gBAAgB;AAAA,QAC5B,WAAW;AAAA,QACX,YAAY;AAAA,MAChB,CAAC;AAAA,MACD,aAAa,YAAY,CAAC,WAAW,OAAO,YAAY,KAAK,CAAC;AAAA,IAClE;AACJ,UAAM,UAAU,iCAAiC,cAAc;AAC/D,UAAM,CAAC,MAAM,IAAI;AACjB,UAAM,8BAA8B,WAAW,UAAa,EAAE,eAAe;AAC7E,QAAI,6BAA6B;AAE7B,YAAM,kBAAkB,QAAQ,QAAQ,SAAS,CAAC;AAClD,YAAM,oBAAoB,qCAAqC,eAAe,IACxE,QAAQ,MAAM,GAAG,QAAQ,SAAS,CAAC,IACnC;AACN,YAAM,2BAA2B,YAAY,kBAAkB;AAC/D,YAAM,iBAAiB,uBAAuB,MAAM,WAAW,wBAAwB;AACvF,YAAM,eAAe,kBAAkB,IAAI,CAAC,aAAaC,YAAW;AAAA,QAChE;AAAA,QACA,OAAO,eAAeA,MAAK;AAAA,MAC/B,EAAE;AAIF,YAAM,mBAAmB,aAAa,CAAC;AACvC,YAAM,4BAA4B,eAAe;AAEjD,UAAI,2BAA2B;AAE3B,gBAAQ,KAAK;AAAA,UACT;AAAA,UACA,aAAa,iBAAiB;AAAA,UAC9B,gBAAgB,CAAC;AAAA,UACjB,OAAO;AAAA,UACP,OAAO,iBAAiB;AAAA,QAC5B,CAAC;AAAA,MACL;AACA,YAAM,2BAA2B,aAAa,UAAU,CAAC,EAAE,MAAM,MAAM,UAAU,MAAS;AAC1F,YAAM,iBAAiB,6BAA6B;AACpD,YAAM,qBAAqB,iBACrB,2BAA2B,IAC3B,aAAa,SAAS;AAC5B,YAAM,sBAAsB,CAAC,6BAA6B,qBAAqB;AAE/E,UAAI,qBAAqB;AACrB,cAAM,aAAa,aAAa,kBAAkB;AAClD,cAAM,yBAAyB,4BAA4B,IAAI;AAC/D,cAAM,iBAAiB,aAAa,MAAM,wBAAwB,kBAAkB;AAEpF,gBAAQ,KAAK;AAAA,UACT;AAAA,UACA,aAAa,WAAW;AAAA,UACxB;AAAA,UACA,OAAO,YAAY;AAAA,UACnB,OAAO,WAAW;AAAA,QACtB,CAAC;AAAA,MACL;AAEA,kBAAY;AAEZ,UAAI,qCAAqC,eAAe,GAAG;AAEvD,qBAAa;AAAA,UACT,UAAU,yCAAyC,eAAe;AAAA,UAClE,OAAO,YAAY;AAAA,QACvB;AAAA,MAEJ,OACK;AAED,qBAAa;AAAA,MACjB;AAAA,IAEJ,OACK;AACD,YAAM,kBAAkB,QAAQ,QAAQ,SAAS,CAAC;AAElD,mBACI,oBAAoB,SACd,SACA;AAAA,QACE,UAAU,yCAAyC,eAAe;AAAA,QAClE,OAAO;AAAA,MACX;AAAA,IACZ;AAEA,gBAAY;AAAA,EAChB;AAQA,QAAM,gBAAgB,WAAW,MAAM;AACvC,QAAM,kBAAkB,gBAClB,CAAC,IACD,MAAM,MAAM,SAAS;AAC3B,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;AAcO,IAAM,oCAAoC,CAAC;AAAA;AAAA;AAAA;AAAA,EAIlD;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAO,MAAM;AACT,QAAM,qBAAqB,CAAC,MAAM,QAAQ,MAAM;AAC5C,QAAI,UAAU,MAAM;AAChB,aAAO,KAAK,KAAK,OAAO,OAAO,CAAC,KAAK,cAAc,CAAC,GAAG,KAAK,GAAG,mBAAmB,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,IAC5G;AACA,QAAI,YAAY,MAAM;AAClB,YAAMC,gBAAe,KAAK,OAAO,OAAO,OAAO,CAAC,KAAK,cAAc;AAAA,QAC/D,GAAG;AAAA,QACH,GAAG,mBAAmB,WAAW,QAAQ,CAAC;AAAA,MAC9C,GAAG,CAAC,CAAC;AACL,YAAM,6BAA6B,KAAK,MAAM,MAAM,CAAC;AACrD,YAAM,uBAAuB;AAC7B,YAAM,qBAAqB;AAC3B,YAAM,YAAY,yBAAyB;AAAA,QACvC,iBAAiB;AAAA,UACb,WAAW,KAAK,MAAM,YAAY,mBAAmB;AAAA,UACrD,eAAe,KAAK,MAAM;AAAA,UAC1B,aAAa,KAAK,MAAM,cAAc,qBAAqB;AAAA,UAC3D,iBAAiB,KAAK,MAAM;AAAA,QAChC;AAAA,QACA,OAAO,KAAK,OAAO;AAAA,QACnB,OAAO;AAAA,MACX,CAAC;AACD,aAAO,CAAC,GAAG,UAAU,SAAS,GAAGA,aAAY;AAAA,IACjD;AACA,WAAO,CAAC;AAAA,EACZ;AACA,QAAM,EAAE,SAAS,gBAAgB,IAAI,yBAAyB;AAAA,IAC1D;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACD,QAAM,eAAe,MAAM,OAAO,CAAC,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,mBAAmB,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1F,QAAM,uBAAuB,CAAC,GAAG,SAAS,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM;AACtE,UAAM,eAAe,EAAE,MAAM,gBAAgB,EAAE,MAAM;AACrD,WAAO,iBAAiB,IAClB,EAAE,MAAM,YAAY,EAAE,MAAM,YAC5B;AAAA,EACV,CAAC;AACD,SAAO;AAAA,IACH,SAAS;AAAA,IACT;AAAA,EACJ;AACJ;AACA,IAAM,mBAAmB,CAAC,UAAU,MAAM,aAAa,MAAM,CAAC,SAAS,SAAS,KAAK;AA6B9E,IAAM,0BAA0B,CAAC,SAAS,mBAAmB,UAAU;AAC1E,QAAM,UAAU,QAAQ,OAAO,CAAC,KAAK,WAAW;AAC5C,UAAM,EAAE,iCAAiC,iBAAiB,IAAI;AAC9D,UAAM,sCAAsC,GAAG,OAAO,gBAAgB,eAAe,IAAI,OAAO,gBAAgB,WAAW;AAC3H,UAAM;AAAA;AAAA,MAEN,gCAAgC,mCAAmC;AAAA;AACnE,UAAM,eAAe,CAAC,iBAAiB,OAAO,KAAK;AACnD,UAAM,kCAAkC,gBACpC,OAAO,eAAe,MAAM,CAAC,UAAU,CAAC,iBAAiB,MAAM,KAAK,CAAC;AACzE,QAAI,uBAAuB,iCAAiC;AACxD,aAAO;AAAA,QACH,iCAAiC;AAAA,UAC7B,GAAG;AAAA,UACH,CAAC,mCAAmC,GAAG;AAAA,QAC3C;AAAA,QACA,kBAAkB,CAAC,GAAG,kBAAkB,OAAO,KAAK;AAAA,MACxD;AAAA,IACJ;AACA,WAAO;AAAA,MACH,iCAAiC;AAAA,QAC7B,GAAG;AAAA,QACH,CAAC,mCAAmC,GAAG;AAAA,MAC3C;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,GAAG;AAAA,IACC,iCAAiC;AAAA,MAC7B,CAAC,gBAAgB,GAAG;AAAA,IACxB;AAAA,IACA,kBAAkB,CAAC;AAAA,EACvB,CAAC;AACD,QAAM,yBAAyB;AAC/B,QAAM,0BAA0B,QAAQ,iBAAiB,SAAS,yBAC5D,QAAQ,mBACR,QAAQ,iBAAiB,MAAM,GAAG,EAAE,EAAE;AAAA,IAAY,CAAC,KAAKF,WAAU;AAEhE,UAAI,cAAc,IAAI,CAAC,GAAGA,MAAK,GAAG;AAC9B,eAAO;AAAA,MACX;AACA,aAAO,CAACA,QAAO,GAAG,GAAG;AAAA,IACzB;AAAA;AAAA,IAEA,CAAC,QAAQ,iBAAiB,QAAQ,iBAAiB,SAAS,CAAC,CAAC;AAAA,EAAC;AACnE,SAAO;AACX;AAOO,IAAM,iBAAiB,CAAC,UAAU,MAAM,IAAI,CAAC,SAAS;AACzD,QAAM,WAAW,iBAAiB,IAAI;AACtC,SAAO,KAAK,SAAS,IAAI,CAAC,GAAG,OAAO,aAAa,WAAW,KAAK,IAAI,SAAS,SAAS,CAAC,GAAG;AAC/F,CAAC;AAQM,IAAM,sBAAsB,CAAC,UAAU,MAAM;AAAA;AAAA,EAEpD,CAAC,OAAO,OAAO,YAAY,WAAW;AAClC,UAAM,YAAY,OAAO,aAAa,CAAC;AACvC,WAAO,cAAc,SACf,QACA;AAAA,MACE,GAAG;AAAA,MACH;AAAA,QACI,gBAAgB,eAAe,UAAU,cAAc;AAAA,QACvD,GAAI,UAAU,UAAU,SAClB,CAAC,IACD,EAAE,OAAO,UAAU,MAAM;AAAA,QAC/B,SAAS,MAAM,aAAa,MAAM,aAAa,SAAS,CAAC,MAAM;AAAA,QAC/D,aAAa,MAAM,aAAa,MAAM,EAAE;AAAA,QACxC,IAAI,MAAM;AAAA,QACV,OAAO,eAAe,UAAU,KAAK;AAAA,MACzC;AAAA,IACJ;AAAA,EACR;AAAA,EAAG,CAAC;AAAC;AAOE,IAAM,6BAA6B,CAAC,SAAS,EAAE,SAAS,eAAgB,IAAI;AAAA,EAC/E,SAAS;AAAA,EACT,gBAAgB;AACpB,MAAM,QACD;AAAA;AAAA,EAEL,CAAC,SAAS,IAAI,KAAK,gBAAgB,SAC7B,OACA,GAAG,KAAK,EAAE,KAAK,KAAK,UAAU,KAAK,QAAQ,GAAG,QAAQ,KAAK,YAAY,MAAM,KAC3E,aAAa,KAAK,YAAY,MAAM,EAAE,KAAK,OAAO,cAAc,CAAC,IAAI,OAAO,KAAK,UAAU,WAC7F,KAAK,QACL,GAAG,KAAK,MAAM,KAAK,GAAG,CAAC,GAAG,KAAK,eAAe,WAAW,IACrD,KACA,UAAU,KAAK,eAAe,KAAK,GAAG,CAAC,EAAE,EAAE;AAAE,EAClD,KAAK,IAAI;;;AC7oBd,IAAAG,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAMA,SAAS,UAAU,QAAQ;AAEvB,MAAI,EAAE,gBAAgB,YAAY;AAE9B,WAAO,IAAI,UAAU,MAAM;AAAA,EAC/B;AAEA,OAAK,IAAI;AACb;AACA,IAAM,IAAI,UAAU;AAEpB,SAAS,YAAYC,QAAO,OAAO;AAC/B,SAAO;AAAA,IACH,UAAU,CAAC;AAAA,IACX,UAAU;AAAA,IACV,OAAAA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACJ;AACJ;AACA,SAAS,YAAYA,QAAO,UAAU;AAClC,aAAW,CAAC,QAAQ;AACpB,SAAO;AAAA,IACH;AAAA,IACA,UAAUA;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,EACX;AACJ;AACA,SAAS,aAAa,QAAQ,MAAM;AAChC,MAAI,CAAC,MAAM;AACP,WAAO;AAAA,EACX;AACA,MAAI,OAAO,WAAW,KAAK,UAAU;AACjC,WAAO;AAAA,EACX;AACA,QAAM,WAAW,OAAO,aAAa,KAAK,WACpC,MAAM,OAAO,UAAU,KAAK,QAAQ,IACpC,KAAK;AACX,SAAO;AAAA,IACH;AAAA,IACA,UAAU,KAAK;AAAA,IACf,OAAO,OAAO;AAAA,IACd,QAAQ,OAAO;AAAA,IACf,OAAO,OAAO;AAAA,EAClB;AACJ;AACA,SAAS,oBAAoB,OAAO,GAAG;AACnC,QAAM,QAAQ,MAAM,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI;AAK1C,QAAM,gBAAgB,MAAM;AAC5B,QAAM,kBAAkB,MAAM,MAAM,SAAS,CAAC,EAAE,SAAS;AACzD,SAAO;AAAA,IACH,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,EACZ;AACJ;AAEA,SAAS,MAAM,IAAI,IAAI;AACnB,QAAM,MAAM,CAAC;AACb,WAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK;AAEhC,QAAI,GAAG,CAAC,CAAC,IAAI;AAAA,EACjB;AACA,WAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK;AAEhC,QAAI,GAAG,CAAC,CAAC,IAAI;AAAA,EACjB;AACA,QAAM,OAAO,CAAC;AACd,aAAW,KAAK,KAAK;AACjB,SAAK,KAAK,CAAC;AAAA,EACf;AACA,OAAK,KAAK;AACV,SAAO;AACX;AAEA,SAAS,MAAM,IAAI;AACf,QAAM,IAAI,OAAO,EAAE;AACnB,SAAO,EAAE,MAAM,EAAE,YAAY,GAAG,IAAI,CAAC;AACzC;AACA,SAAS,eAAe,IAAI;AACxB,SAAO,OAAO,OAAO,GAAG,MAAM,KAAK,MAAM,EAAE,CAAC;AAChD;AAEA,SAAS,OAAO,QAAQ;AACpB,QAAM,UAAU,CAAC,EAAE,MAAM,KAAK,MAAM;AACpC,QAAM,aAAa,QAAQ;AAC3B,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,QAAI;AACJ,UAAM,QAAQ,IAAI,MAAM,UAAU;AAClC,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACpC,eAAS,aAAa,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,MAAM;AACpD,UAAI,CAAC,OAAO,QAAQ;AAChB,eAAO;AAAA,MACX;AACA,YAAM,CAAC,IAAI,OAAO;AAClB,UAAI,OAAO;AAAA,IACf;AACA,WAAO,aAAa,YAAY,GAAG,KAAK,GAAG,MAAM;AAAA,EACrD,CAAC;AACL;AACA,SAAS,UAAU,QAAQ;AACvB,QAAM,OAAO,CAAC,EAAE,MAAM,KAAK,MAAM;AACjC,QAAM,SAAS,KAAK,IAAI;AACxB,SAAO,IAAI,MAAM,MAAM,IAAI,EAAE,IAAI,SAAU,SAAS;AAEhD,WAAO,OAAO,MAAM,MAAM,OAAO;AAAA,EACrC,CAAC;AACL;AACA,SAAS,eAAe,SAAS;AAC7B,QAAM,WAAW,CAAC;AAClB,aAAW,OAAO,SAAS;AACvB,KAAC,SAAU,MAAM;AACb,YAAM,OAAO,WAAY;AAErB,eAAO,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACjC;AAEA,eAAS,IAAI,IAAI,KAAK,IAAI;AAAA,IAC9B,GAAG,GAAG;AAAA,EACV;AACA,SAAO;AACX;AACA,SAAS,OAAO,QAAQ;AACpB,QAAM,UAAU,CAAC,EAAE,MAAM,KAAK,MAAM;AACpC,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AACxC,eAAS,aAAa,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,MAAM;AACpD,UAAI,OAAO,QAAQ;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX,CAAC;AACL;AACA,SAAS,MAAM,QAAQ,WAAW;AAC9B,SAAO,OAAO,QAAQ,SAAS,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;AACnD;AACA,SAAS,OAAO,QAAQ,WAAW;AAC/B,QAAM,QAAQ,UAAU,KAAK,MAAM,EAAE,KAAK;AAC1C,SAAO,OAAO,QAAQ,OAAO,SAAU,GAAG,IAAI;AAC1C,WAAO,CAAC,CAAC,EAAE,OAAO,EAAE;AAAA,EACxB,CAAC;AACL;AAEA,EAAE,QAAQ,SAAU,OAAO;AACvB,QAAM,SAAS,KAAK,KAAK,GAAG,EAAE,EAAE,OAAO,CAAC;AACxC,MAAI,OAAO,QAAQ;AACf,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,OAAO,OAAO;AAAA,IAClB;AAAA,EACJ;AACA,SAAO;AAAA,IACH,UAAU,OAAO;AAAA,IACjB,OAAO,oBAAoB,OAAO,OAAO,QAAQ;AAAA,IACjD,QAAQ;AAAA,EACZ;AACJ;AAEA,EAAE,KAAK,SAAU,aAAa;AAC1B,SAAO,IAAI,MAAM,WAAW;AAChC;AACA,EAAE,OAAO,SAAU,MAAM;AACrB,SAAO,IAAI,MAAM,IAAI,EAAE,IAAI,SAAU,SAAS;AAC1C,WAAO,QAAQ,CAAC;AAAA,EACpB,CAAC;AACL;AACA,EAAE,OAAO,WAAY;AACjB,QAAM,OAAO;AACb,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,UAAM,QAAQ,CAAC;AACf,QAAI;AACJ,eAAS;AACL,eAAS,aAAa,KAAK,EAAE,OAAO,CAAC,GAAG,MAAM;AAC9C,UAAI,OAAO,QAAQ;AACU,YAAI,MAAM,OAAO,OAAO;AAC7C,gBAAM,IAAI,MAAM,+HACmD;AAAA,QACvE;AACA,YAAI,OAAO;AACX,cAAM,KAAK,OAAO,KAAK;AAAA,MAC3B,OACK;AACD,eAAO,aAAa,YAAY,GAAG,KAAK,GAAG,MAAM;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AACA,EAAE,MAAM,SAAU,IAAI;AAClB,QAAM,OAAO;AACb,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,UAAM,SAAS,KAAK,EAAE,OAAO,CAAC;AAC9B,QAAI,CAAC,OAAO,QAAQ;AAChB,aAAO;AAAA,IACX;AACA,WAAO,aAAa,YAAY,OAAO,OAAO,GAAG,OAAO,KAAK,CAAC,GAAG,MAAM;AAAA,EAC3E,CAAC;AACL;AACA,EAAE,OAAO,SAAU,MAAM;AACrB,SAAO,IAAI,MAAM,IAAI,EAAE,IAAI,SAAU,SAAS;AAC1C,WAAO,QAAQ,CAAC;AAAA,EACpB,CAAC;AACL;AACA,EAAE,OAAO,SAAU,MAAM;AACrB,SAAO,OAAO,OAAO,MAAM,OAAO,SAAU,OAAO,OAAO,KAAK;AAC3D,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AACA,EAAE,QAAQ,SAAU,WAAW;AAC3B,SAAO,MAAM,MAAM,SAAS;AAChC;AACA,EAAE,OAAO,SAAU,UAAU;AACzB,aAAW,CAAC,QAAQ;AACpB,QAAM,OAAO;AACb,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,UAAM,QAAQ,KAAK,EAAE,OAAO,CAAC;AAC7B,QAAI,CAAC,MAAM,QAAQ;AACf,YAAM,WAAW;AAAA,IACrB;AACA,WAAO;AAAA,EACX,CAAC;AACL;AAEA,SAAS,OAAO,KAAK;AACjB,QAAM,WAAW,IAAI,GAAG;AACxB,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,UAAM,IAAI,IAAI,IAAI;AAClB,UAAM,OAAO,MAAM,MAAM,GAAG,CAAC;AAC7B,QAAI,SAAS,KAAK;AACd,aAAO,YAAY,GAAG,IAAI;AAAA,IAC9B;AACA,WAAO,YAAY,GAAG,QAAQ;AAAA,EAClC,CAAC;AACL;AACA,SAAS,OAAO,IAAI,QAAQ,GAAG;AAC3B,QAAM,WAAW,eAAe,EAAE;AAClC,QAAM,WAAW,OAAO,EAAE;AAC1B,SAAO,UAAU,SAAU,OAAO,GAAG;AACjC,UAAMC,SAAQ,SAAS,KAAK,MAAM,MAAM,CAAC,CAAC;AAC1C,QAAIA,QAAO;AAEP,YAAM,YAAYA,OAAM,CAAC;AACzB,YAAM,aAAaA,OAAM,KAAK;AAC9B,aAAO,YAAY,IAAI,UAAU,QAAQ,UAAU;AAAA,IACvD;AACA,WAAO,YAAY,GAAG,QAAQ;AAAA,EAClC,CAAC;AACL;AACA,SAAS,QAAQ,OAAO;AACpB,SAAO,UAAU,SAAU,IAAI,GAAG;AAC9B,WAAO,YAAY,GAAG,KAAK;AAAA,EAC/B,CAAC;AACL;AACA,SAAS,KAAK,GAAG;AACb,QAAM,SAAS,UAAU,SAAU,OAAO,GAAG;AACzC,WAAO,IAAI,EAAE,EAAE;AACf,WAAO,OAAO,EAAE,OAAO,CAAC;AAAA,EAC5B,CAAC;AACD,SAAO;AACX;AAEA,IAAM,QAAQ,UAAU,SAAU,OAAO,GAAG;AACxC,SAAO,YAAY,GAAG,oBAAoB,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,IAAM,MAAM,UAAU,SAAU,OAAO,GAAG;AACtC,MAAI,IAAI,MAAM,QAAQ;AAClB,WAAO,YAAY,GAAG,KAAK;AAAA,EAC/B;AACA,SAAO,YAAY,GAAG,IAAI;AAC9B,CAAC;AACD,IAAM,gBAAgB,OAAO,MAAM,EAAE,KAAK,qBAAqB;AAC/D,IAAM,aAAa,OAAO,MAAM,EAAE,KAAK,YAAY;AAC5C,IAAM,IAAI;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,IAAI;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;;;ADjTA,IAAM,qBAAqB,EAAE,eAAe;AAAA,EACxC,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,MAAM,EAAE,aAAa,GAAG,EAAE,eAAe,CAACC,IAAG,gBAAgB,WAAW,EAAE,KAAK,QAAQ;AAAA,EAC7I,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU;AAAA,EACzG,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,KAAK,SAAS;AAAA,EAC7E,mBAAmB,MAAM,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,KAAK,2CAA2C,GAAG,EAAE,OAAO,SAAS,GAAG,CAAC,IAAI,YAAY,QAAQ,KAAK,CAAC;AAAA,EACxJ,kBAAkB,MAAM,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,KAAK,0CAA0C,GAAG,EAAE,OAAO,eAAe,EAAE,KAAK,2CAA2C,GAAG,CAAC,IAAI,YAAY,QAAQ,MAAM,GAAG,CAAC,KAAK,MAAM,EAAE,KAAK,CAAC;AAAA,EACrO,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,KAAK,qCAAqC,GAAG,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,KAAK,sCAAsC,GAAG,CAACA,IAAG,SAAS,IAAI,EAAE,KAAK,MAAM;AAAA,EACrL,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,KAAK,kCAAkC,GAAG,EAAE,OAAO,GAAG,EAAE,KAAK,kDAAkD,GAAG,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,KAAK,kDAAkD,GAAG,CAACA,IAAG,IAAI,eAAe,UAAU,EAAE,KAAK,YAAY;AAAA,EAClS,YAAY,MAAM,EAAE,OAAO,2BAA2B,EACjD,KAAK,oBAAoB,EACzB,KAAK,YAAY;AAAA,EACtB,MAAM,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,KAAK,oBAAoB,GAAG,EAAE,OAAO,QAAQ,GAAG,EAAE,OAAO,GAAG,EAAE,KAAK,4BAA4B,GAAG,CAAC,IAAI,YAAY,OAAO,GAAG,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,KAAK,oBAAoB,GAAG,EAAE,OAAO,QAAQ,GAAG,EAAE,OAAO,GAAG,EAAE,KAAK,4BAA4B,GAAG,CAAC,IAAI,YAAY,OAAO,CAAC,EAAE,KAAK,aAAa;AAAA,EAC5U,KAAK,MAAM,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,KAAK,yBAAyB,GAAG,EAAE,OAAO,iDAAiD,EAAE,KAAK,4BAA4B,GAAG,CAAC,IAAI,YAAY,OAAO,EAAE,KAAK,YAAY;AAAA,EAC/M,QAAQ,MAAM,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,KAAK,4BAA4B,GAAG,EAAE,OAAO,yBAAyB,EAAE,KAAK,2BAA2B,GAAG,CAAC,IAAI,YAAY,OAAO,EAAE,KAAK,eAAe;AAAA,EAC/L,QAAQ,MAAM,EAAE,OAAO,6BAA6B,EAC/C,KAAK,oBAAoB,EACzB,KAAK,eAAe;AAC7B,CAAC;AAEM,IAAM,cAAc,CAAC,WAAW,mBAAmB,OAAO,MAAM,MAAM;;;AErB7E,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAGA,IAAM,0BAA0B,CAACC,YAAW;AAAA,EACxC,UAAU,WAAW,GAAG;AAAA,EACxB,OAAAA;AACJ;AAiBO,IAAM,oCAAoC,CAAC,UAAU;AACxD,MAAI,MAAM,UAAU,QAAW;AAC3B,WAAO,MAAM;AAAA,EACjB;AACA,MAAI,MAAM,aAAa,WAAW,GAAG;AACjC,WAAO,0BAA0B;AAAA,EACrC;AACA,MAAI,MAAM,MAAM,WAAW,GAAG;AAC1B,WAAO,0BAA0B;AAAA,EACrC;AACA,SAAO;AACX;AAcO,IAAM,eAAe,CAAC,gBAAgB,IAAI,4BAA4B;AACzE,QAAM,SAAS,eAAe,IAAI,CAAC,YAAY;AAC3C,YAAQ,QAAQ,MAAM;AAAA,MAClB,KAAK;AACD,eAAO,EAAE,UAAU,QAAQ,OAAO,OAAO,QAAQ,MAAM;AAAA,MAC3D,KAAK,QAAQ;AACT,cAAM,OAAO,aAAa,QAAQ,OAAO,IAAI,uBAAuB;AACpE,cAAM,WAAW,eAAe,KAAK,QAAQ;AAC7C,eAAO;AAAA,UACH;AAAA,UACA,GAAI,KAAK,WAAW,SAAY,SAAY,EAAE,QAAQ,KAAK,OAAO;AAAA,UAClE;AAAA,UACA,OAAO,QAAQ;AAAA,QACnB;AAAA,MACJ;AAAA,MACA,KAAK,cAAc;AACf,YAAI,OAAO,OAAO,eACd,OAAO,4BAA4B,aAAa;AAChD,iBAAO;AAAA,YACH,QAAQ;AAAA,cACJ;AAAA,gBACI,OAAO;AAAA,gBACP,OAAO,QAAQ;AAAA,cACnB;AAAA,YACJ;AAAA,YACA,GAAG,wBAAwB,QAAQ,KAAK;AAAA,UAC5C;AAAA,QACJ;AACA,cAAM,iBAAiB,aAAa,QAAQ,OAAO,IAAI,uBAAuB;AAC9E,YAAI,eAAe,WAAW,QAAW;AACrC,iBAAO;AAAA,YACH,GAAG,wBAAwB,QAAQ,KAAK;AAAA,YACxC,QAAQ,eAAe;AAAA,YACvB,QAAQ;AAAA,YACR,OAAO,CAAC;AAAA,UACZ;AAAA,QACJ;AACA,cAAM,QAAQ,GAAG,MAAM,wBAAwB,eAAe,QAAQ,CAAC;AAKvE,cAAM,YAAY,MAAM,MAAM,SAAS,CAAC;AACxC,cAAM,SAAS,kCAAkC,SAAS;AAE1D,cAAM,WAAW,UAAU,MAAM,UAAU,MAAM,SAAS,CAAC;AAC3D,eAAO;AAAA,UACH,GAAI,OAAO,WAAW,WAChB;AAAA,YACE,UAAU,WAAW,GAAG;AAAA,YACxB,QAAQ;AAAA,cACJ;AAAA,gBACI,OAAO,gCAAgC,MAAM;AAAA,gBAC7C,OAAO,QAAQ;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ,IACE;AAAA,YACE;AAAA,UACJ;AAAA,UACJ,OAAO,QAAQ;AAAA,UACf,QAAQ;AAAA,UACR;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,KAAK;AACD,eAAO,wBAAwB,QAAQ,KAAK;AAAA,MAChD,KAAK;AACD,eAAO;AAAA,UACH,QAAQ;AAAA,YACJ;AAAA,cACI,OAAO,iEAAiE,QAAQ,KAAK;AAAA,cACrF,OAAO,QAAQ;AAAA,YACnB;AAAA,UACJ;AAAA,UACA,GAAG,wBAAwB,QAAQ,KAAK;AAAA,QAC5C;AAAA,MACJ;AAEI,cAAM,IAAI,MAAM,IAAI,QAAQ,IAAI,gCAAgC;AAAA,IACxE;AAAA,EACJ,CAAC;AACD,QAAM,YAAY,OAAO,OAAO,CAAC,KAAK,aAAa;AAAA,IAC/C,UAAU,CAAC,GAAG,IAAI,UAAU,QAAQ,QAAQ;AAAA,IAC5C,QAAQ,CAAC,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAAA,IACrC,GAAI,IAAI,WAAW,UAAa,QAAQ,WAAW,SAC7C;AAAA,MACE,QAAQ;AAAA,QACJ,GAAI,IAAI,WAAW,SAAY,CAAC,IAAI,IAAI;AAAA,QACxC,GAAI,QAAQ,WAAW,SAAY,CAAC,IAAI,QAAQ;AAAA,MACpD;AAAA,IACJ,IACE;AAAA,EACV,IAAI,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;AAChC,SAAO;AAAA,IACH,GAAI,UAAU,WAAW,SACnB,SACA,EAAE,QAAQ,UAAU,OAAO;AAAA,IACjC,UAAU,gBAAgB,UAAU,QAAQ;AAAA,IAC5C,OAAO;AAAA,MAAY,UAAU;AAAA;AAAA,MAE7B,eAAe,WAAW,IAAI,SAAY,eAAe,CAAC,EAAE;AAAA,IAAK;AAAA,IACjE;AAAA,EACJ;AACJ;;;ArElJA,IAAM,aAAa,CAAC,UAAU;AAAA,EAC1B,WAAW,KAAK,IAAI;AAAA,EACpB,eAAe,KAAK,IAAI;AAAA,EACxB,aAAa,KAAK,MAAM;AAAA,EACxB,iBAAiB,KAAK,MAAM;AAChC;AACA,IAAM,0BAA0B,CAAC,mBAAmB,eAAe,QAAQ,OAAO,EAAE;AAC7E,IAAM,uBAAuB,CAAC,SAAS,uBAAuB;AAEjE,QAAM,WAAW,QAAQ,MAAM,IAAI,CAAC,UAAU;AAC1C,UAAMC,SAAQ,WAAW,KAAK;AAC9B,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK,cAAc;AACf,cAAM,aAAa,MAAM;AACzB,cAAM,SAAS,mBAAmB,UAAU;AAC5C,cAAM,MAAM,OAAO,SACb;AAAA,UACE,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,OAAO;AAAA,UACd,GAAI,OAAO,SAAS,yBAAyB,SACvC;AAAA,YACE,QAAQ;AAAA,UACZ,IACE,OAAO,SAAS,yBAAyB,WACrC;AAAA,YACE,GAAI,WAAW,SAAS,EAAE,OAAO,OAAO,MAAM,IAAI,CAAC;AAAA,YACnD,GAAI,eAAe,SACb,EAAE,WAAW,OAAO,UAAU,IAC9B,CAAC;AAAA,YACP,UAAU;AAAA,UACd;AAAA;AAAA,YAEI,OAAO,SAAS,yBAAyB,SACnC,EAAE,QAAQ,YAAY,QAAQ,OAAO,OAAO,IAC5C,EAAE,SAAS,WAAW;AAAA;AAAA,QAC5C,IACE;AAAA,UACE,GAAI,WAAW,SAAS,EAAE,OAAO,OAAO,MAAM,IAAI,CAAC;AAAA,UACnD,GAAI,iBAAiB,UAAU,OAAO,cAChC;AAAA,YACE,mBAAmB;AAAA,YACnB,cAAc,OAAO;AAAA,UACzB,IACE,CAAC;AAAA,UACP,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,OAAO;AAAA,QAClB;AACJ,eAAO;AAAA,MACX;AAAA,MACA,KAAK;AACD,eAAO;AAAA,UACH,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,qBAAqB,MAAM,OAAO,kBAAkB;AAAA,QAC/D;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,qBAAqB,MAAM,OAAO,kBAAkB;AAAA,QAC/D;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,SAAS,MAAM;AAAA,UACf,aAAa;AAAA,UACb,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,iBAAiB,OAAO,wBAAwB,MAAM,KAAK,CAAC,CAAC;AAAA,QACxE;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,SAAS,MAAM;AAAA,UACf,aAAa;AAAA,UACb,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,eAAe,wBAAwB,MAAM,KAAK,CAAC;AAAA,QAC9D;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,SAAS,MAAM;AAAA,UACf,aAAa;AAAA,UACb,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,SAAS,wBAAwB,MAAM,KAAK,CAAC;AAAA,QACxD;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,SAAS,MAAM;AAAA,UACf,aAAa;AAAA,UACb,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,UAAU,MAAM,KAAK;AAAA,QAChC;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,MAAM;AAAA,QACjB;AAAA,MACJ;AACI,eAAO;AAAA,UACH,OAAAA;AAAA,UACA,MAAM;AAAA,UACN,OAAO,yBAAyB,MAAM,IAAI;AAAA,QAC9C;AAAA,IACR;AAAA,EACJ,CAAC;AACD,SAAO,SAAS,WAAW,IACrB,CAAC,EAAE,OAAO,WAAW,OAAO,GAAG,MAAM,WAAW,OAAO,GAAG,CAAC,IAC3D;AACV;AACO,IAAI;AAAA,CACV,SAAUC,mBAAkB;AACzB,EAAAA,kBAAiB,kBAAkB,IAAI;AACvC,EAAAA,kBAAiB,oBAAoB,IAAI;AACzC,EAAAA,kBAAiB,sBAAsB,IAAI;AAC/C,GAAG,qBAAqB,mBAAmB,CAAC,EAAE;AAC9C,IAAM,2BAA2B,CAAC,EAAE,MAAM,eAAe,YAAY,oBAAoB,mBAAmB,wBAAwB,aAAa,YAAY,aAAc,MAAM;AAC7K,MAAI,uBAAuB,QAAW;AAClC,WAAO;AAAA,MACH,OAAO,QAAQ,UAAU,oDAAoD,YAAY;AAAA,MACzF,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,OAAO,uBAAuB,YAAY;AAC1C,UAAMC,aAAY;AAClB,WAAOA,WAAU,YAAY,MAAM,aAAa;AAAA,EACpD;AACA,MAAI,gBAAgB,QAAW;AAC3B,WAAO;AAAA,MACH,OAAO,SAAS,UAAU,6DAA6D,YAAY,uDAAuD,UAAU,IAAI,gBAAgB;AAAA,MACxL,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,YAAY,mBAAmB,WAAW;AAChD,MAAI,cAAc,QAAW;AACzB,WAAO;AAAA,MACH,OAAO,mBAAmB,UAAU,wCAAwC,UAAU,IAAI,WAAW;AAAA,MACrG,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,SAAO,UAAU,YAAY,MAAM,aAAa;AACpD;AAcO,IAAM,4BAA4B,CAAC,EAAE,MAAM,eAAe,WAAY,MAAM;AAC/E,QAAM,CAAC,YAAY,WAAW,IAAI,WAAW,MAAM,GAAG;AACtD,UAAQ,YAAY;AAAA,IAChB,KAAK,iBAAiB;AAClB,aAAO,yBAAyB;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA,oBAAoB,cAAc,YAAY;AAAA,QAC9C;AAAA,QACA;AAAA,QACA,cAAc;AAAA,MAClB,CAAC;AAAA,IACL,KAAK,iBAAiB;AAClB,aAAO,yBAAyB;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA,oBAAoB,cAAc,YAAY;AAAA,QAC9C;AAAA,QACA;AAAA,QACA,cAAc;AAAA,MAClB,CAAC;AAAA,IACL,KAAK,iBAAiB;AAClB,aAAO,yBAAyB;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA,oBAAoB,cAAc,YAAY;AAAA,QAC9C,kBAAkB;AAAA,QAClB;AAAA,QACA;AAAA,QACA,cAAc;AAAA,MAClB,CAAC;AAAA,IACL,SAAS;AACL,YAAM,mBAAmB,cAAc,YAAY,UAAU;AAC7D,UAAI,qBAAqB,QAAW;AAChC,eAAO,EAAE,QAAQ,OAAO;AAAA,MAC5B;AACA,aAAO,yBAAyB;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG;AAAA;AAAA,UAEC,aAAa;AAAA,YACT,oBAAoB,cAAc,YAAY;AAAA,YAC9C,cAAc;AAAA,UAClB;AAAA;AAAA,UAEA,OAAO;AAAA,YACH,oBAAoB,cAAc,YAAY;AAAA,YAC9C,kBAAkB;AAAA,YAClB,cAAc;AAAA,UAClB;AAAA;AAAA,UAEA,KAAK;AAAA,YACD,oBAAoB,cAAc,YAAY;AAAA,YAC9C,kBAAkB;AAAA,YAClB,cAAc;AAAA,UAClB;AAAA;AAAA,UAEA,YAAY;AAAA,YACR,oBAAoB,cAAc,YAAY;AAAA,YAC9C,cAAc;AAAA,UAClB;AAAA,QACJ,EAAE,iBAAiB,IAAI;AAAA,MAC3B,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AAQO,IAAM,wBAAwB,CAAC,kBAAkB;AAIpD,QAAM,MAAM;AACZ,QAAM,WAAW,cAAc,OAAO,CAAC,UAAU,UAAU,GAAG;AAE9D,MAAI,SAAS,WAAW,cAAc,QAAQ;AAE1C,aAAS,KAAK,uBAAuB;AAAA,EACzC;AACA,QAAM,qBAAqB,SAAS,MAAM,GAAG,SAAS,SAAS,CAAC;AAEhE,QAAM,cAAc,SAAS,SAAS,SAAS,CAAC;AAChD,QAAM,sBAAsB;AAC5B,QAAM,kBAAkB;AACxB,SAAO,+DAA+D,SAAS,UAAU,sBACnF,mBAAmB,KAAK,IAAI,EAAE,OAAO,QAAQ,WAAW,EAAE,IAC1D,SAAS,WAAW,kBAChB,SAAS,KAAK,MAAM,IACpB,WAAW;AACzB;AACO,IAAM,mBAAmB,OAAO;AAAA,EACnC,WAAW;AAAA,EACX,eAAe;AAAA,EACf,aAAa;AAAA,EACb,iBAAiB;AACrB;AAKO,IAAM,mBAAmB,CAAC,EAAE,MAAM,eAAe,SAAU,MAAM;AACpE,QAAM,SAAS,cAAc,QAAQ,QAAQ;AAC7C,MAAI,WAAW,QAAW;AACtB,WAAO;AAAA,MACH,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ;AAAA,UACI,OAAO,4BAA4B,QAAQ;AAAA,UAC3C,OAAO,iBAAiB;AAAA,QAC5B;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,IACb;AAAA,EACJ;AACA,MAAI,cAAc,iBAAiB,SAAS,QAAQ,MAAM,MAAM;AAC5D,WAAO;AAAA,MACH,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ;AAAA,UACI,OAAO,kDAAkD,QAAQ,wDAAwD,cAAc,gBAAgB,KAAK,KAAK,CAAC;AAAA,UAClK,OAAO,iBAAiB;AAAA,QAC5B;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,IACb;AAAA,EACJ;AACA,QAAM,kBAAkB,cAAc,oBAAoB,SACpD,CAAC,QAAQ,IACT,CAAC,GAAG,cAAc,iBAAiB,QAAQ;AAEjD,SAAO,sBAAsB;AAAA,IACzB,eAAe,EAAE,GAAG,eAAe,gBAAgB;AAAA,IACnD;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAYO,IAAM,0BAA0B,CAAC,EAAE,MAAM,eAAe,WAAY,MAAM;AAC7E,MAAI,cAAc,QAAQ,UAAU,MAAM,QAAW;AACjD,WAAO;AAAA,EACX;AACA,QAAM,SAAS,iBAAiB;AAAA,IAC5B;AAAA,IACA;AAAA,IACA,UAAU;AAAA,EACd,CAAC;AACD,MAAI,OAAO,SAAS;AAChB,WAAO;AAAA,EACX;AACA,SAAO,yCAAyC,UAAU,MAAM,gBAAgB,OAAO,MAAM,CAAC;AAClG;AAQO,IAAM,2BAA2B,CAAC,EAAE,MAAM,cAAe;AAAA;AAAA,EAEhE,CAAC,eAAe;AACZ,UAAM,eAAe,cAAc,UAAU,UAAU;AACvD,QAAI,iBAAiB,QAAW;AAC5B,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,MAAM,yBAAyB;AAAA,MACnC;AAAA,IACJ;AACA,UAAM,iBAAiB,0BAA0B;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,eAAe,WAAW,QAAQ;AAClC,aAAO,eAAe,WAAW,UAC3B;AAAA,QACE,GAAI,WAAW,iBACT,EAAE,OAAO,eAAe,MAAM,IAC9B,CAAC;AAAA,QACP,OAAO,eAAe;AAAA,QACtB,GAAI,cAAc,oBAAoB,SAChC,CAAC,IACD;AAAA,UACE;AAAA;AAAA,YAEA,cAAc,gBAAgB,WAAW,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA;AAAA,QAC1D;AAAA,QACJ,aAAa,iBAAiB;AAAA,QAC9B,QAAQ;AAAA,QACR,MAAM,8BAA8B;AAAA,MACxC,IACE;AAAA,QACE,GAAI,WAAW,iBACT,EAAE,OAAO,eAAe,MAAM,IAC9B,CAAC;AAAA,QACP,UAAU,eAAe;AAAA,QACzB,GAAI,eAAe,iBACb;AAAA,UACE,WAAW,eAAe;AAAA,QAC9B,IACE,CAAC;AAAA,QACP,QAAQ;AAAA,QACR,MAAM,yBAAyB;AAAA,MACnC;AAAA,IACR;AACA,UAAM,eAAe,wBAAwB;AAAA,MACzC;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,iBAAiB,OAAO;AACxB,aAAO,OAAO,iBAAiB,WACzB;AAAA,QACE,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,MAAM,8BAA8B;AAAA,MACxC,IACE;AAAA,QACE,UAAU,aAAa;AAAA,QACvB,QAAQ,aAAa;AAAA,QACrB,QAAQ;AAAA,QACR,MAAM,yBAAyB;AAAA,MACnC;AAAA,IACR;AACA,WAAO;AAAA,MACH,OAAO,uBAAuB,UAAU;AAAA,MACxC,QAAQ;AAAA,MACR,MAAM,8BAA8B;AAAA,IACxC;AAAA,EACJ;AAAA;AAKO,IAAM,wBAAwB,CAAC,EAAE,MAAM,eAAe,OAAQ,MAAM;AACvE,QAAM,cAAc,YAAY,MAAM;AACtC,MAAI,CAAC,YAAY,QAAQ;AACrB,WAAO;AAAA,MACH,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ;AAAA,UACI,OAAO,sBAAsB,YAAY,QAAQ;AAAA,UACjD,OAAO;AAAA,YACH,WAAW,YAAY,MAAM;AAAA,YAC7B,eAAe,YAAY,MAAM;AAAA,YACjC,aAAa,YAAY,MAAM;AAAA,YAC/B,iBAAiB,YAAY,MAAM;AAAA,UACvC;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,IACb;AAAA,EACJ;AACA,QAAM,WAAW,yBAAyB,EAAE,eAAe,KAAK,CAAC;AACjE,QAAM,iBAAiB,qBAAqB,YAAY,OAAO,QAAQ;AACvE,QAAM,mBAAmB,oBAAoB,cAAc;AAC3D,MAAI,iBAAiB,WAAW,GAAG;AAC/B,WAAO;AAAA,MACH,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,OAAO,YAAY;AAAA,MACnB,SAAS;AAAA,MACT,SAAS;AAAA,IACb;AAAA,EACJ;AACA,QAAM,YAAY,aAAa,gBAAgB,cAAc,IAAI,cAAc,2BAA2B;AAC1G,SAAO;AAAA,IACH,GAAI,UAAU,WAAW,SACnB,EAAE,UAAU,UAAU,UAAU,SAAS,KAAK,IAC9C,EAAE,WAAW,UAAU,QAAQ,UAAU,QAAQ,SAAS,MAAM;AAAA,IACtE,OAAO,YAAY;AAAA,IACnB,QAAQ;AAAA,IACR,SAAS;AAAA,EACb;AACJ;;;ADrcO,IAAM,gBAAgB,CAAC,UAAU,MAAM,kBAAkB;AAC5D,QAAM,kCAAkC;AACxC,QAAM,+BAA+B;AACrC,MAAI,KAAK,oBAAoB,YAAY,aAAa,QAAW;AAC7D,QAAI,cAAc,+BAA+B,QAAQ,MAAM,YAC3D,KAAK,mBAAmB,YAAY,YAChC,8BAA8B;AAClC,aAAO;AAAA,QACH,WAAW;AAAA,QACX,QAAQ;AAAA,UACJ;AAAA,YACI,OAAO,eAAe,QAAQ,sHAAsH,KAAK,mBAAmB,YAAY,QAAQ;AAAA,YAChM,OAAO,iBAAiB;AAAA,UAC5B;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACb;AAAA,IACJ;AACA,QAAI,cAAc,+BAA+B,QAAQ,MAAM,eAC3D,KAAK,mBAAmB,YAAY,WAChC,8BAA8B;AAClC,aAAO;AAAA,QACH,WAAW;AAAA,QACX,QAAQ;AAAA,UACJ;AAAA,YACI,OAAO,eAAe,QAAQ,qIAAqI,KAAK,mBAAmB,YAAY,QAAQ;AAAA,YAC/M,OAAO,iBAAiB;AAAA,UAC5B;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,KAAK,oBAAoB,YAAY,OAAO,KAAK,mBAAmB,UAAU,GAAG,mBAAmB,UACpG,cAAc,+BAA+B,QAAQ,MAAM;AAAA,EAE3D,KAAK,mBAAmB,YAAY,OAAO,KAAK,mBAAmB,UAAU,EAAE,mBAAmB,iCAAiC;AACnI,WAAO;AAAA,MACH,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ;AAAA,UACI,OAAO,eAAe,QAAQ;AAAA,UAC9B,OAAO,iBAAiB;AAAA,QAC5B;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,IACb;AAAA,EACJ;AACA,QAAM,YAAY,iBAAiB;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACD,MAAI,CAAC,UAAU,SAAS;AACpB,WAAO;AAAA,EACX;AACA,QAAM,UAAU,cAAc,mBAAmB,QAAQ;AACzD,QAAM,sBAAsB,YAAY,SAClC,SACA,cAAc,qBAAqB,OAAO;AAChD,QAAM,eAAe,wBAAwB,YAAY,wBAAwB;AACjF,QAAM,oBAAoB,cAAc,qBAAqB,QAAQ;AACrE,QAAM,aAAa,sBAAsB,YAAY,sBAAsB;AAC3E,MAAI,YAAY;AACZ,UAAM,oBAAoB,iBAAiB;AAAA,MACvC,eAAe;AAAA,QACX,GAAG;AAAA,QACH,SAAS;AAAA,UACL,eAAe;AAAA,UACf,eAAe;AAAA,QACnB;AAAA,QACA,WAAW,EAAE,iBAAiB,EAAE,MAAM,cAAc,EAAE;AAAA,MAC1D;AAAA,MACA,MAAM,EAAE,UAAU,EAAE,iBAAiB,UAAU,SAAS,EAAE;AAAA,MAC1D,UAAU,sBAAsB,WAAW,kBAAkB;AAAA,IACjE,CAAC;AACD,QAAI,CAAC,kBAAkB,SAAS;AAC5B,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,GAAG;AAAA,MACH,UAAU,kBAAkB;AAAA,MAC5B,aAAa,sBAAsB,WAAW,mBAAmB;AAAA,IACrE;AAAA,EACJ;AACA,MAAI,cAAc;AACd,UAAM,wBAAwB,iBAAiB;AAAA,MAC3C;AAAA,MACA;AAAA;AAAA,MAEA,UAAU;AAAA,IACd,CAAC;AACD,QAAI,CAAC,sBAAsB,SAAS;AAChC,aAAO;AAAA,IACX;AACA,UAAM,oBAAoB,iBAAiB;AAAA,MACvC,eAAe;AAAA,QACX,GAAG;AAAA,QACH,SAAS;AAAA,UACL,eAAe;AAAA,QACnB;AAAA,QACA,WAAW;AAAA,UACP,iBAAiB,EAAE,MAAM,cAAc;AAAA,UACvC,mBAAmB,EAAE,MAAM,cAAc;AAAA,QAC7C;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,UAAU;AAAA,UACN,iBAAiB,sBAAsB;AAAA,UACvC,mBAAmB,UAAU;AAAA,QACjC;AAAA,MACJ;AAAA,MACA,UAAU;AAAA,IACd,CAAC;AACD,WAAO;AAAA,MACH,GAAG;AAAA,MACH,UAAU,kBAAkB;AAAA,MAC5B,aAAa,wBAAwB,WAC/B,qBACA;AAAA,IACV;AAAA,EACJ;AACA,SAAO;AACX;;;AuEpIA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAO,2CAAQ;AAmsBf,IAAM,WAAW;AAAA,EACb,sBAAsB;AAAA,EACtB,YAAY;AAAA,IACR,aAAa;AAAA,MACT,aAAa;AAAA,MACb,MAAM,CAAC,UAAU,UAAU,UAAU;AAAA,MACrC,MAAM;AAAA,IACV;AAAA,IACA,MAAM;AAAA,MACF,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,IACA,QAAQ;AAAA,MACJ,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,UAAU,CAAC,eAAe,QAAQ;AAAA,EAClC,MAAM;AACV;AACA,IAAM,WAAW;AAAA,EACb,sBAAsB;AAAA,EACtB,YAAY;AAAA,IACR,SAAS;AAAA,MACL,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,IACA,UAAU;AAAA,MACN,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,IACA,OAAO;AAAA,MACH,aAAa;AAAA,MACb,OAAO,EAAE,MAAM,SAAS;AAAA,MACxB,MAAM;AAAA,IACV;AAAA,IACA,SAAS;AAAA,MACL,aAAa;AAAA,MACb,OAAO,EAAE,MAAM,SAAS;AAAA,MACxB,MAAM;AAAA,IACV;AAAA,IACA,MAAM;AAAA,MACF,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,IACA,QAAQ;AAAA,MACJ,aAAa;AAAA,MACb,OAAO,EAAE,MAAM,SAAS;AAAA,MACxB,MAAM;AAAA,IACV;AAAA,IACA,QAAQ;AAAA,MACJ,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,IACA,cAAc;AAAA,MACV,aAAa;AAAA,MACb,MAAM,CAAC,UAAU,WAAW;AAAA,MAC5B,MAAM;AAAA,IACV;AAAA,IACA,SAAS;AAAA,MACL,aAAa;AAAA,MACb,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,UAAU,CAAC,UAAU,SAAS;AAAA,EAC9B,MAAM;AACV;AACA,IAAM,WAAW;AAAA,EACb,aAAa;AAAA,EACb,MAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,MAAM;AACV;AAoIA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,QAAM,SAAS;AACf,MAAI,SAAS;AACb,QAAM,SAAS;AACf,QAAM,SAAS;AACf,MAAI,WAAW,QAAQ;AACnB,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAI,KAAK,SAAS,WAAc,WAAW,SAAS;AAChD,cAAM,OAAO;AAAA,UACT;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,UACpC,SAAS,kCAAkC,WAAW;AAAA,QAC1D;AACA,YAAI,YAAY,MAAM;AAClB,oBAAU,CAAC,IAAI;AAAA,QACnB,OACK;AACD,kBAAQ,KAAK,IAAI;AAAA,QACrB;AACA;AAAA,MACJ,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAE,SAAS,iBAAiB,SAAS,UAAU,SAAS,SAAS;AACjE,kBAAM,OAAO;AAAA,cACT;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AACA,gBAAI,YAAY,MAAM;AAClB,wBAAU,CAAC,IAAI;AAAA,YACnB,OACK;AACD,sBAAQ,KAAK,IAAI;AAAA,YACrB;AACA;AACA;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,gBAAgB,QAAW;AAChC,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,oBAAM,OAAO;AAAA,gBACT,cAAc,eAAe;AAAA,gBAC7B,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gBACzB,SAAS;AAAA,cACb;AACA,kBAAI,YAAY,MAAM;AAClB,0BAAU,CAAC,IAAI;AAAA,cACnB,OACK;AACD,wBAAQ,KAAK,IAAI;AAAA,cACrB;AACA;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,SAAS,QAAW;AACzB,oBAAM,SAAS;AACf,kBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,sBAAM,OAAO;AAAA,kBACT,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,IAAI;AAAA,gBACnB,OACK;AACD,0BAAQ,KAAK,IAAI;AAAA,gBACrB;AACA;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,SAAS,QAAW;AACzB,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,oBAAI,OAAO,UAAU,UAAU;AAC3B,wBAAM,OAAO;AAAA,oBACT,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,IAAI;AAAA,kBACnB,OACK;AACD,4BAAQ,KAAK,IAAI;AAAA,kBACrB;AACA;AAAA,gBACJ;AACA,oBAAI,kBAAkB,OAAO;AACzB,wBAAM,OAAO;AAAA,oBACT,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,cAAc,cAAc;AAAA,oBACtC,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,IAAI;AAAA,kBACnB,OACK;AACD,4BAAQ,KAAK,IAAI;AAAA,kBACrB;AACA;AAAA,gBACJ;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,YAAM,OAAO;AAAA,QACT;AAAA,QACA,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,QAAQ,EAAE,MAAM,SAAS;AAAA,QACzB,SAAS;AAAA,MACb;AACA,UAAI,YAAY,MAAM;AAClB,kBAAU,CAAC,IAAI;AAAA,MACnB,OACK;AACD,gBAAQ,KAAK,IAAI;AAAA,MACrB;AACA;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,UAAU,WAAW;AACzB,WAAS,UAAU;AACnB,MAAI,CAAC,QAAQ;AACT,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,QAAI,WAAW,SAAS;AACpB,UAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAI;AACJ,YAAI,KAAK,SAAS,WAAc,WAAW,SAAS;AAChD,gBAAM,OAAO;AAAA,YACT;AAAA,YACA,YAAY;AAAA,YACZ,SAAS;AAAA,YACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,YACpC,SAAS,kCAAkC,WAAW;AAAA,UAC1D;AACA,cAAI,YAAY,MAAM;AAClB,sBAAU,CAAC,IAAI;AAAA,UACnB,OACK;AACD,oBAAQ,KAAK,IAAI;AAAA,UACrB;AACA;AAAA,QACJ,OACK;AACD,gBAAM,UAAU;AAChB,qBAAW,QAAQ,MAAM;AACrB,gBAAI,EAAE,SAAS,mBACX,SAAS,iBACT,SAAS,+BACT,SAAS,UACT,SAAS,2BACT,SAAS,0BACT,SAAS,SAAS;AAClB,oBAAM,OAAO;AAAA,gBACT;AAAA,gBACA,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,gBACnC,SAAS;AAAA,cACb;AACA,kBAAI,YAAY,MAAM;AAClB,0BAAU,CAAC,IAAI;AAAA,cACnB,OACK;AACD,wBAAQ,KAAK,IAAI;AAAA,cACrB;AACA;AACA;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,YAAY,QAAQ;AACpB,gBAAI,KAAK,kBAAkB,QAAW;AAClC,kBAAI,QAAQ,KAAK;AACjB,oBAAM,UAAU;AAChB,kBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,sBAAM,OAAO;AAAA,kBACT,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,IAAI;AAAA,gBACnB,OACK;AACD,0BAAQ,KAAK,IAAI;AAAA,gBACrB;AACA;AAAA,cACJ;AACA,kBAAI,SAAS,YAAY;AAAA,YAC7B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,gBAAgB,QAAW;AAChC,sBAAM,UAAU;AAChB,oBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,wBAAM,QAAQ;AAAA,oBACV,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,KAAK;AAAA,kBACpB,OACK;AACD,4BAAQ,KAAK,KAAK;AAAA,kBACtB;AACA;AAAA,gBACJ;AACA,oBAAI,SAAS,YAAY;AAAA,cAC7B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,8BAA8B,QAAW;AAC9C,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,8BAA8B,UAAU;AACpD,0BAAM,QAAQ;AAAA,sBACV,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sBACzB,SAAS;AAAA,oBACb;AACA,wBAAI,YAAY,MAAM;AAClB,gCAAU,CAAC,KAAK;AAAA,oBACpB,OACK;AACD,8BAAQ,KAAK,KAAK;AAAA,oBACtB;AACA;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,SAAS,QAAW;AACzB,0BAAM,UAAU;AAChB,wBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,4BAAM,QAAQ;AAAA,wBACV,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wBACzB,SAAS;AAAA,sBACb;AACA,0BAAI,YAAY,MAAM;AAClB,kCAAU,CAAC,KAAK;AAAA,sBACpB,OACK;AACD,gCAAQ,KAAK,KAAK;AAAA,sBACtB;AACA;AAAA,oBACJ;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,KAAK,0BAA0B,QAAW;AAC1C,4BAAM,UAAU;AAChB,0BAAI,OAAO,KAAK,0BAA0B,UAAU;AAChD,8BAAM,QAAQ;AAAA,0BACV,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,KAAK;AAAA,wBACpB,OACK;AACD,kCAAQ,KAAK,KAAK;AAAA,wBACtB;AACA;AAAA,sBACJ;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,KAAK,yBAAyB,QAAW;AACzC,8BAAM,UAAU;AAChB,4BAAI,OAAO,KAAK,yBAAyB,UAAU;AAC/C,gCAAM,QAAQ;AAAA,4BACV,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AACA,8BAAI,YAAY,MAAM;AAClB,sCAAU,CAAC,KAAK;AAAA,0BACpB,OACK;AACD,oCAAQ,KAAK,KAAK;AAAA,0BACtB;AACA;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,KAAK,SAAS,QAAW;AACzB,8BAAI,QAAQ,KAAK;AACjB,gCAAM,UAAU;AAChB,8BAAI,OAAO,UAAU,UAAU;AAC3B,kCAAM,QAAQ;AAAA,8BACV,cAAc,eAAe;AAAA,8BAC7B,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8BACzB,SAAS;AAAA,4BACb;AACA,gCAAI,YAAY,MAAM;AAClB,wCAAU,CAAC,KAAK;AAAA,4BACpB,OACK;AACD,sCAAQ,KAAK,KAAK;AAAA,4BACtB;AACA;AAAA,0BACJ;AACA,8BAAI,YAAY,OAAO;AACnB,kCAAM,QAAQ;AAAA,8BACV,cAAc,eAAe;AAAA,8BAC7B,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,cAAc,QAAQ;AAAA,8BAChC,SAAS;AAAA,4BACb;AACA,gCAAI,YAAY,MAAM;AAClB,wCAAU,CAAC,KAAK;AAAA,4BACpB,OACK;AACD,sCAAQ,KAAK,KAAK;AAAA,4BACtB;AACA;AAAA,0BACJ;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,cAAM,QAAQ;AAAA,UACV;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AACA,YAAI,YAAY,MAAM;AAClB,oBAAU,CAAC,KAAK;AAAA,QACpB,OACK;AACD,kBAAQ,KAAK,KAAK;AAAA,QACtB;AACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,UAAU,YAAY;AAC1B,aAAS,UAAU;AACnB,QAAI,CAAC,QAAQ;AACT,YAAM,UAAU;AAChB,YAAM,UAAU;AAChB,UAAI,WAAW,SAAS;AACpB,YAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,cAAI;AACJ,cAAI,KAAK,SAAS,WAAc,WAAW,SAAS;AAChD,kBAAM,QAAQ;AAAA,cACV;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,cACpC,SAAS,kCAAkC,WAAW;AAAA,YAC1D;AACA,gBAAI,YAAY,MAAM;AAClB,wBAAU,CAAC,KAAK;AAAA,YACpB,OACK;AACD,sBAAQ,KAAK,KAAK;AAAA,YACtB;AACA;AAAA,UACJ,OACK;AACD,kBAAM,UAAU;AAChB,uBAAW,QAAQ,MAAM;AACrB,kBAAI,EAAE,SAAS,iBAAiB,SAAS,UAAU,SAAS,SAAS;AACjE,sBAAM,QAAQ;AAAA,kBACV;AAAA,kBACA,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,kBACnC,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,KAAK;AAAA,gBACpB,OACK;AACD,0BAAQ,KAAK,KAAK;AAAA,gBACtB;AACA;AACA;AAAA,cACJ;AAAA,YACJ;AACA,gBAAI,YAAY,QAAQ;AACpB,kBAAI,KAAK,gBAAgB,QAAW;AAChC,sBAAM,UAAU;AAChB,oBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,wBAAM,QAAQ;AAAA,oBACV,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,KAAK;AAAA,kBACpB,OACK;AACD,4BAAQ,KAAK,KAAK;AAAA,kBACtB;AACA;AAAA,gBACJ;AACA,oBAAI,SAAS,YAAY;AAAA,cAC7B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,SAAS,QAAW;AACzB,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,0BAAM,QAAQ;AAAA,sBACV,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sBACzB,SAAS;AAAA,oBACb;AACA,wBAAI,YAAY,MAAM;AAClB,gCAAU,CAAC,KAAK;AAAA,oBACpB,OACK;AACD,8BAAQ,KAAK,KAAK;AAAA,oBACtB;AACA;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,SAAS,QAAW;AACzB,wBAAI,SAAS,KAAK;AAClB,0BAAM,UAAU;AAChB,wBAAI,OAAO,WAAW,UAAU;AAC5B,4BAAM,QAAQ;AAAA,wBACV,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wBACzB,SAAS;AAAA,sBACb;AACA,0BAAI,YAAY,MAAM;AAClB,kCAAU,CAAC,KAAK;AAAA,sBACpB,OACK;AACD,gCAAQ,KAAK,KAAK;AAAA,sBACtB;AACA;AAAA,oBACJ;AACA,wBAAI,UAAU,QAAQ;AAClB,4BAAM,QAAQ;AAAA,wBACV,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,cAAc,MAAM;AAAA,wBAC9B,SAAS;AAAA,sBACb;AACA,0BAAI,YAAY,MAAM;AAClB,kCAAU,CAAC,KAAK;AAAA,sBACpB,OACK;AACD,gCAAQ,KAAK,KAAK;AAAA,sBACtB;AACA;AAAA,oBACJ;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,OACK;AACD,gBAAM,QAAQ;AAAA,YACV;AAAA,YACA,YAAY;AAAA,YACZ,SAAS;AAAA,YACT,QAAQ,EAAE,MAAM,SAAS;AAAA,YACzB,SAAS;AAAA,UACb;AACA,cAAI,YAAY,MAAM;AAClB,sBAAU,CAAC,KAAK;AAAA,UACpB,OACK;AACD,oBAAQ,KAAK,KAAK;AAAA,UACtB;AACA;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,UAAU,YAAY;AAC1B,eAAS,UAAU;AACnB,UAAI,CAAC,QAAQ;AACT,cAAM,UAAU;AAChB,cAAM,UAAU;AAChB,YAAI,WAAW,SAAS;AACpB,cAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,gBAAI;AACJ,gBAAI,KAAK,SAAS,WAAc,WAAW,SAAS;AAChD,oBAAM,QAAQ;AAAA,gBACV;AAAA,gBACA,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,gBACpC,SAAS,kCAAkC,WAAW;AAAA,cAC1D;AACA,kBAAI,YAAY,MAAM;AAClB,0BAAU,CAAC,KAAK;AAAA,cACpB,OACK;AACD,wBAAQ,KAAK,KAAK;AAAA,cACtB;AACA;AAAA,YACJ,OACK;AACD,oBAAM,UAAU;AAChB,yBAAW,QAAQ,MAAM;AACrB,oBAAI,EAAE,SAAS,iBACX,SAAS,UACT,SAAS,SAAS;AAClB,wBAAM,QAAQ;AAAA,oBACV;AAAA,oBACA,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,oBACnC,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,KAAK;AAAA,kBACpB,OACK;AACD,4BAAQ,KAAK,KAAK;AAAA,kBACtB;AACA;AACA;AAAA,gBACJ;AAAA,cACJ;AACA,kBAAI,YAAY,QAAQ;AACpB,oBAAI,KAAK,gBAAgB,QAAW;AAChC,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,0BAAM,QAAQ;AAAA,sBACV,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sBACzB,SAAS;AAAA,oBACb;AACA,wBAAI,YAAY,MAAM;AAClB,gCAAU,CAAC,KAAK;AAAA,oBACpB,OACK;AACD,8BAAQ,KAAK,KAAK;AAAA,oBACtB;AACA;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,SAAS,QAAW;AACzB,0BAAM,UAAU;AAChB,wBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,4BAAM,QAAQ;AAAA,wBACV,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wBACzB,SAAS;AAAA,sBACb;AACA,0BAAI,YAAY,MAAM;AAClB,kCAAU,CAAC,KAAK;AAAA,sBACpB,OACK;AACD,gCAAQ,KAAK,KAAK;AAAA,sBACtB;AACA;AAAA,oBACJ;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,KAAK,SAAS,QAAW;AACzB,0BAAI,SAAS,KAAK;AAClB,4BAAM,UAAU;AAChB,0BAAI,OAAO,WAAW,UAAU;AAC5B,8BAAM,QAAQ;AAAA,0BACV,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,KAAK;AAAA,wBACpB,OACK;AACD,kCAAQ,KAAK,KAAK;AAAA,wBACtB;AACA;AAAA,sBACJ;AACA,0BAAI,iBAAiB,QAAQ;AACzB,8BAAM,QAAQ;AAAA,0BACV,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,cAAc,aAAa;AAAA,0BACrC,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,KAAK;AAAA,wBACpB,OACK;AACD,kCAAQ,KAAK,KAAK;AAAA,wBACtB;AACA;AAAA,sBACJ;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,OACK;AACD,kBAAM,QAAQ;AAAA,cACV;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,MAAM,SAAS;AAAA,cACzB,SAAS;AAAA,YACb;AACA,gBAAI,YAAY,MAAM;AAClB,wBAAU,CAAC,KAAK;AAAA,YACpB,OACK;AACD,sBAAQ,KAAK,KAAK;AAAA,YACtB;AACA;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,UAAU,YAAY;AAC1B,iBAAS,UAAU;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,CAAC,QAAQ;AACT,UAAM,QAAQ;AAAA,MACV;AAAA,MACA,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,SAAS;AAAA,IACb;AACA,QAAI,YAAY,MAAM;AAClB,gBAAU,CAAC,KAAK;AAAA,IACpB,OACK;AACD,cAAQ,KAAK,KAAK;AAAA,IACtB;AACA;AACA,eAAW,SAAS;AACpB,WAAO;AAAA,EACX,OACK;AACD,aAAS;AACT,QAAI,YAAY,MAAM;AAClB,UAAI,QAAQ;AACR,gBAAQ,SAAS;AAAA,MACrB,OACK;AACD,kBAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AACA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAM,SAAS;AACf,iBAAW,QAAQ,MAAM;AACrB,YAAI,EAAE,SAAS,iBACX,SAAS,UACT,SAAS,aACT,SAAS,cAAc;AACvB,qBAAW,SAAS;AAAA,YAChB;AAAA,cACI;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AAAA,UACJ;AACA,iBAAO;AACP;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ;AACnB,YAAI,KAAK,gBAAgB,QAAW;AAChC,gBAAM,SAAS;AACf,cAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,uBAAW,SAAS;AAAA,cAChB;AAAA,gBACI,cAAc,eAAe;AAAA,gBAC7B,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gBACzB,SAAS;AAAA,cACb;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,SAAS,QAAW;AACzB,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,yBAAW,SAAS;AAAA,gBAChB;AAAA,kBACI,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,YAAY,QAAW;AAC5B,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,kBAAI,WAAW,QAAQ;AACnB,oBAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,sBAAI,SAAS;AACb,wBAAM,OAAO,MAAM;AACnB,2BAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,0BAAM,SAAS;AACf,wBAAI,OAAO,MAAM,EAAE,MAAM,UAAU;AAC/B,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe,cAAc;AAAA,0BAC3C,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,WAAW;AACxB,wBAAI,CAAC,QAAQ;AACT;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ,OACK;AACD,6BAAW,SAAS;AAAA,oBAChB;AAAA,sBACI,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,sBACxB,SAAS;AAAA,oBACb;AAAA,kBACJ;AACA,yBAAO;AAAA,gBACX;AAAA,cACJ;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,cAAc,QAAW;AAC9B,oBAAI,QAAQ,KAAK;AACjB,sBAAM,UAAU;AAChB,oBAAI,WAAW,SAAS;AACpB,sBAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,+BAAW,QAAQ,OAAO;AACtB,4BAAM,UAAU;AAChB,0BAAI,CAAC,WAAW,MAAM,IAAI,GAAG;AAAA,wBACzB,cAAc,eACV,gBACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,wBAChD,YAAY;AAAA,wBACZ,oBAAoB;AAAA,wBACpB;AAAA,sBACJ,CAAC,GAAG;AACA,kCACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,iCAAS,QAAQ;AAAA,sBACrB;AACA,0BAAI,SAAS,YAAY;AACzB,0BAAI,CAAC,QAAQ;AACT;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,OACK;AACD,+BAAW,SAAS;AAAA,sBAChB;AAAA,wBACI,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wBACzB,SAAS;AAAA,sBACb;AAAA,oBACJ;AACA,2BAAO;AAAA,kBACX;AAAA,gBACJ;AACA,oBAAI,SAAS,YAAY;AAAA,cAC7B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AA+GA,IAAM,WAAW;AAAA,EACb,sBAAsB;AAAA,EACtB,aAAa;AAAA,EACb,YAAY;AAAA,IACR,iBAAiB;AAAA,MACb,OAAO;AAAA,QACH,EAAE,MAAM,uDAAuD;AAAA,QAC/D;AAAA,UACI,OAAO,EAAE,OAAO,QAAQ,MAAM,SAAS;AAAA,UACvC,UAAU;AAAA,UACV,UAAU;AAAA,UACV,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA,aAAa;AAAA,IACjB;AAAA,IACA,OAAO;AAAA,MACH,sBAAsB;AAAA,MACtB,aAAa;AAAA,MACb,YAAY;AAAA,QACR,QAAQ;AAAA,UACJ,aAAa;AAAA,UACb,MAAM,CAAC,UAAU,QAAQ;AAAA,QAC7B;AAAA,QACA,UAAU;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,QACV;AAAA,QACA,KAAK;AAAA,UACD,sBAAsB;AAAA,UACtB,aAAa;AAAA,UACb,YAAY;AAAA,YACR,YAAY;AAAA,cACR,aAAa;AAAA,cACb,MAAM,CAAC,WAAW,WAAW,MAAM;AAAA,cACnC,MAAM;AAAA,YACV;AAAA,YACA,YAAY;AAAA,cACR,aAAa;AAAA,cACb,MAAM;AAAA,YACV;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,IACV;AAAA,IACA,eAAe;AAAA,MACX,aAAa;AAAA,MACb,MAAM,CAAC,UAAU,QAAQ;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,MAAM;AACV;AA6BA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,QAAM,SAAS;AACf,MAAI,SAAS;AACb,QAAM,SAAS;AACf,MAAI,OAAO,SAAS,UAAU;AAC1B,UAAM,OAAO;AAAA,MACT;AAAA,MACA,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,QAAQ,EAAE,MAAM,SAAS;AAAA,MACzB,SAAS;AAAA,IACb;AACA,QAAI,YAAY,MAAM;AAClB,gBAAU,CAAC,IAAI;AAAA,IACnB,OACK;AACD,cAAQ,KAAK,IAAI;AAAA,IACrB;AACA;AAAA,EACJ;AACA,MAAI,UAAU,WAAW;AACzB,WAAS,UAAU;AACnB,MAAI,CAAC,QAAQ;AACT,UAAM,SAAS;AACf,QAAI,WAAW,QAAQ;AACnB,UAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAE,SAAS,eAAe,SAAS,WAAW;AAC9C,kBAAM,OAAO;AAAA,cACT;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AACA,gBAAI,YAAY,MAAM;AAClB,wBAAU,CAAC,IAAI;AAAA,YACnB,OACK;AACD,sBAAQ,KAAK,IAAI;AAAA,YACrB;AACA;AACA;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,cAAc,QAAW;AAC9B,gBAAI,QAAQ,KAAK;AACjB,kBAAM,SAAS;AACf,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,sBAAM,SAAS;AACf,2BAAW,QAAQ,OAAO;AACtB,sBAAI,EAAE,SAAS,cACX,SAAS,wBACT,SAAS,sBACT,SAAS,YACT,SAAS,SAAS;AAClB,0BAAM,OAAO;AAAA,sBACT,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,sBACnC,SAAS;AAAA,oBACb;AACA,wBAAI,YAAY,MAAM;AAClB,gCAAU,CAAC,IAAI;AAAA,oBACnB,OACK;AACD,8BAAQ,KAAK,IAAI;AAAA,oBACrB;AACA;AACA;AAAA,kBACJ;AAAA,gBACJ;AACA,oBAAI,WAAW,QAAQ;AACnB,sBAAI,MAAM,aAAa,QAAW;AAC9B,wBAAI,QAAQ,MAAM;AAClB,0BAAM,UAAU;AAChB,wBAAI,WAAW,SAAS;AACpB,0BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,mCAAW,QAAQ,OAAO;AACtB,gCAAM,UAAU;AAChB,8BAAI,OAAO,MAAM,IAAI,MAAM,UAAU;AACjC,kCAAM,OAAO;AAAA,8BACT,cAAc,eACV,yBACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,8BAChD,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8BACzB,SAAS;AAAA,4BACb;AACA,gCAAI,YAAY,MAAM;AAClB,wCAAU,CAAC,IAAI;AAAA,4BACnB,OACK;AACD,sCAAQ,KAAK,IAAI;AAAA,4BACrB;AACA;AAAA,0BACJ;AACA,8BAAI,SAAS,YAAY;AACzB,8BAAI,CAAC,QAAQ;AACT;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ,OACK;AACD,8BAAM,OAAO;AAAA,0BACT,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,IAAI;AAAA,wBACnB,OACK;AACD,kCAAQ,KAAK,IAAI;AAAA,wBACrB;AACA;AAAA,sBACJ;AAAA,oBACJ;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,MAAM,uBAAuB,QAAW;AACxC,0BAAI,QAAQ,MAAM;AAClB,4BAAM,UAAU;AAChB,0BAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,8BAAM,OAAO;AAAA,0BACT,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,IAAI;AAAA,wBACnB,OACK;AACD,kCAAQ,KAAK,IAAI;AAAA,wBACrB;AACA;AAAA,sBACJ;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,MAAM,qBAAqB,QAAW;AACtC,4BAAI,QAAQ,MAAM;AAClB,8BAAM,UAAU;AAChB,4BAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,gCAAM,OAAO;AAAA,4BACT,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AACA,8BAAI,YAAY,MAAM;AAClB,sCAAU,CAAC,IAAI;AAAA,0BACnB,OACK;AACD,oCAAQ,KAAK,IAAI;AAAA,0BACrB;AACA;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,MAAM,WAAW,QAAW;AAC5B,8BAAI,QAAQ,MAAM;AAClB,gCAAM,UAAU;AAChB,8BAAI,WAAW,SAAS;AACpB,gCAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,oCAAM,UAAU;AAChB,yCAAW,QAAQ,OAAO;AACtB,oCAAI,EAAE,SAAS,kBACX,SAAS,mBACT,SAAS,iBAAiB;AAC1B,wCAAM,OAAO;AAAA,oCACT,cAAc,eAAe;AAAA,oCAC7B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,oCACnC,SAAS;AAAA,kCACb;AACA,sCAAI,YAAY,MAAM;AAClB,8CAAU,CAAC,IAAI;AAAA,kCACnB,OACK;AACD,4CAAQ,KAAK,IAAI;AAAA,kCACrB;AACA;AACA;AAAA,gCACJ;AAAA,8BACJ;AACA,kCAAI,YAAY,QAAQ;AACpB,oCAAI,MAAM,iBAAiB,QAAW;AAClC,sCAAI,QAAQ,MAAM;AAClB,wCAAM,UAAU;AAChB,sCAAI,EAAE,OAAO,SAAS,YAClB,SAAS,KAAK,IAAI;AAClB,0CAAM,OAAO;AAAA,sCACT,cAAc,eACV;AAAA,sCACJ,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sCACzB,SAAS;AAAA,oCACb;AACA,wCAAI,YAAY,MAAM;AAClB,gDAAU,CAAC,IAAI;AAAA,oCACnB,OACK;AACD,8CAAQ,KAAK,IAAI;AAAA,oCACrB;AACA;AAAA,kCACJ;AACA,sCAAI,SAAS,YAAY;AAAA,gCAC7B,OACK;AACD,sCAAI,SAAS;AAAA,gCACjB;AACA,oCAAI,QAAQ;AACR,sCAAI,MAAM,kBAAkB,QAAW;AACnC,wCAAI,QAAQ,MAAM;AAClB,0CAAM,UAAU;AAChB,wCAAI,WAAW,SAAS;AACpB,0CAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,mDAAW,QAAQ,OAAO;AACtB,gDAAM,UAAU;AAChB,8CAAI,OAAO,MAAM,IAAI,MAAM,UAAU;AACjC,kDAAM,OAAO;AAAA,8CACT,cAAc,eACV,qCACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,8CAC5B,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8CACzB,SAAS;AAAA,4CACb;AACA,gDAAI,YAAY,MAAM;AAClB,wDAAU,CAAC,IAAI;AAAA,4CACnB,OACK;AACD,sDAAQ,KAAK,IAAI;AAAA,4CACrB;AACA;AAAA,0CACJ;AACA,8CAAI,SAAS,YAAY;AACzB,8CAAI,CAAC,QAAQ;AACT;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ,OACK;AACD,8CAAM,QAAQ;AAAA,0CACV,cAAc,eACV;AAAA,0CACJ,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0CACzB,SAAS;AAAA,wCACb;AACA,4CAAI,YAAY,MAAM;AAClB,oDAAU,CAAC,KAAK;AAAA,wCACpB,OACK;AACD,kDAAQ,KAAK,KAAK;AAAA,wCACtB;AACA;AAAA,sCACJ;AAAA,oCACJ;AACA,wCAAI,SAAS,YAAY;AAAA,kCAC7B,OACK;AACD,wCAAI,SAAS;AAAA,kCACjB;AACA,sCAAI,QAAQ;AACR,wCAAI,MAAM,iBAAiB,QAAW;AAClC,0CAAI,QAAQ,MAAM;AAClB,4CAAM,UAAU;AAChB,0CAAI,WAAW,SAAS;AACpB,4CAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,qDAAW,QAAQ,OAAO;AACtB,kDAAM,UAAU;AAChB,gDAAI,OAAO,MAAM,IAAI,MAAM,UAAU;AACjC,oDAAM,QAAQ;AAAA,gDACV,cAAc,eACV,oCACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,gDAC5B,YAAY;AAAA,gDACZ,SAAS;AAAA,gDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gDACzB,SAAS;AAAA,8CACb;AACA,kDAAI,YAAY,MAAM;AAClB,0DAAU,CAAC,KAAK;AAAA,8CACpB,OACK;AACD,wDAAQ,KAAK,KAAK;AAAA,8CACtB;AACA;AAAA,4CACJ;AACA,gDAAI,SAAS,YAAY;AACzB,gDAAI,CAAC,QAAQ;AACT;AAAA,4CACJ;AAAA,0CACJ;AAAA,wCACJ,OACK;AACD,gDAAM,QAAQ;AAAA,4CACV,cAAc,eACV;AAAA,4CACJ,YAAY;AAAA,4CACZ,SAAS;AAAA,4CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4CACzB,SAAS;AAAA,0CACb;AACA,8CAAI,YAAY,MAAM;AAClB,sDAAU,CAAC,KAAK;AAAA,0CACpB,OACK;AACD,oDAAQ,KAAK,KAAK;AAAA,0CACtB;AACA;AAAA,wCACJ;AAAA,sCACJ;AACA,0CAAI,SAAS,YAAY;AAAA,oCAC7B,OACK;AACD,0CAAI,SAAS;AAAA,oCACjB;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ;AAAA,4BACJ,OACK;AACD,oCAAM,QAAQ;AAAA,gCACV,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AACA,kCAAI,YAAY,MAAM;AAClB,0CAAU,CAAC,KAAK;AAAA,8BACpB,OACK;AACD,wCAAQ,KAAK,KAAK;AAAA,8BACtB;AACA;AAAA,4BACJ;AAAA,0BACJ;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AACA,4BAAI,QAAQ;AACR,8BAAI,MAAM,SAAS,QAAW;AAC1B,gCAAI,SAAS,MAAM;AACnB,kCAAM,UAAU;AAChB,gCAAI,WAAW,SAAS;AACpB,kCAAI,UACA,OAAO,UAAU,YACjB,CAAC,MAAM,QAAQ,MAAM,GAAG;AACxB,sCAAM,UAAU;AAChB,2CAAW,QAAQ,QAAQ;AACvB,sCAAI,EAAE,SAAS,gBAAgB;AAC3B,0CAAM,QAAQ;AAAA,sCACV,cAAc,eAAe;AAAA,sCAC7B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,sCACnC,SAAS;AAAA,oCACb;AACA,wCAAI,YAAY,MAAM;AAClB,gDAAU,CAAC,KAAK;AAAA,oCACpB,OACK;AACD,8CAAQ,KAAK,KAAK;AAAA,oCACtB;AACA;AACA;AAAA,kCACJ;AAAA,gCACJ;AACA,oCAAI,YAAY,QAAQ;AACpB,sCAAI,OAAO,gBAAgB,QAAW;AAClC,wCAAI,SAAS,OAAO;AACpB,0CAAM,UAAU;AAChB,wCAAI,WAAW,SAAS;AACpB,0CAAI,UACA,OAAO,UAAU,YACjB,CAAC,MAAM,QAAQ,MAAM,GAAG;AACxB,mDAAW,QAAQ,QAAQ;AACvB,gDAAM,UAAU;AAChB,8CAAI,OAAO,OAAO,IAAI,MAAM,UAAU;AAClC,kDAAM,QAAQ;AAAA,8CACV,cAAc,eACV,iCACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,8CAC5B,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8CACzB,SAAS;AAAA,4CACb;AACA,gDAAI,YAAY,MAAM;AAClB,wDAAU,CAAC,KAAK;AAAA,4CACpB,OACK;AACD,sDAAQ,KAAK,KAAK;AAAA,4CACtB;AACA;AAAA,0CACJ;AACA,8CAAI,SAAS,YAAY;AACzB,8CAAI,CAAC,QAAQ;AACT;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ,OACK;AACD,8CAAM,QAAQ;AAAA,0CACV,cAAc,eACV;AAAA,0CACJ,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0CACzB,SAAS;AAAA,wCACb;AACA,4CAAI,YAAY,MAAM;AAClB,oDAAU,CAAC,KAAK;AAAA,wCACpB,OACK;AACD,kDAAQ,KAAK,KAAK;AAAA,wCACtB;AACA;AAAA,sCACJ;AAAA,oCACJ;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ,OACK;AACD,sCAAM,QAAQ;AAAA,kCACV,cAAc,eAAe;AAAA,kCAC7B,YAAY;AAAA,kCACZ,SAAS;AAAA,kCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kCACzB,SAAS;AAAA,gCACb;AACA,oCAAI,YAAY,MAAM;AAClB,4CAAU,CAAC,KAAK;AAAA,gCACpB,OACK;AACD,0CAAQ,KAAK,KAAK;AAAA,gCACtB;AACA;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,SAAS,YAAY;AAAA,0BAC7B,OACK;AACD,gCAAI,SAAS;AAAA,0BACjB;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,OACK;AACD,sBAAM,QAAQ;AAAA,kBACV,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,KAAK;AAAA,gBACpB,OACK;AACD,0BAAQ,KAAK,KAAK;AAAA,gBACtB;AACA;AAAA,cACJ;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,WAAW,QAAW;AAC3B,kBAAI,SAAS,KAAK;AAClB,oBAAM,UAAU;AAChB,oBAAM,UAAU;AAChB,kBAAI,UAAU;AACd,oBAAM,UAAU;AAChB,kBAAI,OAAO,WAAW,UAAU;AAC5B,sBAAM,QAAQ;AAAA,kBACV,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,KAAK;AAAA,gBACpB,OACK;AACD,0BAAQ,KAAK,KAAK;AAAA,gBACtB;AACA;AAAA,cACJ;AACA,kBAAI,UAAU,YAAY;AAC1B,wBAAU,WAAW;AACrB,kBAAI,CAAC,SAAS;AACV,sBAAM,UAAU;AAChB,oBAAI,WAAW,SAAS;AACpB,sBAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,wBAAI,OAAO,SAAS,GAAG;AACnB,4BAAM,QAAQ;AAAA,wBACV,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,OAAO,EAAE;AAAA,wBACnB,SAAS;AAAA,sBACb;AACA,0BAAI,YAAY,MAAM;AAClB,kCAAU,CAAC,KAAK;AAAA,sBACpB,OACK;AACD,gCAAQ,KAAK,KAAK;AAAA,sBACtB;AACA;AAAA,oBACJ,OACK;AACD,0BAAI,OAAO,SAAS,GAAG;AACnB,8BAAM,QAAQ;AAAA,0BACV,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,OAAO,EAAE;AAAA,0BACnB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,KAAK;AAAA,wBACpB,OACK;AACD,kCAAQ,KAAK,KAAK;AAAA,wBACtB;AACA;AAAA,sBACJ,OACK;AACD,4BAAI,UAAU;AACd,8BAAM,OAAO,OAAO;AACpB,iCAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,8BAAI,SAAS,OAAO,EAAE;AACtB,gCAAM,UAAU;AAChB,8BAAI,OAAO,WAAW,UAAU;AAC5B,kCAAM,QAAQ;AAAA,8BACV,cAAc,eAAe,aAAa;AAAA,8BAC1C,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8BACzB,SAAS;AAAA,4BACb;AACA,gCAAI,YAAY,MAAM;AAClB,wCAAU,CAAC,KAAK;AAAA,4BACpB,OACK;AACD,sCAAQ,KAAK,KAAK;AAAA,4BACtB;AACA;AAAA,0BACJ;AACA,8BAAI,WAAW,QAAQ;AACnB,kCAAM,QAAQ;AAAA,8BACV,cAAc,eAAe,aAAa;AAAA,8BAC1C,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,cAAc,OAAO;AAAA,8BAC/B,SAAS;AAAA,4BACb;AACA,gCAAI,YAAY,MAAM;AAClB,wCAAU,CAAC,KAAK;AAAA,4BACpB,OACK;AACD,sCAAQ,KAAK,KAAK;AAAA,4BACtB;AACA;AAAA,0BACJ;AACA,8BAAI,UAAU,YAAY;AAC1B,8BAAI,CAAC,SAAS;AACV;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,OACK;AACD,0BAAM,QAAQ;AAAA,sBACV,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,sBACxB,SAAS;AAAA,oBACb;AACA,wBAAI,YAAY,MAAM;AAClB,gCAAU,CAAC,KAAK;AAAA,oBACpB,OACK;AACD,8BAAQ,KAAK,KAAK;AAAA,oBACtB;AACA;AAAA,kBACJ;AAAA,gBACJ;AACA,oBAAI,UAAU,YAAY;AAC1B,0BAAU,WAAW;AAAA,cACzB;AACA,kBAAI,CAAC,SAAS;AACV,sBAAM,QAAQ;AAAA,kBACV,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,CAAC;AAAA,kBACT,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,KAAK;AAAA,gBACpB,OACK;AACD,0BAAQ,KAAK,KAAK;AAAA,gBACtB;AACA;AAAA,cACJ,OACK;AACD,yBAAS;AACT,oBAAI,YAAY,MAAM;AAClB,sBAAI,SAAS;AACT,4BAAQ,SAAS;AAAA,kBACrB,OACK;AACD,8BAAU;AAAA,kBACd;AAAA,gBACJ;AAAA,cACJ;AACA,kBAAI,SAAS,YAAY;AAAA,YAC7B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,cAAM,QAAQ;AAAA,UACV;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AACA,YAAI,YAAY,MAAM;AAClB,oBAAU,CAAC,KAAK;AAAA,QACpB,OACK;AACD,kBAAQ,KAAK,KAAK;AAAA,QACtB;AACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,UAAU,WAAW;AACzB,aAAS,UAAU;AAAA,EACvB;AACA,MAAI,CAAC,QAAQ;AACT,UAAM,QAAQ;AAAA,MACV;AAAA,MACA,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,SAAS;AAAA,IACb;AACA,QAAI,YAAY,MAAM;AAClB,gBAAU,CAAC,KAAK;AAAA,IACpB,OACK;AACD,cAAQ,KAAK,KAAK;AAAA,IACtB;AACA;AACA,eAAW,SAAS;AACpB,WAAO;AAAA,EACX,OACK;AACD,aAAS;AACT,QAAI,YAAY,MAAM;AAClB,UAAI,QAAQ;AACR,gBAAQ,SAAS;AAAA,MACrB,OACK;AACD,kBAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AACA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAM,SAAS;AACf,iBAAW,QAAQ,MAAM;AACrB,YAAI,EAAE,SAAS,qBACX,SAAS,WACT,SAAS,kBAAkB;AAC3B,qBAAW,SAAS;AAAA,YAChB;AAAA,cACI;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AAAA,UACJ;AACA,iBAAO;AACP;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ;AACnB,YAAI,KAAK,oBAAoB,QAAW;AACpC,cAAI,QAAQ,KAAK;AACjB,gBAAM,SAAS;AACf,gBAAM,SAAS;AACf,cAAI,SAAS;AACb,gBAAM,SAAS;AACf,cAAI,CAAC,WAAW,OAAO;AAAA,YACnB,cAAc,eAAe;AAAA,YAC7B,YAAY;AAAA,YACZ,oBAAoB;AAAA,YACpB;AAAA,UACJ,CAAC,GAAG;AACA,sBACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,qBAAS,QAAQ;AAAA,UACrB;AACA,cAAI,UAAU,WAAW;AACzB,mBAAS,UAAU;AACnB,cAAI,CAAC,QAAQ;AACT,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,oBAAI,MAAM,SAAS,GAAG;AAClB,wBAAM,OAAO;AAAA,oBACT,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,OAAO,EAAE;AAAA,oBACnB,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,IAAI;AAAA,kBACnB,OACK;AACD,4BAAQ,KAAK,IAAI;AAAA,kBACrB;AACA;AAAA,gBACJ,OACK;AACD,sBAAI,MAAM,SAAS,GAAG;AAClB,0BAAM,OAAO;AAAA,sBACT,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,OAAO,EAAE;AAAA,sBACnB,SAAS;AAAA,oBACb;AACA,wBAAI,YAAY,MAAM;AAClB,gCAAU,CAAC,IAAI;AAAA,oBACnB,OACK;AACD,8BAAQ,KAAK,IAAI;AAAA,oBACrB;AACA;AAAA,kBACJ,OACK;AACD,wBAAI,SAAS;AACb,0BAAM,OAAO,MAAM;AACnB,6BAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,0BAAI,QAAQ,MAAM,EAAE;AACpB,4BAAM,SAAS;AACf,0BAAI,OAAO,UAAU,UAAU;AAC3B,8BAAM,OAAO;AAAA,0BACT,cAAc,eAAe,sBAAsB;AAAA,0BACnD,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,IAAI;AAAA,wBACnB,OACK;AACD,kCAAQ,KAAK,IAAI;AAAA,wBACrB;AACA;AAAA,sBACJ;AACA,0BAAI,WAAW,OAAO;AAClB,8BAAM,OAAO;AAAA,0BACT,cAAc,eAAe,sBAAsB;AAAA,0BACnD,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,cAAc,OAAO;AAAA,0BAC/B,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,IAAI;AAAA,wBACnB,OACK;AACD,kCAAQ,KAAK,IAAI;AAAA,wBACrB;AACA;AAAA,sBACJ;AACA,0BAAI,SAAS,WAAW;AACxB,0BAAI,CAAC,QAAQ;AACT;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,OACK;AACD,sBAAM,OAAO;AAAA,kBACT,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,kBACxB,SAAS;AAAA,gBACb;AACA,oBAAI,YAAY,MAAM;AAClB,4BAAU,CAAC,IAAI;AAAA,gBACnB,OACK;AACD,0BAAQ,KAAK,IAAI;AAAA,gBACrB;AACA;AAAA,cACJ;AAAA,YACJ;AACA,gBAAI,UAAU,WAAW;AACzB,qBAAS,UAAU;AAAA,UACvB;AACA,cAAI,CAAC,QAAQ;AACT,kBAAM,OAAO;AAAA,cACT,cAAc,eAAe;AAAA,cAC7B,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,CAAC;AAAA,cACT,SAAS;AAAA,YACb;AACA,gBAAI,YAAY,MAAM;AAClB,wBAAU,CAAC,IAAI;AAAA,YACnB,OACK;AACD,sBAAQ,KAAK,IAAI;AAAA,YACrB;AACA;AACA,uBAAW,SAAS;AACpB,mBAAO;AAAA,UACX,OACK;AACD,qBAAS;AACT,gBAAI,YAAY,MAAM;AAClB,kBAAI,QAAQ;AACR,wBAAQ,SAAS;AAAA,cACrB,OACK;AACD,0BAAU;AAAA,cACd;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,UAAU,QAAW;AAC1B,gBAAI,QAAQ,KAAK;AACjB,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,sBAAM,UAAU;AAChB,2BAAW,QAAQ,OAAO;AACtB,sBAAI,EAAE,SAAS,YACX,SAAS,cACT,SAAS,QAAQ;AACjB,+BAAW,SAAS;AAAA,sBAChB;AAAA,wBACI,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,wBACnC,SAAS;AAAA,sBACb;AAAA,oBACJ;AACA,2BAAO;AACP;AAAA,kBACJ;AAAA,gBACJ;AACA,oBAAI,YAAY,QAAQ;AACpB,sBAAI,MAAM,WAAW,QAAW;AAC5B,wBAAI,QAAQ,MAAM;AAClB,0BAAM,UAAU;AAChB,wBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,MAC5C,OAAO,UAAU,UAAU;AAC3B,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ;AAAA,4BACJ,MAAM,SAAS,WAAW,MAAM,WAAW,OACtC;AAAA,0BACT;AAAA,0BACA,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,MAAM,aAAa,QAAW;AAC9B,4BAAM,UAAU;AAChB,0BAAI,OAAO,MAAM,aAAa,UAAU;AACpC,mCAAW,SAAS;AAAA,0BAChB;AAAA,4BACI,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AAAA,wBACJ;AACA,+BAAO;AAAA,sBACX;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,MAAM,QAAQ,QAAW;AACzB,4BAAI,QAAQ,MAAM;AAClB,8BAAM,UAAU;AAChB,4BAAI,WAAW,SAAS;AACpB,8BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,kCAAM,UAAU;AAChB,uCAAW,QAAQ,OAAO;AACtB,kCAAI,EAAE,SAAS,gBAAgB,SAAS,eAAe;AACnD,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe;AAAA,oCAC7B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,oCACnC,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AACP;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,YAAY,QAAQ;AACpB,kCAAI,MAAM,eAAe,QAAW;AAChC,oCAAI,QAAQ,MAAM;AAClB,sCAAM,UAAU;AAChB,oCAAI,OAAO,UAAU,UAAU;AAC3B,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eAAe;AAAA,sCAC7B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sCACzB,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AAAA,gCACX;AACA,oCAAI,EAAE,UAAU,aACZ,UAAU,aACV,UAAU,SAAS;AACnB,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eAAe;AAAA,sCAC7B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ;AAAA,wCACJ,eAAe,SAAS,WAAW,MAAM,WACpC,IAAI,WAAW,WAAW;AAAA,sCACnC;AAAA,sCACA,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AAAA,gCACX;AACA,oCAAI,SAAS,YAAY;AAAA,8BAC7B,OACK;AACD,oCAAI,SAAS;AAAA,8BACjB;AACA,kCAAI,QAAQ;AACR,oCAAI,MAAM,eAAe,QAAW;AAChC,wCAAM,UAAU;AAChB,sCAAI,OAAO,MAAM,eAAe,UAAU;AACtC,+CAAW,SAAS;AAAA,sCAChB;AAAA,wCACI,cAAc,eACV;AAAA,wCACJ,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wCACzB,SAAS;AAAA,sCACb;AAAA,oCACJ;AACA,2CAAO;AAAA,kCACX;AACA,sCAAI,SAAS,YAAY;AAAA,gCAC7B,OACK;AACD,sCAAI,SAAS;AAAA,gCACjB;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ,OACK;AACD,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,OACK;AACD,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,kBAAkB,QAAW;AAClC,kBAAI,QAAQ,KAAK;AACjB,oBAAM,UAAU;AAChB,kBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,MAC5C,OAAO,UAAU,UAAU;AAC3B,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS,WAAW,cAAc,KAAK;AAAA,oBACvD,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,YAAY;AAAA,YAC7B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AAgCA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAM,SAAS;AACf,iBAAW,QAAQ,MAAM;AACrB,YAAI,EAAE,SAAS,mBACX,SAAS,6BACT,SAAS,oBACT,SAAS,sBAAsB;AAC/B,qBAAW,SAAS;AAAA,YAChB;AAAA,cACI;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AAAA,UACJ;AACA,iBAAO;AACP;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ;AACnB,YAAI,KAAK,kBAAkB,QAAW;AAClC,cAAI,QAAQ,KAAK;AACjB,gBAAM,SAAS;AACf,cAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,uBAAW,SAAS;AAAA,cAChB;AAAA,gBACI,cAAc,eAAe;AAAA,gBAC7B,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gBACzB,SAAS;AAAA,cACb;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,4BAA4B,QAAW;AAC5C,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,4BAA4B,UAAU;AAClD,yBAAW,SAAS;AAAA,gBAChB;AAAA,kBACI,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,mBAAmB,QAAW;AACnC,kBAAI,QAAQ,KAAK;AACjB,oBAAM,SAAS;AACf,kBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,sBAAsB,QAAW;AACtC,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,sBAAM,SAAS;AACf,oBAAI,SAAS;AACb,sBAAM,UAAU;AAChB,oBAAI,CAAC,WAAW,OAAO;AAAA,kBACnB,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,oBAAoB;AAAA,kBACpB;AAAA,gBACJ,CAAC,GAAG;AACA,4BACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,2BAAS,QAAQ;AAAA,gBACrB;AACA,oBAAI,UAAU,YAAY;AAC1B,yBAAS,UAAU;AACnB,oBAAI,CAAC,QAAQ;AACT,wBAAM,UAAU;AAChB,sBAAI,WAAW,SAAS;AACpB,wBAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,0BAAI,MAAM,SAAS,GAAG;AAClB,8BAAM,OAAO;AAAA,0BACT,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,OAAO,EAAE;AAAA,0BACnB,SAAS;AAAA,wBACb;AACA,4BAAI,YAAY,MAAM;AAClB,oCAAU,CAAC,IAAI;AAAA,wBACnB,OACK;AACD,kCAAQ,KAAK,IAAI;AAAA,wBACrB;AACA;AAAA,sBACJ,OACK;AACD,4BAAI,MAAM,SAAS,GAAG;AAClB,gCAAM,OAAO;AAAA,4BACT,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,OAAO,EAAE;AAAA,4BACnB,SAAS;AAAA,0BACb;AACA,8BAAI,YAAY,MAAM;AAClB,sCAAU,CAAC,IAAI;AAAA,0BACnB,OACK;AACD,oCAAQ,KAAK,IAAI;AAAA,0BACrB;AACA;AAAA,wBACJ,OACK;AACD,8BAAI,SAAS;AACb,gCAAM,OAAO,MAAM;AACnB,mCAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,gCAAI,QAAQ,MAAM,EAAE;AACpB,kCAAM,UAAU;AAChB,gCAAI,OAAO,UAAU,UAAU;AAC3B,oCAAM,OAAO;AAAA,gCACT,cAAc,eAAe,wBAAwB;AAAA,gCACrD,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AACA,kCAAI,YAAY,MAAM;AAClB,0CAAU,CAAC,IAAI;AAAA,8BACnB,OACK;AACD,wCAAQ,KAAK,IAAI;AAAA,8BACrB;AACA;AAAA,4BACJ;AACA,gCAAI,WAAW,OAAO;AAClB,oCAAM,OAAO;AAAA,gCACT,cAAc,eAAe,wBAAwB;AAAA,gCACrD,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,cAAc,OAAO;AAAA,gCAC/B,SAAS;AAAA,8BACb;AACA,kCAAI,YAAY,MAAM;AAClB,0CAAU,CAAC,IAAI;AAAA,8BACnB,OACK;AACD,wCAAQ,KAAK,IAAI;AAAA,8BACrB;AACA;AAAA,4BACJ;AACA,gCAAI,SAAS,YAAY;AACzB,gCAAI,CAAC,QAAQ;AACT;AAAA,4BACJ;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,4BAAM,OAAO;AAAA,wBACT,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,wBACxB,SAAS;AAAA,sBACb;AACA,0BAAI,YAAY,MAAM;AAClB,kCAAU,CAAC,IAAI;AAAA,sBACnB,OACK;AACD,gCAAQ,KAAK,IAAI;AAAA,sBACrB;AACA;AAAA,oBACJ;AAAA,kBACJ;AACA,sBAAI,UAAU,YAAY;AAC1B,2BAAS,UAAU;AAAA,gBACvB;AACA,oBAAI,CAAC,QAAQ;AACT,wBAAM,OAAO;AAAA,oBACT,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,CAAC;AAAA,oBACT,SAAS;AAAA,kBACb;AACA,sBAAI,YAAY,MAAM;AAClB,8BAAU,CAAC,IAAI;AAAA,kBACnB,OACK;AACD,4BAAQ,KAAK,IAAI;AAAA,kBACrB;AACA;AACA,6BAAW,SAAS;AACpB,yBAAO;AAAA,gBACX,OACK;AACD,2BAAS;AACT,sBAAI,YAAY,MAAM;AAClB,wBAAI,QAAQ;AACR,8BAAQ,SAAS;AAAA,oBACrB,OACK;AACD,gCAAU;AAAA,oBACd;AAAA,kBACJ;AAAA,gBACJ;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AACA,IAAM,WAAW;AAAA,EACb,sBAAsB;AAAA,EACtB,aAAa;AAAA,EACb,YAAY;AAAA,IACR,iBAAiB;AAAA,MACb,MAAM;AAAA,MACN,aAAa;AAAA,IACjB;AAAA,IACA,OAAO;AAAA,MACH,sBAAsB;AAAA,MACtB,aAAa;AAAA,MACb,YAAY;AAAA,QACR,QAAQ;AAAA,UACJ,aAAa;AAAA,UACb,MAAM,CAAC,UAAU,QAAQ;AAAA,QAC7B;AAAA,QACA,UAAU;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,QACV;AAAA,QACA,KAAK;AAAA,UACD,sBAAsB;AAAA,UACtB,aAAa;AAAA,UACb,YAAY;AAAA,YACR,YAAY;AAAA,cACR,aAAa;AAAA,cACb,MAAM,CAAC,WAAW,WAAW,MAAM;AAAA,cACnC,MAAM;AAAA,YACV;AAAA,YACA,YAAY;AAAA,cACR,aAAa;AAAA,cACb,MAAM;AAAA,YACV;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,IACV;AAAA,IACA,eAAe;AAAA,MACX,aAAa;AAAA,MACb,MAAM,CAAC,UAAU,QAAQ;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,MAAM;AACV;AACA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAM,SAAS;AACf,iBAAW,QAAQ,MAAM;AACrB,YAAI,EAAE,SAAS,qBACX,SAAS,WACT,SAAS,kBAAkB;AAC3B,qBAAW,SAAS;AAAA,YAChB;AAAA,cACI;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AAAA,UACJ;AACA,iBAAO;AACP;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ;AACnB,YAAI,KAAK,oBAAoB,QAAW;AACpC,gBAAM,SAAS;AACf,cAAI,CAAC,WAAW,KAAK,iBAAiB;AAAA,YAClC,cAAc,eAAe;AAAA,YAC7B,YAAY;AAAA,YACZ,oBAAoB;AAAA,YACpB;AAAA,UACJ,CAAC,GAAG;AACA,sBACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,qBAAS,QAAQ;AAAA,UACrB;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,UAAU,QAAW;AAC1B,gBAAI,QAAQ,KAAK;AACjB,kBAAM,SAAS;AACf,gBAAI,WAAW,QAAQ;AACnB,kBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,sBAAM,SAAS;AACf,2BAAW,QAAQ,OAAO;AACtB,sBAAI,EAAE,SAAS,YACX,SAAS,cACT,SAAS,QAAQ;AACjB,+BAAW,SAAS;AAAA,sBAChB;AAAA,wBACI,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,wBACnC,SAAS;AAAA,sBACb;AAAA,oBACJ;AACA,2BAAO;AACP;AAAA,kBACJ;AAAA,gBACJ;AACA,oBAAI,WAAW,QAAQ;AACnB,sBAAI,MAAM,WAAW,QAAW;AAC5B,wBAAI,QAAQ,MAAM;AAClB,0BAAM,SAAS;AACf,wBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,MAC5C,OAAO,UAAU,UAAU;AAC3B,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ;AAAA,4BACJ,MAAM,SAAS,WAAW,MAAM,WAAW,OACtC;AAAA,0BACT;AAAA,0BACA,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,WAAW;AAAA,kBAC5B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,MAAM,aAAa,QAAW;AAC9B,4BAAM,SAAS;AACf,0BAAI,OAAO,MAAM,aAAa,UAAU;AACpC,mCAAW,SAAS;AAAA,0BAChB;AAAA,4BACI,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AAAA,wBACJ;AACA,+BAAO;AAAA,sBACX;AACA,0BAAI,SAAS,WAAW;AAAA,oBAC5B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,MAAM,QAAQ,QAAW;AACzB,4BAAI,QAAQ,MAAM;AAClB,8BAAM,UAAU;AAChB,4BAAI,WAAW,SAAS;AACpB,8BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,kCAAM,UAAU;AAChB,uCAAW,QAAQ,OAAO;AACtB,kCAAI,EAAE,SAAS,gBAAgB,SAAS,eAAe;AACnD,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe;AAAA,oCAC7B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,oCACnC,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AACP;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,YAAY,QAAQ;AACpB,kCAAI,MAAM,eAAe,QAAW;AAChC,oCAAI,QAAQ,MAAM;AAClB,sCAAM,UAAU;AAChB,oCAAI,OAAO,UAAU,UAAU;AAC3B,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eAAe;AAAA,sCAC7B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sCACzB,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AAAA,gCACX;AACA,oCAAI,EAAE,UAAU,aACZ,UAAU,aACV,UAAU,SAAS;AACnB,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eAAe;AAAA,sCAC7B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ;AAAA,wCACJ,eAAe,SAAS,WAAW,MAAM,WACpC,IAAI,WAAW,WAAW;AAAA,sCACnC;AAAA,sCACA,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AAAA,gCACX;AACA,oCAAI,SAAS,YAAY;AAAA,8BAC7B,OACK;AACD,oCAAI,SAAS;AAAA,8BACjB;AACA,kCAAI,QAAQ;AACR,oCAAI,MAAM,eAAe,QAAW;AAChC,wCAAM,UAAU;AAChB,sCAAI,OAAO,MAAM,eAAe,UAAU;AACtC,+CAAW,SAAS;AAAA,sCAChB;AAAA,wCACI,cAAc,eACV;AAAA,wCACJ,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wCACzB,SAAS;AAAA,sCACb;AAAA,oCACJ;AACA,2CAAO;AAAA,kCACX;AACA,sCAAI,SAAS,YAAY;AAAA,gCAC7B,OACK;AACD,sCAAI,SAAS;AAAA,gCACjB;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ,OACK;AACD,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,OACK;AACD,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AAAA,YACJ;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,kBAAkB,QAAW;AAClC,kBAAI,QAAQ,KAAK;AACjB,oBAAM,UAAU;AAChB,kBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,MAC5C,OAAO,UAAU,UAAU;AAC3B,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS,WAAW,cAAc,KAAK;AAAA,oBACvD,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,YAAY;AAAA,YAC7B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AACA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,YAAM,SAAS;AACf,iBAAW,QAAQ,MAAM;AACrB,YAAI,EAAE,SAAS,UACX,SAAS,iBACT,SAAS,aACT,SAAS,UACT,SAAS,mBACT,SAAS,gBAAgB;AACzB,qBAAW,SAAS;AAAA,YAChB;AAAA,cACI;AAAA,cACA,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,cACnC,SAAS;AAAA,YACb;AAAA,UACJ;AACA,iBAAO;AACP;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ;AACnB,YAAI,KAAK,SAAS,QAAW;AACzB,cAAI,QAAQ,KAAK;AACjB,gBAAM,SAAS;AACf,gBAAM,SAAS;AACf,cAAI,WAAW,QAAQ;AACnB,gBAAI,SAAS,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC5D,oBAAM,SAAS;AACf,yBAAW,QAAQ,OAAO;AACtB,oBAAI,EAAE,SAAS,cACX,SAAS,wBACT,SAAS,sBACT,SAAS,YACT,SAAS,SAAS;AAClB,6BAAW,SAAS;AAAA,oBAChB;AAAA,sBACI,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,sBACnC,SAAS;AAAA,oBACb;AAAA,kBACJ;AACA,yBAAO;AACP;AAAA,gBACJ;AAAA,cACJ;AACA,kBAAI,WAAW,QAAQ;AACnB,oBAAI,MAAM,aAAa,QAAW;AAC9B,sBAAI,QAAQ,MAAM;AAClB,wBAAM,SAAS;AACf,sBAAI,WAAW,QAAQ;AACnB,wBAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,iCAAW,QAAQ,OAAO;AACtB,8BAAM,SAAS;AACf,4BAAI,OAAO,MAAM,IAAI,MAAM,UAAU;AACjC,qCAAW,SAAS;AAAA,4BAChB;AAAA,8BACI,cAAc,eACV,oBACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,8BAChD,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8BACzB,SAAS;AAAA,4BACb;AAAA,0BACJ;AACA,iCAAO;AAAA,wBACX;AACA,4BAAI,SAAS,WAAW;AACxB,4BAAI,CAAC,QAAQ;AACT;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AAAA,kBACJ;AACA,sBAAI,SAAS,WAAW;AAAA,gBAC5B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,MAAM,uBAAuB,QAAW;AACxC,wBAAI,QAAQ,MAAM;AAClB,0BAAM,UAAU;AAChB,wBAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,MAAM,qBAAqB,QAAW;AACtC,0BAAI,QAAQ,MAAM;AAClB,4BAAM,UAAU;AAChB,0BAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,mCAAW,SAAS;AAAA,0BAChB;AAAA,4BACI,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AAAA,wBACJ;AACA,+BAAO;AAAA,sBACX;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,MAAM,WAAW,QAAW;AAC5B,4BAAI,QAAQ,MAAM;AAClB,8BAAM,UAAU;AAChB,4BAAI,WAAW,SAAS;AACpB,8BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,kCAAM,UAAU;AAChB,uCAAW,QAAQ,OAAO;AACtB,kCAAI,EAAE,SAAS,kBACX,SAAS,mBACT,SAAS,iBAAiB;AAC1B,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe;AAAA,oCAC7B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,oCACnC,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AACP;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,YAAY,QAAQ;AACpB,kCAAI,MAAM,iBAAiB,QAAW;AAClC,oCAAI,QAAQ,MAAM;AAClB,sCAAM,UAAU;AAChB,oCAAI,EAAE,OAAO,SAAS,YAAY,SAAS,KAAK,IAAI;AAChD,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eACV;AAAA,sCACJ,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sCACzB,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AAAA,gCACX;AACA,oCAAI,SAAS,YAAY;AAAA,8BAC7B,OACK;AACD,oCAAI,SAAS;AAAA,8BACjB;AACA,kCAAI,QAAQ;AACR,oCAAI,MAAM,kBAAkB,QAAW;AACnC,sCAAI,QAAQ,MAAM;AAClB,wCAAM,UAAU;AAChB,sCAAI,WAAW,SAAS;AACpB,wCAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,iDAAW,QAAQ,OAAO;AACtB,8CAAM,UAAU;AAChB,4CAAI,OAAO,MAAM,IAAI,MAAM,UAAU;AACjC,qDAAW,SAAS;AAAA,4CAChB;AAAA,8CACI,cAAc,eACV,gCACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,8CAC5B,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8CACzB,SAAS;AAAA,4CACb;AAAA,0CACJ;AACA,iDAAO;AAAA,wCACX;AACA,4CAAI,SAAS,YAAY;AACzB,4CAAI,CAAC,QAAQ;AACT;AAAA,wCACJ;AAAA,sCACJ;AAAA,oCACJ,OACK;AACD,iDAAW,SAAS;AAAA,wCAChB;AAAA,0CACI,cAAc,eACV;AAAA,0CACJ,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0CACzB,SAAS;AAAA,wCACb;AAAA,sCACJ;AACA,6CAAO;AAAA,oCACX;AAAA,kCACJ;AACA,sCAAI,SAAS,YAAY;AAAA,gCAC7B,OACK;AACD,sCAAI,SAAS;AAAA,gCACjB;AACA,oCAAI,QAAQ;AACR,sCAAI,MAAM,iBAAiB,QAAW;AAClC,wCAAI,QAAQ,MAAM;AAClB,0CAAM,UAAU;AAChB,wCAAI,WAAW,SAAS;AACpB,0CAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,mDAAW,QAAQ,OAAO;AACtB,gDAAM,UAAU;AAChB,8CAAI,OAAO,MAAM,IAAI,MAAM,UAAU;AACjC,uDAAW,SAAS;AAAA,8CAChB;AAAA,gDACI,cAAc,eACV,+BACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,gDAC5B,YAAY;AAAA,gDACZ,SAAS;AAAA,gDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gDACzB,SAAS;AAAA,8CACb;AAAA,4CACJ;AACA,mDAAO;AAAA,0CACX;AACA,8CAAI,SAAS,YAAY;AACzB,8CAAI,CAAC,QAAQ;AACT;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ,OACK;AACD,mDAAW,SAAS;AAAA,0CAChB;AAAA,4CACI,cAAc,eACV;AAAA,4CACJ,YAAY;AAAA,4CACZ,SAAS;AAAA,4CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4CACzB,SAAS;AAAA,0CACb;AAAA,wCACJ;AACA,+CAAO;AAAA,sCACX;AAAA,oCACJ;AACA,wCAAI,SAAS,YAAY;AAAA,kCAC7B,OACK;AACD,wCAAI,SAAS;AAAA,kCACjB;AAAA,gCACJ;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ,OACK;AACD,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,MAAM,SAAS,QAAW;AAC1B,8BAAI,SAAS,MAAM;AACnB,gCAAM,UAAU;AAChB,8BAAI,WAAW,SAAS;AACpB,gCAAI,UACA,OAAO,UAAU,YACjB,CAAC,MAAM,QAAQ,MAAM,GAAG;AACxB,oCAAM,UAAU;AAChB,yCAAW,QAAQ,QAAQ;AACvB,oCAAI,EAAE,SAAS,gBAAgB;AAC3B,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eAAe;AAAA,sCAC7B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,sCACnC,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AACP;AAAA,gCACJ;AAAA,8BACJ;AACA,kCAAI,YAAY,QAAQ;AACpB,oCAAI,OAAO,gBAAgB,QAAW;AAClC,sCAAI,SAAS,OAAO;AACpB,wCAAM,UAAU;AAChB,sCAAI,WAAW,SAAS;AACpB,wCAAI,UACA,OAAO,UAAU,YACjB,CAAC,MAAM,QAAQ,MAAM,GAAG;AACxB,iDAAW,QAAQ,QAAQ;AACvB,8CAAM,UAAU;AAChB,4CAAI,OAAO,OAAO,IAAI,MAAM,UAAU;AAClC,qDAAW,SAAS;AAAA,4CAChB;AAAA,8CACI,cAAc,eACV,4BACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,8CAC5B,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8CACzB,SAAS;AAAA,4CACb;AAAA,0CACJ;AACA,iDAAO;AAAA,wCACX;AACA,4CAAI,SAAS,YAAY;AACzB,4CAAI,CAAC,QAAQ;AACT;AAAA,wCACJ;AAAA,sCACJ;AAAA,oCACJ,OACK;AACD,iDAAW,SAAS;AAAA,wCAChB;AAAA,0CACI,cAAc,eACV;AAAA,0CACJ,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0CACzB,SAAS;AAAA,wCACb;AAAA,sCACJ;AACA,6CAAO;AAAA,oCACX;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ;AAAA,4BACJ,OACK;AACD,yCAAW,SAAS;AAAA,gCAChB;AAAA,kCACI,cAAc,eAAe;AAAA,kCAC7B,YAAY;AAAA,kCACZ,SAAS;AAAA,kCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kCACzB,SAAS;AAAA,gCACb;AAAA,8BACJ;AACA,qCAAO;AAAA,4BACX;AAAA,0BACJ;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ,OACK;AACD,yBAAW,SAAS;AAAA,gBAChB;AAAA,kBACI,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AAAA,UACJ;AACA,cAAI,SAAS,WAAW;AAAA,QAC5B,OACK;AACD,cAAI,SAAS;AAAA,QACjB;AACA,YAAI,QAAQ;AACR,cAAI,KAAK,gBAAgB,QAAW;AAChC,kBAAM,UAAU;AAChB,gBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,yBAAW,SAAS;AAAA,gBAChB;AAAA,kBACI,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,YAAY;AAAA,UAC7B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,YAAY,QAAW;AAC5B,oBAAM,UAAU;AAChB,kBAAI,OAAO,KAAK,YAAY,UAAU;AAClC,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,YAAY;AAAA,YAC7B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,SAAS,QAAW;AACzB,sBAAM,UAAU;AAChB,oBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,6BAAW,SAAS;AAAA,oBAChB;AAAA,sBACI,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sBACzB,SAAS;AAAA,oBACb;AAAA,kBACJ;AACA,yBAAO;AAAA,gBACX;AACA,oBAAI,SAAS,YAAY;AAAA,cAC7B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,kBAAkB,QAAW;AAClC,sBAAI,SAAS,KAAK;AAClB,wBAAM,UAAU;AAChB,sBAAI,WAAW,SAAS;AACpB,wBAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,0BAAI,SAAS;AACb,4BAAM,OAAO,OAAO;AACpB,+BAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,8BAAM,UAAU;AAChB,4BAAI,CAAC,WAAW,OAAO,EAAE,GAAG;AAAA,0BACxB,cAAc,eAAe,oBAAoB;AAAA,0BACjD,YAAY;AAAA,0BACZ,oBAAoB;AAAA,0BACpB;AAAA,wBACJ,CAAC,GAAG;AACA,oCACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,mCAAS,QAAQ;AAAA,wBACrB;AACA,4BAAI,SAAS,YAAY;AACzB,4BAAI,CAAC,QAAQ;AACT;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,0BACxB,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AAAA,kBACJ;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,gBAAgB,QAAW;AAChC,wBAAI,SAAS,KAAK;AAClB,0BAAM,UAAU;AAChB,wBAAI,WAAW,SAAS;AACpB,0BAAI,UACA,OAAO,UAAU,YACjB,CAAC,MAAM,QAAQ,MAAM,GAAG;AACxB,8BAAM,UAAU;AAChB,mCAAW,QAAQ,QAAQ;AACvB,8BAAI,EAAE,SAAS,YACX,SAAS,cACT,SAAS,aACT,SAAS,YAAY;AACrB,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,gCACnC,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AACP;AAAA,0BACJ;AAAA,wBACJ;AACA,4BAAI,YAAY,QAAQ;AACpB,8BAAI,OAAO,WAAW,QAAW;AAC7B,gCAAI,SAAS,OAAO;AACpB,kCAAM,UAAU;AAChB,gCAAI,WAAW,SAAS;AACpB,kCAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,oCAAI,UAAU;AACd,sCAAM,OAAO,OAAO;AACpB,yCAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,wCAAM,UAAU;AAChB,sCAAI,CAAC,WAAW,OAAO,EAAE,GAAG;AAAA,oCACxB,cAAc,eACV,yBACA;AAAA,oCACJ,YAAY;AAAA,oCACZ,oBAAoB;AAAA,oCACpB;AAAA,kCACJ,CAAC,GAAG;AACA,8CACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,6CAAS,QAAQ;AAAA,kCACrB;AACA,sCAAI,UAAU,YAAY;AAC1B,sCAAI,CAAC,SAAS;AACV;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ,OACK;AACD,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe;AAAA,oCAC7B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,oCACxB,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AAAA,8BACX;AAAA,4BACJ;AACA,gCAAI,UAAU,YAAY;AAAA,0BAC9B,OACK;AACD,gCAAI,UAAU;AAAA,0BAClB;AACA,8BAAI,SAAS;AACT,gCAAI,OAAO,aAAa,QAAW;AAC/B,kCAAI,SAAS,OAAO;AACpB,oCAAM,UAAU;AAChB,kCAAI,EAAE,OAAO,UAAU,YAAY,SAAS,MAAM,IAAI;AAClD,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe;AAAA,oCAC7B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oCACzB,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AAAA,8BACX;AACA,kCAAI,UAAU,YAAY;AAAA,4BAC9B,OACK;AACD,kCAAI,UAAU;AAAA,4BAClB;AACA,gCAAI,SAAS;AACT,kCAAI,OAAO,YAAY,QAAW;AAC9B,oCAAI,SAAS,OAAO;AACpB,sCAAM,UAAU;AAChB,oCAAI,WAAW,SAAS;AACpB,sCAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,wCAAI,UAAU;AACd,0CAAM,OAAO,OAAO;AACpB,6CAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,4CAAM,UAAU;AAChB,0CAAI,CAAC,WAAW,OAAO,EAAE,GAAG;AAAA,wCACxB,cAAc,eACV,0BACA;AAAA,wCACJ,YAAY;AAAA,wCACZ,oBAAoB;AAAA,wCACpB;AAAA,sCACJ,CAAC,GAAG;AACA,kDACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,iDAAS,QAAQ;AAAA,sCACrB;AACA,0CAAI,UAAU,YAAY;AAC1B,0CAAI,CAAC,SAAS;AACV;AAAA,sCACJ;AAAA,oCACJ;AAAA,kCACJ,OACK;AACD,+CAAW,SAAS;AAAA,sCAChB;AAAA,wCACI,cAAc,eAAe;AAAA,wCAC7B,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,wCACxB,SAAS;AAAA,sCACb;AAAA,oCACJ;AACA,2CAAO;AAAA,kCACX;AAAA,gCACJ;AACA,oCAAI,UAAU,YAAY;AAAA,8BAC9B,OACK;AACD,oCAAI,UAAU;AAAA,8BAClB;AACA,kCAAI,SAAS;AACT,oCAAI,OAAO,YAAY,QAAW;AAC9B,sCAAI,SAAS,OAAO;AACpB,wCAAM,UAAU;AAChB,sCAAI,EAAE,OAAO,UAAU,YACnB,SAAS,MAAM,IAAI;AACnB,+CAAW,SAAS;AAAA,sCAChB;AAAA,wCACI,cAAc,eAAe;AAAA,wCAC7B,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wCACzB,SAAS;AAAA,sCACb;AAAA,oCACJ;AACA,2CAAO;AAAA,kCACX;AACA,sCAAI,UAAU,YAAY;AAAA,gCAC9B,OACK;AACD,sCAAI,UAAU;AAAA,gCAClB;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ,OACK;AACD,mCAAW,SAAS;AAAA,0BAChB;AAAA,4BACI,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AAAA,wBACJ;AACA,+BAAO;AAAA,sBACX;AAAA,oBACJ;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AA6DA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAK,KAAK,WAAW,WAAc,WAAW,aACzC,KAAK,UAAU,WAAc,WAAW,UAAW;AACpD,mBAAW,SAAS;AAAA,UAChB;AAAA,YACI;AAAA,YACA,YAAY;AAAA,YACZ,SAAS;AAAA,YACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,YACpC,SAAS,kCAAkC,WAAW;AAAA,UAC1D;AAAA,QACJ;AACA,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAE,SAAS,UACX,SAAS,YACT,SAAS,YACT,SAAS,UAAU;AACnB,uBAAW,SAAS;AAAA,cAChB;AAAA,gBACI;AAAA,gBACA,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,gBACnC,SAAS;AAAA,cACb;AAAA,YACJ;AACA,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,SAAS,QAAW;AACzB,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,yBAAW,SAAS;AAAA,gBAChB;AAAA,kBACI,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,WAAW,QAAW;AAC3B,oBAAM,SAAS;AACf,kBAAI,OAAO,KAAK,WAAW,WAAW;AAClC,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,UAAU;AAAA,oBAC1B,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,WAAW,QAAW;AAC3B,sBAAM,SAAS;AACf,oBAAI,OAAO,KAAK,WAAW,UAAU;AACjC,6BAAW,SAAS;AAAA,oBAChB;AAAA,sBACI,cAAc,eAAe;AAAA,sBAC7B,YAAY;AAAA,sBACZ,SAAS;AAAA,sBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,sBACzB,SAAS;AAAA,oBACb;AAAA,kBACJ;AACA,yBAAO;AAAA,gBACX;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,UAAU,QAAW;AAC1B,sBAAI,QAAQ,KAAK;AACjB,wBAAM,SAAS;AACf,sBAAI,WAAW,QAAQ;AACnB,wBAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,iCAAW,QAAQ,OAAO;AACtB,4BAAI,QAAQ,MAAM,IAAI;AACtB,8BAAM,UAAU;AAChB,8BAAM,UAAU;AAChB,4BAAI,WAAW,SAAS;AACpB,8BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,gCAAI;AACJ,gCAAI,MAAM,UAAU,WACf,WAAW,UAAU;AACtB,yCAAW,SAAS;AAAA,gCAChB;AAAA,kCACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,kCAC5B,YAAY;AAAA,kCACZ,SAAS;AAAA,kCACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,kCACpC,SAAS,kCACL,WACA;AAAA,gCACR;AAAA,8BACJ;AACA,qCAAO;AAAA,4BACX,OACK;AACD,oCAAM,UAAU;AAChB,yCAAW,QAAQ,OAAO;AACtB,oCAAI,EAAE,SAAS,WACX,SAAS,WACT,SAAS,aACT,SAAS,UACT,SAAS,YACT,SAAS,UAAU;AACnB,6CAAW,SAAS;AAAA,oCAChB;AAAA,sCACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,sCAC5B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,sCACnC,SAAS;AAAA,oCACb;AAAA,kCACJ;AACA,yCAAO;AACP;AAAA,gCACJ;AAAA,8BACJ;AACA,kCAAI,YAAY,QAAQ;AACpB,oCAAI,MAAM,UAAU,QAAW;AAC3B,wCAAM,UAAU;AAChB,sCAAI,OAAO,MAAM,UAAU,UAAU;AACjC,+CAAW,SAAS;AAAA,sCAChB;AAAA,wCACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,wCACJ,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wCACzB,SAAS;AAAA,sCACb;AAAA,oCACJ;AACA,2CAAO;AAAA,kCACX;AACA,sCAAI,SAAS,YAAY;AAAA,gCAC7B,OACK;AACD,sCAAI,SAAS;AAAA,gCACjB;AACA,oCAAI,QAAQ;AACR,sCAAI,MAAM,UAAU,QAAW;AAC3B,wCAAI,QAAQ,MAAM;AAClB,0CAAM,UAAU;AAChB,wCAAI,WAAW,SAAS;AACpB,0CAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,4CAAI,SAAS;AACb,8CAAM,OAAO,MAAM;AACnB,iDAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,gDAAM,UAAU;AAChB,8CAAI,OAAO,MAAM,EAAE,MAAM,UAAU;AAC/B,uDAAW,SAAS;AAAA,8CAChB;AAAA,gDACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB,YACA;AAAA,gDACJ,YAAY;AAAA,gDACZ,SAAS;AAAA,gDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gDACzB,SAAS;AAAA,8CACb;AAAA,4CACJ;AACA,mDAAO;AAAA,0CACX;AACA,8CAAI,SAAS,YAAY;AACzB,8CAAI,CAAC,QAAQ;AACT;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ,OACK;AACD,mDAAW,SAAS;AAAA,0CAChB;AAAA,4CACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,4CACJ,YAAY;AAAA,4CACZ,SAAS;AAAA,4CACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,4CACxB,SAAS;AAAA,0CACb;AAAA,wCACJ;AACA,+CAAO;AAAA,sCACX;AAAA,oCACJ;AACA,wCAAI,SAAS,YAAY;AAAA,kCAC7B,OACK;AACD,wCAAI,SAAS;AAAA,kCACjB;AACA,sCAAI,QAAQ;AACR,wCAAI,MAAM,YAAY,QAAW;AAC7B,0CAAI,QAAQ,MAAM;AAClB,4CAAM,UAAU;AAChB,0CAAI,WAAW,SAAS;AACpB,4CAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,8CAAI,SAAS;AACb,gDAAM,OAAO,MAAM;AACnB,mDAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,kDAAM,UAAU;AAChB,gDAAI,OAAO,MAAM,EAAE,MAAM,UAAU;AAC/B,yDAAW,SAAS;AAAA,gDAChB;AAAA,kDACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB,cACA;AAAA,kDACJ,YAAY;AAAA,kDACZ,SAAS;AAAA,kDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kDACzB,SAAS;AAAA,gDACb;AAAA,8CACJ;AACA,qDAAO;AAAA,4CACX;AACA,gDAAI,SAAS,YAAY;AACzB,gDAAI,CAAC,QAAQ;AACT;AAAA,4CACJ;AAAA,0CACJ;AAAA,wCACJ,OACK;AACD,qDAAW,SAAS;AAAA,4CAChB;AAAA,8CACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,8CACJ,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,8CACxB,SAAS;AAAA,4CACb;AAAA,0CACJ;AACA,iDAAO;AAAA,wCACX;AAAA,sCACJ;AACA,0CAAI,SAAS,YAAY;AAAA,oCAC7B,OACK;AACD,0CAAI,SAAS;AAAA,oCACjB;AACA,wCAAI,QAAQ;AACR,0CAAI,MAAM,SAAS,QAAW;AAC1B,8CAAM,UAAU;AAChB,4CAAI,OAAO,MAAM,SAAS,UAAU;AAChC,qDAAW,SAAS;AAAA,4CAChB;AAAA,8CACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,8CACJ,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8CACzB,SAAS;AAAA,4CACb;AAAA,0CACJ;AACA,iDAAO;AAAA,wCACX;AACA,4CAAI,SAAS,YAAY;AAAA,sCAC7B,OACK;AACD,4CAAI,SAAS;AAAA,sCACjB;AACA,0CAAI,QAAQ;AACR,4CAAI,MAAM,WAAW,QAAW;AAC5B,8CAAI,SAAS,MAAM;AACnB,gDAAM,UAAU;AAChB,8CAAI,WAAW,SAAS;AACpB,gDAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,kDAAI,SAAS;AACb,oDAAM,OAAO,OAAO;AACpB,uDAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,sDAAM,UAAU;AAChB,oDAAI,OAAO,OAAO,EAAE,MAAM,UAAU;AAChC,6DAAW,SAAS;AAAA,oDAChB;AAAA,sDACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB,aACA;AAAA,sDACJ,YAAY;AAAA,sDACZ,SAAS;AAAA,sDACT,QAAQ;AAAA,wDACJ,MAAM;AAAA,sDACV;AAAA,sDACA,SAAS;AAAA,oDACb;AAAA,kDACJ;AACA,yDAAO;AAAA,gDACX;AACA,oDAAI,SAAS,YAAY;AACzB,oDAAI,CAAC,QAAQ;AACT;AAAA,gDACJ;AAAA,8CACJ;AAAA,4CACJ,OACK;AACD,yDAAW,SAAS;AAAA,gDAChB;AAAA,kDACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,kDACJ,YAAY;AAAA,kDACZ,SAAS;AAAA,kDACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,kDACxB,SAAS;AAAA,gDACb;AAAA,8CACJ;AACA,qDAAO;AAAA,4CACX;AAAA,0CACJ;AACA,8CAAI,SAAS,YAAY;AAAA,wCAC7B,OACK;AACD,8CAAI,SAAS;AAAA,wCACjB;AACA,4CAAI,QAAQ;AACR,8CAAI,MAAM,UAAU,QAAW;AAC3B,kDAAM,UAAU;AAChB,gDAAI,OAAO,MAAM,UAAU,UAAU;AACjC,yDAAW,SAAS;AAAA,gDAChB;AAAA,kDACI,cAAc,eACV,YACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,kDACJ,YAAY;AAAA,kDACZ,SAAS;AAAA,kDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kDACzB,SAAS;AAAA,gDACb;AAAA,8CACJ;AACA,qDAAO;AAAA,4CACX;AACA,gDAAI,SAAS,YAAY;AAAA,0CAC7B,OACK;AACD,gDAAI,SAAS;AAAA,0CACjB;AAAA,wCACJ;AAAA,sCACJ;AAAA,oCACJ;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ,OACK;AACD,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eACV,YACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,gCAChD,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AACzB,4BAAI,CAAC,QAAQ;AACT;AAAA,wBACJ;AAAA,sBACJ;AAAA,oBACJ,OACK;AACD,iCAAW,SAAS;AAAA,wBAChB;AAAA,0BACI,cAAc,eAAe;AAAA,0BAC7B,YAAY;AAAA,0BACZ,SAAS;AAAA,0BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,wBACb;AAAA,sBACJ;AACA,6BAAO;AAAA,oBACX;AAAA,kBACJ;AACA,sBAAI,SAAS,WAAW;AAAA,gBAC5B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AACA,IAAM,QAAQ,OAAO,UAAU;AAC/B,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,WAAW,GAAG;AACd,QAAI,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,IAAI,GAAG;AACzD,UAAI;AACJ,UAAK,KAAK,aAAa,WAAc,WAAW,eAC3C,KAAK,YAAY,WAAc,WAAW,cAC1C,KAAK,cAAc,WAAc,WAAW,gBAC5C,KAAK,YAAY,WAAc,WAAW,YAAa;AACxD,mBAAW,SAAS;AAAA,UAChB;AAAA,YACI;AAAA,YACA,YAAY;AAAA,YACZ,SAAS;AAAA,YACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,YACpC,SAAS,kCAAkC,WAAW;AAAA,UAC1D;AAAA,QACJ;AACA,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS;AACf,mBAAW,QAAQ,MAAM;AACrB,cAAI,EAAE,SAAS,aACX,SAAS,iBACT,SAAS,cACT,SAAS,UACT,SAAS,eACT,SAAS,aACT,SAAS,eACT,SAAS,YAAY;AACrB,uBAAW,SAAS;AAAA,cAChB;AAAA,gBACI;AAAA,gBACA,YAAY;AAAA,gBACZ,SAAS;AAAA,gBACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,gBACnC,SAAS;AAAA,cACb;AAAA,YACJ;AACA,mBAAO;AACP;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,WAAW,QAAQ;AACnB,cAAI,KAAK,YAAY,QAAW;AAC5B,kBAAM,SAAS;AACf,gBAAI,OAAO,KAAK,YAAY,UAAU;AAClC,yBAAW,SAAS;AAAA,gBAChB;AAAA,kBACI,cAAc,eAAe;AAAA,kBAC7B,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kBACzB,SAAS;AAAA,gBACb;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AACA,gBAAI,SAAS,WAAW;AAAA,UAC5B,OACK;AACD,gBAAI,SAAS;AAAA,UACjB;AACA,cAAI,QAAQ;AACR,gBAAI,KAAK,gBAAgB,QAAW;AAChC,oBAAM,SAAS;AACf,kBAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,2BAAW,SAAS;AAAA,kBAChB;AAAA,oBACI,cAAc,eAAe;AAAA,oBAC7B,YAAY;AAAA,oBACZ,SAAS;AAAA,oBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oBACzB,SAAS;AAAA,kBACb;AAAA,gBACJ;AACA,uBAAO;AAAA,cACX;AACA,kBAAI,SAAS,WAAW;AAAA,YAC5B,OACK;AACD,kBAAI,SAAS;AAAA,YACjB;AACA,gBAAI,QAAQ;AACR,kBAAI,KAAK,aAAa,QAAW;AAC7B,oBAAI,QAAQ,KAAK;AACjB,sBAAM,SAAS;AACf,oBAAI,WAAW,QAAQ;AACnB,sBAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,+BAAW,QAAQ,OAAO;AACtB,4BAAM,SAAS;AACf,0BAAI,CAAC,WAAW,MAAM,IAAI,GAAG;AAAA,wBACzB,cAAc,eACV,eACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,wBAChD,YAAY;AAAA,wBACZ,oBAAoB;AAAA,wBACpB;AAAA,sBACJ,CAAC,GAAG;AACA,kCACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,iCAAS,QAAQ;AAAA,sBACrB;AACA,0BAAI,SAAS,WAAW;AACxB,0BAAI,CAAC,QAAQ;AACT;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,OACK;AACD,+BAAW,SAAS;AAAA,sBAChB;AAAA,wBACI,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wBACzB,SAAS;AAAA,sBACb;AAAA,oBACJ;AACA,2BAAO;AAAA,kBACX;AAAA,gBACJ;AACA,oBAAI,SAAS,WAAW;AAAA,cAC5B,OACK;AACD,oBAAI,SAAS;AAAA,cACjB;AACA,kBAAI,QAAQ;AACR,oBAAI,KAAK,SAAS,QAAW;AACzB,wBAAM,UAAU;AAChB,sBAAI,OAAO,KAAK,SAAS,UAAU;AAC/B,+BAAW,SAAS;AAAA,sBAChB;AAAA,wBACI,cAAc,eAAe;AAAA,wBAC7B,YAAY;AAAA,wBACZ,SAAS;AAAA,wBACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wBACzB,SAAS;AAAA,sBACb;AAAA,oBACJ;AACA,2BAAO;AAAA,kBACX;AACA,sBAAI,SAAS,YAAY;AAAA,gBAC7B,OACK;AACD,sBAAI,SAAS;AAAA,gBACjB;AACA,oBAAI,QAAQ;AACR,sBAAI,KAAK,cAAc,QAAW;AAC9B,wBAAI,QAAQ,KAAK;AACjB,0BAAM,UAAU;AAChB,wBAAI,WAAW,SAAS;AACpB,0BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,mCAAW,QAAQ,OAAO;AACtB,gCAAM,UAAU;AAChB,8BAAI,CAAC,WAAW,MAAM,IAAI,GAAG;AAAA,4BACzB,cAAc,eACV,gBACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,4BAChD,YAAY;AAAA,4BACZ,oBAAoB;AAAA,4BACpB;AAAA,0BACJ,CAAC,GAAG;AACA,sCACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,qCAAS,QAAQ;AAAA,0BACrB;AACA,8BAAI,SAAS,YAAY;AACzB,8BAAI,CAAC,QAAQ;AACT;AAAA,0BACJ;AAAA,wBACJ;AAAA,sBACJ,OACK;AACD,mCAAW,SAAS;AAAA,0BAChB;AAAA,4BACI,cAAc,eAAe;AAAA,4BAC7B,YAAY;AAAA,4BACZ,SAAS;AAAA,4BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4BACzB,SAAS;AAAA,0BACb;AAAA,wBACJ;AACA,+BAAO;AAAA,sBACX;AAAA,oBACJ;AACA,wBAAI,SAAS,YAAY;AAAA,kBAC7B,OACK;AACD,wBAAI,SAAS;AAAA,kBACjB;AACA,sBAAI,QAAQ;AACR,wBAAI,KAAK,YAAY,QAAW;AAC5B,0BAAI,QAAQ,KAAK;AACjB,4BAAM,UAAU;AAChB,0BAAI,WAAW,SAAS;AACpB,4BAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,qCAAW,QAAQ,OAAO;AACtB,gCAAI,QAAQ,MAAM,IAAI;AACtB,kCAAM,UAAU;AAChB,kCAAM,UAAU;AAChB,gCAAI,SAAS;AACb,kCAAM,UAAU;AAChB,kCAAM,UAAU;AAChB,gCAAI,WAAW,SAAS;AACpB,kCAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,oCAAI;AACJ,oCAAI,MAAM,WAAW,WAChB,WAAW,WAAW;AACvB,wCAAM,OAAO;AAAA,oCACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,oCAC5B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,oCACpC,SAAS,kCACL,WACA;AAAA,kCACR;AACA,sCAAI,YAAY,MAAM;AAClB,8CAAU,CAAC,IAAI;AAAA,kCACnB,OACK;AACD,4CAAQ,KAAK,IAAI;AAAA,kCACrB;AACA;AAAA,gCACJ,OACK;AACD,wCAAM,UAAU;AAChB,6CAAW,QAAQ,OAAO;AACtB,wCAAI,EAAE,SAAS,UAAU,SAAS,WAAW;AACzC,4CAAM,OAAO;AAAA,wCACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,wCAC5B,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,wCACnC,SAAS;AAAA,sCACb;AACA,0CAAI,YAAY,MAAM;AAClB,kDAAU,CAAC,IAAI;AAAA,sCACnB,OACK;AACD,gDAAQ,KAAK,IAAI;AAAA,sCACrB;AACA;AACA;AAAA,oCACJ;AAAA,kCACJ;AACA,sCAAI,YAAY,QAAQ;AACpB,wCAAI,MAAM,SAAS,QAAW;AAC1B,4CAAM,UAAU;AAChB,0CAAI,OAAO,MAAM,SAAS,UAAU;AAChC,8CAAM,OAAO;AAAA,0CACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,0CACJ,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,0CACzB,SAAS;AAAA,wCACb;AACA,4CAAI,YAAY,MAAM;AAClB,oDAAU,CAAC,IAAI;AAAA,wCACnB,OACK;AACD,kDAAQ,KAAK,IAAI;AAAA,wCACrB;AACA;AAAA,sCACJ;AACA,0CAAI,SAAS,YAAY;AAAA,oCAC7B,OACK;AACD,0CAAI,SAAS;AAAA,oCACjB;AACA,wCAAI,QAAQ;AACR,0CAAI,MAAM,WAAW,QAAW;AAC5B,8CAAM,UAAU;AAChB,4CAAI,OAAO,MAAM,WAAW,UAAU;AAClC,gDAAM,OAAO;AAAA,4CACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,4CACJ,YAAY;AAAA,4CACZ,SAAS;AAAA,4CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4CACzB,SAAS;AAAA,0CACb;AACA,8CAAI,YAAY,MAAM;AAClB,sDAAU,CAAC,IAAI;AAAA,0CACnB,OACK;AACD,oDAAQ,KAAK,IAAI;AAAA,0CACrB;AACA;AAAA,wCACJ;AACA,4CAAI,SAAS,YAAY;AAAA,sCAC7B,OACK;AACD,4CAAI,SAAS;AAAA,sCACjB;AAAA,oCACJ;AAAA,kCACJ;AAAA,gCACJ;AAAA,8BACJ,OACK;AACD,sCAAM,OAAO;AAAA,kCACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,kCAC5B,YAAY;AAAA,kCACZ,SAAS;AAAA,kCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kCACzB,SAAS;AAAA,gCACb;AACA,oCAAI,YAAY,MAAM;AAClB,4CAAU,CAAC,IAAI;AAAA,gCACnB,OACK;AACD,0CAAQ,KAAK,IAAI;AAAA,gCACrB;AACA;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,UAAU,YAAY;AAC1B,qCAAS,UAAU;AACnB,gCAAI,CAAC,QAAQ;AACT,oCAAM,UAAU;AAChB,oCAAM,UAAU;AAChB,kCAAI,WAAW,SAAS;AACpB,oCAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,sCAAI;AACJ,sCAAK,MAAM,gBAAgB,WACtB,WAAW,kBACX,MAAM,WAAW,WACb,WAAW,WAAY;AAC5B,0CAAM,OAAO;AAAA,sCACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,sCAC5B,YAAY;AAAA,sCACZ,SAAS;AAAA,sCACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,sCACpC,SAAS,kCACL,WACA;AAAA,oCACR;AACA,wCAAI,YAAY,MAAM;AAClB,gDAAU,CAAC,IAAI;AAAA,oCACnB,OACK;AACD,8CAAQ,KAAK,IAAI;AAAA,oCACrB;AACA;AAAA,kCACJ,OACK;AACD,0CAAM,UAAU;AAChB,+CAAW,QAAQ,OAAO;AACtB,0CAAI,EAAE,SAAS,iBACX,SAAS,UACT,SAAS,WAAW;AACpB,8CAAM,OAAO;AAAA,0CACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,0CAC5B,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,oBAAoB,KAAK;AAAA,0CACnC,SAAS;AAAA,wCACb;AACA,4CAAI,YAAY,MAAM;AAClB,oDAAU,CAAC,IAAI;AAAA,wCACnB,OACK;AACD,kDAAQ,KAAK,IAAI;AAAA,wCACrB;AACA;AACA;AAAA,sCACJ;AAAA,oCACJ;AACA,wCAAI,YAAY,QAAQ;AACpB,0CAAI,MAAM,gBAAgB,QAAW;AACjC,4CAAI,SAAS,MAAM;AACnB,8CAAM,UAAU;AAChB,4CAAI,OAAO,WAAW,UAAU;AAC5B,gDAAM,OAAO;AAAA,4CACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,4CACJ,YAAY;AAAA,4CACZ,SAAS;AAAA,4CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,4CACzB,SAAS;AAAA,0CACb;AACA,8CAAI,YAAY,MAAM;AAClB,sDAAU,CAAC,IAAI;AAAA,0CACnB,OACK;AACD,oDAAQ,KAAK,IAAI;AAAA,0CACrB;AACA;AAAA,wCACJ;AACA,4CAAI,EAAE,WAAW,YACb,WAAW,YACX,WAAW,aAAa;AACxB,gDAAM,OAAO;AAAA,4CACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,4CACJ,YAAY;AAAA,4CACZ,SAAS;AAAA,4CACT,QAAQ;AAAA,8CACJ,eAAe,SAAS,WAAW,YAC9B;AAAA,4CACT;AAAA,4CACA,SAAS;AAAA,0CACb;AACA,8CAAI,YAAY,MAAM;AAClB,sDAAU,CAAC,IAAI;AAAA,0CACnB,OACK;AACD,oDAAQ,KAAK,IAAI;AAAA,0CACrB;AACA;AAAA,wCACJ;AACA,4CAAI,SAAS,YAAY;AAAA,sCAC7B,OACK;AACD,4CAAI,SAAS;AAAA,sCACjB;AACA,0CAAI,QAAQ;AACR,4CAAI,MAAM,SAAS,QAAW;AAC1B,gDAAM,UAAU;AAChB,8CAAI,OAAO,MAAM,SAAS,UAAU;AAChC,kDAAM,OAAO;AAAA,8CACT,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,8CACJ,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8CACzB,SAAS;AAAA,4CACb;AACA,gDAAI,YAAY,MAAM;AAClB,wDAAU,CAAC,IAAI;AAAA,4CACnB,OACK;AACD,sDAAQ,KAAK,IAAI;AAAA,4CACrB;AACA;AAAA,0CACJ;AACA,8CAAI,SAAS,YAAY;AAAA,wCAC7B,OACK;AACD,8CAAI,SAAS;AAAA,wCACjB;AACA,4CAAI,QAAQ;AACR,8CAAI,MAAM,WAAW,QAAW;AAC5B,kDAAM,UAAU;AAChB,gDAAI,OAAO,MAAM,WAAW,UAAU;AAClC,oDAAM,QAAQ;AAAA,gDACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,gDACJ,YAAY;AAAA,gDACZ,SAAS;AAAA,gDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gDACzB,SAAS;AAAA,8CACb;AACA,kDAAI,YAAY,MAAM;AAClB,0DAAU,CAAC,KAAK;AAAA,8CACpB,OACK;AACD,wDAAQ,KAAK,KAAK;AAAA,8CACtB;AACA;AAAA,4CACJ;AACA,gDAAI,SAAS,YAAY;AAAA,0CAC7B,OACK;AACD,gDAAI,SAAS;AAAA,0CACjB;AAAA,wCACJ;AAAA,sCACJ;AAAA,oCACJ;AAAA,kCACJ;AAAA,gCACJ,OACK;AACD,wCAAM,QAAQ;AAAA,oCACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,oCAC5B,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oCACzB,SAAS;AAAA,kCACb;AACA,sCAAI,YAAY,MAAM;AAClB,8CAAU,CAAC,KAAK;AAAA,kCACpB,OACK;AACD,4CAAQ,KAAK,KAAK;AAAA,kCACtB;AACA;AAAA,gCACJ;AAAA,8BACJ;AACA,kCAAI,UAAU,YAAY;AAC1B,uCAAS,UAAU;AACnB,kCAAI,CAAC,QAAQ;AACT,sCAAM,UAAU;AAChB,oCAAI,CAAC,WAAW,OAAO;AAAA,kCACnB,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,kCAC5B,YAAY;AAAA,kCACZ,oBAAoB;AAAA,kCACpB;AAAA,gCACJ,CAAC,GAAG;AACA,4CACI,YAAY,OACN,WAAW,SACX,QAAQ,OAAO,WAAW,MAAM;AAC1C,2CAAS,QAAQ;AAAA,gCACrB;AACA,oCAAI,UAAU,YAAY;AAC1B,yCAAS,UAAU;AACnB,oCAAI,CAAC,QAAQ;AACT,wCAAM,UAAU;AAChB,wCAAM,UAAU;AAChB,sCAAI,WAAW,SAAS;AACpB,wCAAI,SACA,OAAO,SAAS,YAChB,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,0CAAI;AACJ,0CAAK,MAAM,WAAW,WACjB,WAAW,aACX,MAAM,YAAY,WACd,WAAW,YAAa;AAC7B,8CAAM,QAAQ;AAAA,0CACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,0CAC5B,YAAY;AAAA,0CACZ,SAAS;AAAA,0CACT,QAAQ,EAAE,iBAAiB,SAAS;AAAA,0CACpC,SAAS,kCACL,WACA;AAAA,wCACR;AACA,4CAAI,YAAY,MAAM;AAClB,oDAAU,CAAC,KAAK;AAAA,wCACpB,OACK;AACD,kDAAQ,KAAK,KAAK;AAAA,wCACtB;AACA;AAAA,sCACJ,OACK;AACD,8CAAM,UAAU;AAChB,mDAAW,QAAQ,OAAO;AACtB,8CAAI,CAAC,MAAM,KAAK,SAAS,YAAY,IAAI,GAAG;AACxC,kDAAM,QAAQ;AAAA,8CACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,8CAC5B,YAAY;AAAA,8CACZ,SAAS;AAAA,8CACT,QAAQ;AAAA,gDACJ,oBAAoB;AAAA,8CACxB;AAAA,8CACA,SAAS;AAAA,4CACb;AACA,gDAAI,YAAY,MAAM;AAClB,wDAAU,CAAC,KAAK;AAAA,4CACpB,OACK;AACD,sDAAQ,KAAK,KAAK;AAAA,4CACtB;AACA;AACA;AAAA,0CACJ;AAAA,wCACJ;AACA,4CAAI,YAAY,QAAQ;AACpB,8CAAI,MAAM,YAAY,QAAW;AAC7B,kDAAM,UAAU;AAChB,gDAAI,OAAO,MAAM,YAAY,UAAU;AACnC,oDAAM,QAAQ;AAAA,gDACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,gDACJ,YAAY;AAAA,gDACZ,SAAS;AAAA,gDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gDACzB,SAAS;AAAA,8CACb;AACA,kDAAI,YAAY,MAAM;AAClB,0DAAU,CAAC,KAAK;AAAA,8CACpB,OACK;AACD,wDAAQ,KAAK,KAAK;AAAA,8CACtB;AACA;AAAA,4CACJ;AACA,gDAAI,UAAU,YAAY;AAAA,0CAC9B,OACK;AACD,gDAAI,UAAU;AAAA,0CAClB;AACA,8CAAI,SAAS;AACT,gDAAI,MAAM,aAAa,QAAW;AAC9B,oDAAM,UAAU;AAChB,kDAAI,OAAO,MAAM,aACb,UAAU;AACV,sDAAM,QAAQ;AAAA,kDACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,kDACJ,YAAY;AAAA,kDACZ,SAAS;AAAA,kDACT,QAAQ,EAAE,MAAM,SAAS;AAAA,kDACzB,SAAS;AAAA,gDACb;AACA,oDAAI,YAAY,MAAM;AAClB,4DAAU,CAAC,KAAK;AAAA,gDACpB,OACK;AACD,0DAAQ,KAAK,KAAK;AAAA,gDACtB;AACA;AAAA,8CACJ;AACA,kDAAI,UAAU,YAAY;AAAA,4CAC9B,OACK;AACD,kDAAI,UAAU;AAAA,4CAClB;AACA,gDAAI,SAAS;AACT,kDAAI,MAAM,UAAU,QAAW;AAC3B,oDAAI,SAAS,MAAM;AACnB,sDAAM,UAAU;AAChB,oDAAI,WAAW,SAAS;AACpB,sDAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,wDAAI,UAAU;AACd,0DAAM,OAAO,OAAO;AACpB,6DAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,4DAAM,UAAU;AAChB,0DAAI,OAAO,OAAO,EAAE,MAChB,UAAU;AACV,8DAAM,QAAQ;AAAA,0DACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB,YACA;AAAA,0DACJ,YAAY;AAAA,0DACZ,SAAS;AAAA,0DACT,QAAQ;AAAA,4DACJ,MAAM;AAAA,0DACV;AAAA,0DACA,SAAS;AAAA,wDACb;AACA,4DAAI,YAAY,MAAM;AAClB,oEAAU,CAAC,KAAK;AAAA,wDACpB,OACK;AACD,kEAAQ,KAAK,KAAK;AAAA,wDACtB;AACA;AAAA,sDACJ;AACA,0DAAI,UAAU,YAAY;AAC1B,0DAAI,CAAC,SAAS;AACV;AAAA,sDACJ;AAAA,oDACJ;AAAA,kDACJ,OACK;AACD,0DAAM,QAAQ;AAAA,sDACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,sDACJ,YAAY;AAAA,sDACZ,SAAS;AAAA,sDACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,sDACxB,SAAS;AAAA,oDACb;AACA,wDAAI,YAAY,MAAM;AAClB,gEAAU,CAAC,KAAK;AAAA,oDACpB,OACK;AACD,8DAAQ,KAAK,KAAK;AAAA,oDACtB;AACA;AAAA,kDACJ;AAAA,gDACJ;AACA,oDAAI,UAAU,YAAY;AAAA,8CAC9B,OACK;AACD,oDAAI,UAAU;AAAA,8CAClB;AACA,kDAAI,SAAS;AACT,oDAAI,MAAM,YAAY,QAAW;AAC7B,sDAAI,SAAS,MAAM;AACnB,wDAAM,UAAU;AAChB,sDAAI,WAAW,SAAS;AACpB,wDAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,0DAAI,UAAU;AACd,4DAAM,OAAO,OAAO;AACpB,+DAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,8DAAM,UAAU;AAChB,4DAAI,OAAO,OAAO,EAAE,MAChB,UAAU;AACV,gEAAM,QAAQ;AAAA,4DACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB,cACA;AAAA,4DACJ,YAAY;AAAA,4DACZ,SAAS;AAAA,4DACT,QAAQ;AAAA,8DACJ,MAAM;AAAA,4DACV;AAAA,4DACA,SAAS;AAAA,0DACb;AACA,8DAAI,YAAY,MAAM;AAClB,sEAAU,CAAC,KAAK;AAAA,0DACpB,OACK;AACD,oEAAQ,KAAK,KAAK;AAAA,0DACtB;AACA;AAAA,wDACJ;AACA,4DAAI,UAAU,YAAY;AAC1B,4DAAI,CAAC,SAAS;AACV;AAAA,wDACJ;AAAA,sDACJ;AAAA,oDACJ,OACK;AACD,4DAAM,QAAQ;AAAA,wDACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,wDACJ,YAAY;AAAA,wDACZ,SAAS;AAAA,wDACT,QAAQ;AAAA,0DACJ,MAAM;AAAA,wDACV;AAAA,wDACA,SAAS;AAAA,sDACb;AACA,0DAAI,YAAY,MAAM;AAClB,kEAAU,CAAC,KAAK;AAAA,sDACpB,OACK;AACD,gEAAQ,KAAK,KAAK;AAAA,sDACtB;AACA;AAAA,oDACJ;AAAA,kDACJ;AACA,sDAAI,UAAU,YAAY;AAAA,gDAC9B,OACK;AACD,sDAAI,UAAU;AAAA,gDAClB;AACA,oDAAI,SAAS;AACT,sDAAI,MAAM,SAAS,QAAW;AAC1B,0DAAM,UAAU;AAChB,wDAAI,OAAO,MAAM,SACb,UAAU;AACV,4DAAM,QAAQ;AAAA,wDACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,wDACJ,YAAY;AAAA,wDACZ,SAAS;AAAA,wDACT,QAAQ;AAAA,0DACJ,MAAM;AAAA,wDACV;AAAA,wDACA,SAAS;AAAA,sDACb;AACA,0DAAI,YAAY,MAAM;AAClB,kEAAU,CAAC,KAAK;AAAA,sDACpB,OACK;AACD,gEAAQ,KAAK,KAAK;AAAA,sDACtB;AACA;AAAA,oDACJ;AACA,wDAAI,UAAU,YAAY;AAAA,kDAC9B,OACK;AACD,wDAAI,UAAU;AAAA,kDAClB;AACA,sDAAI,SAAS;AACT,wDAAI,MAAM,WAAW,QAAW;AAC5B,0DAAI,SAAS,MAAM;AACnB,4DAAM,UAAU;AAChB,0DAAI,WAAW,SAAS;AACpB,4DAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,8DAAI,UAAU;AACd,gEAAM,OAAO,OAAO;AACpB,mEAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,kEAAM,UAAU;AAChB,gEAAI,OAAO,OAAO,EAAE,MAAM,UAAU;AAChC,oEAAM,QAAQ;AAAA,gEACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB,aACA;AAAA,gEACJ,YAAY;AAAA,gEACZ,SAAS;AAAA,gEACT,QAAQ;AAAA,kEACJ,MAAM;AAAA,gEACV;AAAA,gEACA,SAAS;AAAA,8DACb;AACA,kEAAI,YAAY,MAAM;AAClB,0EAAU;AAAA,kEACN;AAAA,gEACJ;AAAA,8DACJ,OACK;AACD,wEAAQ,KAAK,KAAK;AAAA,8DACtB;AACA;AAAA,4DACJ;AACA,gEAAI,UAAU,YACV;AACJ,gEAAI,CAAC,SAAS;AACV;AAAA,4DACJ;AAAA,0DACJ;AAAA,wDACJ,OACK;AACD,gEAAM,QAAQ;AAAA,4DACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,4DACJ,YAAY;AAAA,4DACZ,SAAS;AAAA,4DACT,QAAQ;AAAA,8DACJ,MAAM;AAAA,4DACV;AAAA,4DACA,SAAS;AAAA,0DACb;AACA,8DAAI,YAAY,MAAM;AAClB,sEAAU,CAAC,KAAK;AAAA,0DACpB,OACK;AACD,oEAAQ,KAAK,KAAK;AAAA,0DACtB;AACA;AAAA,wDACJ;AAAA,sDACJ;AACA,0DAAI,UAAU,YAAY;AAAA,oDAC9B,OACK;AACD,0DAAI,UAAU;AAAA,oDAClB;AACA,wDAAI,SAAS;AACT,0DAAI,MAAM,WACN,QAAW;AACX,8DAAM,UAAU;AAChB,4DAAI,OAAO,MAAM,WACb,UAAU;AACV,gEAAM,QAAQ;AAAA,4DACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,4DACJ,YAAY;AAAA,4DACZ,SAAS;AAAA,4DACT,QAAQ;AAAA,8DACJ,MAAM;AAAA,4DACV;AAAA,4DACA,SAAS;AAAA,0DACb;AACA,8DAAI,YAAY,MAAM;AAClB,sEAAU,CAAC,KAAK;AAAA,0DACpB,OACK;AACD,oEAAQ,KAAK,KAAK;AAAA,0DACtB;AACA;AAAA,wDACJ;AACA,4DAAI,UAAU,YAAY;AAAA,sDAC9B,OACK;AACD,4DAAI,UAAU;AAAA,sDAClB;AACA,0DAAI,SAAS;AACT,4DAAI,MAAM,iBACN,QAAW;AACX,8DAAI,SAAS,MAAM;AACnB,gEAAM,UAAU;AAChB,8DAAI,OAAO,WACP,UAAU;AACV,kEAAM,QAAQ;AAAA,8DACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,8DACJ,YAAY;AAAA,8DACZ,SAAS;AAAA,8DACT,QAAQ;AAAA,gEACJ,MAAM;AAAA,8DACV;AAAA,8DACA,SAAS;AAAA,4DACb;AACA,gEAAI,YAAY,MAAM;AAClB,wEAAU,CAAC,KAAK;AAAA,4DACpB,OACK;AACD,sEAAQ,KAAK,KAAK;AAAA,4DACtB;AACA;AAAA,0DACJ;AACA,8DAAI,EAAE,WACF,YACA,WACI,cAAc;AAClB,kEAAM,QAAQ;AAAA,8DACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,8DACJ,YAAY;AAAA,8DACZ,SAAS;AAAA,8DACT,QAAQ;AAAA,gEACJ,eAAe,SACV,WACA,aACA;AAAA,8DACT;AAAA,8DACA,SAAS;AAAA,4DACb;AACA,gEAAI,YAAY,MAAM;AAClB,wEAAU,CAAC,KAAK;AAAA,4DACpB,OACK;AACD,sEAAQ,KAAK,KAAK;AAAA,4DACtB;AACA;AAAA,0DACJ;AACA,8DAAI,UAAU,YAAY;AAAA,wDAC9B,OACK;AACD,8DAAI,UAAU;AAAA,wDAClB;AACA,4DAAI,SAAS;AACT,8DAAI,MAAM,YACN,QAAW;AACX,kEAAM,UAAU;AAChB,gEAAI,OAAO,MAAM,YACb,UAAU;AACV,oEAAM,QAAQ;AAAA,gEACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI,IACxB;AAAA,gEACJ,YAAY;AAAA,gEACZ,SAAS;AAAA,gEACT,QAAQ;AAAA,kEACJ,MAAM;AAAA,gEACV;AAAA,gEACA,SAAS;AAAA,8DACb;AACA,kEAAI,YAAY,MAAM;AAClB,0EAAU;AAAA,kEACN;AAAA,gEACJ;AAAA,8DACJ,OACK;AACD,wEAAQ,KAAK,KAAK;AAAA,8DACtB;AACA;AAAA,4DACJ;AACA,gEAAI,UAAU,YACV;AAAA,0DACR,OACK;AACD,gEAAI,UAAU;AAAA,0DAClB;AAAA,wDACJ;AAAA,sDACJ;AAAA,oDACJ;AAAA,kDACJ;AAAA,gDACJ;AAAA,8CACJ;AAAA,4CACJ;AAAA,0CACJ;AAAA,wCACJ;AAAA,sCACJ;AAAA,oCACJ,OACK;AACD,4CAAM,QAAQ;AAAA,wCACV,cAAc,eACV,cACA,KACK,QAAQ,MAAM,IAAI,EAClB,QAAQ,OAAO,IAAI;AAAA,wCAC5B,YAAY;AAAA,wCACZ,SAAS;AAAA,wCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,wCACzB,SAAS;AAAA,sCACb;AACA,0CAAI,YAAY,MAAM;AAClB,kDAAU,CAAC,KAAK;AAAA,sCACpB,OACK;AACD,gDAAQ,KAAK,KAAK;AAAA,sCACtB;AACA;AAAA,oCACJ;AAAA,kCACJ;AACA,sCAAI,UAAU,YAAY;AAC1B,2CAAS,UAAU;AAAA,gCACvB;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,CAAC,QAAQ;AACT,oCAAM,QAAQ;AAAA,gCACV,cAAc,eACV,cACA,KAAK,QAAQ,MAAM,IAAI,EAAE,QAAQ,OAAO,IAAI;AAAA,gCAChD,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,CAAC;AAAA,gCACT,SAAS;AAAA,8BACb;AACA,kCAAI,YAAY,MAAM;AAClB,0CAAU,CAAC,KAAK;AAAA,8BACpB,OACK;AACD,wCAAQ,KAAK,KAAK;AAAA,8BACtB;AACA;AACA,yCAAW,SAAS;AACpB,qCAAO;AAAA,4BACX,OACK;AACD,uCAAS;AACT,kCAAI,YAAY,MAAM;AAClB,oCAAI,SAAS;AACT,0CAAQ,SAAS;AAAA,gCACrB,OACK;AACD,4CAAU;AAAA,gCACd;AAAA,8BACJ;AAAA,4BACJ;AACA,gCAAI,SAAS,YAAY;AACzB,gCAAI,CAAC,QAAQ;AACT;AAAA,4BACJ;AAAA,0BACJ;AAAA,wBACJ,OACK;AACD,qCAAW,SAAS;AAAA,4BAChB;AAAA,8BACI,cAAc,eAAe;AAAA,8BAC7B,YAAY;AAAA,8BACZ,SAAS;AAAA,8BACT,QAAQ,EAAE,MAAM,SAAS;AAAA,8BACzB,SAAS;AAAA,4BACb;AAAA,0BACJ;AACA,iCAAO;AAAA,wBACX;AAAA,sBACJ;AACA,0BAAI,SAAS,YAAY;AAAA,oBAC7B,OACK;AACD,0BAAI,SAAS;AAAA,oBACjB;AACA,wBAAI,QAAQ;AACR,0BAAI,KAAK,cAAc,QAAW;AAC9B,4BAAI,SAAS,KAAK;AAClB,8BAAM,UAAU;AAChB,4BAAI,WAAW,SAAS;AACpB,8BAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,gCAAI,UAAU;AACd,kCAAM,OAAO,OAAO;AACpB,qCAAS,KAAK,GAAG,KAAK,MAAM,MAAM;AAC9B,kCAAI,SAAS,OAAO,EAAE;AACtB,oCAAM,UAAU;AAChB,kCAAI,OAAO,WAAW,UAAU;AAC5B,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe,gBAAgB;AAAA,oCAC7C,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,oCACzB,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AAAA,8BACX;AACA,kCAAI,EAAE,WAAW,iBACb,WAAW,iBACX,WAAW,iBACX,WAAW,iBACX,WAAW,cACX,WAAW,iBACX,WAAW,cACX,WAAW,iBACX,WAAW,cACX,WAAW,iBACX,WAAW,aAAa;AACxB,2CAAW,SAAS;AAAA,kCAChB;AAAA,oCACI,cAAc,eAAe,gBAAgB;AAAA,oCAC7C,YAAY;AAAA,oCACZ,SAAS;AAAA,oCACT,QAAQ,EAAE,eAAe,SAAS,KAAK;AAAA,oCACvC,SAAS;AAAA,kCACb;AAAA,gCACJ;AACA,uCAAO;AAAA,8BACX;AACA,kCAAI,UAAU,YAAY;AAC1B,kCAAI,CAAC,SAAS;AACV;AAAA,8BACJ;AAAA,4BACJ;AAAA,0BACJ,OACK;AACD,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,QAAQ;AAAA,gCACxB,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AAAA,wBACJ;AACA,4BAAI,SAAS,YAAY;AAAA,sBAC7B,OACK;AACD,4BAAI,SAAS;AAAA,sBACjB;AACA,0BAAI,QAAQ;AACR,4BAAI,KAAK,YAAY,QAAW;AAC5B,8BAAI,SAAS,KAAK;AAClB,gCAAM,UAAU;AAChB,8BAAI,EAAE,OAAO,UAAU,YAAY,SAAS,MAAM,IAAI;AAClD,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,MAAM,SAAS;AAAA,gCACzB,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AACA,8BAAI,MAAM,QAAQ;AACd,uCAAW,SAAS;AAAA,8BAChB;AAAA,gCACI,cAAc,eAAe;AAAA,gCAC7B,YAAY;AAAA,gCACZ,SAAS;AAAA,gCACT,QAAQ,EAAE,cAAc,EAAE;AAAA,gCAC1B,SAAS;AAAA,8BACb;AAAA,4BACJ;AACA,mCAAO;AAAA,0BACX;AACA,8BAAI,SAAS,YAAY;AAAA,wBAC7B,OACK;AACD,8BAAI,SAAS;AAAA,wBACjB;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,SAAS;AAAA,QAChB;AAAA,UACI;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,QAAQ,EAAE,MAAM,SAAS;AAAA,UACzB,SAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;AACA,SAAS,WAAW,MAAM,EAAE,eAAe,IAAI,YAAY,oBAAoB,WAAW,KAAK,IAAI,CAAC,GAAG;AACnG,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,CAAC,WAAW,MAAM;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC,GAAG;AACA,cACI,YAAY,OAAO,WAAW,SAAS,QAAQ,OAAO,WAAW,MAAM;AAC3E,aAAS,QAAQ;AAAA,EACrB;AACA,aAAW,SAAS;AACpB,SAAO,WAAW;AACtB;;;AD/xMA,IAAM,yBAAyB,CAAC;AAAA;AAAA,EAEhC,OAAO,IAAI,CAAC,UAAU,GAAG,MAAM,YAAY,KAAK,MAAM,OAAO,EAAE,EAAE,KAAK,GAAG;AAAA;AAClE,IAAM,yBAAyB,CAAC,uBAAuB,cAAc;AAExE,MAAI;AACA,UAAM,SAAS,OAAO,0BAA0B,WAC1C,KAAK,MAAM,qBAAqB,IAChC;AACN,QAAI,UAAU,MAAM,GAAG;AACnB,aAAO;AAAA,IACX;AAEA,WAAO,uBAAuB,yCAAgC,MAAM;AAAA,EACxE,SACO,GAAG;AACN,WAAO,iBAAiB,OAAO,CAAC,CAAC;AAAA,EACrC;AACJ;;;ADKO,IAAM,+BAA+B,CAAC,0BAA0B;AACnE,QAAM,cAAc;AACpB,QAAM,WAAW,uBAAuB,uBAAuB,wCAA+B;AAC9F,MAAI,OAAO,aAAa,UAAU;AAC9B,WAAO,GAAG,WAAW,GAAG,QAAQ;AAAA,EACpC;AAEA,SAAO;AACX;;;AGhCA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AACO,IAAI;AAAA,CACV,SAAUC,mBAAkB;AAIzB,EAAAA,kBAAiBA,kBAAiB,6BAA6B,IAAI,CAAC,IAAI;AAKxE,EAAAA,kBAAiB,yBAAyB,IAAI;AAW9C,EAAAA,kBAAiBA,kBAAiB,mCAAmC,IAAI,CAAC,IAAI;AAO9E,EAAAA,kBAAiBA,kBAAiB,iCAAiC,IAAI,UAAU,IAAI;AAIrF,EAAAA,kBAAiB,6CAA6C,IAAI;AAIlE,EAAAA,kBAAiB,oCAAoC,IAAI;AAIzD,EAAAA,kBAAiBA,kBAAiB,oCAAoC,IAAI,CAAC,IAAI;AAI/E,EAAAA,kBAAiBA,kBAAiB,oCAAoC,IAAI,CAAC,IAAI;AAK/E,EAAAA,kBAAiBA,kBAAiB,oCAAoC,IAAI,CAAC,IAAI;AAM/E,EAAAA,kBAAiBA,kBAAiB,mCAAmC,IAAI,CAAC,IAAI;AAK9E,EAAAA,kBAAiBA,kBAAiB,oBAAoB,IAAI,CAAC,IAAI;AAI/D,EAAAA,kBAAiB,gCAAgC,IAAI;AAIrD,EAAAA,kBAAiB,4BAA4B,IAAI;AAMjD,EAAAA,kBAAiB,8BAA8B,IAAI;AACvD,GAAG,qBAAqB,mBAAmB,CAAC,EAAE;;;AD/DvC,IAAM,4BAA4B,CAAC,YAAY,mBAAmB,CAAC,YAAY,MAAM,kBAAkB;AAE1G,aAAW,aAAa,YAAY;AAChC,UAAM,SAAS,UAAU,YAAY,MAAM,aAAa;AACxD,QAAI,OAAO,WAAW;AAClB,aAAO;AAAA,EACf;AACA,SAAO,eAAe,YAAY,MAAM,aAAa;AACzD;AASO,IAAM,4BAA4B,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAW;AAAA;AAAA,EAEX,CAAC,YAAY,MAAM,kBAAkB;AAEjC,eAAW,YAAY,yBAAyB;AAC5C,UAAI,cAAc,QAAQ,MAAM;AAC5B,eAAQ,eACF,EAAE,QAAQ,OAAO,IACjB;AAAA,UACE,OAAO,mBAAmB,UAAU,YAAY,QAAQ;AAAA,UACxD,QAAQ;AAAA,QACZ;AAAA,IACZ;AAEA,eAAW,YAAY,gBAAgB;AACnC,UAAI,KAAK,QAAQ,MACb;AACA,eAAQ,eACF,EAAE,QAAQ,OAAO,IACjB;AAAA,UACE,OAAO,mBAAmB,UAAU,YAAY,QAAQ;AAAA,UACxD,QAAQ;AAAA,QACZ;AAAA,IACZ;AACA,WAAO,UAAU,YAAY,MAAM,aAAa;AAAA,EACpD;AAAA;AACO,IAAM,6CAA6C,0BAA0B;AAAA,EAChF,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,UAAU;AAAA,EAC3B,WAAW,CAAC,YAAY,SAAS;AAC7B,UAAM,WAAW,KAAK,SAAS,UAAU;AACzC,QAAI,aAAa,QAAW;AACxB,aAAO,EAAE,UAAU,QAAQ,UAAU;AAAA,IACzC;AACA,WAAO,EAAE,QAAQ,OAAO;AAAA,EAC5B;AACJ,CAAC;AAEM,IAAM,6CAA6C,CAAC,EAAE,cAAc,UAAU,oBAAoB,eAAe,OAAO,WAAY,MAAM;AAC7I,QAAM,gBAAgB,MAAM,iBAAiB,iBAAiB;AAC9D,QAAM,wBAAwB,MAAM,yBAAyB,iBAAiB;AAC9E,QAAM,IAAI,eAAe;AACzB,QAAM,4BAA4B;AAClC,MAAI,CAAC,0BAA0B,KAAK,qBAAqB,GAAG;AACxD,WAAO;AAAA,MACH,OAAO,sBAAsB,UAAU,gBAAgB,qBAAqB;AAAA,MAC5E,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,eAAe,sBAAsB,QAAQ,KAAK,EAAE,SAAS,CAAC;AACpE,QAAM,iBAAiB,mBAAmB,oBAAoB,aAAa;AAC3E,MAAI,OAAO,mBAAmB,UAAU;AACpC,WAAO;AAAA,MACH,OAAO,sBAAsB,UAAU,sCAAsC,QAAQ,0BAA0B,cAAc;AAAA,MAC7H,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,eAAe,aAAa,eAAe,MAAM,cAAc,aAAa;AAClF,MAAI,OAAO,iBAAiB,UAAU;AAClC,WAAO;AAAA,MACH,OAAO,sBAAsB,UAAU,gBAAgB,YAAY,sCAAsC,QAAQ,MAAM,YAAY;AAAA,MACnI,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,SAAO;AAAA,IACH,UAAU,aAAa;AAAA,IACvB,QAAQ;AAAA,EACZ;AACJ;AACO,IAAM,uCAAuC,CAAC,YAAY,gBAAgB;AAAA,EAC7E,OAAO,eAAe,UAAU,wDAAwD,UAAU;AAAA,EAClG,QAAQ;AACZ;AACO,IAAM,sCAAsC,CAAC,gBAAgB;AAAA,EAChE,OAAO,eAAe,UAAU;AAAA,EAChC,QAAQ;AACZ;AACO,IAAM,4CAA4C,CAAC,EAAE,eAAe,QAAQ,WAAY,MAAM;AACjG,QAAM,EAAE,cAAc,cAAc,IAAI;AACxC,QAAM,CAAC,UAAU,IAAI,WAAW,MAAM,GAAG;AACzC,QAAM,WAAW,cAAc,gBAAgB,UAAU;AACzD,MAAI,aAAa,QAAW;AACxB,WAAO,qCAAqC,YAAY,UAAU;AAAA,EACtE;AACA,MAAI,iBAAiB,QAAW;AAC5B,WAAO,oCAAoC,UAAU;AAAA,EACzD;AACA,QAAM,qBAAqB,kBAAkB,SAAY,SAAY,cAAc,QAAQ;AAC3F,MAAI,uBAAuB,QAAW;AAClC,WAAO;AAAA,MACH,OAAO,eAAe,UAAU,kCAAkC,QAAQ;AAAA,MAC1E,aAAa;AAAA,MACb,QAAQ;AAAA,IACZ;AAAA,EACJ;AAIA,QAAM,QAAQ,cAAc,UAAU,UAAU;AAChD,SAAO,2CAA2C;AAAA,IAC9C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAWO,IAAM,uCAAuC,CAAC,EAAE,gBAAgB,MAAM,cAAe,MAAM;AAC9F,QAAM,gBAAgB,cAAc,QAAQ,cAAc;AAC1D,QAAM,iBAAiB,wBAAwB;AAAA,IAC3C;AAAA,IACA;AAAA,IACA,YAAY;AAAA,EAChB,CAAC;AACD,MAAI,kBAAkB,UAAa,mBAAmB,OAAO;AACzD,WAAO;AAAA,EACX;AACA,MAAI,OAAO,mBAAmB,UAAU;AACpC,WAAO;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,SAAO,eAAe;AAC1B;AAKO,IAAM,iDAAiD,CAAC,EAAE,MAAM,eAAe,YAAY,iBAAiB,iBAAkB,MAAM;AACvI,QAAM,kBAAkB,gBAAgB,gBAAgB,SAAS,CAAC;AAClE,MAAI,oBAAoB,QAAW;AAC/B,WAAO;AAAA,MACH,OAAO,eAAe,UAAU;AAAA,MAChC,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,wBAAwB,iBAAiB,eAAe;AAC9D,MAAI,0BAA0B,QAAW;AACrC,WAAO;AAAA,MACH,OAAO,eAAe,UAAU,2FAA2F,eAAe;AAAA,MAC1I,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,SAAS,qCAAqC;AAAA,IAChD;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,EACpB,CAAC;AACD,MAAI,WAAW,OAAO;AAClB,WAAO;AAAA,MACH,OAAO,eAAe,UAAU,8EAA8E,qBAAqB;AAAA,MACnI,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,SAAO;AACX;;;AE1NA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAMO,IAAM,+BAA+B,0BAA0B;AAAA,EAClE,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,UAAU;AAAA,EAC3B,WAAW,CAAC,YAAY,SAAS;AAC7B,UAAM,WAAW,KAAK,SAAS,UAAU;AACzC,QAAI,aAAa,QAAW;AACxB,aAAO,EAAE,UAAU,QAAQ,UAAU;AAAA,IACzC;AACA,WAAO;AAAA,MACH,OAAO,eAAe,UAAU,oCAAoC,UAAU;AAAA,MAC9E,aAAa;AAAA,MACb,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ,CAAC;AACM,IAAM,8BAA8B,0BAA0B;AAAA,EACjE,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,UAAU;AAAA,EAC3B,WAAW,CAAC,YAAY,SAAS;AAC7B,UAAM,WAAW,KAAK,SAAS,UAAU;AACzC,QAAI,aAAa,QAAW;AACxB,aAAO,EAAE,UAAU,QAAQ,UAAU;AAAA,IACzC;AACA,WAAO;AAAA,MACH,OAAO,eAAe,UAAU,kCAAkC,UAAU;AAAA,MAC5E,aAAa;AAAA,MACb,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ,CAAC;AACM,IAAM,oCAAoC,0BAA0B;AAAA,EACvE,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,kBAAkB;AAAA,EACnC,WAAW,CAACC,IAAG,UAAU;AAAA,IACrB,UAAU,oBAAoB,KAAK,gBAAgB;AAAA,IACnD,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,sCAAsC,0BAA0B;AAAA,EACzE,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU,iBAAiB,OAAO,KAAK,kBAAkB,CAAC;AAAA,IAC1D,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,2DAA2D,0BAA0B;AAAA,EAC9F,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,SAAS;AACpB,UAAM,EAAE,oBAAoB,IAAI,0CAA0C,KAAK,kBAAkB;AACjG,WAAO,wBAAwB,SACzB,EAAE,UAAU,WAAW,GAAG,GAAG,QAAQ,UAAU,IAC/C;AAAA,MACE,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACR;AACJ,CAAC;AACM,IAAM,+DAA+D,0BAA0B;AAAA,EAClG,cAAc;AAAA,EACd,yBAAyB,CAAC,QAAQ;AAAA,EAClC,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,MAAM,kBAAkB;AACnC,UAAM,EAAE,oBAAoB,IAAI,0CAA0C,KAAK,kBAAkB;AACjG,WAAO,wBAAwB,SACzB,EAAE,UAAU,WAAW,GAAG,GAAG,QAAQ,UAAU,IAC/C;AAAA,MACE,UAAU,cAAc,OAAO,KAAK,cAAc,OAAO,KAAK,mBAAmB,CAAC;AAAA,MAClF,QAAQ;AAAA,IACZ;AAAA,EACR;AACJ,CAAC;AACD,IAAM,6DAA6D,CAAC,iBAAiB,0BAA0B;AAAA,EAC3G,cAAc;AAAA,EACd,yBAAyB,CAAC,mBAAmB,kBAAkB;AAAA,EAC/D,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,EAAE,kBAAkB,gBAAgB,IAAI;AAC9C,UAAM,SAAS,+CAA+C;AAAA,MAC1D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,WAAW,QAAQ;AACnB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,UAAU,eACJ,oBAAoB,OAAO,OAAO,MAAM,CAAC,IACzC;AAAA,MACN,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ,CAAC;AACM,IAAM,uDAAuD,2DAA2D,KAAK;AAC7H,IAAM,6DAA6D,2DAA2D,IAAI;AAClI,IAAM,gDAAgD,0BAA0B;AAAA,EACnF,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU,oBAAoB,KAAK,mBAAmB,YAAY,QAAQ;AAAA,IAC1E,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,qDAAqD,0BAA0B;AAAA,EACxF,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU;AAAA;AAAA,MAEV,KAAK,mBAAmB,YAAY,OAAO,KAAK,mBAAmB,UAAU,EAAE;AAAA,IAAa;AAAA,IAC5F,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,+DAA+D,0BAA0B;AAAA,EAClG,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB;AAAA;AAAA,MAEA,KAAK,mBAAmB,YAAY,OAAO,KAAK,mBAAmB,UAAU,EAAE;AAAA;AAAA,IAC/E,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,mDAAmD,0BAA0B;AAAA,EACtF,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU;AAAA;AAAA,MAEV,KAAK,mBAAmB,cAAc,KAAK,mBAAmB,UAAU,EAAE;AAAA,IAAa;AAAA,IACvF,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,sDAAsD,0BAA0B;AAAA,EACzF,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU;AAAA;AAAA,MAEV,KAAK,mBAAmB,YAAY,OAAO,KAAK,mBAAmB,UAAU,EAAE;AAAA,IAAc;AAAA,IAC7F,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,4DAA4D,0BAA0B;AAAA,EAC/F,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU,2BAA2B,KAAK,mBAAmB,YAAY,MAAM;AAAA,IAC/E,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,gEAAgE,0BAA0B;AAAA,EACnG,cAAc;AAAA,EACd,yBAAyB,CAAC,QAAQ;AAAA,EAClC,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,MAAM,mBAAmB;AAAA,IACpC,UAAU,cAAc,OAAO,KAAK,cAAc,OAAO,KAAK,2BAA2B,KAAK,mBAAmB,YAAY,MAAM,CAAC,CAAC;AAAA,IACrI,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,0DAA0D,0BAA0B;AAAA,EAC7F,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU,mCAAmC,KAAK,mBAAmB,YAAY,OAAO;AAAA,IACxF,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,8DAA8D,0BAA0B;AAAA,EACjG,cAAc;AAAA,EACd,yBAAyB,CAAC,QAAQ;AAAA,EAClC,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,MAAM,mBAAmB;AAAA,IACpC,UAAU,cAAc,OAAO,KAAK,cAAc,OAAO,KAAK,mCAAmC,KAAK,mBAAmB,YAAY,OAAO,CAAC,CAAC;AAAA,IAC9I,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,kEAAkE,0BAA0B;AAAA,EACrG,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU,gDAAgD,KAAK,mBAAmB,YAAY,MAAM;AAAA,IACpG,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,sEAAsE,0BAA0B;AAAA,EACzG,cAAc;AAAA,EACd,yBAAyB,CAAC,QAAQ;AAAA,EAClC,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,MAAM,mBAAmB;AAAA,IACpC,UAAU,cAAc,OAAO,KAAK,cAAc,OAAO,KAAK,gDAAgD,KAAK,mBAAmB,YAAY,MAAM,CAAC,CAAC;AAAA,IAC1J,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,+CAA+C,0BAA0B;AAAA,EAClF,cAAc;AAAA,EACd,yBAAyB,CAAC;AAAA,EAC1B,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAACA,IAAG,UAAU;AAAA,IACrB,UAAU,oBAAoB,KAAK,mBAAmB,YAAY,OAAO;AAAA,IACzE,QAAQ;AAAA,EACZ;AACJ,CAAC;AACM,IAAM,sCAAsC,0BAA0B,CAAC,0CAA0C,GAAG,0BAA0B;AAAA,EACjJ,cAAc;AAAA,EACd,yBAAyB,CAAC,WAAW;AAAA,EACrC,gBAAgB,CAAC,MAAM;AAAA,EACvB,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,EAAE,WAAAC,WAAU,IAAI;AACtB,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,CAAC,UAAU,IAAI,WAAW,MAAM,GAAG;AACzC,QAAI,cAAc,UAAU,MAAM,QAAW;AACzC,aAAO;AAAA,QACH,UAAUA,WAAU;AAAA;AAAA,UAEpB,YAAY,UAAU;AAAA,QAAC;AAAA,QACvB,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,WAAO;AAAA,MACH,OAAO,eAAe,UAAU,gEAAgE,UAAU;AAAA,MAC1G,aAAa;AAAA,MACb,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ,CAAC,CAAC;AACK,IAAM,wCAAwC,0BAA0B,CAAC,0CAA0C,GAAG,0BAA0B;AAAA,EACnJ,cAAc;AAAA,EACd,yBAAyB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,QAAQ;AAAA,EACzB;AAAA;AAAA,IAEA,CAAC,YAAY,MAAM,kBAAkB;AACjC,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,EAAE,eAAe,cAAc,aAAa,IAAI;AACtD,YAAM,CAAC,UAAU,IAAI,WAAW,MAAM,GAAG;AACzC,YAAM,WAAW,cAAc,gBAAgB,UAAU;AACzD,UAAI,aAAa,QAAW;AACxB,eAAO,qCAAqC,YAAY,UAAU;AAAA,MACtE;AACA,UAAI,iBAAiB,QAAW;AAC5B,eAAO,oCAAoC,UAAU;AAAA,MACzD;AACA,YAAM,qBAAqB,kBAAkB,SAAY,SAAY,cAAc,QAAQ;AAI3F,YAAM,QAAQ,cAAc,UAAU,UAAU;AAChD,UAAI,uBAAuB,QAAW;AAClC,cAAM,gBAAgB,2CAA2C;AAAA,UAC7D;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AACD,YAAI,cAAc,WAAW;AACzB,iBAAO;AACX,eAAO;AAAA,UACH,UAAU,cAAc,UAAU,0BAA0B,cAAc,QAAQ;AAAA,UAClF,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,YAAM,oBAAoB,iBAAiB,SAAY,SAAY,aAAa,QAAQ;AACxF,UAAI,sBAAsB,QAAW;AACjC,eAAO;AAAA,UACH,OAAO,eAAe,UAAU,kCAAkC,QAAQ;AAAA,UAC1E,aAAa;AAAA,UACb,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,YAAM,gBAAgB,MAAM,iBAAiB,iBAAiB;AAC9D,YAAM,wBAAwB,MAAM,yBAChC,iBAAiB;AACrB,YAAM,uBAAuB,MAAM,wBAAwB,sBAAsB,QAAQ,KAAK,GAAG;AACjG,YAAM,2BAA2B;AACjC,UAAI,CAAC,yBAAyB,KAAK,oBAAoB,GAAG;AACtD,eAAO;AAAA,UACH,OAAO,sBAAsB,UAAU,gBAAgB,oBAAoB;AAAA,UAC3E,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,YAAM,IAAI,eAAe;AACzB,YAAM,eAAe,qBAAqB,QAAQ,KAAK,EAAE,SAAS,CAAC;AACnE,YAAM,iBAAiB,kBAAkB,mBAAmB,aAAa;AACzE,UAAI,OAAO,mBAAmB,UAAU;AACpC,eAAO;AAAA,UACH,OAAO,uBAAuB,UAAU,uCAAuC,QAAQ,2BAA2B,cAAc;AAAA,UAChI,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,YAAM,eAAe,aAAa,eAAe,MAAM,cAAc,aAAa;AAClF,UAAI,OAAO,iBAAiB,UAAU;AAClC,eAAO;AAAA,UACH,OAAO,uBAAuB,UAAU,iBAAiB,YAAY,sCAAsC,QAAQ,MAAM,YAAY;AAAA,UACrI,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,aAAO,EAAE,UAAU,aAAa,WAAW,QAAQ,UAAU;AAAA,IACjE;AAAA;AACJ,CAAC,CAAC;AAEK,IAAM,2BAA2B;AAAA,EACpC,aAAa;AAAA,EACb,oBAAoB;AAAA,EACpB,kBAAkB;AAAA,EAClB,OAAO;AAAA,IACH,YAAY;AAAA,EAChB;AAAA,EACA,KAAK;AAAA,IACD,YAAY;AAAA,EAChB;AAAA,EACA,sBAAsB;AAAA,IAClB,sBAAsB;AAAA,IACtB,2BAA2B;AAAA,IAC3B,kBAAkB;AAAA,IAClB,yBAAyB;AAAA,IACzB,UAAU;AAAA,IACV,gBAAgB;AAAA,IAChB,2BAA2B;AAAA,IAC3B,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,uBAAuB;AAAA,IACvB,4BAA4B;AAAA,IAC5B,qBAAqB;AAAA,IACrB,0BAA0B;AAAA,IAC1B,8BAA8B;AAAA,IAC9B,mCAAmC;AAAA,IACnC,SAAS;AAAA,EACb;AAAA,EACA,YAAY;AAChB;;;AC3WA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AASA,IAAM,uCAAuC,OAAO,CAAC;AAY9C,IAAM,oCAAoC,CAAC,kBAAkB;AAChE,QAAM,EAAE,WAAW,gBAAgB,IAAI;AACvC,QAAM,iBAAiB,cAAc,SAC/B,CAAC,IACD,OAAO,QAAQ,SAAS,EACrB,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,KAAK,EACzC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE;AACzB,QAAM,YAAY,oBAAoB,SAChC,CAAC,IACD,OAAO,KAAK,OAAO,OAAO,eAAe,EAAE,OAAO,CAAC,KAAK,cAAc,EAAE,GAAG,KAAK,CAAC,QAAQ,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;AAC9G,QAAM,WAAW,CAAC,GAAG,gBAAgB,GAAG,SAAS,EAC5C,KAAK,CAAC,KAAK,QAAQ,IAAI,cAAc,KAAK,IAAI,CAAC,EAC/C,OAAO,CAAC,KAAK,IAAIC,YAAW;AAAA,IAC7B,GAAG;AAAA,IACH,CAAC,EAAE,GAAG,4BAA4B,OAAOA,SAAQ,CAAC,CAAC;AAAA,EACvD,IAAI,CAAC,CAAC;AACN,QAAM,cAAc,cAAc,SAC5B,SACA,OAAO,QAAQ,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,YAAY,QAAQ,MAAM,SAAS,SAAS,QAChF;AAAA,IACE,GAAG;AAAA;AAAA,IAEH,CAAC,UAAU,GAAG,SAAS,SAAS,UAAU,CAAC;AAAA,EAC/C,IACE,KAAK,CAAC,CAAC;AACjB,QAAM,kBAAkB;AAAA,IACpB,MAAM;AAAA,MACF,oBAAoB,iBAAiB;AAAA,MACrC,kBAAkB,iBAAiB;AAAA,MACnC,GAAI,gBAAgB,UAAa,OAAO,KAAK,WAAW,EAAE,WAAW,IAC/D,CAAC,IACD,EAAE,MAAM,EAAE,YAAY,EAAE;AAAA,IAClC;AAAA,IACA,eAAe,CAAC,EAAE,iBAAiB,CAAC,MAAM,EAAE,CAAC;AAAA,IAC7C,aAAa;AAAA,MACT,QAAQ,CAAC,EAAE,mBAAmB,CAAC,MAAM,EAAE,CAAC;AAAA,MACxC,UAAU,iBAAiB;AAAA,MAC3B,SAAS,CAAC,EAAE,iBAAiB,qCAAqC,EAAE,CAAC;AAAA,MACrE,SAAS,iBAAiB;AAAA,IAC9B;AAAA,EACJ;AACA,QAAM,YAAY,cAAc,SAC1B,QACA,OAAO,OAAO,SAAS,EAAE,UAAU,CAAC,aAAa,SAAS,SAAS,OAAO,MAAM;AACtF,MAAI,CAAC,WAAW;AACZ,WAAO;AAAA,EACX;AACA,QAAM,EAAE,QAAAC,SAAQ,QAAAC,QAAO,IAAI;AAC3B,MAAID,YAAW,QAAW;AACtB,WAAO;AAAA,EACX;AACA,MAAIC,YAAW,QAAW;AACtB,WAAO;AAAA,EACX;AACA,QAAM,SAAS,EAAE,QAAAD,SAAQ,QAAAC,QAAO;AAChC,QAAM,gBAAgB,UAAU,OAAO,CAAC,KAAK,aAAa;AAKtD,UAAM,cAAc;AACpB,UAAM,aAAa;AAAA;AAAA,MAEnB,SAAS,QAAQ;AAAA,MAAG;AAAA,MAAa;AAAA,IAAM;AACvC,UAAM,eAAe,mBAAmB;AAAA,MACpC,SAAS;AAAA,MACT,MAAM;AAAA,IACV,GAAG,MAAM;AACT,WAAO,EAAE,GAAG,KAAK,CAAC,QAAQ,GAAG,aAAa;AAAA,EAC9C,GAAG,CAAC,CAAC;AACL,SAAO;AAAA,IACH,GAAG;AAAA,IACH,MAAM;AAAA,MACF,GAAG,gBAAgB;AAAA,MACnB,QAAQ;AAAA,QACJ,cAAc,iBAAiB;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAWO,IAAM,+BAA+B,CAAC,YAAY,eAAe;AAAA,EACpE,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAI,WAAW,aAAa,UAAa,UAAU,aAAa,SAC1D,CAAC,IACD;AAAA,IACE,UAAU;AAAA,MACN,GAAG,WAAW;AAAA,MACd,GAAG,UAAU;AAAA,IACjB;AAAA,EACJ;AAAA,EACJ,GAAI,WAAW,WAAW,UAAa,UAAU,WAAW,SACtD,CAAC,IACD;AAAA,IACE,QAAQ;AAAA,MACJ,GAAG,WAAW;AAAA,MACd,GAAG,UAAU;AAAA,MACb,GAAI,WAAW,QAAQ,kBAAkB,UACrC,UAAU,QAAQ,kBAAkB,SAClC,CAAC,IACD;AAAA,QACE,eAAe;AAAA,UACX,GAAG,WAAW,QAAQ;AAAA,UACtB,GAAG,UAAU,QAAQ;AAAA,QACzB;AAAA,MACJ;AAAA,MACJ,GAAI,WAAW,QAAQ,iBAAiB,UACpC,UAAU,QAAQ,iBAAiB,SACjC,CAAC,IACD;AAAA,QACE,cAAc;AAAA,UACV,GAAG,WAAW,QAAQ;AAAA,UACtB,GAAG,UAAU,QAAQ;AAAA,QACzB;AAAA,MACJ;AAAA,IACR;AAAA,EACJ;AAAA,EACJ,GAAI,WAAW,SAAS,UAAa,UAAU,SAAS,SAClD,CAAC,IACD;AAAA,IACE,MAAM;AAAA,MACF,aAAa;AAAA,QACT,GAAG,WAAW,MAAM;AAAA,QACpB,GAAG,UAAU,MAAM;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AACR;AAWO,IAAM,2BAA2B,CAAC,gBAAgB,mBAAmB;AAAA,EACxE,GAAI,eAAe,SAAS,UAAa,cAAc,SAAS,SAC1D,CAAC,IACD;AAAA,IACE,MAAM,6BAA6B,eAAe,QAAQ,CAAC,GAAG,cAAc,QAAQ,CAAC,CAAC;AAAA,EAC1F;AAAA,EACJ,GAAI,eAAe,gBAAgB,UAC/B,cAAc,gBAAgB,SAC5B,CAAC,IACD;AAAA,IACE,aAAa;AAAA,MACT,GAAG,eAAe;AAAA,MAClB,GAAG,cAAc;AAAA,IACrB;AAAA,EACJ;AAAA,EACJ,GAAI,eAAe,kBAAkB,UACjC,cAAc,kBAAkB,SAC9B,CAAC,IACD;AAAA,IACE,eAAe,cAAc,iBAAiB,eAAe;AAAA,EACjE;AACR;AAOO,IAAM,2BAA2B,CAAC,EAAE,eAAe,YAAY,oBAAoB,CAAC,EAAG,MAAM;AAChG,MAAI,eAAe,QAAW;AAC1B,WAAO,kCAAkC,aAAa;AAAA,EAC1D;AACA,MAAI,kBAAkB,SAAS,UAAU,GAAG;AACxC,WAAO,2BAA2B,UAAU,gBAAgB,UAAU,gDAAgD,kBAAkB,KAAK,KAAK,CAAC;AAAA,EACvJ;AACA,QAAM,WAAW,cAAc,YAAY,UAAU;AACrD,MAAI,aAAa,QAAW;AACxB,WAAO,2BAA2B,UAAU,qCAAqC,UAAU;AAAA,EAC/F;AACA,QAAM,iBAAiB,SAAS,YAAY,SACtC,kCAAkC,aAAa,IAC/C,yBAAyB;AAAA,IACvB;AAAA,IACA,YAAY,SAAS;AAAA,IACrB,mBAAmB,CAAC,GAAG,mBAAmB,UAAU;AAAA,EACxD,CAAC;AACL,MAAI,OAAO,mBAAmB,UAAU;AACpC,WAAO;AAAA,EACX;AACA,SAAO,yBAAyB,gBAAgB,QAAQ;AAC5D;AASO,IAAM,8CAA8C,CAAC,gBAAgB;AAAA,EACxE,GAAI,WAAW,KAAK,uBAAuB,SACrC,CAAC,IACD;AAAA,IACE,oBAAoB,WAAW,KAAK;AAAA,EACxC;AAAA,EACJ,GAAI,WAAW,KAAK,qBAAqB,SACnC,CAAC,IACD;AAAA,IACE,kBAAkB,WAAW,KAAK;AAAA,EACtC;AAAA,EACJ,GAAI,WAAW,KAAK,WAAW,SACzB,CAAC,IACD;AAAA,IACE,QAAQ;AAAA,MACJ,GAAI,WAAW,KAAK,OAAO,iBAAiB,SACtC,CAAC,IACD;AAAA,QACE,cAAc,WAAW,KAAK,OAAO;AAAA,MACzC;AAAA,MACJ,GAAI,WAAW,KAAK,OAAO,kBAAkB,UACzC,OAAO,KAAK,WAAW,KAAK,OAAO,aAAa,EAAE,SAAS,IACzD;AAAA,QACE,eAAe,WAAW,KAAK,OAAO;AAAA,MAC1C,IACE,CAAC;AAAA,MACP,GAAI,WAAW,KAAK,OAAO,iBAAiB,SACtC,CAAC,IACD;AAAA,QACE,cAAc,WAAW,KAAK,OAAO;AAAA,MACzC;AAAA,IACR;AAAA,EACJ;AAAA,EACJ,GAAI,WAAW,KAAK,MAAM,gBAAgB,UACtC,OAAO,KAAK,WAAW,KAAK,KAAK,WAAW,EAAE,SAAS,IACrD;AAAA,IACE,MAAM;AAAA,MACF,aAAa,OAAO,QAAQ,WAAW,KAAK,KAAK,WAAW,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,SAAS,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,IAClI;AAAA,EACJ,IACE,CAAC;AACX;AAKO,IAAM,4CAA4C,CAAC,EAAE,iBAAiB,eAAe,4BAA6B,MAAM;AAC3H,QAAM,yBAAyB,CAAC,OAAO,GAAG,iBAAiB,4BAA4B,GAAG,EAAE;AAC5F,QAAM,kBAAkB,OAAO,QAAQ,2BAA2B,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,MAAM,OAAO;AAAA,IAC/F,GAAG;AAAA,IACH,CAAC,uBAAuB,EAAE,CAAC,GAAG;AAAA,EAClC,IAAI,CAAC,CAAC;AACN,QAAM,sCAAsC;AAAA,IACxC,GAAG;AAAA,IACH,SAAS;AAAA,MACL,GAAG,cAAc;AAAA,MACjB,GAAG;AAAA,IACP;AAAA,EACJ;AACA,QAAM,uBAAuB,OAAO,KAAK,2BAA2B,EAAE,IAAI,CAAC,OAAO;AAC9E,UAAM,SAAS,iBAAiB;AAAA,MAC5B,eAAe;AAAA,MACf,MAAM;AAAA,MACN,UAAU,uBAAuB,EAAE;AAAA,IACvC,CAAC;AACD,QAAI,OAAO,SAAS;AAChB,aAAO;AAAA,QACH,UAAU,OAAO;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,MACH,QAAQ,OAAO;AAAA,MACf;AAAA,IACJ;AAAA,EACJ,CAAC;AACD,QAAM,gBAAgB,qBAAqB,OAAO,CAAC,WAAW,YAAY,MAAM;AAChF,MAAI,cAAc,SAAS,GAAG;AAC1B,WAAO,GAAG,cACL,IAAI,CAAC,WAAW,oDAAoD,OAAO,EAAE,MAAM,gBAAgB,OAAO,MAAM,CAAC,EAAE,EACnH,KAAK,IAAI,CAAC;AAAA,EACnB;AACA,QAAM,mBAAmB,qBAAqB,OAAO,CAAC,KAAK,YAAY,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,OAAO,SAAS,IAAI,CAAC,CAAC;AACpH,SAAO;AAAA,IACH,GAAI,OAAO,KAAK,gBAAgB,EAAE,SAAS,IACrC,EAAE,UAAU,iBAAiB,IAC7B,CAAC;AAAA,IACP,GAAG;AAAA,EACP;AACJ;AAKO,IAAM,qDAAqD,CAAC,0BAA0B,iBAAiB,uCAAuC,OAAO,4BAA4B,WAClL,mBAAmB,SAAS,uBAAuB,CAAC,IACpD,OAAO,uBAAuB;AAO7B,IAAM,gDAAgD,CAAC,EAAE,oBAAoB,oBAAoB,eAAe,iBAAiB,kBAAkB,kBAAkB,oCAAqC,MAAM;AACnN,MAAI,OAAO,uBAAuB,UAAU;AACxC,WAAO,SAAS,kBAAkB;AAAA,EACtC;AACA,QAAM,WAAW,mBAAmB,WAAW,UAC3C,MAAM,QAAQ,mBAAmB,MAAM,IACrC,sCACA,mBAAmB;AAOzB,MAAI,aAAa,QAAW;AACxB,WAAO,SAAS,EAAE;AAAA,EACtB;AACA,QAAM,YAAY,mBAAmB,aAAa;AAClD,QAAM,2BAA2B,6BAA6B,iBAAiB,MAAM,SAAS;AAC9F,QAAM,OAAO,0CAA0C;AAAA,IACnD,iBAAiB,4CAA4C;AAAA,MACzD,MAAM;AAAA,IACV,CAAC;AAAA,IACD;AAAA,IACA,6BAA6B,yBAAyB,YAAY,CAAC;AAAA,EACvE,CAAC;AACD,MAAI,OAAO,SAAS,UAAU;AAC1B,UAAM,QAAQ,+CAA+C,IAAI;AACjE,WAAO,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,GAAG,SAAS,MAAM;AAAA,EACjD;AACA,SAAO,iBAAiB;AAAA,IACpB,MAAM,EAAE,GAAG,MAAM,mBAAmB;AAAA,IACpC,OAAO;AAAA,IACP;AAAA,EACJ,CAAC;AACL;AAMO,IAAM,iCAAiC,CAAC,WAAW,OAAO,UAAU,SACrE,CAAC,IACD;AAAA,EACE,OAAO;AAAA,IACH,QAAQ,OAAO,OAAO,MAAM,UAAU,CAAC;AAAA;AAAA,IAEvC,UAAU,SAAS,OAAO,MAAM,YAC5B,iBAAiB,kCAAkC;AAAA,IACvD,GAAI,OAAO,MAAM,QAAQ,SACnB,CAAC,IACD;AAAA,MACE,KAAK;AAAA,QACD,YAAY,OAAO,MAAM,IAAI,cAAc;AAAA,QAC3C,YAAY,SAAS,OAAO,MAAM,IAAI,cAAc,EAAE;AAAA,MAC1D;AAAA,IACJ;AAAA,EACR;AACJ;AAaG,IAAM,sBAAsB,CAAC,EAAE,eAAe,kBAAkB,YAAY,mBAAmB,iBAAiB,wBAAyB,GAAG,UAAU;AACzJ,QAAM,EAAE,oBAAoB,aAAa,IAAI,eAAe,SACtD,EAAE,oBAAoB,CAAC,GAAG,cAAc,uBAAuB,IAC/D;AAAA,IACE,oBAAoB,cAAc,YAAY,UAAU;AAAA,IACxD,cAAc,aAAa,UAAU;AAAA,EACzC;AACJ,MAAI,uBAAuB,QAAW;AAElC,WAAO,mBAAmB,YAAY,+CAA+C,UAAU;AAAA,EACnG;AACA,QAAM,iBAAiB,yBAAyB,EAAE,eAAe,WAAW,CAAC;AAC7E,MAAI,OAAO,mBAAmB,UAAU;AACpC,WAAO,mBAAmB,YAAY,KAAK,cAAc;AAAA,EAC7D;AACA,QAAM,mBAAmB,yBAAyB,gBAAgB,kBAAkB;AACpF,QAAM,yBAAyB,4CAA4C,gBAAgB;AAC3F,QAAM,sBAAsB,0CAA0C;AAAA,IAClE,iBAAiB;AAAA,IACjB;AAAA,IACA,6BAA6B,iBAAiB,KAAK,YAAY,CAAC;AAAA,EACpE,CAAC;AACD,MAAI,OAAO,wBAAwB,UAAU;AACzC,WAAO,mBAAmB,YAAY,KAAK,mBAAmB;AAAA,EAClE;AACA,MAAI,iBAAiB,YAAY,OAAO,WACpC,iBAAiB,cAAc,QAAQ;AACvC,WAAO,mBAAmB,YAAY;AAAA,EAC1C;AACA,QAAM,eAAe,iBAAiB,YAAY,OAAO,OAAO,CAAC,UAAU,MAAM,QAAQ,MAAM,iBAAiB,CAAC;AACjH,MAAI,aAAa,WAAW,GAAG;AAC3B,WAAO,mBAAmB,YAAY;AAAA,EAC1C;AACA,QAAM,mBAAmB,iBAAiB,YAAY,OAAO,UAAU,CAAC,UAAU,MAAM,QAAQ,MAAM,iBAAiB,CAAC;AACxH,QAAM,sBAAsB,iBAAiB,cAAc,OAAO,CAAC,WAAW,MAAM,QAAQ,OAAO,eAAe,CAAC;AACnH,MAAI,oBAAoB,WAAW,GAAG;AAClC,WAAO,mBAAmB,YAAY;AAAA,EAC1C;AACA,MAAI,CAAC,MAAM,QAAQ,iBAAiB,cAAc,gBAAgB,GAAG,eAAe,GAAG;AACnF,WAAO,mBAAmB,YAAY;AAAA,EAC1C;AACA,MAAI,sBAAsB,UACtB,4BAA4B,QAAW;AACvC,WAAO,mBAAmB,YAAY;AAAA,EAC1C;AACA,QAAM,kBAAkB,4BAA4B,SAC9C,sBAAsB,SAClB,SACA,cAAc,mBAAmB,iBAAiB,IACtD;AACN,MAAI,sBAAsB,UAAa,oBAAoB,QAAW;AAClE,WAAO,mBAAmB,YAAY,4BAA4B,iBAAiB,sCAAsC,iBAAiB;AAAA,EAC9I;AACA,QAAM,2BAA2B,iBAAiB,cAAc,IAAI,CAAC,cAAcF,WAAU;AACzF,UAAM,OAAO,MAAM,QAAQ,aAAa,eAAe;AACvD,UAAM,qBAAqB,OACrB,oBAAoB,SAChB,iBAAiB,0BACjB,EAAE,QAAQ,gBAAgB,IAC9B,aAAa,mBAAmB,CAAC;AACvC,UAAM,kBAAkB,CAAC;AACzB,WAAO;AAAA,MACH,UAAU;AAAA,QACN,iBAAiB,8CAA8C;AAAA,UAC3D;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,qCAAqC;AAAA,QACzC,CAAC;AAAA,QACD,eAAe,mDAAmD,aAAa,aAAa;AAAA,QAC5F,GAAG,+BAA+B,YAAY;AAAA,MAClD;AAAA,MACA,OAAAA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,IACV;AAAA,EACJ,CAAC;AACD,QAAM,qBAAqB,yBAAyB,KAAK,CAAC,gBAAgB,YAAY,IAAI,GAAG,SAAS;AACtG,QAAM,gCAAgC,iBAAiB,YAAY,QAAQ,IAAI,CAAC,mBAAmBA,WAAU;AACzG,UAAM,kBAAkB,EAAE,QAAQ,EAAE,cAAc,EAAE,EAAE;AACtD,WAAO;AAAA,MACH,UAAU;AAAA,QACN,iBAAiB,8CAA8C;AAAA,UAC3D,oBAAoB,kBAAkB,mBAAmB,CAAC;AAAA,UAC1D;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,qCAAqC;AAAA,QACzC,CAAC;AAAA,QACD,eAAe,mDAAmD,kBAAkB,aAAa;AAAA,QACjG,GAAG,+BAA+B,iBAAiB;AAAA,MACvD;AAAA,MACA,OAAAA;AAAA,MACA,MAAM;AAAA,IACV;AAAA,EACJ,CAAC;AACD,QAAM,0BAA0B;AAAA,IAC5B,GAAG;AAAA,IACH,GAAG;AAAA,EACP,EAAE,OAAO,CAAC,aAAa,WAAW;AAC9B,QAAI,YAAY,OAAO,SAAS,iBAAiB;AAC7C,aAAO;AAAA,QACH,GAAG;AAAA,QACH,GAAG,OAAO,SAAS,gBAAgB,OAAO,IAAI,CAAC,gBAAgB,yBAAyB,OAAO,IAAI,aAAa,OAAO,KAAK,KAAK,YAAY,KAAK,EAAE;AAAA,MACxJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX,GAAG,CAAC,CAAC;AACL,MAAI,wBAAwB,SAAS,GAAG;AACpC,UAAM,QAAQ,mBAAmB,YAAY,KAAK,wBAAwB,KAAK,GAAG,CAAC;AACnF,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,QACH;AAAA,QACA,UAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,QAAM,kCAAkC;AACxC,QAAM,uCAAuC;AAC7C,QAAM,gBAAgB,CAAC,gBAAgB;AACnC,UAAM,EAAE,iBAAiB,eAAe,MAAM,IAAI,YAAY;AAC9D,WAAO;AAAA,MACH,iBAAiB,cAAc,kBACzB,gBAAgB,WAChB;AAAA,MACN;AAAA,MACA,GAAI,UAAU,SAAY,CAAC,IAAI,EAAE,MAAM;AAAA,IAC3C;AAAA,EACJ;AACA,QAAM,gBAAgB,gCAAgC,IAAI,aAAa;AACvE,QAAM,UAAU,qCAAqC,IAAI,aAAa;AACtE,QAAM,gBAAgB,iBAAiB,YAAY,OAAO,IAAI,CAAC,OAAO,gBAAgB;AAAA,IAClF,eAAe,MAAM,iBAAiB;AAAA;AAAA,IAEtC,yBAAyB,SAAS,MAAM,2BACpC,iBAAiB,2CAA2C;AAAA,IAChE,gBAAgB,MAAM,kBAClB,iBAAiB;AAAA,IACrB,mBAAmB;AAAA,EACvB,EAAE;AACF,QAAM,+BAA+B,iBAAiB,YAAY,OAAO,IAAI,CAAC,OAAOA,WAAU;AAC3F,UAAM,OAAO,MAAM,QAAQ,MAAM,iBAAiB;AAClD,UAAM,qBAAqB,MAAM,QAAQ,MAAM,iBAAiB,IAC1D,sBAAsB,SAClB,iBAAiB,0BACjB,EAAE,QAAQ,kBAAkB,IAChC,MAAM,qBAAqB,CAAC;AAClC,UAAM,kBAAkB,CAAC;AACzB,WAAO;AAAA,MACH,UAAU;AAAA;AAAA,QAEN,eAAe,cAAcA,MAAK,EAAE;AAAA,QACpC;AAAA;AAAA,UAEA,cAAcA,MAAK,EAAE;AAAA;AAAA;AAAA,QAErB,gBAAgB,cAAcA,MAAK,EAAE;AAAA,QACrC,mBAAmB,8CAA8C;AAAA,UAC7D;AAAA,UACA,oBAAoB;AAAA,YAChB,YAAYA;AAAA,YACZ;AAAA,YACA,aAAa;AAAA,cACT,QAAQ;AAAA,cACR,UAAU,iBAAiB,YAAY;AAAA,cACvC;AAAA,cACA,SAAS,iBAAiB,YAAY;AAAA,YAC1C;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,qCAAqC;AAAA,QACzC,CAAC;AAAA,MACL;AAAA,MACA,OAAAA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,CAAC;AACD,QAAM,uBAAuB,6BAA6B,KAAK,CAAC,gBAAgB,YAAY,IAAI,GAAG,SAAS;AAC5G,QAAM,yBAAyB,6BAA6B,OAAO,CAAC,aAAa,WAAW;AACxF,QAAI,YAAY,OAAO,SAAS,mBAAmB;AAC/C,aAAO;AAAA,QACH,GAAG;AAAA,QACH,GAAG,OAAO,SAAS,kBAAkB,OAAO,IAAI,CAAC,gBAAgB,wCAAwC,OAAO,KAAK,KAAK,YAAY,KAAK,EAAE;AAAA,MACjJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX,GAAG,CAAC,CAAC;AACL,MAAI,uBAAuB,SAAS,GAAG;AACnC,UAAM,QAAQ,mBAAmB,YAAY,KAAK,uBAAuB,KAAK,GAAG,CAAC;AAClF,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,QACH;AAAA,QACA,UAAU;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,QAAM,sCAAsC;AAC5C,QAAM,SAAS,oCAAoC,IAAI,CAAC,gBAAgB;AACpE,UAAM,EAAE,eAAe,yBAAyB,gBAAgB,kBAAmB,IAAI,YAAY;AACnG,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA,mBAAmB,cAAc,oBAC3B,kBAAkB,WAClB;AAAA,IACV;AAAA,EACJ,CAAC;AACD,QAAM,WAAW;AAAA,IACb,MAAM;AAAA,IACN,SAAS;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,aAAa;AAAA,QACT;AAAA,QACA,UAAU,iBAAiB,YAAY;AAAA,QACvC;AAAA,QACA,SAAS,iBAAiB,YAAY;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AACA,SAAQ,UAAU,OACZ,EAAE,oBAAoB,UAAU,qBAAqB,IACrD;AACV;;;ADnnBO,IAAM,yCAAyC,CAAC,0BAA0B,CAAC,EAAE,MAAM,OAAO,SAAU,MAAM;AAC7G,QAAM,SAAS,cAAc,UAAU,MAAM,qBAAqB;AAClE,SAAQ,UAAU,OACZ,SACA,OAAO,UACH,EAAE,UAAU,OAAO,UAAU,SAAS,KAAK,IAC3C;AAAA,IACE,WAAW,OAAO;AAAA,IAClB,QAAQ,OAAO;AAAA,IACf,SAAS;AAAA,EACb;AACZ;AAQO,IAAM,qCAAqC,CAAC,kBAAkB;AACjE,QAAM,mBAAmB,uCAAuC,aAAa;AAC7E,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,kBAAkB,CAAC,EAAE,iBAAiB,mBAAmB,YAAY,MAAO,MAAM,oBAAoB;AAAA,MAClG;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,GAAG,KAAK;AAAA,EACZ;AACJ;AACO,IAAM,kCAAkC;AAC/C,IAAM,iBAAiB;AAiBhB,IAAM,8CAA8C,CAAC,wBAAwB;AAAA,EAChF,YAAY;AAAA,EACZ,eAAe;AAAA,IACX;AAAA,MACI,iBAAiB;AAAA,MACjB,eAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,aAAa;AAAA,IACT,QAAQ;AAAA,MACJ;AAAA,QACI,eAAe;AAAA,QACf,yBAAyB,IAAI,WAAW,cAAc;AAAA,QACtD,gBAAgB;AAAA,QAChB,mBAAmB,WAAW,GAAG;AAAA,MACrC;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,IACV,SAAS;AAAA,MACL;AAAA,QACI,iBAAiB,WAAW,GAAG;AAAA,QAC/B,eAAe;AAAA,MACnB;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,EACb;AACJ;AASO,IAAM,uBAAuB,CAAC,wBAAwB,mCAAmC;AAAA,EAC5F,GAAG;AAAA,IACC,6BAA6B;AAAA,IAC7B,SAAS,oBAAoB,OAAO;AAAA,IACpC,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,GAAG;AACP,CAAC;AAeM,IAAM,sBAAsB,CAAC,WAAW;AAC3C,QAAM,SAAS,qBAAqB;AAAA,IAChC,SAAS,CAAC;AAAA,IACV,YAAY,CAAC;AAAA,IACb,SAAS,EAAE,OAAO;AAAA,EACtB,CAAC,EAAE,iBAAiB,EAAE,MAAM,CAAC,GAAG,UAAU,SAAS,CAAC;AACpD,MAAI,OAAO,SAAS;AAChB,WAAO,OAAO;AAAA,EAClB;AACA,SAAO,kCAAkC,OAAO,OAAO,OAAO,CAAC,KAAK,EAAE,OAAO,OAAAG,OAAM,MAAM,GAAG,GAAG,KAAKA,OAAM,eAAe,KAAKA,OAAM,WAAW,MAAM,KAAK,IAAI,EAAE,CAAC;AACrK;AASO,IAAM,mBAAmB,CAAC,SAAS,yBAAyB;AAC/D,QAAM,gBAAgB;AAAA,IAClB;AAAA,IACA,SAAS,EAAE,KAAK,qBAAqB;AAAA,EACzC;AACA,SAAO,qBAAqB,aAAa,EAAE,iBAAiB,EAAE,MAAM,CAAC,GAAG,UAAU,MAAM,CAAC;AAC7F;AASO,IAAM,sBAAsB,CAAC,yBAAyB,iBAAiB,oBAAoB,UAAU,GAAG,oBAAoB;AAM5H,IAAM,oBAAoB,CAAC,uBAAuB;AACrD,QAAM,SAAS,oBAAoB,kBAAkB;AACrD,SAAO,OAAO,UACR,OAAO,WACP,4BAA4B,OAAO,SAAS,WAAW,OAAO,OAC3D,IAAI,CAAC,QAAQ,IAAI,KAAK,EACtB,KAAK,GAAG,CAAC;AACtB;AASO,IAAM,sBAAsB,CAAC,yBAAyB,iBAAiB,oBAAoB,UAAU,GAAG,oBAAoB;AAY5H,IAAM,gDAAgD,CAAC,aAAa;AAIvE,QAAM,qBAAqB,OAAO,QAAQ,SAAS,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,UAAU,MAAM,MAAM;AAC5F,QAAI,WAAW,QAAQ;AACnB,aAAO;AAAA,QACH,GAAG;AAAA,QACH,GAAG,OAAO,QAAQ,OAAO,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,IAAI,MAAM;AAC9D,gBAAM,mBAAmB,OAAO,WAAW;AAC3C,gBAAM,gBAAgB,GAAG,QAAQ,IAAI,MAAM;AAC3C,gBAAM,6BAA6B,GAAG,QAAQ,IAAI,MAAM;AACxD,gBAAM,+BAA+B,GAAG,QAAQ,IAAI,MAAM;AAC1D,iBAAO;AAAA,YACH,GAAG;AAAA,YACH,CAAC,aAAa,GAAG,EAAE,QAAQ,KAAK,MAAM;AAAA,YACtC,CAAC,0BAA0B,GAAG;AAAA,cAC1B,QAAQ,mBACF,IAAI,QAAQ,KAAK,aAAa,KAC9B,GAAG,QAAQ,IAAI,aAAa;AAAA,YACtC;AAAA,YACA,CAAC,4BAA4B,GAAG;AAAA,cAC5B,QAAQ,KAAK,SAAS;AAAA,cACtB,SAAS;AAAA,YACb;AAAA,UACJ;AAAA,QACJ,GAAG,CAAC,CAAC;AAAA,MACT;AAAA,IACJ;AACA,WAAO;AAAA,EACX,GAAG,CAAC,CAAC;AACL,QAAM,aAAa;AAAA,IACf,GAAG,SAAS;AAAA,IACZ,GAAG;AAAA,EACP;AACA,QAAM,UAAU,OAAO,QAAQ,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,IAAI,OAAO,IAAI,CAAC,CAAC;AACxG,QAAM,YAAY,OAAO,OAAO,SAAS,QAAQ,EAAE,OAAO,CAAC,KAAK,YAAY,EAAE,GAAG,KAAK,GAAG,OAAO,UAAU,IAAI,CAAC,CAAC;AAChH,QAAM,kBAAkB,OAAO,QAAQ,SAAS,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,UAAU,MAAM,OAAO;AAAA,IAC3F,GAAG;AAAA,IACH,GAAG,OAAO,KAAK,OAAO,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC,iBAAiB,gBAAgB;AAAA,MAC5E,GAAG;AAAA,MACH,CAAC,UAAU,GAAG;AAAA,IAClB,IAAI,CAAC,CAAC;AAAA,EACV,IAAI,CAAC,CAAC;AACN,QAAM,mBAAmB,OAAO,QAAQ,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,aAAa,OAAO,IAAI,YAAY,SAC7G,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,IAAI,QAAQ,IAC5B,KAAK,CAAC,CAAC;AACb,QAAM,+BAA+B,OAAO,QAAQ,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,kBAAkB,OAAO,IAAI,iBAAiB,SACnI,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,IAAI,aAAa,IACjC,KAAK,CAAC,CAAC;AACb,QAAM,qBAAqB,OAAO,QAAQ,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,iBAAiB,OAC9F,IAAI,gBAAgB,SAClB,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,IAAI,YAAY,IAChC,KAAK,CAAC,CAAC;AACb,QAAM,YAAY,SAAS,cAAc,SACnC,SACA,OAAO,QAAQ,SAAS,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC;AAC/F,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAI,cAAc,SAAY,CAAC,IAAI,EAAE,UAAU;AAAA,IAC/C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;AJ1PO,IAAI;AAAA,CACV,SAAUC,0CAAyC;AAIhD,EAAAA,yCAAwC,YAAY,IAAI;AAIxD,EAAAA,yCAAwC,oBAAoB,IAAI;AAIhE,EAAAA,yCAAwC,uBAAuB,IAAI;AAInE,EAAAA,yCAAwC,sCAAsC,IAAI;AAIlF,EAAAA,yCAAwC,qBAAqB,IAAI;AAIjE,EAAAA,yCAAwC,6BAA6B,IAAI;AAIzE,EAAAA,yCAAwC,gCAAgC,IAAI;AAI5E,EAAAA,yCAAwC,+CAA+C,IAAI;AAU3F,EAAAA,yCAAwC,SAAS,IAAI;AAIrD,EAAAA,yCAAwC,WAAW,IAAI;AAIvD,EAAAA,yCAAwC,mBAAmB,IAAI;AAI/D,EAAAA,yCAAwC,sBAAsB,IAAI;AAIlE,EAAAA,yCAAwC,qCAAqC,IAAI;AACrF,GAAG,4CAA4C,0CAA0C,CAAC,EAAE;AAE5F,IAAM,8BAA8B,CAAC,qBAAqB,SAAS,OAAO;AACtE,UAAQ,qBAAqB;AAAA,IACzB,KAAK,GAAG,MAAM,GAAG,wCAAwC,UAAU;AAC/D,aAAO,WAAW,GAAG,4BAA4B,UAAU;AAAA,IAC/D,KAAK,GAAG,MAAM,GAAG,wCAAwC,kBAAkB;AAAA,IAC3E,KAAK,GAAG,MAAM,GAAG,wCAAwC,OAAO;AAC5D,aAAO,WAAW,GAAG,4BAA4B,kBAAkB;AAAA,IACvE,KAAK,GAAG,MAAM,GAAG,wCAAwC,qBAAqB;AAC1E,aAAO,WAAW,GAAG,4BAA4B,qBAAqB;AAAA,IAC1E,KAAK,GAAG,MAAM,GAAG,wCAAwC,oCAAoC;AACzF,aAAO,WAAW;AAAA;AAAA,QAElB,yBAAyB,aACrB,yBAAyB,cACzB,yBAAyB,QACzB,yBAAyB;AAAA,MAAM;AAAA,IACvC,KAAK,GAAG,MAAM,GAAG,wCAAwC,mBAAmB;AACxE,aAAO,WAAW,GAAG,4BAA4B,mBAAmB;AAAA,IACxE,KAAK,GAAG,MAAM,GAAG,wCAAwC,2BAA2B;AAChF,aAAO,WAAW,GAAG,4BAA4B,2BAA2B;AAAA,IAChF,KAAK,GAAG,MAAM,GAAG,wCAAwC,8BAA8B;AACnF,aAAO,WAAW,GAAG,4BAA4B,8BAA8B;AAAA,IACnF,KAAK,GAAG,MAAM,GAAG,wCAAwC,6CAA6C;AAClG,aAAO,WAAW;AAAA;AAAA,QAElB,yBAAyB,sBACrB,yBAAyB,cACzB,yBAAyB,QACzB,yBAAyB;AAAA,MAAM;AAAA,IACvC,KAAK,GAAG,MAAM,GAAG,wCAAwC,SAAS;AAC9D,aAAO,WAAW,GAAG,4BAA4B,SAAS;AAAA,IAC9D,KAAK,GAAG,MAAM,GAAG,wCAAwC,iBAAiB;AACtE,aAAO,WAAW,GAAG,4BAA4B,iBAAiB;AAAA,IACtE,KAAK,GAAG,MAAM,GAAG,wCAAwC,oBAAoB;AACzE,aAAO,WAAW,GAAG,4BAA4B,oBAAoB;AAAA,IACzE,KAAK,GAAG,MAAM,GAAG,wCAAwC,mCAAmC;AACxF,aAAO,WAAW;AAAA;AAAA,QAElB,yBAAyB,YACrB,yBAAyB,cACzB,yBAAyB,QACzB,yBAAyB;AAAA,MAAM;AAAA,IACvC;AACI,aAAO;AAAA,EACf;AACJ;AACO,IAAM,6CAA6C,CAAC,EAAE,iBAAiB,YAAY,oBAAoB,eAAe,YAAY,QAAAC,SAAQ,KAAM,MAAM;AACzJ,QAAM,CAAC,EAAE,EAAE,WAAW,OAAO,IAAI,WAAW,MAAM,GAAG;AACrD,MAAI,YAAY,QAAW;AACvB,WAAO;AAAA,MACH,OAAO,yBAAyB,UAAU,qBAAqB,OAAO;AAAA,MACtE,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,cAAc,QAAW;AACzB,WAAO;AAAA,MACH,OAAO,gFAAgF,aAAa;AAAA,MACpG,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,2BAA2B,4BAA4B,SAAS;AACtE,MAAI,6BAA6B,QAAW;AACxC,WAAO;AAAA,MACH,OAAO,6CAA6C,SAAS;AAAA,MAC7D,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,gBAAgB,gCAAgC,oBAAoB,EAAE,iBAAiB,yBAAyB,GAAGA,OAAM;AAC/H,QAAM,SAAS,QAAQ,eAAeA,OAAM;AAC5C,QAAM,0BAA0B,WAAW,KAAK;AAAA,IAC5C,GAAG,KAAK,YAAY,MAAM;AAAA,IAC1B,GAAG;AAAA,EACP,CAAC;AACD,SAAO;AAAA,IACH,UAAU;AAAA,IACV,WAAW,EAAE,cAAc;AAAA,IAC3B,QAAQ;AAAA,EACZ;AACJ;AACO,IAAM,2CAA2C,CAAC,EAAE,eAAe,gBAAiB,MAAM,0BAA0B,CAAC,0CAA0C,GAAG,0BAA0B;AAAA,EAC/L,cAAc;AAAA,EACd,yBAAyB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,UAAU,oBAAoB;AAAA,EAC/C,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,EAAE,QAAQ,mBAAmB,IAAI;AACvC,UAAM,EAAE,WAAAC,YAAW,QAAAD,SAAQ,iBAAiB,iBAAiB,IAAI;AACjE,UAAM,mBAAmB,0CAA0C;AAAA,MAC/D;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,iBAAiB,WAAW;AAC5B,aAAO;AACX,UAAM,SAAS,+CAA+C;AAAA,MAC1D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,WAAW,QAAQ;AACnB,aAAO;AAAA,IACX;AACA,WAAO,2CAA2C;AAAA,MAC9C;AAAA,MACA,iBAAiB;AAAA,MACjB;AAAA,MACA;AAAA,MACA,YAAY,iBAAiB;AAAA,MAC7B,QAAAA;AAAA,MACA,MAAMC,WAAU,eAAe;AAAA,IACnC,CAAC;AAAA,EACL;AACJ,CAAC,CAAC;AACK,IAAM,0CAA0C,yCAAyC;AAAA,EAC5F,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,4CAA4C,yCAAyC;AAAA,EAC9F,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,yCAAyC,CAAC,EAAE,eAAe,gBAAiB,MAAM,0BAA0B,CAAC,0CAA0C,GAAG,0BAA0B;AAAA,EAC7L,cAAc;AAAA,EACd,yBAAyB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,QAAQ,oBAAoB;AAAA,EAC7C,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,EAAE,MAAM,mBAAmB,IAAI;AACrC,UAAM,EAAE,WAAAA,YAAW,QAAAD,SAAQ,kBAAkB,gBAAgB,IAAI;AACjE,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,CAAC,UAAU,IAAI,WAAW,MAAM,GAAG;AACzC,UAAM,aAAa,gBAAgB,SAAY,SAAY,YAAY,UAAU;AACjF,QAAI,eAAe,QAAW;AAC1B,aAAO;AAAA,QACH,OAAO,eAAe,UAAU,6CAA6C,UAAU;AAAA,QACvF,aAAa;AAAA,QACb,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,UAAM,SAAS,+CAA+C;AAAA,MAC1D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,WAAW,QAAQ;AACnB,aAAO;AAAA,IACX;AACA,WAAO,2CAA2C;AAAA,MAC9C;AAAA,MACA,iBAAiB;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAAA;AAAA,MACA,MAAMC,WAAU,eAAe;AAAA,IACnC,CAAC;AAAA,EACL;AACJ,CAAC,CAAC;AACK,IAAM,wCAAwC,uCAAuC;AAAA,EACxF,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,0CAA0C,uCAAuC;AAAA,EAC1F,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,iDAAiD,CAAC,EAAE,MAAM,eAAe,YAAY,eAAe,YAAY,QAAAD,SAAQ,KAAM,MAAM;AAC7I,QAAM,CAAC,EAAE,EAAE,UAAU,OAAO,IAAI,WAAW,MAAM,GAAG;AACpD,MAAI,YAAY,QAAW;AACvB,WAAO;AAAA,MACH,OAAO,yBAAyB,UAAU,qBAAqB,OAAO;AAAA,MACtE,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,aAAa,QAAW;AACxB,WAAO;AAAA,MACH,OAAO,0FAA0F,aAAa;AAAA,MAC9G,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,SAAS,qCAAqC;AAAA,IAChD;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,EACpB,CAAC;AACD,MAAI,WAAW,OAAO;AAClB,WAAO;AAAA,MACH,OAAO,2DAA2D,QAAQ;AAAA,MAC1E,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,WAAW,QAAQ;AACnB,WAAO;AAAA,EACX;AACA,QAAM,SAASA,QAAO,KAAK,MAAM;AACjC,SAAO;AAAA,IACH,UAAU,KAAK,YAAY,MAAM;AAAA,IACjC,WAAW,EAAE,QAAQ,SAAS,OAAO;AAAA,IACrC,QAAQ;AAAA,EACZ;AACJ;AACO,IAAM,6CAA6C,CAAC,EAAE,eAAe,gBAAiB,MAAM,0BAA0B,CAAC,0CAA0C,GAAG,0BAA0B;AAAA,EACjM,cAAc;AAAA,EACd,yBAAyB,CAAC,UAAU,WAAW;AAAA,EAC/C,gBAAgB,CAAC,MAAM;AAAA,EACvB,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,EAAE,WAAAC,YAAW,QAAAD,QAAO,IAAI;AAC9B,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,CAAC,UAAU,IAAI,WAAW,MAAM,GAAG;AACzC,UAAM,aAAa,gBAAgB,SAAY,SAAY,YAAY,UAAU;AACjF,QAAI,eAAe,QAAW;AAC1B,aAAO;AAAA,QACH,OAAO,eAAe,UAAU,6CAA6C,UAAU;AAAA,QACvF,aAAa;AAAA,QACb,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,WAAO,+CAA+C;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAAA;AAAA,MACA,MAAMC,WAAU,eAAe;AAAA,IACnC,CAAC;AAAA,EACL;AACJ,CAAC,CAAC;AACK,IAAM,4CAA4C,2CAA2C;AAAA,EAChG,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,8CAA8C,2CAA2C;AAAA,EAClG,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,+CAA+C,CAAC,EAAE,eAAe,gBAAiB,MAAM,0BAA0B,CAAC,0CAA0C,GAAG,0BAA0B;AAAA,EACnM,cAAc;AAAA,EACd,yBAAyB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,QAAQ;AAAA,EACzB,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,WAAAA,YAAW,QAAAD,QAAO,IAAI;AAC9B,UAAM,mBAAmB,0CAA0C;AAAA,MAC/D;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,iBAAiB,WAAW;AAC5B,aAAO;AACX,WAAO,+CAA+C;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY,iBAAiB;AAAA,MAC7B,QAAAA;AAAA,MACA,MAAMC,WAAU,eAAe;AAAA,IACnC,CAAC;AAAA,EACL;AACJ,CAAC,CAAC;AACK,IAAM,8CAA8C,6CAA6C;AAAA,EACpG,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,gDAAgD,6CAA6C;AAAA,EACtG,eAAe;AAAA,EACf,iBAAiB;AACrB,CAAC;AACM,IAAM,+CAA+C,0BAA0B;AAAA,EAClF,cAAc;AAAA,EACd,yBAAyB,CAAC,UAAU,mBAAmB,kBAAkB;AAAA,EACzE,gBAAgB,CAAC,oBAAoB;AAAA,EACrC,WAAW,CAAC,YAAY,MAAM,kBAAkB;AAC5C,UAAM,CAAC,EAAE,sBAAsB,WAAW,IAAI,WAAW,MAAM,GAAG;AAClE,QAAI,yBAAyB,QAAW;AACpC,aAAO;AAAA,QACH,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,QAAI,gBAAgB,QAAW;AAC3B,aAAO;AAAA,QACH,OAAO,yBAAyB,UAAU,qBAAqB,WAAW;AAAA,QAC1E,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,UAAM,2BAA2B,4BAA4B,sBAAsB,OAAO;AAC1F,QAAI,6BAA6B,QAAW;AACxC,aAAO;AAAA,QACH,OAAO,6CAA6C,oBAAoB;AAAA,QACxE,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,UAAM,EAAE,QAAAD,SAAQ,iBAAiB,iBAAiB,IAAI;AACtD,UAAM,SAAS,+CAA+C;AAAA,MAC1D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AACD,QAAI,WAAW,QAAQ;AACnB,aAAO;AAAA,IACX;AACA,UAAM,EAAE,mBAAmB,IAAI;AAC/B,WAAO;AAAA,MACH,UAAU,gCAAgC,oBAAoB;AAAA,QAC1D,iBAAiB;AAAA,QACjB;AAAA,MACJ,GAAGA,OAAM;AAAA,MACT,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ,CAAC;AAEM,IAAM,wBAAwB;AAAA,EACjC,GAAG;AAAA,EACH,OAAO;AAAA,IACH,gBAAgB;AAAA,IAChB,YAAY,yBAAyB,MAAM;AAAA,IAC3C,wBAAwB;AAAA,IACxB,mBAAmB;AAAA,IACnB,WAAW;AAAA,EACf;AAAA,EACA,KAAK;AAAA,IACD,gBAAgB;AAAA,IAChB,YAAY,yBAAyB,IAAI;AAAA,IACzC,wBAAwB;AAAA,IACxB,mBAAmB;AAAA,IACnB,WAAW;AAAA,EACf;AAAA,EACA,sBAAsB;AAAA,IAClB,GAAG,yBAAyB;AAAA,IAC5B,kBAAkB;AAAA,IAClB,4BAA4B;AAAA,IAC5B,+BAA+B;AAAA,IAC/B,iDAAiD;AAAA,IACjD,2BAA2B;AAAA,IAC3B,qCAAqC;AAAA,IACrC,wCAAwC;AAAA,IACxC,0DAA0D;AAAA,IAC1D,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,2BAA2B;AAAA,IAC3B,8BAA8B;AAAA,IAC9B,gDAAgD;AAAA,EACpD;AACJ;AAWO,IAAM,oBAAoB,CAAC,kBAAkB,mCAAmC;AAAA,EACnF,GAAG;AAAA,IACC,6BAA6B;AAAA,IAC7B,SAAS,oBAAoB,eAAe;AAAA,IAC5C,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,IAAI,cAAc,OAAO,SACnB,wBAAwB,IACxB,cAAc;AAAA,EACxB;AAAA,EACA,GAAG;AACP,CAAC;AACM,IAAM,iBAAiB;AASvB,IAAM,sCAAsC,CAAC,UAAU,cAAc,kBAAkB;AAAA,EAC1F,GAAG;AAAA,EACH,GAAG,8CAA8C,QAAQ;AAC7D,CAAC;;;AM7dD,IAAAE,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAWO,IAAM,mCAAmC;AAAA,EAC5C,SAAS;AAAA,EACT,aAAa;AAAA,EACb,UAAU;AAAA,IACN,OAAO;AAAA,MACH,aAAa;AAAA,MACb,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,QAAQ;AAAA,MAC1B,WAAW;AAAA,QACP,KAAK;AAAA,UACD,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,EACN,SAAS;AAAA,IACL,MAAM;AAAA,MACF,aAAa;AAAA,MACb,MAAM;AAAA,MACN,QAAQ;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,WAAW,CAAC,eAAe,eAAe,aAAa;AAAA,EACvD,SAAS;AACb;AAYO,IAAM,8BAA8B;AAAA,EACvC,SAAS;AAAA,EACT,aAAa;AAAA,EACb,UAAU;AAAA,IACN,OAAO;AAAA,MACH,aAAa;AAAA,MACb,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,QAAQ;AAAA,MAC1B,WAAW;AAAA,QACP,KAAK;AAAA,UACD,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,EACN,SAAS;AAAA,IACL,MAAM;AAAA,MACF,aAAa;AAAA,MACb,MAAM;AAAA,MACN,QAAQ;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,WAAW,CAAC,eAAe,eAAe,aAAa;AAAA,EACvD,SAAS;AACb;;;AF/EO,IAAM,qCAAqC,CAAC,EAAE,cAAc,MAAO,MAAM;AAC5E,QAAM,WAAW,oCAAoC,6BAA6B,2BAA2B,CAAC;AAC9G,QAAM,kBAAkB,SAAS,iBAAiB;AAAA,IAC9C,MAAM,EAAE,QAAQ,EAAE,cAAc,eAAe,EAAE,OAAO,MAAM,EAAE,EAAE;AAAA,IAClE,UAAU;AAAA,EACd,CAAC;AACD,SAAO,gBAAgB;AAC3B;AAKO,IAAM,6BAA6B,CAAC,EAAE,cAAc,OAAO,SAAS,cAAe,MAAM,6BAA6B,mCAAmC,EAAE,cAAc,MAAM,CAAC,GAAG,MAAM;;;AGpBhM,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AACA,IAAM,mCAAmC,CAAC,EAAE,OAAAC,QAAO,QAAQ,KAAM,OAAO;AAAA,EACpE,QAAQ,OAAO,OAAO,IAAI,CAAC,WAAW;AAAA,IAClC,GAAG;AAAA,IACH,OAAO,yBAAyB,IAAI,wBAAwBA,MAAK,MAAM,MAAM,KAAK;AAAA,EACtF,EAAE;AAAA,EACF,OAAAA;AAAA,EACA,GAAI,OAAO,cAAc,UAAU,CAAC,IAAI,EAAE,UAAU,OAAO,QAAQ;AAAA,EACnE;AACJ;AAEO,IAAM,wBAAwB,CAAC,EAAE,gBAAgB,OAAAA,OAAO,MAAM;AACjE,MAAI,YAAY,eAAe,iBAAiB;AAC5C,UAAM,YAAY,eAAe;AACjC,UAAM,OAAO,UAAU,SAAS,SAAY,CAAC,IAAI,UAAU;AAC3D,UAAM,SAAS,UAAU,SAAS,iBAAiB;AAAA,MAC/C;AAAA,MACA,OAAO;AAAA,MACP,UAAU,UAAU;AAAA,IACxB,CAAC;AACD,WAAO,OAAO,UACR;AAAA,MACE,iBAAiB,OAAO;AAAA,MACxB,GAAI,eAAe,UAAU,SACvB,CAAC,IACD,EAAE,OAAO,eAAe,MAAM;AAAA,MACpC,eAAe,eAAe;AAAA,IAClC,IACE,iCAAiC,EAAE,OAAAA,QAAO,QAAQ,MAAM,UAAU,CAAC;AAAA,EAC7E;AACA,SAAO;AAAA,IACH,iBAAiB,eAAe,gBAAgB,MAAM;AAAA,IACtD,GAAI,eAAe,UAAU,SACvB,CAAC,IACD,EAAE,OAAO,eAAe,MAAM;AAAA,IACpC,eAAe,eAAe;AAAA,EAClC;AACJ;AACO,IAAM,uBAAuB,CAAC,EAAE,eAAe,OAAAA,QAAO,UAAU,QAAS,MAAM;AAClF,MAAI,YAAY,cAAc,mBAAmB;AAC7C,UAAM,YAAY,cAAc;AAEhC,UAAM,gBAAgB,CAAC;AAEvB,kBAAcA,MAAK,IAAI;AAAA,MACnB,iBAAiB,WAAW,GAAG;AAAA,MAC/B,GAAI,cAAc,kBAAkB,UAAU,SACxC,CAAC,IACD,EAAE,OAAO,cAAc,kBAAkB,MAAM;AAAA,MACrD,eAAe,cAAc,kBAAkB;AAAA,IACnD;AACA,UAAM,SAAS,UAAU,SAAS,iBAAiB;AAAA,MAC/C,MAAM;AAAA,QACF,GAAG,UAAU;AAAA,QACb,oBAAoB;AAAA,UAChB,YAAYA;AAAA,UACZ;AAAA,UACA,aAAa;AAAA,YACT,QAAQ,SAAS;AAAA,YACjB,UAAU,SAAS;AAAA,YACnB;AAAA,YACA,SAAS,SAAS;AAAA,UACtB;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,OAAO;AAAA,MACP,UAAU,UAAU;AAAA,IACxB,CAAC;AACD,WAAO,OAAO,UACR;AAAA,MACE,eAAe,cAAc;AAAA,MAC7B,yBAAyB,cAAc,wBAAwB,MAAM;AAAA,MACrE,gBAAgB,cAAc;AAAA,MAC9B,mBAAmB,OAAO;AAAA,IAC9B,IACE,iCAAiC,EAAE,OAAAA,QAAO,QAAQ,MAAM,YAAY,CAAC;AAAA,EAC/E;AACA,SAAO;AAAA,IACH,eAAe,cAAc;AAAA,IAC7B,yBAAyB,cAAc,wBAAwB,MAAM;AAAA,IACrE,gBAAgB,cAAc;AAAA,IAC9B,mBAAmB,cAAc,kBAAkB,MAAM;AAAA,EAC7D;AACJ;AAcO,IAAM,sBAAsB,CAAC,aAAa;AAC7C,QAAM,gBAAgB,SAAS,QAAQ,IAAI,CAAC,gBAAgBA,WAAU,sBAAsB;AAAA,IACxF,OAAAA;AAAA,IACA;AAAA,EACJ,CAAC,CAAC;AACF,QAAM,0BAA0B,cAAc,OAAO,CAAC,WAAW,YAAY,MAAM;AACnF,MAAI,wBAAwB,SAAS,GAAG;AACpC,UAAM,oBAAoB,cACrB,IAAI,CAAC,QAAQA,WAAU,qBAAqB,SAC3C,EAAE,OAAAA,QAAO,QAAQ,QAAQ,MAAM,SAAS,IACxC,MAAM,EACP,OAAO,CAAC,WAAW,YAAY,MAAM;AAC1C,WAAO;AAAA,MACH,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS;AAAA,IACb;AAAA,EACJ;AACA,QAAM,UAAU;AAChB,QAAM,eAAe,SAAS,OAAO,IAAI,CAAC,eAAeA,WAAU,qBAAqB;AAAA,IACpF,OAAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC,CAAC;AACF,QAAM,yBAAyB,aAAa,OAAO,CAAC,WAAW,YAAY,MAAM;AACjF,MAAI,uBAAuB,SAAS,GAAG;AACnC,UAAM,mBAAmB,aACpB,IAAI,CAAC,QAAQA,WAAU,uBAAuB,SAC7C,EAAE,OAAAA,QAAO,OAAO,QAAQ,MAAM,QAAQ,IACtC,MAAM,EACP,OAAO,CAAC,WAAW,WAAW,MAAM;AACzC,WAAO;AAAA,MACH,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS;AAAA,IACb;AAAA,EACJ;AACA,QAAM,SAAS;AACf,SAAO;AAAA,IACH,SAAS;AAAA,IACT,aAAa;AAAA,MACT;AAAA,MACA,UAAU,SAAS;AAAA,MACnB;AAAA,MACA,SAAS,SAAS;AAAA,IACtB;AAAA,EACJ;AACJ;AASO,IAAM,2BAA2B,CAAC,+BAA+B,2BAA2B,OAAO,OAAO,CAAC,KAAK,UAAU,MAAM,aAAa,SAC9I,MACA,EAAE,GAAG,KAAK,GAAG,mCAAmC,MAAM,QAAQ,EAAE,GAAG,CAAC,CAAC;AAepE,IAAM,0BAA0B,CAAC,+BAA+B;AACnE,QAAM,YAAY,2BAA2B,OAAO,OAAO,CAAC,KAAK,UAAU,CAAC,GAAG,KAAK,GAAG,MAAM,MAAM,GAAG,CAAC,CAAC;AACxG,MAAI,CAAC,wBAAwB,SAAS,GAAG;AACrC,WAAO;AAAA,EACX;AACA,SAAO,UAAU,OAAO,CAAC,KAAK,WAAW;AAAA,IACrC,GAAG;AAAA,IACH,CAAC,MAAM,iBAAiB,GAAG,MAAM;AAAA,EACrC,IAAI,CAAC,CAAC;AACV;AA2BO,IAAM,8BAA8B,CAAC,4BAA4B,wBAAwB,yBAAyB;AACrH,QAAM,UAAU,wBAAwB,0BAA0B;AAClE,MAAI,YAAY;AACZ,WAAO;AACX,QAAM,sBAAsB,OAAO,QAAQ,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,YAAY,QAAQ,MAAM;AACxF,UAAM,mBAAmB,qBAAqB,QAAQ;AACtD,QAAI,qBAAqB,QAAW;AAChC,aAAO;AAAA,IACX;AACA,UAAM,aAAa,iBAAiB,UAAU;AAC9C,QAAI,eAAe,QAAW;AAC1B,aAAO;AAAA,IACX;AACA,WAAO,EAAE,GAAG,KAAK,CAAC,UAAU,GAAG,WAAW;AAAA,EAC9C,GAAG,CAAC,CAAC;AACL,SAAO;AAAA,IACH,GAAG;AAAA,IACH,UAAU;AAAA,MACN,GAAG;AAAA,MACH,GAAG,uBAAuB;AAAA,IAC9B;AAAA,EACJ;AACJ;;;ACvOA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;;;ACAA,IAAAC,iBAAA;AAAA,IAAAA,iBAAA;AAAA,IAAAA,iBAAA;AAAO,IAAM,oBAAoB;AAAA,EAC7B,iBAAiB,EAAE,QAAQ,YAAY;AAAA,EACvC,eAAe;AACnB;AACO,IAAM,mBAAmB;AAAA,EAC5B,mBAAmB,EAAE,QAAQ,cAAc;AAC/C;AAQO,IAAM,gBAAgB;AAAA,EACzB,iBAAiB,EAAE,QAAQ,kBAAkB;AAAA,EAC7C,eAAe;AACnB;AACO,IAAM,aAAa;AAAA,EACtB,iBAAiB,CAAC,MAAM;AAAA,EACxB,eAAe;AACnB;AACO,IAAM,YAAY;AAAA,EACrB,mBAAmB,CAAC,MAAM;AAC9B;AAQO,IAAM,gBAAgB;AAAA,EACzB,eAAe,CAAC,mBAAmB,UAAU;AAAA,EAC7C,aAAa;AAAA,IACT,QAAQ,CAAC,kBAAkB,SAAS;AAAA,IACpC,SAAS,CAAC,aAAa;AAAA,EAC3B;AACJ;;;ADFO,IAAM,sCAAsC;AAAA,EAC/C;AAAA,EACA;AAAA,EACA;AACJ;AASA,IAAM,yBAAyB;AAAA,EAC3B,CAAC,yBAAyB;AAAA,EAC1B,CAAC,2BAA2B,yBAAyB;AAAA,EACrD,CAAC,WAAW,iBAAiB;AAAA,EAC7B,CAAC,iBAAiB;AAAA,EAClB,CAAC,mBAAmB,yBAAyB;AAAA,EAC7C,CAAC,oBAAoB;AAAA,EACrB,CAAC,YAAY;AAAA,EACb,CAAC,WAAW,2BAA2B,iBAAiB;AAAA,EACxD,CAAC,WAAW,2BAA2B,yBAAyB;AAAA,EAChE,CAAC,WAAW,2BAA2B,6BAA6B;AAAA,EACpE,CAAC,WAAW,yBAAyB;AAAA,EACrC,CAAC,WAAW,mBAAmB,gBAAgB;AAAA,EAC/C,CAAC,WAAW,iBAAiB;AAAA,EAC7B;AAAA,IACI;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,CAAC,WAAW,mBAAmB,oCAAoC;AAAA,EACnE,CAAC,WAAW,mBAAmB,aAAa;AAAA,EAC5C,CAAC,WAAW,2BAA2B,aAAa;AAAA,EACpD,CAAC,WAAW,oBAAoB;AAAA,EAChC,CAAC,WAAW,oBAAoB;AAAA,EAChC,CAAC,WAAW,aAAa;AAAA,EACzB,CAAC,WAAW,oBAAoB,yBAAyB;AAAA,EACzD,CAAC,WAAW,oBAAoB,iBAAiB;AAAA,EACjD,CAAC,WAAW,eAAe;AAAA,EAC3B,CAAC,WAAW,iBAAiB;AAAA,EAC7B,CAAC,SAAS;AAAA,EACV,CAAC,gBAAgB;AAAA,EACjB,CAAC,eAAe,yBAAyB;AAAA,EACzC,CAAC,eAAe,iBAAiB;AAAA,EACjC;AAAA,IACI;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,CAAC,eAAe,mBAAmB,oCAAoC;AAAA,EACvE,CAAC,eAAe,aAAa;AAAA,EAC7B,CAAC,eAAe,cAAc;AAAA,EAC9B,CAAC,aAAa;AAAA,EACd,CAAC,aAAa;AAAA,EACd,CAAC,cAAc;AAAA,EACf,CAAC;AACL;AAEA,IAAM,WAAW,CAAC,UAAU;AAE5B,SAAS,sBAAsB;AAKxB,IAAM,+BAA+B;AAAA;AAAA,EAExC,IAAI;AAAA,IACA,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE;AAAA,IAC9C,EAAE,MAAM,UAAU,MAAM,CAAC,eAAe,EAAE;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AAAA,IACb;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,6BAA6B;AAAA,IAC1E;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,0BAA0B;AAAA,IACvE;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,0BAA0B;AAAA,IACvE;AAAA,EACJ;AAAA,EACA,2CAA2C;AAAA,IACvC;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,6BAA6B;AAAA,IAC1E;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,0BAA0B;AAAA,IACvE;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,sCAAsC,0BAA0B;AAAA,IAC3E;AAAA,EACJ;AAAA,EACA,yBAAyB;AAAA,IACrB;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,yBAAyB;AAAA,IACtE;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,yBAAyB;AAAA,IACtE;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,yBAAyB;AAAA,IACtE;AAAA,EACJ;AAAA,EACA,mDAAmD;AAAA,IAC/C;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,yBAAyB;AAAA,IACtE;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,kCAAkC,yBAAyB;AAAA,IACtE;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,sCAAsC,yBAAyB;AAAA,IAC1E;AAAA,EACJ;AAAA,EACA,YAAY;AAAA,IACR,EAAE,MAAM,WAAW,MAAM,CAAC,wBAAwB,EAAE;AAAA,IACpD,EAAE,MAAM,UAAU,MAAM,CAAC,qBAAqB,EAAE;AAAA,EACpD;AAAA,EACA,oBAAoB;AAAA,IAChB,EAAE,MAAM,WAAW,MAAM,CAAC,oBAAoB,EAAE;AAAA,IAChD,EAAE,MAAM,UAAU,MAAM,CAAC,oBAAoB,EAAE;AAAA,EACnD;AAAA,EACA,2BAA2B;AAAA,IACvB;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM,CAAC,0BAA0B;AAAA,IACrC;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL,EAAE,MAAM,WAAW,MAAM,CAAC,cAAc,EAAE;AAAA,IAC1C,EAAE,MAAM,UAAU,MAAM,CAAC,cAAc,EAAE;AAAA,EAC7C;AAAA,EACA,mDAAmD;AAAA,IAC/C;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,2DAA2D;AAAA,IACvD;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,+DAA+D;AAAA,IAC3D;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,2BAA2B;AAAA,IACvB;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iGAAiG;AAAA,IAC7F;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,8DAA8D;AAAA,IAC1D;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,0CAA0C;AAAA,IACtC;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,uCAAuC;AAAA,IACnC;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mCAAmC;AAAA,IAC/B;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,+CAA+C;AAAA,IAC3C;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,8BAA8B;AAAA,IAC1B,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE;AAAA,IAC9C,EAAE,MAAM,UAAU,MAAM,CAAC,cAAc,EAAE;AAAA,EAC7C;AAAA,EACA,2BAA2B;AAAA,IACvB,EAAE,MAAM,WAAW,MAAM,CAAC,cAAc,EAAE;AAAA,IAC1C,EAAE,MAAM,UAAU,MAAM,CAAC,eAAe,EAAE;AAAA,EAC9C;AAAA,EACA,uBAAuB,CAAC,EAAE,MAAM,WAAW,MAAM,CAAC,cAAc,EAAE,CAAC;AAAA,EACnE,4CAA4C;AAAA,IACxC;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,oDAAoD;AAAA,IAChD;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,yBAAyB;AAAA,IACrB,EAAE,MAAM,WAAW,MAAM,CAAC,cAAc,EAAE;AAAA,IAC1C,EAAE,MAAM,UAAU,MAAM,CAAC,eAAe,EAAE;AAAA,EAC9C;AAAA,EACA,aAAa;AAAA,IACT,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE;AAAA,IAC9C,EAAE,MAAM,UAAU,MAAM,CAAC,kBAAkB,EAAE;AAAA,EACjD;AAAA,EACA,+BAA+B;AAAA,IAC3B;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qGAAqG;AAAA,IACjG;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,kEAAkE;AAAA,IAC9D;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,uCAAuC;AAAA,IACnC;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,2BAA2B,CAAC,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE,CAAC;AAAA,EAC3E,4BAA4B;AAAA,IACxB,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE;AAAA,IAC9C,EAAE,MAAM,UAAU,MAAM,CAAC,cAAc,EAAE;AAAA,EAC7C;AAAA,EACA,gBAAgB;AAAA,IACZ,EAAE,MAAM,WAAW,MAAM,CAAC,cAAc,EAAE;AAAA,IAC1C,EAAE,MAAM,UAAU,MAAM,CAAC,eAAe,EAAE;AAAA,EAC9C;AAAA,EACA,aAAa,CAAC,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE,CAAC;AAAA,EAC7D,cAAc;AAAA,IACV,EAAE,MAAM,WAAW,MAAM,CAAC,kBAAkB,EAAE;AAAA,IAC9C,EAAE,MAAM,UAAU,MAAM,CAAC,cAAc,EAAE;AAAA,EAC7C;AAAA;AAEJ;AAKA,IAAM,uBAAuB;AAC7B,IAAM,eAAe,CAAC,WAEjB,8BAA8B,UAAU,CAAC,GAAG,KAAK,GAAG,CAAC;AAKnD,IAAM,8BAA8B,CAAC,gBAAgB,YAAY,IAAI,gBAAgB,yBAAyB;AACjH,QAAM,CAAC,iBAAiB,uBAAuB,iBAAiB,uBAAuB,kBAAkB,iBAAkB,IAAI;AAC/H,QAAM,aAAa;AACnB,QAAM,qBAAqB,aAAa,qBAAqB;AAC7D,QAAM,qBAAqB,EAAE,SAAS,eAAe,GAAG,iBAAiB;AACzE,QAAM,gBAAgB,8CAA8C;AAAA,IAChE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,QAAQ,EAAE,EAAE,EAAE;AAAA,IAC/D,WAAW;AAAA,MACP,CAAC,UAAU,GAAG;AAAA;AAAA,MAEd,aAAa;AAAA,IACjB;AAAA,IACA,SAAS;AAAA,MACL,GAAG;AAAA,MACH,iBAAiB,EAAE,aAAa,UAAU,QAAQ,GAAG;AAAA,MACrD,WAAW;AAAA,QACP,aAAa;AAAA,QACb,QAAQ;AAAA,MACZ;AAAA,MACA,YAAY,EAAE,aAAa,UAAU,QAAQ,sBAAsB;AAAA,MACnE,YAAY,EAAE,aAAa,UAAU,QAAQ,sBAAsB;AAAA,MACnE,cAAc,EAAE,aAAa,YAAY,QAAQ,sBAAsB;AAAA,MACvE,mBAAmB,EAAE,QAAQ,OAAO,SAAS,kBAAkB;AAAA,MAC/D,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,QAKT,QAAQ;AAAA,QACR,SAAS;AAAA,MACb;AAAA,MACA,cAAc,EAAE,QAAQ,iBAAiB,SAAS,aAAa;AAAA,MAC/D,cAAc,EAAE,QAAQ,iBAAiB,SAAS,aAAa;AAAA,MAC/D,gBAAgB,EAAE,QAAQ,iBAAiB,SAAS,eAAe;AAAA,MACnE,iBAAiB;AAAA,QACb,aAAa;AAAA,QACb,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,IACA,WAAW,CAAC,aAAa;AAAA,IACzB,SAAS;AAAA,EACb,CAAC;AACD,QAAM,WAAW,kBAAkB,aAAa;AAChD,QAAM,QAAQ,mBAAmB,IAAI,CAAC,aAAa;AAC/C,UAAM,cAAc,GAAG,SAAS,KAAK,eAAe,KAAK,SAAS,IAAI;AACtE,UAAM,SAAS,SAAS,iBAAiB;AAAA,MACrC,OAAO;AAAA,MACP;AAAA,MACA,mBAAmB;AAAA;AAAA,QAEf,QAAQ;AAAA;AAAA,QAER,QAAQ;AAAA,QACR,SAAS;AAAA,MACb,EAAE,SAAS,IAAI;AAAA,IACnB,CAAC;AACD,QAAI,OAAO,WAAW,UAAU;AAE5B,YAAM,IAAI,MAAM,2BAA2B,WAAW,OAAO,MAAM,EAAE;AAAA,IACzE;AACA,QAAI,OAAO,OAAO,aAAa,UAAU;AAErC,YAAM,IAAI,MAAM,2BAA2B,WAAW,OAAO,OAAO,QAAQ,EAAE;AAAA,IAClF;AACA,UAAM,YAAY,kBAAkB,OAAO,SAAS,QAAQ,WAAW;AACvE,UAAM,uBAAuB,yBAAyB,OAAO,SAAS,QAAQ,aAAa;AAC3F,UAAM,UAAU,aAAa,YAAY;AAAA,MACrC,KAAK,OAAO,KAAK,gBAAgB,CAAC,WAAW,oBAAoB,CAAC,CAAC;AAAA,MACnE,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,IACtB,CAAC,CAAC,EAAE,MAAM,GAAG,aAAa;AAC1B,UAAM,WAAW;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,SAAS;AAAA,MAClB,SAAS,oBAAoB;AAAA,MAC7B,SAAS;AAAA,IACb;AACA,WAAQ,OAAO,SAAS,QAAQ,eAAe,IACzC,WACA,CAAC,GAAG,UAAU,OAAO,SAAS,QAAQ,UAAU;AAAA,EAC1D,CAAC;AACD,SAAO;AACX;AACO,IAAM,yBAAyB,CAAC,cAAc,UAAU,CAAC,EAAE,IAAI,CAAC,mBAAmB,4BAA4B,gBAAgB,UAAU,CAAC,CAAC,CAAC;AAqB5I,IAAM,iCAAiC,CAAC,mBAAmB,eAAe,OAAO,CAAC,qBAAqB,aAAa;AACvH,QAAM,CAAC,SAAS,iBAAiB,oBAAoB,0BAA0B,oBAAoB,kBAAkB,UAAU,UAAW,IAAI;AAC9I,QAAM,cAAc;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAI,eAAe,SAAY,CAAC,IAAI,CAAC,UAAU;AAAA,EACnD;AAEA,WAAS,QAAQ,CAAC,YAAY;AAE1B,wBAAoB,OAAO,IAAI;AAAA,MAC3B,GAAI,oBAAoB,OAAO,KAAK,CAAC;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ,CAAC;AACD,SAAO;AACX,GAAG,CAAC,CAAC;",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "BaseConversionError", "index", "import_dist", "import_dist", "import_dist", "_", "index", "import_dist", "import_dist", "_", "import_dist", "index", "CompactSizeError", "import_dist", "ReadItemCountError", "import_dist", "LocktimeError", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "ContextFlag", "CompressionFlag", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "Secp256k1Error", "wrapSecp256k1Wasm", "import_dist", "import_dist", "import_dist", "sha256", "import_dist", "index", "sha256", "sha512", "import_dist", "Base58AddressFormatVersion", "sha256", "Base58AddressError", "import_dist", "BitRegroupingError", "Bech32DecodingError", "import_dist", "CashAddressNetworkPrefix", "CashAddressVersionByte", "CashAddressType", "CashAddressTypeBits", "CashAddressVersionByteDecodingError", "CashAddressEncodingError", "CashAddressDecodingError", "CashAddressCorrectionError", "import_dist", "LockingBytecodeType", "LockingBytecodeGenerationError", "sha256", "import_dist", "import_dist", "import_dist", "HdKeyVersion", "HdKeyDecodingError", "HdNodeDerivationError", "index", "HdNodeCrackingError", "import_dist", "WalletImportFormatError", "sha256", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "OpcodeDescriptionsXEC", "import_dist", "import_dist", "import_dist", "import_dist", "ReadBytesError", "ReadUint32LEError", "ReadUint64LEError", "CompactSizePrefixedBinError", "import_dist", "import_dist", "NonFungibleTokenCapability", "TransactionDecodingError", "CashTokenDecodingError", "index", "amountRead", "sha256", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "SigningSerializationFlag", "SigningSerializationType", "sha256", "ConsensusCommon", "import_dist", "AuthenticationErrorCommon", "import_dist", "import_dist", "OpcodesBCH2023", "import_dist", "OpcodesBTC", "index", "VmNumberError", "maximumVmNumberByteLength", "isNegative", "typicalMaximumVmNumberByteLength", "maximumVmNumberByteLength", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "ripemd160", "sha1", "sha256", "secp256k1", "import_dist", "index", "import_dist", "index", "import_dist", "import_dist", "import_dist", "import_dist", "index", "import_dist", "import_dist", "import_dist", "ConsensusBCH2023", "import_dist", "secp256k1", "sha256", "import_dist", "OpcodeDescriptionsBCH2023", "import_dist", "AuthenticationErrorBCH2023", "import_dist", "import_dist", "ripemd160", "secp256k1", "sha1", "sha256", "index", "import_dist", "import_dist", "ripemd160", "secp256k1", "sha1", "sha256", "index", "import_dist", "OpcodesBCH2022", "import_dist", "import_dist", "ConsensusXEC", "index", "import_dist", "OpcodesXEC", "import_dist", "import_dist", "import_dist", "import_dist", "OpcodeDescriptionsBCH2022", "import_dist", "AuthenticationErrorBCH2022", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "AuthenticationErrorBCHCHIPs", "import_dist", "ConsensusBCHCHIPs", "ripemd160", "sha1", "sha256", "secp256k1", "import_dist", "OpcodeDescriptionsBCHCHIPs", "import_dist", "import_dist", "executionIsActive", "import_dist", "OpcodesBCHCHIPs", "ripemd160", "secp256k1", "sha1", "sha256", "index", "import_dist", "import_dist", "import_dist", "OpcodeDescriptionsBTC", "import_dist", "import_dist", "import_dist", "IdentifierResolutionType", "IdentifierResolutionErrorType", "import_dist", "range", "index", "childSamples", "import_dist", "import_dist", "index", "match", "_", "import_dist", "range", "range", "BuiltInVariables", "operation", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "CompilerDefaults", "import_dist", "_", "secp256k1", "import_dist", "import_dist", "index", "sha256", "sha512", "range", "SigningSerializationAlgorithmIdentifier", "sha256", "secp256k1", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "index", "import_dist", "import_dist", "import_dist"]
}
